type Mutation {
  createUser(user: CreateUser!): createUserResult @aws_lambda
  updateUser(user: UpdateUser!): updateUserResult @aws_lambda
  deleteUser(id: ID!): deleteUserResult @aws_lambda
  zkProfile(zkuser: ZKUserInfo): String @aws_lambda
  setUserName(setname: SetUserName): String @aws_lambda
  addContacts(user: UpdateContactList!): updateUserResult @aws_lambda
  zeroKnowledgeProfile(zkp: zkParams): AWSJSON
  create_ETH_Profile(address: String): Create_ETH_Profile_Result @aws_lambda

  topUpAddress(address: String): TopUpAddressResult @aws_lambda

  setProfileAddress: Boolean @aws_lambda
  mintPKDR(mint: mintInfo): mintResult @aws_lambda
  approve(privateKey: String): approveResult @aws_lambda
  setPlatFormFee(fee: String): SetPlatFormFeeResult @aws_lambda
  transfer(transferParams: TransferParams): TransferResult @aws_lambda
  transferFrom(transferFromParams: TransferFromParams): TransferFromResult
    @aws_lambda
  burn(amount: String): BurnResult @aws_lambda
  burnFrom(burnFromParams: BurnFromParams): BurnFromResult @aws_lambda
  withdraw(withdrawParams: WithdrawParams): WithdrawParamsResult @aws_lambda

  revokeVerification(userName: String): RevokeVerificationResult @aws_lambda
  retainVerification(userName: String): RetainVerificationResult @aws_lambda
}

type Query {
  getUserByEmail(id: ID!): getUserResult @aws_lambda
  getAllUserInfo: [User] @aws_lambda
  getAddressByUserName(userName: String): getAddressByUserNameResult @aws_lambda
  getUsersCount: Int @aws_lambda
  listContacts(listContactsParams: ListContactsParams): ListContactsResponse
    @aws_lambda
  getUserInfo(userInfoParams: UserInfoParams): UserInfoResult @aws_lambda

  getRateUSDPKR: String @aws_lambda

  getProfileAddress: String @aws_lambda
  getPlatFormFee: String @aws_lambda
  getETHBalance(address: String!): String @aws_lambda
  totalSupply: String @aws_lambda
}

union createUserResult = UserInfo | UserExists | Error
union getUserResult = UserInfo | UserNotExists | Error
union updateUserResult = UpdatedResult | UserNotExists | Error
union deleteUserResult = DeletedResult | UserNotExists | Error
union getAddressByUserNameResult = AddressInfo | UserNotExists | Error
union ListContactsResponse = ListContactsResult | UserNotExists | Error

input CreateUser {
  id: ID!
  cnic: String!
  PHONE_NUMBER: String!
  ETH_ADDRESS: String!
  FULL_NAME: String
  DOB: String
  FATHER_OR_HUSBAND_NAME: String
  CITY: String
  COUNTRY: String
  POSTAL_CODE: String
  ADDRESS: String
  privateKey: String
}
input ListContactsParams {
  id: String
}
input UserInfoParams {
  id: String
  attributeInfo: String
}

input UpdateContactList {
  id: ID!
  attributeValue: String
}
input UpdateUser {
  id: ID!
  attributeName: String
  attributeValue: String
}
input ZKUserInfo {
  cnic: String
  privateKey: String
  publicAddress: String
  publicAddressAdmin: String
  optionalParams: String
  bit: Boolean
}
input zkParams {
  cnic: String
  privateKey: String
  publicAddress: String
  publicAddressAdmin: String
  optionalParams: String
}

input mintInfo {
  address: String!
  amount: String!
}
input BurnFromParams {
  address: String!
  amount: String
}
input WithdrawParams {
  IBAN: String
  accountHolderName: String
  amount: Float
  id: String
  address: String
  userName: String
}
type RetainVerificationResult {
  message: String
  result: Boolean
}
type RevokeVerificationResult {
  message: String
  result: Boolean
}

type WithdrawParam {
  IBAN: String
  accountHolderName: String
  amount: Float
  id: String
  address: String
  userName: String
}

type WithdrawParamsResult {
  burnResult: BurnFromResult
  withdrawResult: WithdrawParam
  result: Boolean
  message: String
  errorMessage: String
}
type ListContactsResult {
  contacts: [String]
}

type AddressInfo {
  address: String
}

type SetPlatFormFeeResult {
  message: String
  result: Boolean
}
type approveResult {
  message: String
  result: Boolean
}

type mintResult {
  message: String
  result: Boolean!
}
input SetUserName {
  id: ID!
  userName: String!
}
type DeletedResult @aws_lambda {
  id: ID!
  message: String
}

type UpdatedResult @aws_lambda {
  id: ID!
  message: String
}

type UserExists @aws_lambda {
  message: String
}

type UserNotExists @aws_lambda {
  message: String
}

type UserInfo @aws_lambda {
  userInfo: String
}

type Error @aws_lambda {
  errorMessage: String
}

type User @aws_lambda {
  id: ID!
  cnic: String
  PHONE_NUMBER: String
  ETH_ADDRESS: String
  FULL_NAME: String
  DOB: String
  FATHER_OR_HUSBAND_NAME: String
  CITY: String
  COUNTRY: String
  POSTAL_CODE: String
  ADDRESS: String
}

type UserInfoResult {
  success: Boolean
  message: String
  value: String
  errorMessage: String
}

type TopUpAddressResult {
  hash: String
  message: String
  result: String
}

type Create_ETH_Profile_Result {
  message: String
  result: Boolean
}

input TransferParams {
  to: String
  amount: String
}

input TransferFromParams {
  from: String
  to: String
  amount: String
}

type TransferResult {
  from: String
  to: String
  amount: String
  message: String
  result: Boolean
  hash: String
}

type TransferFromResult {
  from: String
  to: String
  amount: String
  message: String
  result: Boolean
  hash: String
}

type BurnResult {
  hash: String
  amount: String
  result: Boolean
  message: String
}

type BurnFromResult {
  hash: String
  from: String
  amount: String
  result: Boolean
  message: String
}
