{"id":"83c79e718d4a4ecd7b89257a9a815997","_format":"hh-sol-build-info-1","solcVersion":"0.8.9","solcLongVersion":"0.8.9+commit.e5eed63a","input":{"language":"Solidity","sources":{"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822ProxiableUpgradeable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeaconUpgradeable {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeaconUpgradeable.sol\";\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/StorageSlotUpgradeable.sol\";\nimport \"../utils/Initializable.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\n    function __ERC1967Upgrade_init() internal onlyInitializing {\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\n    }\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\n        require(AddressUpgradeable.isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return AddressUpgradeable.verifyCallResult(success, returndata, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../ERC1967/ERC1967UpgradeUpgradeable.sol\";\nimport \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\");\n        _;\n    }\n\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[45] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/extensions/draft-ERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./draft-IERC20PermitUpgradeable.sol\";\nimport \"../ERC20Upgradeable.sol\";\nimport \"../../../utils/cryptography/ECDSAUpgradeable.sol\";\nimport \"../../../utils/cryptography/EIP712Upgradeable.sol\";\nimport \"../../../utils/CountersUpgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * _Available since v3.4._\n *\n * @custom:storage-size 51\n */\nabstract contract ERC20PermitUpgradeable is Initializable, ERC20Upgradeable, IERC20PermitUpgradeable, EIP712Upgradeable {\n    using CountersUpgradeable for CountersUpgradeable.Counter;\n\n    mapping(address => CountersUpgradeable.Counter) private _nonces;\n\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private constant _PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n    /**\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\n     * to reserve a slot.\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    function __ERC20Permit_init(string memory name) internal onlyInitializing {\n        __EIP712_init_unchained(name, \"1\");\n    }\n\n    function __ERC20Permit_init_unchained(string memory) internal onlyInitializing {}\n\n    /**\n     * @dev See {IERC20Permit-permit}.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\n\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSAUpgradeable.recover(hash, v, r, s);\n        require(signer == owner, \"ERC20Permit: invalid signature\");\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @dev See {IERC20Permit-nonces}.\n     */\n    function nonces(address owner) public view virtual override returns (uint256) {\n        return _nonces[owner].current();\n    }\n\n    /**\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /**\n     * @dev \"Consume a nonce\": return the current value and increment.\n     *\n     * _Available since v4.1._\n     */\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\n        CountersUpgradeable.Counter storage nonce = _nonces[owner];\n        current = nonce.current();\n        nonce.increment();\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20PermitUpgradeable {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20Upgradeable.sol\";\nimport \"../../../utils/ContextUpgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20BurnableUpgradeable is Initializable, ContextUpgradeable, ERC20Upgradeable {\n    function __ERC20Burnable_init() internal onlyInitializing {\n    }\n\n    function __ERC20Burnable_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        _spendAllowance(account, _msgSender(), amount);\n        _burn(account, amount);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/extensions/ERC20Snapshot.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20Upgradeable.sol\";\nimport \"../../../utils/ArraysUpgradeable.sol\";\nimport \"../../../utils/CountersUpgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev This contract extends an ERC20 token with a snapshot mechanism. When a snapshot is created, the balances and\n * total supply at the time are recorded for later access.\n *\n * This can be used to safely create mechanisms based on token balances such as trustless dividends or weighted voting.\n * In naive implementations it's possible to perform a \"double spend\" attack by reusing the same balance from different\n * accounts. By using snapshots to calculate dividends or voting power, those attacks no longer apply. It can also be\n * used to create an efficient ERC20 forking mechanism.\n *\n * Snapshots are created by the internal {_snapshot} function, which will emit the {Snapshot} event and return a\n * snapshot id. To get the total supply at the time of a snapshot, call the function {totalSupplyAt} with the snapshot\n * id. To get the balance of an account at the time of a snapshot, call the {balanceOfAt} function with the snapshot id\n * and the account address.\n *\n * NOTE: Snapshot policy can be customized by overriding the {_getCurrentSnapshotId} method. For example, having it\n * return `block.number` will trigger the creation of snapshot at the beginning of each new block. When overriding this\n * function, be careful about the monotonicity of its result. Non-monotonic snapshot ids will break the contract.\n *\n * Implementing snapshots for every block using this method will incur significant gas costs. For a gas-efficient\n * alternative consider {ERC20Votes}.\n *\n * ==== Gas Costs\n *\n * Snapshots are efficient. Snapshot creation is _O(1)_. Retrieval of balances or total supply from a snapshot is _O(log\n * n)_ in the number of snapshots that have been created, although _n_ for a specific account will generally be much\n * smaller since identical balances in subsequent snapshots are stored as a single entry.\n *\n * There is a constant overhead for normal ERC20 transfers due to the additional snapshot bookkeeping. This overhead is\n * only significant for the first transfer that immediately follows a snapshot for a particular account. Subsequent\n * transfers will have normal cost until the next snapshot, and so on.\n */\n\nabstract contract ERC20SnapshotUpgradeable is Initializable, ERC20Upgradeable {\n    function __ERC20Snapshot_init() internal onlyInitializing {\n    }\n\n    function __ERC20Snapshot_init_unchained() internal onlyInitializing {\n    }\n    // Inspired by Jordi Baylina's MiniMeToken to record historical balances:\n    // https://github.com/Giveth/minime/blob/ea04d950eea153a04c51fa510b068b9dded390cb/contracts/MiniMeToken.sol\n\n    using ArraysUpgradeable for uint256[];\n    using CountersUpgradeable for CountersUpgradeable.Counter;\n\n    // Snapshotted values have arrays of ids and the value corresponding to that id. These could be an array of a\n    // Snapshot struct, but that would impede usage of functions that work on an array.\n    struct Snapshots {\n        uint256[] ids;\n        uint256[] values;\n    }\n\n    mapping(address => Snapshots) private _accountBalanceSnapshots;\n    Snapshots private _totalSupplySnapshots;\n\n    // Snapshot ids increase monotonically, with the first value being 1. An id of 0 is invalid.\n    CountersUpgradeable.Counter private _currentSnapshotId;\n\n    /**\n     * @dev Emitted by {_snapshot} when a snapshot identified by `id` is created.\n     */\n    event Snapshot(uint256 id);\n\n    /**\n     * @dev Creates a new snapshot and returns its snapshot id.\n     *\n     * Emits a {Snapshot} event that contains the same id.\n     *\n     * {_snapshot} is `internal` and you have to decide how to expose it externally. Its usage may be restricted to a\n     * set of accounts, for example using {AccessControl}, or it may be open to the public.\n     *\n     * [WARNING]\n     * ====\n     * While an open way of calling {_snapshot} is required for certain trust minimization mechanisms such as forking,\n     * you must consider that it can potentially be used by attackers in two ways.\n     *\n     * First, it can be used to increase the cost of retrieval of values from snapshots, although it will grow\n     * logarithmically thus rendering this attack ineffective in the long term. Second, it can be used to target\n     * specific accounts and increase the cost of ERC20 transfers for them, in the ways specified in the Gas Costs\n     * section above.\n     *\n     * We haven't measured the actual numbers; if this is something you're interested in please reach out to us.\n     * ====\n     */\n    function _snapshot() internal virtual returns (uint256) {\n        _currentSnapshotId.increment();\n\n        uint256 currentId = _getCurrentSnapshotId();\n        emit Snapshot(currentId);\n        return currentId;\n    }\n\n    /**\n     * @dev Get the current snapshotId\n     */\n    function _getCurrentSnapshotId() internal view virtual returns (uint256) {\n        return _currentSnapshotId.current();\n    }\n\n    /**\n     * @dev Retrieves the balance of `account` at the time `snapshotId` was created.\n     */\n    function balanceOfAt(address account, uint256 snapshotId) public view virtual returns (uint256) {\n        (bool snapshotted, uint256 value) = _valueAt(snapshotId, _accountBalanceSnapshots[account]);\n\n        return snapshotted ? value : balanceOf(account);\n    }\n\n    /**\n     * @dev Retrieves the total supply at the time `snapshotId` was created.\n     */\n    function totalSupplyAt(uint256 snapshotId) public view virtual returns (uint256) {\n        (bool snapshotted, uint256 value) = _valueAt(snapshotId, _totalSupplySnapshots);\n\n        return snapshotted ? value : totalSupply();\n    }\n\n    // Update balance and/or total supply snapshots before the values are modified. This is implemented\n    // in the _beforeTokenTransfer hook, which is executed for _mint, _burn, and _transfer operations.\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, amount);\n\n        if (from == address(0)) {\n            // mint\n            _updateAccountSnapshot(to);\n            _updateTotalSupplySnapshot();\n        } else if (to == address(0)) {\n            // burn\n            _updateAccountSnapshot(from);\n            _updateTotalSupplySnapshot();\n        } else {\n            // transfer\n            _updateAccountSnapshot(from);\n            _updateAccountSnapshot(to);\n        }\n    }\n\n    function _valueAt(uint256 snapshotId, Snapshots storage snapshots) private view returns (bool, uint256) {\n        require(snapshotId > 0, \"ERC20Snapshot: id is 0\");\n        require(snapshotId <= _getCurrentSnapshotId(), \"ERC20Snapshot: nonexistent id\");\n\n        // When a valid snapshot is queried, there are three possibilities:\n        //  a) The queried value was not modified after the snapshot was taken. Therefore, a snapshot entry was never\n        //  created for this id, and all stored snapshot ids are smaller than the requested one. The value that corresponds\n        //  to this id is the current one.\n        //  b) The queried value was modified after the snapshot was taken. Therefore, there will be an entry with the\n        //  requested id, and its value is the one to return.\n        //  c) More snapshots were created after the requested one, and the queried value was later modified. There will be\n        //  no entry for the requested id: the value that corresponds to it is that of the smallest snapshot id that is\n        //  larger than the requested one.\n        //\n        // In summary, we need to find an element in an array, returning the index of the smallest value that is larger if\n        // it is not found, unless said value doesn't exist (e.g. when all values are smaller). Arrays.findUpperBound does\n        // exactly this.\n\n        uint256 index = snapshots.ids.findUpperBound(snapshotId);\n\n        if (index == snapshots.ids.length) {\n            return (false, 0);\n        } else {\n            return (true, snapshots.values[index]);\n        }\n    }\n\n    function _updateAccountSnapshot(address account) private {\n        _updateSnapshot(_accountBalanceSnapshots[account], balanceOf(account));\n    }\n\n    function _updateTotalSupplySnapshot() private {\n        _updateSnapshot(_totalSupplySnapshots, totalSupply());\n    }\n\n    function _updateSnapshot(Snapshots storage snapshots, uint256 currentValue) private {\n        uint256 currentId = _getCurrentSnapshotId();\n        if (_lastSnapshotId(snapshots.ids) < currentId) {\n            snapshots.ids.push(currentId);\n            snapshots.values.push(currentValue);\n        }\n    }\n\n    function _lastSnapshotId(uint256[] storage ids) private view returns (uint256) {\n        if (ids.length == 0) {\n            return 0;\n        } else {\n            return ids[ids.length - 1];\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[46] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/ArraysUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Arrays.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./StorageSlotUpgradeable.sol\";\nimport \"./math/MathUpgradeable.sol\";\n\n/**\n * @dev Collection of functions related to array types.\n */\nlibrary ArraysUpgradeable {\n    using StorageSlotUpgradeable for bytes32;\n\n    /**\n     * @dev Searches a sorted `array` and returns the first index that contains\n     * a value greater or equal to `element`. If no such index exists (i.e. all\n     * values in the array are strictly less than `element`), the array length is\n     * returned. Time complexity O(log n).\n     *\n     * `array` is expected to be sorted in ascending order, and to contain no\n     * repeated elements.\n     */\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\n        if (array.length == 0) {\n            return 0;\n        }\n\n        uint256 low = 0;\n        uint256 high = array.length;\n\n        while (low < high) {\n            uint256 mid = MathUpgradeable.average(low, high);\n\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\n            // because Math.average rounds down (it does integer division with truncation).\n            if (unsafeAccess(array, mid).value > element) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\n        if (low > 0 && unsafeAccess(array, low - 1).value == element) {\n            return low - 1;\n        } else {\n            return low;\n        }\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeAccess(address[] storage arr, uint256 pos) internal pure returns (StorageSlotUpgradeable.AddressSlot storage) {\n        bytes32 slot;\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0, arr.slot)\n            slot := add(keccak256(0, 0x20), pos)\n        }\n        return slot.getAddressSlot();\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeAccess(bytes32[] storage arr, uint256 pos) internal pure returns (StorageSlotUpgradeable.Bytes32Slot storage) {\n        bytes32 slot;\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0, arr.slot)\n            slot := add(keccak256(0, 0x20), pos)\n        }\n        return slot.getBytes32Slot();\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeAccess(uint256[] storage arr, uint256 pos) internal pure returns (StorageSlotUpgradeable.Uint256Slot storage) {\n        bytes32 slot;\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0, arr.slot)\n            slot := add(keccak256(0, 0x20), pos)\n        }\n        return slot.getUint256Slot();\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary CountersUpgradeable {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../StringsUpgradeable.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSAUpgradeable {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", StringsUpgradeable.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSAUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n *\n * @custom:storage-size 52\n */\nabstract contract EIP712Upgradeable is Initializable {\n    /* solhint-disable var-name-mixedcase */\n    bytes32 private _HASHED_NAME;\n    bytes32 private _HASHED_VERSION;\n    bytes32 private constant _TYPE_HASH = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\n        __EIP712_init_unchained(name, version);\n    }\n\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n\n    /**\n     * @dev The hash of the name parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\n        return _HASHED_NAME;\n    }\n\n    /**\n     * @dev The hash of the version parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\n        return _HASHED_VERSION;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlotUpgradeable {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/MathUpgradeable.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = MathUpgradeable.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"},"@openzeppelin/contracts/interfaces/draft-IERC1822.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"},"@openzeppelin/contracts/proxy/beacon/IBeacon.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"},"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Proxy.sol\";\nimport \"./ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n"},"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"},"@openzeppelin/contracts/proxy/Proxy.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overridden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/StorageSlot.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"},"contracts/interfaces/IProfiles.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\ninterface IProfiles {\n    struct User {\n        address userPubAddress;\n        bytes32 multiSig;\n        bool verificationStatus_I;\n        bool verificationStatus_II;\n        bool isStatusRevoked;\n    }\n\n    function createProfile(address _user) external;\n\n    function retainVerification(address _user) external;\n\n    function revokeVerifiedUser(address _user) external;\n\n    function getVerifiedUser(address _user) external view returns (bool);\n\n    function getAdminAddress() external view returns (address);\n\n    function getUser(address _user) external view returns (User memory);\n\n    function getUsers() external view returns (address[] memory);\n}\n"},"contracts/PKDR.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\n\nimport \"./Profiles.sol\";\n\n//states variables\n//error\n//events\n//modifier\n// constructor\n// receive\n// fallback\n// external\n// public\n// internal\n// private\n// view or pure\n\n/// @custom:security-contact zohaib10092001@gmail.com\ncontract PKDR is\n    Initializable,\n    ERC20Upgradeable,\n    ERC20BurnableUpgradeable,\n    ERC20SnapshotUpgradeable,\n    OwnableUpgradeable,\n    PausableUpgradeable,\n    ERC20PermitUpgradeable,\n    UUPSUpgradeable\n{\n    //states variables\n    uint256 private _contractValue = 0;\n    bytes32 private immutable _multiSig =\n        keccak256(abi.encodePacked(\"APPROVED\"));\n    bytes32 private immutable _revokeMultiSig =\n        keccak256(abi.encodePacked(\"NULL\"));\n    Profiles profiles;\n\n    //error\n\n    error USER_NOT_VERIFIED(address);\n    error MULTISIG_REQUIRED(address);\n\n    //events\n\n    event AMOUNT_RECEIVED_THROUGH_FALLBACK(uint256 fallbackAmount);\n    event AMOUNT_RECEIVED_THROUGH_RECEIVE(uint256 receiveAmount);\n    event TRANSFER_REQUIRED_MULTI_SIGNATURE(address);\n    event TRANSFER_REQUIRED_VERIFICATION_I(address);\n\n    //modifier\n\n    modifier isVerified(address _user) {\n        require(_isVerified(_user), \"USER_NOT_VERIFIED\");\n        _;\n    }\n\n    modifier isMultiSigApprove(address _user) {\n        if (_getMultiSig(_user) == _revokeMultiSig) {\n            revert MULTISIG_REQUIRED(_user);\n        }\n        _;\n    }\n\n    // constructor\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    // receive\n    receive() external payable {\n        _contractValue += msg.value;\n        emit AMOUNT_RECEIVED_THROUGH_RECEIVE(msg.value);\n    }\n\n    // fallback\n    fallback() external payable {\n        _contractValue += msg.value;\n        emit AMOUNT_RECEIVED_THROUGH_FALLBACK(msg.value);\n    }\n\n    // external\n\n    // @dev function to initialize the Profile object as a storage in PKDR contract\n    // @param _profiles is a address which is set to payable to fallback functions receiving ethers\n    function setProfileAddress(address payable _profiles) external onlyOwner {\n        profiles = Profiles(_profiles);\n    }\n\n    function mintTo(address to, uint256 amount) external onlyOwner {\n        mint(to, amount);\n    }\n\n    function burn(uint256 amount) public override onlyOwner {\n        super.burn(amount);\n    }\n\n    function burnFrom(\n        address account,\n        uint256 amount\n    ) public override onlyOwner {\n        super.burnFrom(account, amount);\n    }\n\n    // public\n    function initialize() public initializer {\n        __ERC20_init(\"PKDR\", \"PKDR\");\n        __ERC20Burnable_init();\n        __ERC20Snapshot_init();\n        __Ownable_init();\n        __Pausable_init();\n        __ERC20Permit_init(\"PKDR\");\n        __UUPSUpgradeable_init();\n    }\n\n    function transfer(\n        address to,\n        uint256 amount\n    ) public override returns (bool) {\n        require(\n            _isVerified(msg.sender),\n            \"from: TRANSFER_REQUIRED_VERIFICATION_I\"\n        );\n        require(_isVerified(to), \"to : TRANSFER_REQUIRED_VERIFICATION_I\");\n        require(\n            _getMultiSig(msg.sender) == _multiSig,\n            \"from: TRANSFER_REQUIRED_MULTI_SIGNATURE\"\n        );\n        require(\n            _getMultiSig(to) == _multiSig,\n            \"to: TRANSFER_REQUIRED_MULTI_SIGNATURE\"\n        );\n\n        return super.transfer(to, amount);\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    )\n        public\n        virtual\n        override\n        onlyOwner\n        isVerified(from)\n        isVerified(to)\n        isMultiSigApprove(from)\n        isMultiSigApprove(to)\n        returns (bool)\n    {\n        return super.transferFrom(from, to, amount);\n    }\n\n      function owner() public view override returns (address) {\n        return super.owner();\n    }\n\n    // internal\n    function snapshot() internal onlyOwner {\n        _snapshot();\n    }\n\n    function pause() internal onlyOwner {\n        _pause();\n    }\n\n    function unpause() internal onlyOwner {\n        _unpause();\n    }\n\n    function mint(address to, uint256 amount) internal onlyOwner {\n        _mint(to, amount);\n    }\n\n    function _isVerified(address _user) internal view returns (bool) {\n        bool status = profiles.getVerifiedUser(_user);\n        return status;\n    }\n\n    function _getMultiSig(address _user) internal view returns (bytes32) {\n        return profiles.getMultiSig(_user);\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n        override(ERC20Upgradeable, ERC20SnapshotUpgradeable)\n        whenNotPaused\n    {\n        super._beforeTokenTransfer(from, to, amount);\n    }\n\n    function _authorizeUpgrade(\n        address newImplementation\n    ) internal override onlyOwner {}\n\n    // private\n\n    // view or pure\n\n    function getProfileAddress() external view onlyOwner returns (address) {\n        return address(profiles);\n    }\n}\n"},"contracts/Profiles.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\";\nimport \"./interfaces/IProfiles.sol\";\n\n// import \"./IProfiles.sol\";\n// import \"./PKDR.sol\";\n//states variables\n//error\n//events\n//modifier\n// constructor\n// receive\n// fallback\n// external\n// public\n// internal\n// private\n// view or pure\n\n//createProfile\n//getVerifiedUser\n// revokeVerifiedUser\n// retainVerification\ncontract Profiles is\n    IProfiles,\n    Initializable,\n    OwnableUpgradeable,\n    UUPSUpgradeable\n{\n    //states variables\n\n    // admins array who controlled the users contract\n    uint256 private _contractValue = 0;\n    address private _iPkdrOrgAddresses;\n    address[] private _userAddresses;\n    bytes32 private immutable _multiSig =\n        keccak256(abi.encodePacked(\"APPROVED\"));\n    bytes32 private immutable _revokeMultiSig =\n        keccak256(abi.encodePacked(\"NULL\"));\n\n    // mapping for address to a user struct\n    mapping(address => User) private users;\n\n    //error\n\n    error USER_EXISTS_AND_VERIFIED();\n    error USER_NOT_EXISTS();\n    error USER_STATUS_NOT_REVOKED();\n    error USER_STATUS_ALREADY_REVOKED();\n\n    //events\n\n    event PROFILE_CREATED(address indexed user);\n    event PROFILE_REVOKED(address user);\n    event PROFILE_RETAINED(address user);\n    event AMOUNT_RECEIVED_THROUGH_FALLBACK(uint256 fallbackAmount);\n    event AMOUNT_RECEIVED_THROUGH_RECEIVE(uint256 receiveAmount);\n    event MULTISIG_RETAINED(address user);\n    event MULTISIG_REVOKED(address user);\n    event ZK_VERIFICATION_REVOKED(address _user);\n    event ZK_VERIFICATION_RETAINED(address _user);\n\n    //modifier\n\n    // check user Exists in mapping variable\n    modifier userExists(address _user) {\n        if (users[_user].verificationStatus_I) {\n            revert USER_EXISTS_AND_VERIFIED();\n        }\n        _;\n    }\n\n    modifier userNotExists(address _user) {\n        if (!users[_user].verificationStatus_I) {\n            revert USER_NOT_EXISTS();\n        }\n        _;\n    }\n\n    modifier isStatusNotRevoked(address _user) {\n        if (!users[_user].isStatusRevoked) {\n            revert USER_STATUS_NOT_REVOKED();\n        }\n        _;\n    }\n\n    modifier isStatusRevoked(address _user) {\n        if (users[_user].isStatusRevoked) {\n            revert USER_STATUS_ALREADY_REVOKED();\n        }\n        _;\n    }\n\n    // constructor\n\n    // constructor() {\n    //     _disableInitializers();\n    // }\n\n    // receive\n    receive() external payable {\n        _contractValue += msg.value;\n        emit AMOUNT_RECEIVED_THROUGH_RECEIVE(msg.value);\n    }\n\n    // fallback\n    fallback() external payable {\n        _contractValue += msg.value;\n        emit AMOUNT_RECEIVED_THROUGH_FALLBACK(msg.value);\n    }\n\n    // external\n\n    //create the profile of a given address in a mapping of a struct\n    function createProfile(address _user) external onlyOwner userExists(_user) {\n        users[_user] = User(_user, _multiSig, true, false, false);\n        _userAddresses.push(_user);\n        emit PROFILE_CREATED(_user);\n    }\n\n    // retain verification of a user\n    function retainVerification(\n        address _user\n    ) external onlyOwner userNotExists(_user) isStatusNotRevoked(_user) {\n        users[_user].isStatusRevoked = false;\n\n        emit PROFILE_RETAINED(_user);\n    }\n\n    // revoke the verification status of a user\n    function revokeVerifiedUser(\n        address _user\n    ) external onlyOwner userNotExists(_user) isStatusRevoked(_user) {\n        users[_user].isStatusRevoked = true;\n\n        emit PROFILE_REVOKED(_user);\n    }\n\n    function retainMultiSignature(\n        address _user\n    ) external onlyOwner userNotExists(_user) {\n        require(\n            users[_user].multiSig == _revokeMultiSig,\n            \"MULTI_SIGNATURE ALREADY RETAINED \"\n        );\n        users[_user].multiSig = _multiSig;\n    }\n\n    function revokeMultiSignature(\n        address _user\n    ) external onlyOwner userNotExists(_user) {\n        require(\n            users[_user].multiSig == _multiSig,\n            \"MULTI_SIGNATURE ALREADY REVOKED \"\n        );\n        users[_user].multiSig = _revokeMultiSig;\n        emit MULTISIG_REVOKED(_user);\n    }\n\n    function revokeZkVerification(\n        address _user\n    ) external onlyOwner userNotExists(_user) {\n        require(\n            users[_user].verificationStatus_II,\n            \"ZK_VERIFICATION ALREADY REVOKED \"\n        );\n        users[_user].verificationStatus_II = false;\n        emit ZK_VERIFICATION_REVOKED(_user);\n    }\n\n    function retainZkVerification(\n        address _user\n    ) external onlyOwner userNotExists(_user) {\n        require(\n            !users[_user].verificationStatus_II,\n            \"ZK_VERIFICATION ALREADY RETAINED\"\n        );\n        users[_user].verificationStatus_II = true;\n        emit ZK_VERIFICATION_RETAINED(_user);\n    }\n\n    // public\n\n    function initialize() public initializer {\n        __Ownable_init();\n        __UUPSUpgradeable_init();\n    }\n\n    // internal\n\n    function _authorizeUpgrade(\n        address newImplementation\n    ) internal override onlyOwner {}\n\n    // private\n    function _getContractValue() private view returns (uint256) {\n        return _contractValue;\n    }\n\n    // view or pure\n\n    function getAdminAddress() external view onlyOwner returns (address) {\n        return owner();\n    }\n\n    function getUser(\n        address _user\n    ) external view userNotExists(_user) returns (User memory) {\n        return users[_user];\n    }\n\n    function getUsers() external view onlyOwner returns (address[] memory) {\n        address[] memory _users = _userAddresses;\n        return _users;\n    }\n\n    //retuns only the verification status for a user Address not other data present in struct\n    function getVerifiedUser(\n        address _user\n    ) external view userNotExists(_user) returns (bool) {\n        if (users[_user].isStatusRevoked) {\n            return false;\n        } else {\n            return users[_user].verificationStatus_I;\n        }\n    }\n\n    function getMultiSig(\n        address _user\n    ) external view userNotExists(_user) returns (bytes32) {\n        return users[_user].multiSig;\n    }\n}\n"}},"settings":{"optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","storageLayout","devdoc","userdoc","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2590],"ContextUpgradeable":[2788],"Initializable":[689],"OwnableUpgradeable":[131]},"id":132,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"102:23:0"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","file":"../utils/ContextUpgradeable.sol","id":2,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":132,"sourceUnit":2789,"src":"127:41:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":132,"sourceUnit":690,"src":"169:42:0","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":5,"name":"Initializable","nodeType":"IdentifierPath","referencedDeclaration":689,"src":"748:13:0"},"id":6,"nodeType":"InheritanceSpecifier","src":"748:13:0"},{"baseName":{"id":7,"name":"ContextUpgradeable","nodeType":"IdentifierPath","referencedDeclaration":2788,"src":"763:18:0"},"id":8,"nodeType":"InheritanceSpecifier","src":"763:18:0"}],"canonicalName":"OwnableUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":4,"nodeType":"StructuredDocumentation","src":"213:494:0","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":131,"linearizedBaseContracts":[131,2788,689],"name":"OwnableUpgradeable","nameLocation":"726:18:0","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":10,"mutability":"mutable","name":"_owner","nameLocation":"804:6:0","nodeType":"VariableDeclaration","scope":131,"src":"788:22:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":9,"name":"address","nodeType":"ElementaryTypeName","src":"788:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"id":16,"name":"OwnershipTransferred","nameLocation":"823:20:0","nodeType":"EventDefinition","parameters":{"id":15,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"860:13:0","nodeType":"VariableDeclaration","scope":16,"src":"844:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":11,"name":"address","nodeType":"ElementaryTypeName","src":"844:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":14,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"891:8:0","nodeType":"VariableDeclaration","scope":16,"src":"875:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":13,"name":"address","nodeType":"ElementaryTypeName","src":"875:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"843:57:0"},"src":"817:84:0"},{"body":{"id":25,"nodeType":"Block","src":"1055:43:0","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":22,"name":"__Ownable_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":37,"src":"1065:24:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":23,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1065:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":24,"nodeType":"ExpressionStatement","src":"1065:26:0"}]},"documentation":{"id":17,"nodeType":"StructuredDocumentation","src":"907:91:0","text":" @dev Initializes the contract setting the deployer as the initial owner."},"id":26,"implemented":true,"kind":"function","modifiers":[{"id":20,"kind":"modifierInvocation","modifierName":{"id":19,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":634,"src":"1038:16:0"},"nodeType":"ModifierInvocation","src":"1038:16:0"}],"name":"__Ownable_init","nameLocation":"1012:14:0","nodeType":"FunctionDefinition","parameters":{"id":18,"nodeType":"ParameterList","parameters":[],"src":"1026:2:0"},"returnParameters":{"id":21,"nodeType":"ParameterList","parameters":[],"src":"1055:0:0"},"scope":131,"src":"1003:95:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":36,"nodeType":"Block","src":"1166:49:0","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":32,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2773,"src":"1195:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":33,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1195:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":31,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":125,"src":"1176:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":34,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1176:32:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":35,"nodeType":"ExpressionStatement","src":"1176:32:0"}]},"id":37,"implemented":true,"kind":"function","modifiers":[{"id":29,"kind":"modifierInvocation","modifierName":{"id":28,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":634,"src":"1149:16:0"},"nodeType":"ModifierInvocation","src":"1149:16:0"}],"name":"__Ownable_init_unchained","nameLocation":"1113:24:0","nodeType":"FunctionDefinition","parameters":{"id":27,"nodeType":"ParameterList","parameters":[],"src":"1137:2:0"},"returnParameters":{"id":30,"nodeType":"ParameterList","parameters":[],"src":"1166:0:0"},"scope":131,"src":"1104:111:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":44,"nodeType":"Block","src":"1324:41:0","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":40,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":68,"src":"1334:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":41,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1334:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":42,"nodeType":"ExpressionStatement","src":"1334:13:0"},{"id":43,"nodeType":"PlaceholderStatement","src":"1357:1:0"}]},"documentation":{"id":38,"nodeType":"StructuredDocumentation","src":"1221:77:0","text":" @dev Throws if called by any account other than the owner."},"id":45,"name":"onlyOwner","nameLocation":"1312:9:0","nodeType":"ModifierDefinition","parameters":{"id":39,"nodeType":"ParameterList","parameters":[],"src":"1321:2:0"},"src":"1303:62:0","virtual":false,"visibility":"internal"},{"body":{"id":53,"nodeType":"Block","src":"1496:30:0","statements":[{"expression":{"id":51,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"1513:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":50,"id":52,"nodeType":"Return","src":"1506:13:0"}]},"documentation":{"id":46,"nodeType":"StructuredDocumentation","src":"1371:65:0","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":54,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1450:5:0","nodeType":"FunctionDefinition","parameters":{"id":47,"nodeType":"ParameterList","parameters":[],"src":"1455:2:0"},"returnParameters":{"id":50,"nodeType":"ParameterList","parameters":[{"constant":false,"id":49,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":54,"src":"1487:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":48,"name":"address","nodeType":"ElementaryTypeName","src":"1487:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1486:9:0"},"scope":131,"src":"1441:85:0","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":67,"nodeType":"Block","src":"1644:85:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":63,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":59,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":54,"src":"1662:5:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":60,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1662:7:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":61,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2773,"src":"1673:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":62,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1673:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1662:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","id":64,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1687:34:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""},"value":"Ownable: caller is not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""}],"id":58,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1654:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":65,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1654:68:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":66,"nodeType":"ExpressionStatement","src":"1654:68:0"}]},"documentation":{"id":55,"nodeType":"StructuredDocumentation","src":"1532:62:0","text":" @dev Throws if the sender is not the owner."},"id":68,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1608:11:0","nodeType":"FunctionDefinition","parameters":{"id":56,"nodeType":"ParameterList","parameters":[],"src":"1619:2:0"},"returnParameters":{"id":57,"nodeType":"ParameterList","parameters":[],"src":"1644:0:0"},"scope":131,"src":"1599:130:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":81,"nodeType":"Block","src":"2125:47:0","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":77,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2162:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":76,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2154:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":75,"name":"address","nodeType":"ElementaryTypeName","src":"2154:7:0","typeDescriptions":{}}},"id":78,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2154:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":74,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":125,"src":"2135:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":79,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2135:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":80,"nodeType":"ExpressionStatement","src":"2135:30:0"}]},"documentation":{"id":69,"nodeType":"StructuredDocumentation","src":"1735:331:0","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."},"functionSelector":"715018a6","id":82,"implemented":true,"kind":"function","modifiers":[{"id":72,"kind":"modifierInvocation","modifierName":{"id":71,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":45,"src":"2115:9:0"},"nodeType":"ModifierInvocation","src":"2115:9:0"}],"name":"renounceOwnership","nameLocation":"2080:17:0","nodeType":"FunctionDefinition","parameters":{"id":70,"nodeType":"ParameterList","parameters":[],"src":"2097:2:0"},"returnParameters":{"id":73,"nodeType":"ParameterList","parameters":[],"src":"2125:0:0"},"scope":131,"src":"2071:101:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":104,"nodeType":"Block","src":"2391:128:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":96,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":91,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":85,"src":"2409:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":94,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2429:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":93,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2421:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":92,"name":"address","nodeType":"ElementaryTypeName","src":"2421:7:0","typeDescriptions":{}}},"id":95,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2421:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2409:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373","id":97,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2433:40:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""},"value":"Ownable: new owner is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""}],"id":90,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2401:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":98,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2401:73:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":99,"nodeType":"ExpressionStatement","src":"2401:73:0"},{"expression":{"arguments":[{"id":101,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":85,"src":"2503:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":100,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":125,"src":"2484:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":102,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2484:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":103,"nodeType":"ExpressionStatement","src":"2484:28:0"}]},"documentation":{"id":83,"nodeType":"StructuredDocumentation","src":"2178:138:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":105,"implemented":true,"kind":"function","modifiers":[{"id":88,"kind":"modifierInvocation","modifierName":{"id":87,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":45,"src":"2381:9:0"},"nodeType":"ModifierInvocation","src":"2381:9:0"}],"name":"transferOwnership","nameLocation":"2330:17:0","nodeType":"FunctionDefinition","parameters":{"id":86,"nodeType":"ParameterList","parameters":[{"constant":false,"id":85,"mutability":"mutable","name":"newOwner","nameLocation":"2356:8:0","nodeType":"VariableDeclaration","scope":105,"src":"2348:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":84,"name":"address","nodeType":"ElementaryTypeName","src":"2348:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2347:18:0"},"returnParameters":{"id":89,"nodeType":"ParameterList","parameters":[],"src":"2391:0:0"},"scope":131,"src":"2321:198:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":124,"nodeType":"Block","src":"2736:124:0","statements":[{"assignments":[112],"declarations":[{"constant":false,"id":112,"mutability":"mutable","name":"oldOwner","nameLocation":"2754:8:0","nodeType":"VariableDeclaration","scope":124,"src":"2746:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":111,"name":"address","nodeType":"ElementaryTypeName","src":"2746:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":114,"initialValue":{"id":113,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"2765:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2746:25:0"},{"expression":{"id":117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":115,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"2781:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":116,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":108,"src":"2790:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2781:17:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":118,"nodeType":"ExpressionStatement","src":"2781:17:0"},{"eventCall":{"arguments":[{"id":120,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112,"src":"2834:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":121,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":108,"src":"2844:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":119,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":16,"src":"2813:20:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":122,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2813:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":123,"nodeType":"EmitStatement","src":"2808:45:0"}]},"documentation":{"id":106,"nodeType":"StructuredDocumentation","src":"2525:143:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":125,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2682:18:0","nodeType":"FunctionDefinition","parameters":{"id":109,"nodeType":"ParameterList","parameters":[{"constant":false,"id":108,"mutability":"mutable","name":"newOwner","nameLocation":"2709:8:0","nodeType":"VariableDeclaration","scope":125,"src":"2701:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":107,"name":"address","nodeType":"ElementaryTypeName","src":"2701:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2700:18:0"},"returnParameters":{"id":110,"nodeType":"ParameterList","parameters":[],"src":"2736:0:0"},"scope":131,"src":"2673:187:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":126,"nodeType":"StructuredDocumentation","src":"2866:254:0","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":130,"mutability":"mutable","name":"__gap","nameLocation":"3145:5:0","nodeType":"VariableDeclaration","scope":131,"src":"3125:25:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage","typeString":"uint256[49]"},"typeName":{"baseType":{"id":127,"name":"uint256","nodeType":"ElementaryTypeName","src":"3125:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":129,"length":{"hexValue":"3439","id":128,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3133:2:0","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"nodeType":"ArrayTypeName","src":"3125:11:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage_ptr","typeString":"uint256[49]"}},"visibility":"private"}],"scope":132,"src":"708:2445:0","usedErrors":[]}],"src":"102:3052:0"},"id":0},"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol","exportedSymbols":{"IERC1822ProxiableUpgradeable":[141]},"id":142,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":133,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"113:23:1"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1822ProxiableUpgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":134,"nodeType":"StructuredDocumentation","src":"138:203:1","text":" @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n proxy whose upgrades are fully controlled by the current implementation."},"fullyImplemented":false,"id":141,"linearizedBaseContracts":[141],"name":"IERC1822ProxiableUpgradeable","nameLocation":"352:28:1","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":135,"nodeType":"StructuredDocumentation","src":"387:438:1","text":" @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n address.\n IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n function revert if invoked through a proxy."},"functionSelector":"52d1902d","id":140,"implemented":false,"kind":"function","modifiers":[],"name":"proxiableUUID","nameLocation":"839:13:1","nodeType":"FunctionDefinition","parameters":{"id":136,"nodeType":"ParameterList","parameters":[],"src":"852:2:1"},"returnParameters":{"id":139,"nodeType":"ParameterList","parameters":[{"constant":false,"id":138,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":140,"src":"878:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":137,"name":"bytes32","nodeType":"ElementaryTypeName","src":"878:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"877:9:1"},"scope":141,"src":"830:57:1","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":142,"src":"342:547:1","usedErrors":[]}],"src":"113:777:1"},"id":1},"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2590],"ERC1967UpgradeUpgradeable":[510],"IBeaconUpgradeable":[520],"IERC1822ProxiableUpgradeable":[141],"Initializable":[689],"StorageSlotUpgradeable":[2922]},"id":511,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":143,"literals":["solidity","^","0.8",".2"],"nodeType":"PragmaDirective","src":"116:23:2"},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol","file":"../beacon/IBeaconUpgradeable.sol","id":144,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":511,"sourceUnit":521,"src":"141:42:2","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol","file":"../../interfaces/draft-IERC1822Upgradeable.sol","id":145,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":511,"sourceUnit":142,"src":"184:56:2","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","file":"../../utils/AddressUpgradeable.sol","id":146,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":511,"sourceUnit":2591,"src":"241:44:2","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol","file":"../../utils/StorageSlotUpgradeable.sol","id":147,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":511,"sourceUnit":2923,"src":"286:48:2","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../utils/Initializable.sol","id":148,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":511,"sourceUnit":690,"src":"335:36:2","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":150,"name":"Initializable","nodeType":"IdentifierPath","referencedDeclaration":689,"src":"657:13:2"},"id":151,"nodeType":"InheritanceSpecifier","src":"657:13:2"}],"canonicalName":"ERC1967UpgradeUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":149,"nodeType":"StructuredDocumentation","src":"373:236:2","text":" @dev This abstract contract provides getters and event emitting update functions for\n https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n _Available since v4.1._\n @custom:oz-upgrades-unsafe-allow delegatecall"},"fullyImplemented":true,"id":510,"linearizedBaseContracts":[510,689],"name":"ERC1967UpgradeUpgradeable","nameLocation":"628:25:2","nodeType":"ContractDefinition","nodes":[{"body":{"id":156,"nodeType":"Block","src":"736:7:2","statements":[]},"id":157,"implemented":true,"kind":"function","modifiers":[{"id":154,"kind":"modifierInvocation","modifierName":{"id":153,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":634,"src":"719:16:2"},"nodeType":"ModifierInvocation","src":"719:16:2"}],"name":"__ERC1967Upgrade_init","nameLocation":"686:21:2","nodeType":"FunctionDefinition","parameters":{"id":152,"nodeType":"ParameterList","parameters":[],"src":"707:2:2"},"returnParameters":{"id":155,"nodeType":"ParameterList","parameters":[],"src":"736:0:2"},"scope":510,"src":"677:66:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":162,"nodeType":"Block","src":"818:7:2","statements":[]},"id":163,"implemented":true,"kind":"function","modifiers":[{"id":160,"kind":"modifierInvocation","modifierName":{"id":159,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":634,"src":"801:16:2"},"nodeType":"ModifierInvocation","src":"801:16:2"}],"name":"__ERC1967Upgrade_init_unchained","nameLocation":"758:31:2","nodeType":"FunctionDefinition","parameters":{"id":158,"nodeType":"ParameterList","parameters":[],"src":"789:2:2"},"returnParameters":{"id":161,"nodeType":"ParameterList","parameters":[],"src":"818:0:2"},"scope":510,"src":"749:76:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":true,"id":166,"mutability":"constant","name":"_ROLLBACK_SLOT","nameLocation":"934:14:2","nodeType":"VariableDeclaration","scope":510,"src":"909:108:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":164,"name":"bytes32","nodeType":"ElementaryTypeName","src":"909:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307834393130666466613136666564333236306564306537313437663763633664613131613630323038623562393430366431326136333536313466666439313433","id":165,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"951:66:2","typeDescriptions":{"typeIdentifier":"t_rational_33048860383849004559742813297059419343339852917517107368639918720169455489347_by_1","typeString":"int_const 3304...(69 digits omitted)...9347"},"value":"0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143"},"visibility":"private"},{"constant":true,"documentation":{"id":167,"nodeType":"StructuredDocumentation","src":"1024:214:2","text":" @dev Storage slot with the address of the current implementation.\n This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n validated in the constructor."},"id":170,"mutability":"constant","name":"_IMPLEMENTATION_SLOT","nameLocation":"1269:20:2","nodeType":"VariableDeclaration","scope":510,"src":"1243:115:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":168,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1243:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307833363038393461313362613161333231303636376338323834393264623938646361336532303736636333373335613932306133636135303564333832626263","id":169,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1292:66:2","typeDescriptions":{"typeIdentifier":"t_rational_24440054405305269366569402256811496959409073762505157381672968839269610695612_by_1","typeString":"int_const 2444...(69 digits omitted)...5612"},"value":"0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc"},"visibility":"internal"},{"anonymous":false,"documentation":{"id":171,"nodeType":"StructuredDocumentation","src":"1365:68:2","text":" @dev Emitted when the implementation is upgraded."},"id":175,"name":"Upgraded","nameLocation":"1444:8:2","nodeType":"EventDefinition","parameters":{"id":174,"nodeType":"ParameterList","parameters":[{"constant":false,"id":173,"indexed":true,"mutability":"mutable","name":"implementation","nameLocation":"1469:14:2","nodeType":"VariableDeclaration","scope":175,"src":"1453:30:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":172,"name":"address","nodeType":"ElementaryTypeName","src":"1453:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1452:32:2"},"src":"1438:47:2"},{"body":{"id":187,"nodeType":"Block","src":"1625:89:2","statements":[{"expression":{"expression":{"arguments":[{"id":183,"name":"_IMPLEMENTATION_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":170,"src":"1680:20:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":181,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2922,"src":"1642:22:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$2922_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":182,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":2888,"src":"1642:37:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$2868_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":184,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1642:59:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2868_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":185,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","referencedDeclaration":2867,"src":"1642:65:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":180,"id":186,"nodeType":"Return","src":"1635:72:2"}]},"documentation":{"id":176,"nodeType":"StructuredDocumentation","src":"1491:67:2","text":" @dev Returns the current implementation address."},"id":188,"implemented":true,"kind":"function","modifiers":[],"name":"_getImplementation","nameLocation":"1572:18:2","nodeType":"FunctionDefinition","parameters":{"id":177,"nodeType":"ParameterList","parameters":[],"src":"1590:2:2"},"returnParameters":{"id":180,"nodeType":"ParameterList","parameters":[{"constant":false,"id":179,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":188,"src":"1616:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":178,"name":"address","nodeType":"ElementaryTypeName","src":"1616:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1615:9:2"},"scope":510,"src":"1563:151:2","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":211,"nodeType":"Block","src":"1868:218:2","statements":[{"expression":{"arguments":[{"arguments":[{"id":197,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":191,"src":"1916:17:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":195,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2590,"src":"1886:18:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$2590_$","typeString":"type(library AddressUpgradeable)"}},"id":196,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":2324,"src":"1886:29:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":198,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1886:48:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a206e657720696d706c656d656e746174696f6e206973206e6f74206120636f6e7472616374","id":199,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1936:47:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65","typeString":"literal_string \"ERC1967: new implementation is not a contract\""},"value":"ERC1967: new implementation is not a contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65","typeString":"literal_string \"ERC1967: new implementation is not a contract\""}],"id":194,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1878:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":200,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1878:106:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":201,"nodeType":"ExpressionStatement","src":"1878:106:2"},{"expression":{"id":209,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"arguments":[{"id":205,"name":"_IMPLEMENTATION_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":170,"src":"2032:20:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":202,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2922,"src":"1994:22:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$2922_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":204,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":2888,"src":"1994:37:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$2868_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":206,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1994:59:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2868_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":207,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"value","nodeType":"MemberAccess","referencedDeclaration":2867,"src":"1994:65:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":208,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":191,"src":"2062:17:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1994:85:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":210,"nodeType":"ExpressionStatement","src":"1994:85:2"}]},"documentation":{"id":189,"nodeType":"StructuredDocumentation","src":"1720:80:2","text":" @dev Stores a new address in the EIP1967 implementation slot."},"id":212,"implemented":true,"kind":"function","modifiers":[],"name":"_setImplementation","nameLocation":"1814:18:2","nodeType":"FunctionDefinition","parameters":{"id":192,"nodeType":"ParameterList","parameters":[{"constant":false,"id":191,"mutability":"mutable","name":"newImplementation","nameLocation":"1841:17:2","nodeType":"VariableDeclaration","scope":212,"src":"1833:25:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":190,"name":"address","nodeType":"ElementaryTypeName","src":"1833:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1832:27:2"},"returnParameters":{"id":193,"nodeType":"ParameterList","parameters":[],"src":"1868:0:2"},"scope":510,"src":"1805:281:2","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":226,"nodeType":"Block","src":"2248:96:2","statements":[{"expression":{"arguments":[{"id":219,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":215,"src":"2277:17:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":218,"name":"_setImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":212,"src":"2258:18:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":220,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2258:37:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":221,"nodeType":"ExpressionStatement","src":"2258:37:2"},{"eventCall":{"arguments":[{"id":223,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":215,"src":"2319:17:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":222,"name":"Upgraded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":175,"src":"2310:8:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":224,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2310:27:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":225,"nodeType":"EmitStatement","src":"2305:32:2"}]},"documentation":{"id":213,"nodeType":"StructuredDocumentation","src":"2092:95:2","text":" @dev Perform implementation upgrade\n Emits an {Upgraded} event."},"id":227,"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeTo","nameLocation":"2201:10:2","nodeType":"FunctionDefinition","parameters":{"id":216,"nodeType":"ParameterList","parameters":[{"constant":false,"id":215,"mutability":"mutable","name":"newImplementation","nameLocation":"2220:17:2","nodeType":"VariableDeclaration","scope":227,"src":"2212:25:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":214,"name":"address","nodeType":"ElementaryTypeName","src":"2212:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2211:27:2"},"returnParameters":{"id":217,"nodeType":"ParameterList","parameters":[],"src":"2248:0:2"},"scope":510,"src":"2192:152:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":254,"nodeType":"Block","src":"2606:160:2","statements":[{"expression":{"arguments":[{"id":238,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":230,"src":"2627:17:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":237,"name":"_upgradeTo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":227,"src":"2616:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":239,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2616:29:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":240,"nodeType":"ExpressionStatement","src":"2616:29:2"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":246,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":244,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":241,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":232,"src":"2659:4:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":242,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"2659:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":243,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2673:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2659:15:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"id":245,"name":"forceCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":234,"src":"2678:9:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2659:28:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":253,"nodeType":"IfStatement","src":"2655:105:2","trueBody":{"id":252,"nodeType":"Block","src":"2689:71:2","statements":[{"expression":{"arguments":[{"id":248,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":230,"src":"2725:17:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":249,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":232,"src":"2744:4:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":247,"name":"_functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":504,"src":"2703:21:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory) returns (bytes memory)"}},"id":250,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2703:46:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":251,"nodeType":"ExpressionStatement","src":"2703:46:2"}]}}]},"documentation":{"id":228,"nodeType":"StructuredDocumentation","src":"2350:123:2","text":" @dev Perform implementation upgrade with additional setup call.\n Emits an {Upgraded} event."},"id":255,"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeToAndCall","nameLocation":"2487:17:2","nodeType":"FunctionDefinition","parameters":{"id":235,"nodeType":"ParameterList","parameters":[{"constant":false,"id":230,"mutability":"mutable","name":"newImplementation","nameLocation":"2522:17:2","nodeType":"VariableDeclaration","scope":255,"src":"2514:25:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":229,"name":"address","nodeType":"ElementaryTypeName","src":"2514:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":232,"mutability":"mutable","name":"data","nameLocation":"2562:4:2","nodeType":"VariableDeclaration","scope":255,"src":"2549:17:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":231,"name":"bytes","nodeType":"ElementaryTypeName","src":"2549:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":234,"mutability":"mutable","name":"forceCall","nameLocation":"2581:9:2","nodeType":"VariableDeclaration","scope":255,"src":"2576:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":233,"name":"bool","nodeType":"ElementaryTypeName","src":"2576:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2504:92:2"},"returnParameters":{"id":236,"nodeType":"ParameterList","parameters":[],"src":"2606:0:2"},"scope":510,"src":"2478:288:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":307,"nodeType":"Block","src":"3070:842:2","statements":[{"condition":{"expression":{"arguments":[{"id":267,"name":"_ROLLBACK_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":166,"src":"3422:14:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":265,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2922,"src":"3384:22:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$2922_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":266,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getBooleanSlot","nodeType":"MemberAccess","referencedDeclaration":2899,"src":"3384:37:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_BooleanSlot_$2871_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.BooleanSlot storage pointer)"}},"id":268,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3384:53:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$2871_storage_ptr","typeString":"struct StorageSlotUpgradeable.BooleanSlot storage pointer"}},"id":269,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","referencedDeclaration":2870,"src":"3384:59:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":305,"nodeType":"Block","src":"3513:393:2","statements":[{"clauses":[{"block":{"id":290,"nodeType":"Block","src":"3618:115:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":286,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":284,"name":"slot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":281,"src":"3644:4:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":285,"name":"_IMPLEMENTATION_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":170,"src":"3652:20:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3644:28:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524331393637557067726164653a20756e737570706f727465642070726f786961626c6555554944","id":287,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3674:43:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c","typeString":"literal_string \"ERC1967Upgrade: unsupported proxiableUUID\""},"value":"ERC1967Upgrade: unsupported proxiableUUID"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c","typeString":"literal_string \"ERC1967Upgrade: unsupported proxiableUUID\""}],"id":283,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3636:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":288,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3636:82:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":289,"nodeType":"ExpressionStatement","src":"3636:82:2"}]},"errorName":"","id":291,"nodeType":"TryCatchClause","parameters":{"id":282,"nodeType":"ParameterList","parameters":[{"constant":false,"id":281,"mutability":"mutable","name":"slot","nameLocation":"3612:4:2","nodeType":"VariableDeclaration","scope":291,"src":"3604:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":280,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3604:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3603:14:2"},"src":"3595:138:2"},{"block":{"id":296,"nodeType":"Block","src":"3740:89:2","statements":[{"expression":{"arguments":[{"hexValue":"45524331393637557067726164653a206e657720696d706c656d656e746174696f6e206973206e6f742055555053","id":293,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3765:48:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24","typeString":"literal_string \"ERC1967Upgrade: new implementation is not UUPS\""},"value":"ERC1967Upgrade: new implementation is not UUPS"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24","typeString":"literal_string \"ERC1967Upgrade: new implementation is not UUPS\""}],"id":292,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"3758:6:2","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":294,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3758:56:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":295,"nodeType":"ExpressionStatement","src":"3758:56:2"}]},"errorName":"","id":297,"nodeType":"TryCatchClause","src":"3734:95:2"}],"externalCall":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":276,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":258,"src":"3560:17:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":275,"name":"IERC1822ProxiableUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":141,"src":"3531:28:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1822ProxiableUpgradeable_$141_$","typeString":"type(contract IERC1822ProxiableUpgradeable)"}},"id":277,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3531:47:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC1822ProxiableUpgradeable_$141","typeString":"contract IERC1822ProxiableUpgradeable"}},"id":278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"proxiableUUID","nodeType":"MemberAccess","referencedDeclaration":140,"src":"3531:61:2","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_bytes32_$","typeString":"function () view external returns (bytes32)"}},"id":279,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3531:63:2","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":298,"nodeType":"TryStatement","src":"3527:302:2"},{"expression":{"arguments":[{"id":300,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":258,"src":"3860:17:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":301,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":260,"src":"3879:4:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":302,"name":"forceCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":262,"src":"3885:9:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":299,"name":"_upgradeToAndCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":255,"src":"3842:17:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bool_$returns$__$","typeString":"function (address,bytes memory,bool)"}},"id":303,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3842:53:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":304,"nodeType":"ExpressionStatement","src":"3842:53:2"}]},"id":306,"nodeType":"IfStatement","src":"3380:526:2","trueBody":{"id":274,"nodeType":"Block","src":"3445:62:2","statements":[{"expression":{"arguments":[{"id":271,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":258,"src":"3478:17:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":270,"name":"_setImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":212,"src":"3459:18:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":272,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3459:37:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":273,"nodeType":"ExpressionStatement","src":"3459:37:2"}]}}]},"documentation":{"id":256,"nodeType":"StructuredDocumentation","src":"2772:161:2","text":" @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n Emits an {Upgraded} event."},"id":308,"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeToAndCallUUPS","nameLocation":"2947:21:2","nodeType":"FunctionDefinition","parameters":{"id":263,"nodeType":"ParameterList","parameters":[{"constant":false,"id":258,"mutability":"mutable","name":"newImplementation","nameLocation":"2986:17:2","nodeType":"VariableDeclaration","scope":308,"src":"2978:25:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":257,"name":"address","nodeType":"ElementaryTypeName","src":"2978:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":260,"mutability":"mutable","name":"data","nameLocation":"3026:4:2","nodeType":"VariableDeclaration","scope":308,"src":"3013:17:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":259,"name":"bytes","nodeType":"ElementaryTypeName","src":"3013:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":262,"mutability":"mutable","name":"forceCall","nameLocation":"3045:9:2","nodeType":"VariableDeclaration","scope":308,"src":"3040:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":261,"name":"bool","nodeType":"ElementaryTypeName","src":"3040:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2968:92:2"},"returnParameters":{"id":264,"nodeType":"ParameterList","parameters":[],"src":"3070:0:2"},"scope":510,"src":"2938:974:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":true,"documentation":{"id":309,"nodeType":"StructuredDocumentation","src":"3918:189:2","text":" @dev Storage slot with the admin of the contract.\n This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n validated in the constructor."},"id":312,"mutability":"constant","name":"_ADMIN_SLOT","nameLocation":"4138:11:2","nodeType":"VariableDeclaration","scope":510,"src":"4112:106:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":310,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4112:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307862353331323736383461353638623331373361653133623966386136303136653234336536336236653865653131373864366137313738353062356436313033","id":311,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4152:66:2","typeDescriptions":{"typeIdentifier":"t_rational_81955473079516046949633743016697847541294818689821282749996681496272635257091_by_1","typeString":"int_const 8195...(69 digits omitted)...7091"},"value":"0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103"},"visibility":"internal"},{"anonymous":false,"documentation":{"id":313,"nodeType":"StructuredDocumentation","src":"4225:67:2","text":" @dev Emitted when the admin account has changed."},"id":319,"name":"AdminChanged","nameLocation":"4303:12:2","nodeType":"EventDefinition","parameters":{"id":318,"nodeType":"ParameterList","parameters":[{"constant":false,"id":315,"indexed":false,"mutability":"mutable","name":"previousAdmin","nameLocation":"4324:13:2","nodeType":"VariableDeclaration","scope":319,"src":"4316:21:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":314,"name":"address","nodeType":"ElementaryTypeName","src":"4316:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":317,"indexed":false,"mutability":"mutable","name":"newAdmin","nameLocation":"4347:8:2","nodeType":"VariableDeclaration","scope":319,"src":"4339:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":316,"name":"address","nodeType":"ElementaryTypeName","src":"4339:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4315:41:2"},"src":"4297:60:2"},{"body":{"id":331,"nodeType":"Block","src":"4471:80:2","statements":[{"expression":{"expression":{"arguments":[{"id":327,"name":"_ADMIN_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":312,"src":"4526:11:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":325,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2922,"src":"4488:22:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$2922_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":326,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":2888,"src":"4488:37:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$2868_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":328,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4488:50:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2868_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":329,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","referencedDeclaration":2867,"src":"4488:56:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":324,"id":330,"nodeType":"Return","src":"4481:63:2"}]},"documentation":{"id":320,"nodeType":"StructuredDocumentation","src":"4363:50:2","text":" @dev Returns the current admin."},"id":332,"implemented":true,"kind":"function","modifiers":[],"name":"_getAdmin","nameLocation":"4427:9:2","nodeType":"FunctionDefinition","parameters":{"id":321,"nodeType":"ParameterList","parameters":[],"src":"4436:2:2"},"returnParameters":{"id":324,"nodeType":"ParameterList","parameters":[{"constant":false,"id":323,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":332,"src":"4462:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":322,"name":"address","nodeType":"ElementaryTypeName","src":"4462:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4461:9:2"},"scope":510,"src":"4418:133:2","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":357,"nodeType":"Block","src":"4678:167:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":344,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":339,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":335,"src":"4696:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":342,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4716:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":341,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4708:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":340,"name":"address","nodeType":"ElementaryTypeName","src":"4708:7:2","typeDescriptions":{}}},"id":343,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4708:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4696:22:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a206e65772061646d696e20697320746865207a65726f2061646472657373","id":345,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4720:40:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_3820e16891102c1360a787e6e648431097d92537f969d458f5c94b56f8318be5","typeString":"literal_string \"ERC1967: new admin is the zero address\""},"value":"ERC1967: new admin is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3820e16891102c1360a787e6e648431097d92537f969d458f5c94b56f8318be5","typeString":"literal_string \"ERC1967: new admin is the zero address\""}],"id":338,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4688:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":346,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4688:73:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":347,"nodeType":"ExpressionStatement","src":"4688:73:2"},{"expression":{"id":355,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"arguments":[{"id":351,"name":"_ADMIN_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":312,"src":"4809:11:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":348,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2922,"src":"4771:22:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$2922_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":2888,"src":"4771:37:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$2868_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":352,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4771:50:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2868_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":353,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"value","nodeType":"MemberAccess","referencedDeclaration":2867,"src":"4771:56:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":354,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":335,"src":"4830:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4771:67:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":356,"nodeType":"ExpressionStatement","src":"4771:67:2"}]},"documentation":{"id":333,"nodeType":"StructuredDocumentation","src":"4557:71:2","text":" @dev Stores a new address in the EIP1967 admin slot."},"id":358,"implemented":true,"kind":"function","modifiers":[],"name":"_setAdmin","nameLocation":"4642:9:2","nodeType":"FunctionDefinition","parameters":{"id":336,"nodeType":"ParameterList","parameters":[{"constant":false,"id":335,"mutability":"mutable","name":"newAdmin","nameLocation":"4660:8:2","nodeType":"VariableDeclaration","scope":358,"src":"4652:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":334,"name":"address","nodeType":"ElementaryTypeName","src":"4652:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4651:18:2"},"returnParameters":{"id":337,"nodeType":"ParameterList","parameters":[],"src":"4678:0:2"},"scope":510,"src":"4633:212:2","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":374,"nodeType":"Block","src":"5005:86:2","statements":[{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":365,"name":"_getAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":332,"src":"5033:9:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":366,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5033:11:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":367,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":361,"src":"5046:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":364,"name":"AdminChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":319,"src":"5020:12:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":368,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5020:35:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":369,"nodeType":"EmitStatement","src":"5015:40:2"},{"expression":{"arguments":[{"id":371,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":361,"src":"5075:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":370,"name":"_setAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":358,"src":"5065:9:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":372,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5065:19:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":373,"nodeType":"ExpressionStatement","src":"5065:19:2"}]},"documentation":{"id":359,"nodeType":"StructuredDocumentation","src":"4851:100:2","text":" @dev Changes the admin of the proxy.\n Emits an {AdminChanged} event."},"id":375,"implemented":true,"kind":"function","modifiers":[],"name":"_changeAdmin","nameLocation":"4965:12:2","nodeType":"FunctionDefinition","parameters":{"id":362,"nodeType":"ParameterList","parameters":[{"constant":false,"id":361,"mutability":"mutable","name":"newAdmin","nameLocation":"4986:8:2","nodeType":"VariableDeclaration","scope":375,"src":"4978:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":360,"name":"address","nodeType":"ElementaryTypeName","src":"4978:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4977:18:2"},"returnParameters":{"id":363,"nodeType":"ParameterList","parameters":[],"src":"5005:0:2"},"scope":510,"src":"4956:135:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":true,"documentation":{"id":376,"nodeType":"StructuredDocumentation","src":"5097:232:2","text":" @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor."},"id":379,"mutability":"constant","name":"_BEACON_SLOT","nameLocation":"5360:12:2","nodeType":"VariableDeclaration","scope":510,"src":"5334:107:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":377,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5334:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307861336630616437346535343233616562666438306433656634333436353738333335613961373261656165653539666636636233353832623335313333643530","id":378,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5375:66:2","typeDescriptions":{"typeIdentifier":"t_rational_74152234768234802001998023604048924213078445070507226371336425913862612794704_by_1","typeString":"int_const 7415...(69 digits omitted)...4704"},"value":"0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50"},"visibility":"internal"},{"anonymous":false,"documentation":{"id":380,"nodeType":"StructuredDocumentation","src":"5448:60:2","text":" @dev Emitted when the beacon is upgraded."},"id":384,"name":"BeaconUpgraded","nameLocation":"5519:14:2","nodeType":"EventDefinition","parameters":{"id":383,"nodeType":"ParameterList","parameters":[{"constant":false,"id":382,"indexed":true,"mutability":"mutable","name":"beacon","nameLocation":"5550:6:2","nodeType":"VariableDeclaration","scope":384,"src":"5534:22:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":381,"name":"address","nodeType":"ElementaryTypeName","src":"5534:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5533:24:2"},"src":"5513:45:2"},{"body":{"id":396,"nodeType":"Block","src":"5674:81:2","statements":[{"expression":{"expression":{"arguments":[{"id":392,"name":"_BEACON_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":379,"src":"5729:12:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":390,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2922,"src":"5691:22:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$2922_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":2888,"src":"5691:37:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$2868_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":393,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5691:51:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2868_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":394,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","referencedDeclaration":2867,"src":"5691:57:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":389,"id":395,"nodeType":"Return","src":"5684:64:2"}]},"documentation":{"id":385,"nodeType":"StructuredDocumentation","src":"5564:51:2","text":" @dev Returns the current beacon."},"id":397,"implemented":true,"kind":"function","modifiers":[],"name":"_getBeacon","nameLocation":"5629:10:2","nodeType":"FunctionDefinition","parameters":{"id":386,"nodeType":"ParameterList","parameters":[],"src":"5639:2:2"},"returnParameters":{"id":389,"nodeType":"ParameterList","parameters":[{"constant":false,"id":388,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":397,"src":"5665:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":387,"name":"address","nodeType":"ElementaryTypeName","src":"5665:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5664:9:2"},"scope":510,"src":"5620:135:2","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":432,"nodeType":"Block","src":"5884:368:2","statements":[{"expression":{"arguments":[{"arguments":[{"id":406,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":400,"src":"5932:9:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":404,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2590,"src":"5902:18:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$2590_$","typeString":"type(library AddressUpgradeable)"}},"id":405,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":2324,"src":"5902:29:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":407,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5902:40:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a206e657720626561636f6e206973206e6f74206120636f6e7472616374","id":408,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5944:39:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_9589b7809634e4928033de18bb696e9af4ef71b703652af5245f2dbebf2f4470","typeString":"literal_string \"ERC1967: new beacon is not a contract\""},"value":"ERC1967: new beacon is not a contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9589b7809634e4928033de18bb696e9af4ef71b703652af5245f2dbebf2f4470","typeString":"literal_string \"ERC1967: new beacon is not a contract\""}],"id":403,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5894:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":409,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5894:90:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":410,"nodeType":"ExpressionStatement","src":"5894:90:2"},{"expression":{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":415,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":400,"src":"6064:9:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":414,"name":"IBeaconUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":520,"src":"6045:18:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IBeaconUpgradeable_$520_$","typeString":"type(contract IBeaconUpgradeable)"}},"id":416,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6045:29:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IBeaconUpgradeable_$520","typeString":"contract IBeaconUpgradeable"}},"id":417,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"implementation","nodeType":"MemberAccess","referencedDeclaration":519,"src":"6045:44:2","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":418,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6045:46:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":412,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2590,"src":"6015:18:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$2590_$","typeString":"type(library AddressUpgradeable)"}},"id":413,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":2324,"src":"6015:29:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":419,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6015:77:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a20626561636f6e20696d706c656d656e746174696f6e206973206e6f74206120636f6e7472616374","id":420,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6106:50:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_f95fd1f5b5578816eb23f6ca0f2439b4b5e4094dc16e99c3b8e91603a83f93c8","typeString":"literal_string \"ERC1967: beacon implementation is not a contract\""},"value":"ERC1967: beacon implementation is not a contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f95fd1f5b5578816eb23f6ca0f2439b4b5e4094dc16e99c3b8e91603a83f93c8","typeString":"literal_string \"ERC1967: beacon implementation is not a contract\""}],"id":411,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5994:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":421,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5994:172:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":422,"nodeType":"ExpressionStatement","src":"5994:172:2"},{"expression":{"id":430,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"arguments":[{"id":426,"name":"_BEACON_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":379,"src":"6214:12:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":423,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2922,"src":"6176:22:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$2922_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":425,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":2888,"src":"6176:37:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$2868_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":427,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6176:51:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2868_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":428,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"value","nodeType":"MemberAccess","referencedDeclaration":2867,"src":"6176:57:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":429,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":400,"src":"6236:9:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6176:69:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":431,"nodeType":"ExpressionStatement","src":"6176:69:2"}]},"documentation":{"id":398,"nodeType":"StructuredDocumentation","src":"5761:71:2","text":" @dev Stores a new beacon in the EIP1967 beacon slot."},"id":433,"implemented":true,"kind":"function","modifiers":[],"name":"_setBeacon","nameLocation":"5846:10:2","nodeType":"FunctionDefinition","parameters":{"id":401,"nodeType":"ParameterList","parameters":[{"constant":false,"id":400,"mutability":"mutable","name":"newBeacon","nameLocation":"5865:9:2","nodeType":"VariableDeclaration","scope":433,"src":"5857:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":399,"name":"address","nodeType":"ElementaryTypeName","src":"5857:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5856:19:2"},"returnParameters":{"id":402,"nodeType":"ParameterList","parameters":[],"src":"5884:0:2"},"scope":510,"src":"5837:415:2","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":468,"nodeType":"Block","src":"6681:221:2","statements":[{"expression":{"arguments":[{"id":444,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":436,"src":"6702:9:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":443,"name":"_setBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":433,"src":"6691:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":445,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6691:21:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":446,"nodeType":"ExpressionStatement","src":"6691:21:2"},{"eventCall":{"arguments":[{"id":448,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":436,"src":"6742:9:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":447,"name":"BeaconUpgraded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":384,"src":"6727:14:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":449,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6727:25:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":450,"nodeType":"EmitStatement","src":"6722:30:2"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":456,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":451,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":438,"src":"6766:4:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"6766:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":453,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6780:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6766:15:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"id":455,"name":"forceCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":440,"src":"6785:9:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6766:28:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":467,"nodeType":"IfStatement","src":"6762:134:2","trueBody":{"id":466,"nodeType":"Block","src":"6796:100:2","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":459,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":436,"src":"6851:9:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":458,"name":"IBeaconUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":520,"src":"6832:18:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IBeaconUpgradeable_$520_$","typeString":"type(contract IBeaconUpgradeable)"}},"id":460,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6832:29:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IBeaconUpgradeable_$520","typeString":"contract IBeaconUpgradeable"}},"id":461,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"implementation","nodeType":"MemberAccess","referencedDeclaration":519,"src":"6832:44:2","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":462,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6832:46:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":463,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":438,"src":"6880:4:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":457,"name":"_functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":504,"src":"6810:21:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory) returns (bytes memory)"}},"id":464,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6810:75:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":465,"nodeType":"ExpressionStatement","src":"6810:75:2"}]}}]},"documentation":{"id":434,"nodeType":"StructuredDocumentation","src":"6258:292:2","text":" @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n Emits a {BeaconUpgraded} event."},"id":469,"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeBeaconToAndCall","nameLocation":"6564:23:2","nodeType":"FunctionDefinition","parameters":{"id":441,"nodeType":"ParameterList","parameters":[{"constant":false,"id":436,"mutability":"mutable","name":"newBeacon","nameLocation":"6605:9:2","nodeType":"VariableDeclaration","scope":469,"src":"6597:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":435,"name":"address","nodeType":"ElementaryTypeName","src":"6597:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":438,"mutability":"mutable","name":"data","nameLocation":"6637:4:2","nodeType":"VariableDeclaration","scope":469,"src":"6624:17:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":437,"name":"bytes","nodeType":"ElementaryTypeName","src":"6624:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":440,"mutability":"mutable","name":"forceCall","nameLocation":"6656:9:2","nodeType":"VariableDeclaration","scope":469,"src":"6651:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":439,"name":"bool","nodeType":"ElementaryTypeName","src":"6651:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6587:84:2"},"returnParameters":{"id":442,"nodeType":"ParameterList","parameters":[],"src":"6681:0:2"},"scope":510,"src":"6555:347:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":503,"nodeType":"Block","src":"7185:358:2","statements":[{"expression":{"arguments":[{"arguments":[{"id":482,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":472,"src":"7233:6:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":480,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2590,"src":"7203:18:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$2590_$","typeString":"type(library AddressUpgradeable)"}},"id":481,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":2324,"src":"7203:29:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":483,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7203:37:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6e7472616374","id":484,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7242:40:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520","typeString":"literal_string \"Address: delegate call to non-contract\""},"value":"Address: delegate call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520","typeString":"literal_string \"Address: delegate call to non-contract\""}],"id":479,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7195:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":485,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7195:88:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":486,"nodeType":"ExpressionStatement","src":"7195:88:2"},{"assignments":[488,490],"declarations":[{"constant":false,"id":488,"mutability":"mutable","name":"success","nameLocation":"7359:7:2","nodeType":"VariableDeclaration","scope":503,"src":"7354:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":487,"name":"bool","nodeType":"ElementaryTypeName","src":"7354:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":490,"mutability":"mutable","name":"returndata","nameLocation":"7381:10:2","nodeType":"VariableDeclaration","scope":503,"src":"7368:23:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":489,"name":"bytes","nodeType":"ElementaryTypeName","src":"7368:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":495,"initialValue":{"arguments":[{"id":493,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":474,"src":"7415:4:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":491,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":472,"src":"7395:6:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":492,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"delegatecall","nodeType":"MemberAccess","src":"7395:19:2","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":494,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7395:25:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7353:67:2"},{"expression":{"arguments":[{"id":498,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":488,"src":"7473:7:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":499,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":490,"src":"7482:10:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":500,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7494:41:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"expression":{"id":496,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2590,"src":"7437:18:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$2590_$","typeString":"type(library AddressUpgradeable)"}},"id":497,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"verifyCallResult","nodeType":"MemberAccess","referencedDeclaration":2569,"src":"7437:35:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (bool,bytes memory,string memory) pure returns (bytes memory)"}},"id":501,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7437:99:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":478,"id":502,"nodeType":"Return","src":"7430:106:2"}]},"documentation":{"id":470,"nodeType":"StructuredDocumentation","src":"6908:175:2","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":504,"implemented":true,"kind":"function","modifiers":[],"name":"_functionDelegateCall","nameLocation":"7097:21:2","nodeType":"FunctionDefinition","parameters":{"id":475,"nodeType":"ParameterList","parameters":[{"constant":false,"id":472,"mutability":"mutable","name":"target","nameLocation":"7127:6:2","nodeType":"VariableDeclaration","scope":504,"src":"7119:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":471,"name":"address","nodeType":"ElementaryTypeName","src":"7119:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":474,"mutability":"mutable","name":"data","nameLocation":"7148:4:2","nodeType":"VariableDeclaration","scope":504,"src":"7135:17:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":473,"name":"bytes","nodeType":"ElementaryTypeName","src":"7135:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7118:35:2"},"returnParameters":{"id":478,"nodeType":"ParameterList","parameters":[{"constant":false,"id":477,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":504,"src":"7171:12:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":476,"name":"bytes","nodeType":"ElementaryTypeName","src":"7171:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7170:14:2"},"scope":510,"src":"7088:455:2","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"constant":false,"documentation":{"id":505,"nodeType":"StructuredDocumentation","src":"7549:254:2","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":509,"mutability":"mutable","name":"__gap","nameLocation":"7828:5:2","nodeType":"VariableDeclaration","scope":510,"src":"7808:25:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":506,"name":"uint256","nodeType":"ElementaryTypeName","src":"7808:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":508,"length":{"hexValue":"3530","id":507,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7816:2:2","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"7808:11:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":511,"src":"610:7226:2","usedErrors":[]}],"src":"116:7721:2"},"id":2},"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol","exportedSymbols":{"IBeaconUpgradeable":[520]},"id":521,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":512,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"93:23:3"},{"abstract":false,"baseContracts":[],"canonicalName":"IBeaconUpgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":513,"nodeType":"StructuredDocumentation","src":"118:79:3","text":" @dev This is the interface that {BeaconProxy} expects of its beacon."},"fullyImplemented":false,"id":520,"linearizedBaseContracts":[520],"name":"IBeaconUpgradeable","nameLocation":"208:18:3","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":514,"nodeType":"StructuredDocumentation","src":"233:162:3","text":" @dev Must return an address that can be used as a delegate call target.\n {BeaconProxy} will check that this address is a contract."},"functionSelector":"5c60da1b","id":519,"implemented":false,"kind":"function","modifiers":[],"name":"implementation","nameLocation":"409:14:3","nodeType":"FunctionDefinition","parameters":{"id":515,"nodeType":"ParameterList","parameters":[],"src":"423:2:3"},"returnParameters":{"id":518,"nodeType":"ParameterList","parameters":[{"constant":false,"id":517,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":519,"src":"449:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":516,"name":"address","nodeType":"ElementaryTypeName","src":"449:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"448:9:3"},"scope":520,"src":"400:58:3","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":521,"src":"198:262:3","usedErrors":[]}],"src":"93:368:3"},"id":3},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","exportedSymbols":{"AddressUpgradeable":[2590],"Initializable":[689]},"id":690,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":522,"literals":["solidity","^","0.8",".2"],"nodeType":"PragmaDirective","src":"113:23:4"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","file":"../../utils/AddressUpgradeable.sol","id":523,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":690,"sourceUnit":2591,"src":"138:44:4","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"Initializable","contractDependencies":[],"contractKind":"contract","documentation":{"id":524,"nodeType":"StructuredDocumentation","src":"184:2198:4","text":" @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n case an upgrade adds a module that needs to be initialized.\n For example:\n [.hljs-theme-light.nopadding]\n ```\n contract MyToken is ERC20Upgradeable {\n     function initialize() initializer public {\n         __ERC20_init(\"MyToken\", \"MTK\");\n     }\n }\n contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n     function initializeV2() reinitializer(2) public {\n         __ERC20Permit_init(\"MyToken\");\n     }\n }\n ```\n TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n [CAUTION]\n ====\n Avoid leaving a contract uninitialized.\n An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n [.hljs-theme-light.nopadding]\n ```\n /// @custom:oz-upgrades-unsafe-allow constructor\n constructor() {\n     _disableInitializers();\n }\n ```\n ===="},"fullyImplemented":true,"id":689,"linearizedBaseContracts":[689],"name":"Initializable","nameLocation":"2401:13:4","nodeType":"ContractDefinition","nodes":[{"constant":false,"documentation":{"id":525,"nodeType":"StructuredDocumentation","src":"2421:109:4","text":" @dev Indicates that the contract has been initialized.\n @custom:oz-retyped-from bool"},"id":527,"mutability":"mutable","name":"_initialized","nameLocation":"2549:12:4","nodeType":"VariableDeclaration","scope":689,"src":"2535:26:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":526,"name":"uint8","nodeType":"ElementaryTypeName","src":"2535:5:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"private"},{"constant":false,"documentation":{"id":528,"nodeType":"StructuredDocumentation","src":"2568:91:4","text":" @dev Indicates that the contract is in the process of being initialized."},"id":530,"mutability":"mutable","name":"_initializing","nameLocation":"2677:13:4","nodeType":"VariableDeclaration","scope":689,"src":"2664:26:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":529,"name":"bool","nodeType":"ElementaryTypeName","src":"2664:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"private"},{"anonymous":false,"documentation":{"id":531,"nodeType":"StructuredDocumentation","src":"2697:90:4","text":" @dev Triggered when the contract has been initialized or reinitialized."},"id":535,"name":"Initialized","nameLocation":"2798:11:4","nodeType":"EventDefinition","parameters":{"id":534,"nodeType":"ParameterList","parameters":[{"constant":false,"id":533,"indexed":false,"mutability":"mutable","name":"version","nameLocation":"2816:7:4","nodeType":"VariableDeclaration","scope":535,"src":"2810:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":532,"name":"uint8","nodeType":"ElementaryTypeName","src":"2810:5:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"2809:15:4"},"src":"2792:33:4"},{"body":{"id":590,"nodeType":"Block","src":"3258:483:4","statements":[{"assignments":[539],"declarations":[{"constant":false,"id":539,"mutability":"mutable","name":"isTopLevelCall","nameLocation":"3273:14:4","nodeType":"VariableDeclaration","scope":590,"src":"3268:19:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":538,"name":"bool","nodeType":"ElementaryTypeName","src":"3268:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":542,"initialValue":{"id":541,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3290:14:4","subExpression":{"id":540,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":530,"src":"3291:13:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"3268:36:4"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":563,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":548,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":544,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":539,"src":"3336:14:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":547,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":545,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":527,"src":"3354:12:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"31","id":546,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3369:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3354:16:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3336:34:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":549,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3335:36:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":561,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":557,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3376:45:4","subExpression":{"arguments":[{"arguments":[{"id":554,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3415:4:4","typeDescriptions":{"typeIdentifier":"t_contract$_Initializable_$689","typeString":"contract Initializable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Initializable_$689","typeString":"contract Initializable"}],"id":553,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3407:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":552,"name":"address","nodeType":"ElementaryTypeName","src":"3407:7:4","typeDescriptions":{}}},"id":555,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3407:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":550,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2590,"src":"3377:18:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$2590_$","typeString":"type(library AddressUpgradeable)"}},"id":551,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":2324,"src":"3377:29:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":556,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3377:44:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":560,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":558,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":527,"src":"3425:12:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":559,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3441:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3425:17:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3376:66:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":562,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3375:68:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3335:108:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":564,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3457:48:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":543,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3314:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":565,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3314:201:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":566,"nodeType":"ExpressionStatement","src":"3314:201:4"},{"expression":{"id":569,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":567,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":527,"src":"3525:12:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"31","id":568,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3540:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3525:16:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":570,"nodeType":"ExpressionStatement","src":"3525:16:4"},{"condition":{"id":571,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":539,"src":"3555:14:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":577,"nodeType":"IfStatement","src":"3551:65:4","trueBody":{"id":576,"nodeType":"Block","src":"3571:45:4","statements":[{"expression":{"id":574,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":572,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":530,"src":"3585:13:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":573,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3601:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"3585:20:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":575,"nodeType":"ExpressionStatement","src":"3585:20:4"}]}},{"id":578,"nodeType":"PlaceholderStatement","src":"3625:1:4"},{"condition":{"id":579,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":539,"src":"3640:14:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":589,"nodeType":"IfStatement","src":"3636:99:4","trueBody":{"id":588,"nodeType":"Block","src":"3656:79:4","statements":[{"expression":{"id":582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":580,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":530,"src":"3670:13:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":581,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3686:5:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"3670:21:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":583,"nodeType":"ExpressionStatement","src":"3670:21:4"},{"eventCall":{"arguments":[{"hexValue":"31","id":585,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3722:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":584,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":535,"src":"3710:11:4","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":586,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3710:14:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":587,"nodeType":"EmitStatement","src":"3705:19:4"}]}}]},"documentation":{"id":536,"nodeType":"StructuredDocumentation","src":"2831:399:4","text":" @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n `onlyInitializing` functions can be used to initialize parent contracts.\n Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n constructor.\n Emits an {Initialized} event."},"id":591,"name":"initializer","nameLocation":"3244:11:4","nodeType":"ModifierDefinition","parameters":{"id":537,"nodeType":"ParameterList","parameters":[],"src":"3255:2:4"},"src":"3235:506:4","virtual":false,"visibility":"internal"},{"body":{"id":623,"nodeType":"Block","src":"4852:255:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":602,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":598,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4870:14:4","subExpression":{"id":597,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":530,"src":"4871:13:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":601,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":599,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":527,"src":"4888:12:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":600,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":594,"src":"4903:7:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4888:22:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4870:40:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":603,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4912:48:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":596,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4862:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":604,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4862:99:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":605,"nodeType":"ExpressionStatement","src":"4862:99:4"},{"expression":{"id":608,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":606,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":527,"src":"4971:12:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":607,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":594,"src":"4986:7:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4971:22:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":609,"nodeType":"ExpressionStatement","src":"4971:22:4"},{"expression":{"id":612,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":610,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":530,"src":"5003:13:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":611,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5019:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"5003:20:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":613,"nodeType":"ExpressionStatement","src":"5003:20:4"},{"id":614,"nodeType":"PlaceholderStatement","src":"5033:1:4"},{"expression":{"id":617,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":615,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":530,"src":"5044:13:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":616,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5060:5:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"5044:21:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":618,"nodeType":"ExpressionStatement","src":"5044:21:4"},{"eventCall":{"arguments":[{"id":620,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":594,"src":"5092:7:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":619,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":535,"src":"5080:11:4","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":621,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5080:20:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":622,"nodeType":"EmitStatement","src":"5075:25:4"}]},"documentation":{"id":592,"nodeType":"StructuredDocumentation","src":"3747:1062:4","text":" @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n used to initialize parent contracts.\n A reinitializer may be used after the original initialization step. This is essential to configure modules that\n are added through upgrades and that require initialization.\n When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n cannot be nested. If one is invoked in the context of another, execution will revert.\n Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n a contract, executing them in the right order is up to the developer or operator.\n WARNING: setting the version to 255 will prevent any future reinitialization.\n Emits an {Initialized} event."},"id":624,"name":"reinitializer","nameLocation":"4823:13:4","nodeType":"ModifierDefinition","parameters":{"id":595,"nodeType":"ParameterList","parameters":[{"constant":false,"id":594,"mutability":"mutable","name":"version","nameLocation":"4843:7:4","nodeType":"VariableDeclaration","scope":624,"src":"4837:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":593,"name":"uint8","nodeType":"ElementaryTypeName","src":"4837:5:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"4836:15:4"},"src":"4814:293:4","virtual":false,"visibility":"internal"},{"body":{"id":633,"nodeType":"Block","src":"5345:97:4","statements":[{"expression":{"arguments":[{"id":628,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":530,"src":"5363:13:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f7420696e697469616c697a696e67","id":629,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5378:45:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""},"value":"Initializable: contract is not initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""}],"id":627,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5355:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":630,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5355:69:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":631,"nodeType":"ExpressionStatement","src":"5355:69:4"},{"id":632,"nodeType":"PlaceholderStatement","src":"5434:1:4"}]},"documentation":{"id":625,"nodeType":"StructuredDocumentation","src":"5113:199:4","text":" @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n {initializer} and {reinitializer} modifiers, directly or indirectly."},"id":634,"name":"onlyInitializing","nameLocation":"5326:16:4","nodeType":"ModifierDefinition","parameters":{"id":626,"nodeType":"ParameterList","parameters":[],"src":"5342:2:4"},"src":"5317:125:4","virtual":false,"visibility":"internal"},{"body":{"id":669,"nodeType":"Block","src":"5977:230:4","statements":[{"expression":{"arguments":[{"id":640,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"5995:14:4","subExpression":{"id":639,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":530,"src":"5996:13:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320696e697469616c697a696e67","id":641,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6011:41:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""},"value":"Initializable: contract is initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""}],"id":638,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5987:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":642,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5987:66:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":643,"nodeType":"ExpressionStatement","src":"5987:66:4"},{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":650,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":644,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":527,"src":"6067:12:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"arguments":[{"id":647,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6087:5:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":646,"name":"uint8","nodeType":"ElementaryTypeName","src":"6087:5:4","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":645,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6082:4:4","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":648,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6082:11:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":649,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"6082:15:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6067:30:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":668,"nodeType":"IfStatement","src":"6063:138:4","trueBody":{"id":667,"nodeType":"Block","src":"6099:102:4","statements":[{"expression":{"id":657,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":651,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":527,"src":"6113:12:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"arguments":[{"id":654,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6133:5:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":653,"name":"uint8","nodeType":"ElementaryTypeName","src":"6133:5:4","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":652,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6128:4:4","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":655,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6128:11:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":656,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"6128:15:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6113:30:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":658,"nodeType":"ExpressionStatement","src":"6113:30:4"},{"eventCall":{"arguments":[{"expression":{"arguments":[{"id":662,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6179:5:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":661,"name":"uint8","nodeType":"ElementaryTypeName","src":"6179:5:4","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":660,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6174:4:4","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":663,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6174:11:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":664,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"6174:15:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":659,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":535,"src":"6162:11:4","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":665,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6162:28:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":666,"nodeType":"EmitStatement","src":"6157:33:4"}]}}]},"documentation":{"id":635,"nodeType":"StructuredDocumentation","src":"5448:475:4","text":" @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n through proxies.\n Emits an {Initialized} event the first time it is successfully executed."},"id":670,"implemented":true,"kind":"function","modifiers":[],"name":"_disableInitializers","nameLocation":"5937:20:4","nodeType":"FunctionDefinition","parameters":{"id":636,"nodeType":"ParameterList","parameters":[],"src":"5957:2:4"},"returnParameters":{"id":637,"nodeType":"ParameterList","parameters":[],"src":"5977:0:4"},"scope":689,"src":"5928:279:4","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":678,"nodeType":"Block","src":"6381:36:4","statements":[{"expression":{"id":676,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":527,"src":"6398:12:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":675,"id":677,"nodeType":"Return","src":"6391:19:4"}]},"documentation":{"id":671,"nodeType":"StructuredDocumentation","src":"6213:99:4","text":" @dev Returns the highest version that has been initialized. See {reinitializer}."},"id":679,"implemented":true,"kind":"function","modifiers":[],"name":"_getInitializedVersion","nameLocation":"6326:22:4","nodeType":"FunctionDefinition","parameters":{"id":672,"nodeType":"ParameterList","parameters":[],"src":"6348:2:4"},"returnParameters":{"id":675,"nodeType":"ParameterList","parameters":[{"constant":false,"id":674,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":679,"src":"6374:5:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":673,"name":"uint8","nodeType":"ElementaryTypeName","src":"6374:5:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"6373:7:4"},"scope":689,"src":"6317:100:4","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":687,"nodeType":"Block","src":"6589:37:4","statements":[{"expression":{"id":685,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":530,"src":"6606:13:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":684,"id":686,"nodeType":"Return","src":"6599:20:4"}]},"documentation":{"id":680,"nodeType":"StructuredDocumentation","src":"6423:105:4","text":" @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}."},"id":688,"implemented":true,"kind":"function","modifiers":[],"name":"_isInitializing","nameLocation":"6542:15:4","nodeType":"FunctionDefinition","parameters":{"id":681,"nodeType":"ParameterList","parameters":[],"src":"6557:2:4"},"returnParameters":{"id":684,"nodeType":"ParameterList","parameters":[{"constant":false,"id":683,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":688,"src":"6583:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":682,"name":"bool","nodeType":"ElementaryTypeName","src":"6583:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6582:6:4"},"scope":689,"src":"6533:93:4","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":690,"src":"2383:4245:4","usedErrors":[]}],"src":"113:6516:4"},"id":4},"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2590],"ERC1967UpgradeUpgradeable":[510],"IBeaconUpgradeable":[520],"IERC1822ProxiableUpgradeable":[141],"Initializable":[689],"StorageSlotUpgradeable":[2922],"UUPSUpgradeable":[825]},"id":826,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":691,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"115:23:5"},{"absolutePath":"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol","file":"../../interfaces/draft-IERC1822Upgradeable.sol","id":692,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":826,"sourceUnit":142,"src":"140:56:5","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol","file":"../ERC1967/ERC1967UpgradeUpgradeable.sol","id":693,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":826,"sourceUnit":511,"src":"197:50:5","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"./Initializable.sol","id":694,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":826,"sourceUnit":690,"src":"248:29:5","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":696,"name":"Initializable","nodeType":"IdentifierPath","referencedDeclaration":689,"src":"965:13:5"},"id":697,"nodeType":"InheritanceSpecifier","src":"965:13:5"},{"baseName":{"id":698,"name":"IERC1822ProxiableUpgradeable","nodeType":"IdentifierPath","referencedDeclaration":141,"src":"980:28:5"},"id":699,"nodeType":"InheritanceSpecifier","src":"980:28:5"},{"baseName":{"id":700,"name":"ERC1967UpgradeUpgradeable","nodeType":"IdentifierPath","referencedDeclaration":510,"src":"1010:25:5"},"id":701,"nodeType":"InheritanceSpecifier","src":"1010:25:5"}],"canonicalName":"UUPSUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":695,"nodeType":"StructuredDocumentation","src":"279:648:5","text":" @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n `UUPSUpgradeable` with a custom implementation of upgrades.\n The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n _Available since v4.1._"},"fullyImplemented":false,"id":825,"linearizedBaseContracts":[825,510,141,689],"name":"UUPSUpgradeable","nameLocation":"946:15:5","nodeType":"ContractDefinition","nodes":[{"body":{"id":706,"nodeType":"Block","src":"1102:7:5","statements":[]},"id":707,"implemented":true,"kind":"function","modifiers":[{"id":704,"kind":"modifierInvocation","modifierName":{"id":703,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":634,"src":"1085:16:5"},"nodeType":"ModifierInvocation","src":"1085:16:5"}],"name":"__UUPSUpgradeable_init","nameLocation":"1051:22:5","nodeType":"FunctionDefinition","parameters":{"id":702,"nodeType":"ParameterList","parameters":[],"src":"1073:2:5"},"returnParameters":{"id":705,"nodeType":"ParameterList","parameters":[],"src":"1102:0:5"},"scope":825,"src":"1042:67:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":712,"nodeType":"Block","src":"1185:7:5","statements":[]},"id":713,"implemented":true,"kind":"function","modifiers":[{"id":710,"kind":"modifierInvocation","modifierName":{"id":709,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":634,"src":"1168:16:5"},"nodeType":"ModifierInvocation","src":"1168:16:5"}],"name":"__UUPSUpgradeable_init_unchained","nameLocation":"1124:32:5","nodeType":"FunctionDefinition","parameters":{"id":708,"nodeType":"ParameterList","parameters":[],"src":"1156:2:5"},"returnParameters":{"id":711,"nodeType":"ParameterList","parameters":[],"src":"1185:0:5"},"scope":825,"src":"1115:77:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":false,"documentation":{"id":714,"nodeType":"StructuredDocumentation","src":"1197:87:5","text":"@custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment"},"id":720,"mutability":"immutable","name":"__self","nameLocation":"1315:6:5","nodeType":"VariableDeclaration","scope":825,"src":"1289:48:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":715,"name":"address","nodeType":"ElementaryTypeName","src":"1289:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":{"arguments":[{"id":718,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1332:4:5","typeDescriptions":{"typeIdentifier":"t_contract$_UUPSUpgradeable_$825","typeString":"contract UUPSUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_UUPSUpgradeable_$825","typeString":"contract UUPSUpgradeable"}],"id":717,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1324:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":716,"name":"address","nodeType":"ElementaryTypeName","src":"1324:7:5","typeDescriptions":{}}},"id":719,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1324:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"body":{"id":742,"nodeType":"Block","src":"1863:205:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":729,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":726,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1889:4:5","typeDescriptions":{"typeIdentifier":"t_contract$_UUPSUpgradeable_$825","typeString":"contract UUPSUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_UUPSUpgradeable_$825","typeString":"contract UUPSUpgradeable"}],"id":725,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1881:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":724,"name":"address","nodeType":"ElementaryTypeName","src":"1881:7:5","typeDescriptions":{}}},"id":727,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1881:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":728,"name":"__self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":720,"src":"1898:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1881:23:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682064656c656761746563616c6c","id":730,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1906:46:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb","typeString":"literal_string \"Function must be called through delegatecall\""},"value":"Function must be called through delegatecall"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb","typeString":"literal_string \"Function must be called through delegatecall\""}],"id":723,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1873:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":731,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1873:80:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":732,"nodeType":"ExpressionStatement","src":"1873:80:5"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":737,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":734,"name":"_getImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":188,"src":"1971:18:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":735,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1971:20:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":736,"name":"__self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":720,"src":"1995:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1971:30:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"46756e6374696f6e206d7573742062652063616c6c6564207468726f756768206163746976652070726f7879","id":738,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2003:46:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434","typeString":"literal_string \"Function must be called through active proxy\""},"value":"Function must be called through active proxy"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434","typeString":"literal_string \"Function must be called through active proxy\""}],"id":733,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1963:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":739,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1963:87:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":740,"nodeType":"ExpressionStatement","src":"1963:87:5"},{"id":741,"nodeType":"PlaceholderStatement","src":"2060:1:5"}]},"documentation":{"id":721,"nodeType":"StructuredDocumentation","src":"1344:493:5","text":" @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n fail."},"id":743,"name":"onlyProxy","nameLocation":"1851:9:5","nodeType":"ModifierDefinition","parameters":{"id":722,"nodeType":"ParameterList","parameters":[],"src":"1860:2:5"},"src":"1842:226:5","virtual":false,"visibility":"internal"},{"body":{"id":757,"nodeType":"Block","src":"2298:120:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":752,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":749,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2324:4:5","typeDescriptions":{"typeIdentifier":"t_contract$_UUPSUpgradeable_$825","typeString":"contract UUPSUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_UUPSUpgradeable_$825","typeString":"contract UUPSUpgradeable"}],"id":748,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2316:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":747,"name":"address","nodeType":"ElementaryTypeName","src":"2316:7:5","typeDescriptions":{}}},"id":750,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2316:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":751,"name":"__self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":720,"src":"2333:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2316:23:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"555550535570677261646561626c653a206d757374206e6f742062652063616c6c6564207468726f7567682064656c656761746563616c6c","id":753,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2341:58:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4","typeString":"literal_string \"UUPSUpgradeable: must not be called through delegatecall\""},"value":"UUPSUpgradeable: must not be called through delegatecall"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4","typeString":"literal_string \"UUPSUpgradeable: must not be called through delegatecall\""}],"id":746,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2308:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":754,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2308:92:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":755,"nodeType":"ExpressionStatement","src":"2308:92:5"},{"id":756,"nodeType":"PlaceholderStatement","src":"2410:1:5"}]},"documentation":{"id":744,"nodeType":"StructuredDocumentation","src":"2074:195:5","text":" @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n callable on the implementing contract but not through proxies."},"id":758,"name":"notDelegated","nameLocation":"2283:12:5","nodeType":"ModifierDefinition","parameters":{"id":745,"nodeType":"ParameterList","parameters":[],"src":"2295:2:5"},"src":"2274:144:5","virtual":false,"visibility":"internal"},{"baseFunctions":[140],"body":{"id":769,"nodeType":"Block","src":"3093:44:5","statements":[{"expression":{"id":767,"name":"_IMPLEMENTATION_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":170,"src":"3110:20:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":766,"id":768,"nodeType":"Return","src":"3103:27:5"}]},"documentation":{"id":759,"nodeType":"StructuredDocumentation","src":"2424:577:5","text":" @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."},"functionSelector":"52d1902d","id":770,"implemented":true,"kind":"function","modifiers":[{"id":763,"kind":"modifierInvocation","modifierName":{"id":762,"name":"notDelegated","nodeType":"IdentifierPath","referencedDeclaration":758,"src":"3062:12:5"},"nodeType":"ModifierInvocation","src":"3062:12:5"}],"name":"proxiableUUID","nameLocation":"3015:13:5","nodeType":"FunctionDefinition","overrides":{"id":761,"nodeType":"OverrideSpecifier","overrides":[],"src":"3053:8:5"},"parameters":{"id":760,"nodeType":"ParameterList","parameters":[],"src":"3028:2:5"},"returnParameters":{"id":766,"nodeType":"ParameterList","parameters":[{"constant":false,"id":765,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":770,"src":"3084:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":764,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3084:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3083:9:5"},"scope":825,"src":"3006:131:5","stateMutability":"view","virtual":true,"visibility":"external"},{"body":{"id":791,"nodeType":"Block","src":"3390:124:5","statements":[{"expression":{"arguments":[{"id":779,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":773,"src":"3418:17:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":778,"name":"_authorizeUpgrade","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":819,"src":"3400:17:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":780,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3400:36:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":781,"nodeType":"ExpressionStatement","src":"3400:36:5"},{"expression":{"arguments":[{"id":783,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":773,"src":"3468:17:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":786,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3497:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":785,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"3487:9:5","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":784,"name":"bytes","nodeType":"ElementaryTypeName","src":"3491:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":787,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3487:12:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"66616c7365","id":788,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3501:5:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":782,"name":"_upgradeToAndCallUUPS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":308,"src":"3446:21:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bool_$returns$__$","typeString":"function (address,bytes memory,bool)"}},"id":789,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3446:61:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":790,"nodeType":"ExpressionStatement","src":"3446:61:5"}]},"documentation":{"id":771,"nodeType":"StructuredDocumentation","src":"3143:169:5","text":" @dev Upgrade the implementation of the proxy to `newImplementation`.\n Calls {_authorizeUpgrade}.\n Emits an {Upgraded} event."},"functionSelector":"3659cfe6","id":792,"implemented":true,"kind":"function","modifiers":[{"id":776,"kind":"modifierInvocation","modifierName":{"id":775,"name":"onlyProxy","nodeType":"IdentifierPath","referencedDeclaration":743,"src":"3380:9:5"},"nodeType":"ModifierInvocation","src":"3380:9:5"}],"name":"upgradeTo","nameLocation":"3326:9:5","nodeType":"FunctionDefinition","parameters":{"id":774,"nodeType":"ParameterList","parameters":[{"constant":false,"id":773,"mutability":"mutable","name":"newImplementation","nameLocation":"3344:17:5","nodeType":"VariableDeclaration","scope":792,"src":"3336:25:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":772,"name":"address","nodeType":"ElementaryTypeName","src":"3336:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3335:27:5"},"returnParameters":{"id":777,"nodeType":"ParameterList","parameters":[],"src":"3390:0:5"},"scope":825,"src":"3317:197:5","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"body":{"id":812,"nodeType":"Block","src":"3870:115:5","statements":[{"expression":{"arguments":[{"id":803,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":795,"src":"3898:17:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":802,"name":"_authorizeUpgrade","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":819,"src":"3880:17:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":804,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3880:36:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":805,"nodeType":"ExpressionStatement","src":"3880:36:5"},{"expression":{"arguments":[{"id":807,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":795,"src":"3948:17:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":808,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":797,"src":"3967:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"74727565","id":809,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3973:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":806,"name":"_upgradeToAndCallUUPS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":308,"src":"3926:21:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bool_$returns$__$","typeString":"function (address,bytes memory,bool)"}},"id":810,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3926:52:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":811,"nodeType":"ExpressionStatement","src":"3926:52:5"}]},"documentation":{"id":793,"nodeType":"StructuredDocumentation","src":"3520:238:5","text":" @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n encoded in `data`.\n Calls {_authorizeUpgrade}.\n Emits an {Upgraded} event."},"functionSelector":"4f1ef286","id":813,"implemented":true,"kind":"function","modifiers":[{"id":800,"kind":"modifierInvocation","modifierName":{"id":799,"name":"onlyProxy","nodeType":"IdentifierPath","referencedDeclaration":743,"src":"3860:9:5"},"nodeType":"ModifierInvocation","src":"3860:9:5"}],"name":"upgradeToAndCall","nameLocation":"3772:16:5","nodeType":"FunctionDefinition","parameters":{"id":798,"nodeType":"ParameterList","parameters":[{"constant":false,"id":795,"mutability":"mutable","name":"newImplementation","nameLocation":"3797:17:5","nodeType":"VariableDeclaration","scope":813,"src":"3789:25:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":794,"name":"address","nodeType":"ElementaryTypeName","src":"3789:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":797,"mutability":"mutable","name":"data","nameLocation":"3829:4:5","nodeType":"VariableDeclaration","scope":813,"src":"3816:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":796,"name":"bytes","nodeType":"ElementaryTypeName","src":"3816:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3788:46:5"},"returnParameters":{"id":801,"nodeType":"ParameterList","parameters":[],"src":"3870:0:5"},"scope":825,"src":"3763:222:5","stateMutability":"payable","virtual":true,"visibility":"external"},{"documentation":{"id":814,"nodeType":"StructuredDocumentation","src":"3991:397:5","text":" @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n {upgradeTo} and {upgradeToAndCall}.\n Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n ```solidity\n function _authorizeUpgrade(address) internal override onlyOwner {}\n ```"},"id":819,"implemented":false,"kind":"function","modifiers":[],"name":"_authorizeUpgrade","nameLocation":"4402:17:5","nodeType":"FunctionDefinition","parameters":{"id":817,"nodeType":"ParameterList","parameters":[{"constant":false,"id":816,"mutability":"mutable","name":"newImplementation","nameLocation":"4428:17:5","nodeType":"VariableDeclaration","scope":819,"src":"4420:25:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":815,"name":"address","nodeType":"ElementaryTypeName","src":"4420:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4419:27:5"},"returnParameters":{"id":818,"nodeType":"ParameterList","parameters":[],"src":"4463:0:5"},"scope":825,"src":"4393:71:5","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":820,"nodeType":"StructuredDocumentation","src":"4470:254:5","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":824,"mutability":"mutable","name":"__gap","nameLocation":"4749:5:5","nodeType":"VariableDeclaration","scope":825,"src":"4729:25:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":821,"name":"uint256","nodeType":"ElementaryTypeName","src":"4729:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":823,"length":{"hexValue":"3530","id":822,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4737:2:5","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"4729:11:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":826,"src":"928:3829:5","usedErrors":[]}],"src":"115:4643:5"},"id":5},"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2590],"ContextUpgradeable":[2788],"Initializable":[689],"PausableUpgradeable":[952]},"id":953,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":827,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"105:23:6"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","file":"../utils/ContextUpgradeable.sol","id":828,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":953,"sourceUnit":2789,"src":"130:41:6","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":829,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":953,"sourceUnit":690,"src":"172:42:6","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":831,"name":"Initializable","nodeType":"IdentifierPath","referencedDeclaration":689,"src":"697:13:6"},"id":832,"nodeType":"InheritanceSpecifier","src":"697:13:6"},{"baseName":{"id":833,"name":"ContextUpgradeable","nodeType":"IdentifierPath","referencedDeclaration":2788,"src":"712:18:6"},"id":834,"nodeType":"InheritanceSpecifier","src":"712:18:6"}],"canonicalName":"PausableUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":830,"nodeType":"StructuredDocumentation","src":"216:439:6","text":" @dev Contract module which allows children to implement an emergency stop\n mechanism that can be triggered by an authorized account.\n This module is used through inheritance. It will make available the\n modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n the functions of your contract. Note that they will not be pausable by\n simply including this module, only once the modifiers are put in place."},"fullyImplemented":true,"id":952,"linearizedBaseContracts":[952,2788,689],"name":"PausableUpgradeable","nameLocation":"674:19:6","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":835,"nodeType":"StructuredDocumentation","src":"737:73:6","text":" @dev Emitted when the pause is triggered by `account`."},"id":839,"name":"Paused","nameLocation":"821:6:6","nodeType":"EventDefinition","parameters":{"id":838,"nodeType":"ParameterList","parameters":[{"constant":false,"id":837,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"836:7:6","nodeType":"VariableDeclaration","scope":839,"src":"828:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":836,"name":"address","nodeType":"ElementaryTypeName","src":"828:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"827:17:6"},"src":"815:30:6"},{"anonymous":false,"documentation":{"id":840,"nodeType":"StructuredDocumentation","src":"851:70:6","text":" @dev Emitted when the pause is lifted by `account`."},"id":844,"name":"Unpaused","nameLocation":"932:8:6","nodeType":"EventDefinition","parameters":{"id":843,"nodeType":"ParameterList","parameters":[{"constant":false,"id":842,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"949:7:6","nodeType":"VariableDeclaration","scope":844,"src":"941:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":841,"name":"address","nodeType":"ElementaryTypeName","src":"941:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"940:17:6"},"src":"926:32:6"},{"constant":false,"id":846,"mutability":"mutable","name":"_paused","nameLocation":"977:7:6","nodeType":"VariableDeclaration","scope":952,"src":"964:20:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":845,"name":"bool","nodeType":"ElementaryTypeName","src":"964:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"private"},{"body":{"id":855,"nodeType":"Block","src":"1116:44:6","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":852,"name":"__Pausable_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":866,"src":"1126:25:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":853,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1126:27:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":854,"nodeType":"ExpressionStatement","src":"1126:27:6"}]},"documentation":{"id":847,"nodeType":"StructuredDocumentation","src":"991:67:6","text":" @dev Initializes the contract in unpaused state."},"id":856,"implemented":true,"kind":"function","modifiers":[{"id":850,"kind":"modifierInvocation","modifierName":{"id":849,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":634,"src":"1099:16:6"},"nodeType":"ModifierInvocation","src":"1099:16:6"}],"name":"__Pausable_init","nameLocation":"1072:15:6","nodeType":"FunctionDefinition","parameters":{"id":848,"nodeType":"ParameterList","parameters":[],"src":"1087:2:6"},"returnParameters":{"id":851,"nodeType":"ParameterList","parameters":[],"src":"1116:0:6"},"scope":952,"src":"1063:97:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":865,"nodeType":"Block","src":"1229:32:6","statements":[{"expression":{"id":863,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":861,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":846,"src":"1239:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":862,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1249:5:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"1239:15:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":864,"nodeType":"ExpressionStatement","src":"1239:15:6"}]},"id":866,"implemented":true,"kind":"function","modifiers":[{"id":859,"kind":"modifierInvocation","modifierName":{"id":858,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":634,"src":"1212:16:6"},"nodeType":"ModifierInvocation","src":"1212:16:6"}],"name":"__Pausable_init_unchained","nameLocation":"1175:25:6","nodeType":"FunctionDefinition","parameters":{"id":857,"nodeType":"ParameterList","parameters":[],"src":"1200:2:6"},"returnParameters":{"id":860,"nodeType":"ParameterList","parameters":[],"src":"1229:0:6"},"scope":952,"src":"1166:95:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":873,"nodeType":"Block","src":"1472:47:6","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":869,"name":"_requireNotPaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":903,"src":"1482:17:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":870,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1482:19:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":871,"nodeType":"ExpressionStatement","src":"1482:19:6"},{"id":872,"nodeType":"PlaceholderStatement","src":"1511:1:6"}]},"documentation":{"id":867,"nodeType":"StructuredDocumentation","src":"1267:175:6","text":" @dev Modifier to make a function callable only when the contract is not paused.\n Requirements:\n - The contract must not be paused."},"id":874,"name":"whenNotPaused","nameLocation":"1456:13:6","nodeType":"ModifierDefinition","parameters":{"id":868,"nodeType":"ParameterList","parameters":[],"src":"1469:2:6"},"src":"1447:72:6","virtual":false,"visibility":"internal"},{"body":{"id":881,"nodeType":"Block","src":"1719:44:6","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":877,"name":"_requirePaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":914,"src":"1729:14:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":878,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1729:16:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":879,"nodeType":"ExpressionStatement","src":"1729:16:6"},{"id":880,"nodeType":"PlaceholderStatement","src":"1755:1:6"}]},"documentation":{"id":875,"nodeType":"StructuredDocumentation","src":"1525:167:6","text":" @dev Modifier to make a function callable only when the contract is paused.\n Requirements:\n - The contract must be paused."},"id":882,"name":"whenPaused","nameLocation":"1706:10:6","nodeType":"ModifierDefinition","parameters":{"id":876,"nodeType":"ParameterList","parameters":[],"src":"1716:2:6"},"src":"1697:66:6","virtual":false,"visibility":"internal"},{"body":{"id":890,"nodeType":"Block","src":"1911:31:6","statements":[{"expression":{"id":888,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":846,"src":"1928:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":887,"id":889,"nodeType":"Return","src":"1921:14:6"}]},"documentation":{"id":883,"nodeType":"StructuredDocumentation","src":"1769:84:6","text":" @dev Returns true if the contract is paused, and false otherwise."},"functionSelector":"5c975abb","id":891,"implemented":true,"kind":"function","modifiers":[],"name":"paused","nameLocation":"1867:6:6","nodeType":"FunctionDefinition","parameters":{"id":884,"nodeType":"ParameterList","parameters":[],"src":"1873:2:6"},"returnParameters":{"id":887,"nodeType":"ParameterList","parameters":[{"constant":false,"id":886,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":891,"src":"1905:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":885,"name":"bool","nodeType":"ElementaryTypeName","src":"1905:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1904:6:6"},"scope":952,"src":"1858:84:6","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":902,"nodeType":"Block","src":"2061:55:6","statements":[{"expression":{"arguments":[{"id":898,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2079:9:6","subExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":896,"name":"paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":891,"src":"2080:6:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bool_$","typeString":"function () view returns (bool)"}},"id":897,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2080:8:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5061757361626c653a20706175736564","id":899,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2090:18:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a","typeString":"literal_string \"Pausable: paused\""},"value":"Pausable: paused"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a","typeString":"literal_string \"Pausable: paused\""}],"id":895,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2071:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":900,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2071:38:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":901,"nodeType":"ExpressionStatement","src":"2071:38:6"}]},"documentation":{"id":892,"nodeType":"StructuredDocumentation","src":"1948:57:6","text":" @dev Throws if the contract is paused."},"id":903,"implemented":true,"kind":"function","modifiers":[],"name":"_requireNotPaused","nameLocation":"2019:17:6","nodeType":"FunctionDefinition","parameters":{"id":893,"nodeType":"ParameterList","parameters":[],"src":"2036:2:6"},"returnParameters":{"id":894,"nodeType":"ParameterList","parameters":[],"src":"2061:0:6"},"scope":952,"src":"2010:106:6","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":913,"nodeType":"Block","src":"2236:58:6","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":908,"name":"paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":891,"src":"2254:6:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bool_$","typeString":"function () view returns (bool)"}},"id":909,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2254:8:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5061757361626c653a206e6f7420706175736564","id":910,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2264:22:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a","typeString":"literal_string \"Pausable: not paused\""},"value":"Pausable: not paused"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a","typeString":"literal_string \"Pausable: not paused\""}],"id":907,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2246:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":911,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2246:41:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":912,"nodeType":"ExpressionStatement","src":"2246:41:6"}]},"documentation":{"id":904,"nodeType":"StructuredDocumentation","src":"2122:61:6","text":" @dev Throws if the contract is not paused."},"id":914,"implemented":true,"kind":"function","modifiers":[],"name":"_requirePaused","nameLocation":"2197:14:6","nodeType":"FunctionDefinition","parameters":{"id":905,"nodeType":"ParameterList","parameters":[],"src":"2211:2:6"},"returnParameters":{"id":906,"nodeType":"ParameterList","parameters":[],"src":"2236:0:6"},"scope":952,"src":"2188:106:6","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":929,"nodeType":"Block","src":"2478:66:6","statements":[{"expression":{"id":922,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":920,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":846,"src":"2488:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":921,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2498:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"2488:14:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":923,"nodeType":"ExpressionStatement","src":"2488:14:6"},{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":925,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2773,"src":"2524:10:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":926,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2524:12:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":924,"name":"Paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":839,"src":"2517:6:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":927,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2517:20:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":928,"nodeType":"EmitStatement","src":"2512:25:6"}]},"documentation":{"id":915,"nodeType":"StructuredDocumentation","src":"2300:124:6","text":" @dev Triggers stopped state.\n Requirements:\n - The contract must not be paused."},"id":930,"implemented":true,"kind":"function","modifiers":[{"id":918,"kind":"modifierInvocation","modifierName":{"id":917,"name":"whenNotPaused","nodeType":"IdentifierPath","referencedDeclaration":874,"src":"2464:13:6"},"nodeType":"ModifierInvocation","src":"2464:13:6"}],"name":"_pause","nameLocation":"2438:6:6","nodeType":"FunctionDefinition","parameters":{"id":916,"nodeType":"ParameterList","parameters":[],"src":"2444:2:6"},"returnParameters":{"id":919,"nodeType":"ParameterList","parameters":[],"src":"2478:0:6"},"scope":952,"src":"2429:115:6","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":945,"nodeType":"Block","src":"2724:69:6","statements":[{"expression":{"id":938,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":936,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":846,"src":"2734:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":937,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2744:5:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"2734:15:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":939,"nodeType":"ExpressionStatement","src":"2734:15:6"},{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":941,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2773,"src":"2773:10:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":942,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2773:12:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":940,"name":"Unpaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":844,"src":"2764:8:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":943,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2764:22:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":944,"nodeType":"EmitStatement","src":"2759:27:6"}]},"documentation":{"id":931,"nodeType":"StructuredDocumentation","src":"2550:121:6","text":" @dev Returns to normal state.\n Requirements:\n - The contract must be paused."},"id":946,"implemented":true,"kind":"function","modifiers":[{"id":934,"kind":"modifierInvocation","modifierName":{"id":933,"name":"whenPaused","nodeType":"IdentifierPath","referencedDeclaration":882,"src":"2713:10:6"},"nodeType":"ModifierInvocation","src":"2713:10:6"}],"name":"_unpause","nameLocation":"2685:8:6","nodeType":"FunctionDefinition","parameters":{"id":932,"nodeType":"ParameterList","parameters":[],"src":"2693:2:6"},"returnParameters":{"id":935,"nodeType":"ParameterList","parameters":[],"src":"2724:0:6"},"scope":952,"src":"2676:117:6","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":947,"nodeType":"StructuredDocumentation","src":"2799:254:6","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":951,"mutability":"mutable","name":"__gap","nameLocation":"3078:5:6","nodeType":"VariableDeclaration","scope":952,"src":"3058:25:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage","typeString":"uint256[49]"},"typeName":{"baseType":{"id":948,"name":"uint256","nodeType":"ElementaryTypeName","src":"3058:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":950,"length":{"hexValue":"3439","id":949,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3066:2:6","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"nodeType":"ArrayTypeName","src":"3058:11:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage_ptr","typeString":"uint256[49]"}},"visibility":"private"}],"scope":953,"src":"656:2430:6","usedErrors":[]}],"src":"105:2982:6"},"id":6},"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2590],"ContextUpgradeable":[2788],"ERC20Upgradeable":[1564],"IERC20MetadataUpgradeable":[2079],"IERC20Upgradeable":[1642],"Initializable":[689]},"id":1565,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":954,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"105:23:7"},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol","file":"./IERC20Upgradeable.sol","id":955,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1565,"sourceUnit":1643,"src":"130:33:7","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol","file":"./extensions/IERC20MetadataUpgradeable.sol","id":956,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1565,"sourceUnit":2080,"src":"164:52:7","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","file":"../../utils/ContextUpgradeable.sol","id":957,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1565,"sourceUnit":2789,"src":"217:44:7","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../../proxy/utils/Initializable.sol","id":958,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1565,"sourceUnit":690,"src":"262:45:7","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":960,"name":"Initializable","nodeType":"IdentifierPath","referencedDeclaration":689,"src":"1509:13:7"},"id":961,"nodeType":"InheritanceSpecifier","src":"1509:13:7"},{"baseName":{"id":962,"name":"ContextUpgradeable","nodeType":"IdentifierPath","referencedDeclaration":2788,"src":"1524:18:7"},"id":963,"nodeType":"InheritanceSpecifier","src":"1524:18:7"},{"baseName":{"id":964,"name":"IERC20Upgradeable","nodeType":"IdentifierPath","referencedDeclaration":1642,"src":"1544:17:7"},"id":965,"nodeType":"InheritanceSpecifier","src":"1544:17:7"},{"baseName":{"id":966,"name":"IERC20MetadataUpgradeable","nodeType":"IdentifierPath","referencedDeclaration":2079,"src":"1563:25:7"},"id":967,"nodeType":"InheritanceSpecifier","src":"1563:25:7"}],"canonicalName":"ERC20Upgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":959,"nodeType":"StructuredDocumentation","src":"309:1170:7","text":" @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n For a generic mechanism see {ERC20PresetMinterPauser}.\n TIP: For a detailed writeup see our guide\n https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC20\n applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification.\n Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n functions have been added to mitigate the well-known issues around setting\n allowances. See {IERC20-approve}."},"fullyImplemented":true,"id":1564,"linearizedBaseContracts":[1564,2079,1642,2788,689],"name":"ERC20Upgradeable","nameLocation":"1489:16:7","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":971,"mutability":"mutable","name":"_balances","nameLocation":"1631:9:7","nodeType":"VariableDeclaration","scope":1564,"src":"1595:45:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":970,"keyType":{"id":968,"name":"address","nodeType":"ElementaryTypeName","src":"1603:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1595:27:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":969,"name":"uint256","nodeType":"ElementaryTypeName","src":"1614:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":977,"mutability":"mutable","name":"_allowances","nameLocation":"1703:11:7","nodeType":"VariableDeclaration","scope":1564,"src":"1647:67:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"typeName":{"id":976,"keyType":{"id":972,"name":"address","nodeType":"ElementaryTypeName","src":"1655:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1647:47:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"valueType":{"id":975,"keyType":{"id":973,"name":"address","nodeType":"ElementaryTypeName","src":"1674:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1666:27:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":974,"name":"uint256","nodeType":"ElementaryTypeName","src":"1685:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"private"},{"constant":false,"id":979,"mutability":"mutable","name":"_totalSupply","nameLocation":"1737:12:7","nodeType":"VariableDeclaration","scope":1564,"src":"1721:28:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":978,"name":"uint256","nodeType":"ElementaryTypeName","src":"1721:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":981,"mutability":"mutable","name":"_name","nameLocation":"1771:5:7","nodeType":"VariableDeclaration","scope":1564,"src":"1756:20:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":980,"name":"string","nodeType":"ElementaryTypeName","src":"1756:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":983,"mutability":"mutable","name":"_symbol","nameLocation":"1797:7:7","nodeType":"VariableDeclaration","scope":1564,"src":"1782:22:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":982,"name":"string","nodeType":"ElementaryTypeName","src":"1782:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"body":{"id":998,"nodeType":"Block","src":"2206:55:7","statements":[{"expression":{"arguments":[{"id":994,"name":"name_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":986,"src":"2239:5:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":995,"name":"symbol_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":988,"src":"2246:7:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":993,"name":"__ERC20_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1017,"src":"2216:22:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory,string memory)"}},"id":996,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2216:38:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":997,"nodeType":"ExpressionStatement","src":"2216:38:7"}]},"documentation":{"id":984,"nodeType":"StructuredDocumentation","src":"1811:298:7","text":" @dev Sets the values for {name} and {symbol}.\n The default value of {decimals} is 18. To select a different value for\n {decimals} you should overload it.\n All two of these values are immutable: they can only be set once during\n construction."},"id":999,"implemented":true,"kind":"function","modifiers":[{"id":991,"kind":"modifierInvocation","modifierName":{"id":990,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":634,"src":"2189:16:7"},"nodeType":"ModifierInvocation","src":"2189:16:7"}],"name":"__ERC20_init","nameLocation":"2123:12:7","nodeType":"FunctionDefinition","parameters":{"id":989,"nodeType":"ParameterList","parameters":[{"constant":false,"id":986,"mutability":"mutable","name":"name_","nameLocation":"2150:5:7","nodeType":"VariableDeclaration","scope":999,"src":"2136:19:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":985,"name":"string","nodeType":"ElementaryTypeName","src":"2136:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":988,"mutability":"mutable","name":"symbol_","nameLocation":"2171:7:7","nodeType":"VariableDeclaration","scope":999,"src":"2157:21:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":987,"name":"string","nodeType":"ElementaryTypeName","src":"2157:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2135:44:7"},"returnParameters":{"id":992,"nodeType":"ParameterList","parameters":[],"src":"2206:0:7"},"scope":1564,"src":"2114:147:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1016,"nodeType":"Block","src":"2369:57:7","statements":[{"expression":{"id":1010,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1008,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":981,"src":"2379:5:7","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1009,"name":"name_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1001,"src":"2387:5:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"2379:13:7","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":1011,"nodeType":"ExpressionStatement","src":"2379:13:7"},{"expression":{"id":1014,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1012,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":983,"src":"2402:7:7","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1013,"name":"symbol_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1003,"src":"2412:7:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"2402:17:7","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":1015,"nodeType":"ExpressionStatement","src":"2402:17:7"}]},"id":1017,"implemented":true,"kind":"function","modifiers":[{"id":1006,"kind":"modifierInvocation","modifierName":{"id":1005,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":634,"src":"2352:16:7"},"nodeType":"ModifierInvocation","src":"2352:16:7"}],"name":"__ERC20_init_unchained","nameLocation":"2276:22:7","nodeType":"FunctionDefinition","parameters":{"id":1004,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1001,"mutability":"mutable","name":"name_","nameLocation":"2313:5:7","nodeType":"VariableDeclaration","scope":1017,"src":"2299:19:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1000,"name":"string","nodeType":"ElementaryTypeName","src":"2299:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1003,"mutability":"mutable","name":"symbol_","nameLocation":"2334:7:7","nodeType":"VariableDeclaration","scope":1017,"src":"2320:21:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1002,"name":"string","nodeType":"ElementaryTypeName","src":"2320:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2298:44:7"},"returnParameters":{"id":1007,"nodeType":"ParameterList","parameters":[],"src":"2369:0:7"},"scope":1564,"src":"2267:159:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[2066],"body":{"id":1026,"nodeType":"Block","src":"2560:29:7","statements":[{"expression":{"id":1024,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":981,"src":"2577:5:7","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":1023,"id":1025,"nodeType":"Return","src":"2570:12:7"}]},"documentation":{"id":1018,"nodeType":"StructuredDocumentation","src":"2432:54:7","text":" @dev Returns the name of the token."},"functionSelector":"06fdde03","id":1027,"implemented":true,"kind":"function","modifiers":[],"name":"name","nameLocation":"2500:4:7","nodeType":"FunctionDefinition","overrides":{"id":1020,"nodeType":"OverrideSpecifier","overrides":[],"src":"2527:8:7"},"parameters":{"id":1019,"nodeType":"ParameterList","parameters":[],"src":"2504:2:7"},"returnParameters":{"id":1023,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1022,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1027,"src":"2545:13:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1021,"name":"string","nodeType":"ElementaryTypeName","src":"2545:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2544:15:7"},"scope":1564,"src":"2491:98:7","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2072],"body":{"id":1036,"nodeType":"Block","src":"2773:31:7","statements":[{"expression":{"id":1034,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":983,"src":"2790:7:7","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":1033,"id":1035,"nodeType":"Return","src":"2783:14:7"}]},"documentation":{"id":1028,"nodeType":"StructuredDocumentation","src":"2595:102:7","text":" @dev Returns the symbol of the token, usually a shorter version of the\n name."},"functionSelector":"95d89b41","id":1037,"implemented":true,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"2711:6:7","nodeType":"FunctionDefinition","overrides":{"id":1030,"nodeType":"OverrideSpecifier","overrides":[],"src":"2740:8:7"},"parameters":{"id":1029,"nodeType":"ParameterList","parameters":[],"src":"2717:2:7"},"returnParameters":{"id":1033,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1032,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1037,"src":"2758:13:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1031,"name":"string","nodeType":"ElementaryTypeName","src":"2758:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2757:15:7"},"scope":1564,"src":"2702:102:7","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2078],"body":{"id":1046,"nodeType":"Block","src":"3493:26:7","statements":[{"expression":{"hexValue":"3138","id":1044,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3510:2:7","typeDescriptions":{"typeIdentifier":"t_rational_18_by_1","typeString":"int_const 18"},"value":"18"},"functionReturnParameters":1043,"id":1045,"nodeType":"Return","src":"3503:9:7"}]},"documentation":{"id":1038,"nodeType":"StructuredDocumentation","src":"2810:613:7","text":" @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the value {ERC20} uses, unless this function is\n overridden;\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."},"functionSelector":"313ce567","id":1047,"implemented":true,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"3437:8:7","nodeType":"FunctionDefinition","overrides":{"id":1040,"nodeType":"OverrideSpecifier","overrides":[],"src":"3468:8:7"},"parameters":{"id":1039,"nodeType":"ParameterList","parameters":[],"src":"3445:2:7"},"returnParameters":{"id":1043,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1042,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1047,"src":"3486:5:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1041,"name":"uint8","nodeType":"ElementaryTypeName","src":"3486:5:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"3485:7:7"},"scope":1564,"src":"3428:91:7","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1591],"body":{"id":1056,"nodeType":"Block","src":"3649:36:7","statements":[{"expression":{"id":1054,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":979,"src":"3666:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1053,"id":1055,"nodeType":"Return","src":"3659:19:7"}]},"documentation":{"id":1048,"nodeType":"StructuredDocumentation","src":"3525:49:7","text":" @dev See {IERC20-totalSupply}."},"functionSelector":"18160ddd","id":1057,"implemented":true,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"3588:11:7","nodeType":"FunctionDefinition","overrides":{"id":1050,"nodeType":"OverrideSpecifier","overrides":[],"src":"3622:8:7"},"parameters":{"id":1049,"nodeType":"ParameterList","parameters":[],"src":"3599:2:7"},"returnParameters":{"id":1053,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1052,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1057,"src":"3640:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1051,"name":"uint256","nodeType":"ElementaryTypeName","src":"3640:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3639:9:7"},"scope":1564,"src":"3579:106:7","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1599],"body":{"id":1070,"nodeType":"Block","src":"3826:42:7","statements":[{"expression":{"baseExpression":{"id":1066,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":971,"src":"3843:9:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1068,"indexExpression":{"id":1067,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1060,"src":"3853:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3843:18:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1065,"id":1069,"nodeType":"Return","src":"3836:25:7"}]},"documentation":{"id":1058,"nodeType":"StructuredDocumentation","src":"3691:47:7","text":" @dev See {IERC20-balanceOf}."},"functionSelector":"70a08231","id":1071,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"3752:9:7","nodeType":"FunctionDefinition","overrides":{"id":1062,"nodeType":"OverrideSpecifier","overrides":[],"src":"3799:8:7"},"parameters":{"id":1061,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1060,"mutability":"mutable","name":"account","nameLocation":"3770:7:7","nodeType":"VariableDeclaration","scope":1071,"src":"3762:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1059,"name":"address","nodeType":"ElementaryTypeName","src":"3762:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3761:17:7"},"returnParameters":{"id":1065,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1064,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1071,"src":"3817:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1063,"name":"uint256","nodeType":"ElementaryTypeName","src":"3817:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3816:9:7"},"scope":1564,"src":"3743:125:7","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1609],"body":{"id":1095,"nodeType":"Block","src":"4149:104:7","statements":[{"assignments":[1083],"declarations":[{"constant":false,"id":1083,"mutability":"mutable","name":"owner","nameLocation":"4167:5:7","nodeType":"VariableDeclaration","scope":1095,"src":"4159:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1082,"name":"address","nodeType":"ElementaryTypeName","src":"4159:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1086,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1084,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2773,"src":"4175:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1085,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4175:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4159:28:7"},{"expression":{"arguments":[{"id":1088,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1083,"src":"4207:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1089,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1074,"src":"4214:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1090,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1076,"src":"4218:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1087,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1319,"src":"4197:9:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1091,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4197:28:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1092,"nodeType":"ExpressionStatement","src":"4197:28:7"},{"expression":{"hexValue":"74727565","id":1093,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4242:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":1081,"id":1094,"nodeType":"Return","src":"4235:11:7"}]},"documentation":{"id":1072,"nodeType":"StructuredDocumentation","src":"3874:185:7","text":" @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `amount`."},"functionSelector":"a9059cbb","id":1096,"implemented":true,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"4073:8:7","nodeType":"FunctionDefinition","overrides":{"id":1078,"nodeType":"OverrideSpecifier","overrides":[],"src":"4125:8:7"},"parameters":{"id":1077,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1074,"mutability":"mutable","name":"to","nameLocation":"4090:2:7","nodeType":"VariableDeclaration","scope":1096,"src":"4082:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1073,"name":"address","nodeType":"ElementaryTypeName","src":"4082:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1076,"mutability":"mutable","name":"amount","nameLocation":"4102:6:7","nodeType":"VariableDeclaration","scope":1096,"src":"4094:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1075,"name":"uint256","nodeType":"ElementaryTypeName","src":"4094:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4081:28:7"},"returnParameters":{"id":1081,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1080,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1096,"src":"4143:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1079,"name":"bool","nodeType":"ElementaryTypeName","src":"4143:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4142:6:7"},"scope":1564,"src":"4064:189:7","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1619],"body":{"id":1113,"nodeType":"Block","src":"4409:51:7","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":1107,"name":"_allowances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":977,"src":"4426:11:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":1109,"indexExpression":{"id":1108,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1099,"src":"4438:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4426:18:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1111,"indexExpression":{"id":1110,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1101,"src":"4445:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4426:27:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1106,"id":1112,"nodeType":"Return","src":"4419:34:7"}]},"documentation":{"id":1097,"nodeType":"StructuredDocumentation","src":"4259:47:7","text":" @dev See {IERC20-allowance}."},"functionSelector":"dd62ed3e","id":1114,"implemented":true,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"4320:9:7","nodeType":"FunctionDefinition","overrides":{"id":1103,"nodeType":"OverrideSpecifier","overrides":[],"src":"4382:8:7"},"parameters":{"id":1102,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1099,"mutability":"mutable","name":"owner","nameLocation":"4338:5:7","nodeType":"VariableDeclaration","scope":1114,"src":"4330:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1098,"name":"address","nodeType":"ElementaryTypeName","src":"4330:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1101,"mutability":"mutable","name":"spender","nameLocation":"4353:7:7","nodeType":"VariableDeclaration","scope":1114,"src":"4345:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1100,"name":"address","nodeType":"ElementaryTypeName","src":"4345:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4329:32:7"},"returnParameters":{"id":1106,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1105,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1114,"src":"4400:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1104,"name":"uint256","nodeType":"ElementaryTypeName","src":"4400:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4399:9:7"},"scope":1564,"src":"4311:149:7","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1629],"body":{"id":1138,"nodeType":"Block","src":"4857:108:7","statements":[{"assignments":[1126],"declarations":[{"constant":false,"id":1126,"mutability":"mutable","name":"owner","nameLocation":"4875:5:7","nodeType":"VariableDeclaration","scope":1138,"src":"4867:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1125,"name":"address","nodeType":"ElementaryTypeName","src":"4867:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1129,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1127,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2773,"src":"4883:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1128,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4883:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4867:28:7"},{"expression":{"arguments":[{"id":1131,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1126,"src":"4914:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1132,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1117,"src":"4921:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1133,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1119,"src":"4930:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1130,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1493,"src":"4905:8:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1134,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4905:32:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1135,"nodeType":"ExpressionStatement","src":"4905:32:7"},{"expression":{"hexValue":"74727565","id":1136,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4954:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":1124,"id":1137,"nodeType":"Return","src":"4947:11:7"}]},"documentation":{"id":1115,"nodeType":"StructuredDocumentation","src":"4466:297:7","text":" @dev See {IERC20-approve}.\n NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."},"functionSelector":"095ea7b3","id":1139,"implemented":true,"kind":"function","modifiers":[],"name":"approve","nameLocation":"4777:7:7","nodeType":"FunctionDefinition","overrides":{"id":1121,"nodeType":"OverrideSpecifier","overrides":[],"src":"4833:8:7"},"parameters":{"id":1120,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1117,"mutability":"mutable","name":"spender","nameLocation":"4793:7:7","nodeType":"VariableDeclaration","scope":1139,"src":"4785:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1116,"name":"address","nodeType":"ElementaryTypeName","src":"4785:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1119,"mutability":"mutable","name":"amount","nameLocation":"4810:6:7","nodeType":"VariableDeclaration","scope":1139,"src":"4802:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1118,"name":"uint256","nodeType":"ElementaryTypeName","src":"4802:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4784:33:7"},"returnParameters":{"id":1124,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1123,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1139,"src":"4851:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1122,"name":"bool","nodeType":"ElementaryTypeName","src":"4851:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4850:6:7"},"scope":1564,"src":"4768:197:7","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1641],"body":{"id":1171,"nodeType":"Block","src":"5660:153:7","statements":[{"assignments":[1153],"declarations":[{"constant":false,"id":1153,"mutability":"mutable","name":"spender","nameLocation":"5678:7:7","nodeType":"VariableDeclaration","scope":1171,"src":"5670:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1152,"name":"address","nodeType":"ElementaryTypeName","src":"5670:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1156,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1154,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2773,"src":"5688:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1155,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5688:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"5670:30:7"},{"expression":{"arguments":[{"id":1158,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1142,"src":"5726:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1159,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1153,"src":"5732:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1160,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1146,"src":"5741:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1157,"name":"_spendAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1536,"src":"5710:15:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1161,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5710:38:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1162,"nodeType":"ExpressionStatement","src":"5710:38:7"},{"expression":{"arguments":[{"id":1164,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1142,"src":"5768:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1165,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1144,"src":"5774:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1166,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1146,"src":"5778:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1163,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1319,"src":"5758:9:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1167,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5758:27:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1168,"nodeType":"ExpressionStatement","src":"5758:27:7"},{"expression":{"hexValue":"74727565","id":1169,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5802:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":1151,"id":1170,"nodeType":"Return","src":"5795:11:7"}]},"documentation":{"id":1140,"nodeType":"StructuredDocumentation","src":"4971:551:7","text":" @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`.\n - the caller must have allowance for ``from``'s tokens of at least\n `amount`."},"functionSelector":"23b872dd","id":1172,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"5536:12:7","nodeType":"FunctionDefinition","overrides":{"id":1148,"nodeType":"OverrideSpecifier","overrides":[],"src":"5636:8:7"},"parameters":{"id":1147,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1142,"mutability":"mutable","name":"from","nameLocation":"5566:4:7","nodeType":"VariableDeclaration","scope":1172,"src":"5558:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1141,"name":"address","nodeType":"ElementaryTypeName","src":"5558:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1144,"mutability":"mutable","name":"to","nameLocation":"5588:2:7","nodeType":"VariableDeclaration","scope":1172,"src":"5580:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1143,"name":"address","nodeType":"ElementaryTypeName","src":"5580:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1146,"mutability":"mutable","name":"amount","nameLocation":"5608:6:7","nodeType":"VariableDeclaration","scope":1172,"src":"5600:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1145,"name":"uint256","nodeType":"ElementaryTypeName","src":"5600:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5548:72:7"},"returnParameters":{"id":1151,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1150,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1172,"src":"5654:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1149,"name":"bool","nodeType":"ElementaryTypeName","src":"5654:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5653:6:7"},"scope":1564,"src":"5527:286:7","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":1200,"nodeType":"Block","src":"6302:140:7","statements":[{"assignments":[1183],"declarations":[{"constant":false,"id":1183,"mutability":"mutable","name":"owner","nameLocation":"6320:5:7","nodeType":"VariableDeclaration","scope":1200,"src":"6312:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1182,"name":"address","nodeType":"ElementaryTypeName","src":"6312:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1186,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1184,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2773,"src":"6328:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1185,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6328:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6312:28:7"},{"expression":{"arguments":[{"id":1188,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1183,"src":"6359:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1189,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1175,"src":"6366:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1195,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1191,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1183,"src":"6385:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1192,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1175,"src":"6392:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1190,"name":"allowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1114,"src":"6375:9:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view returns (uint256)"}},"id":1193,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6375:25:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1194,"name":"addedValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1177,"src":"6403:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6375:38:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1187,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1493,"src":"6350:8:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1196,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6350:64:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1197,"nodeType":"ExpressionStatement","src":"6350:64:7"},{"expression":{"hexValue":"74727565","id":1198,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6431:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":1181,"id":1199,"nodeType":"Return","src":"6424:11:7"}]},"documentation":{"id":1173,"nodeType":"StructuredDocumentation","src":"5819:384:7","text":" @dev Atomically increases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address."},"functionSelector":"39509351","id":1201,"implemented":true,"kind":"function","modifiers":[],"name":"increaseAllowance","nameLocation":"6217:17:7","nodeType":"FunctionDefinition","parameters":{"id":1178,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1175,"mutability":"mutable","name":"spender","nameLocation":"6243:7:7","nodeType":"VariableDeclaration","scope":1201,"src":"6235:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1174,"name":"address","nodeType":"ElementaryTypeName","src":"6235:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1177,"mutability":"mutable","name":"addedValue","nameLocation":"6260:10:7","nodeType":"VariableDeclaration","scope":1201,"src":"6252:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1176,"name":"uint256","nodeType":"ElementaryTypeName","src":"6252:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6234:37:7"},"returnParameters":{"id":1181,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1180,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1201,"src":"6296:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1179,"name":"bool","nodeType":"ElementaryTypeName","src":"6296:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6295:6:7"},"scope":1564,"src":"6208:234:7","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":1241,"nodeType":"Block","src":"7028:328:7","statements":[{"assignments":[1212],"declarations":[{"constant":false,"id":1212,"mutability":"mutable","name":"owner","nameLocation":"7046:5:7","nodeType":"VariableDeclaration","scope":1241,"src":"7038:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1211,"name":"address","nodeType":"ElementaryTypeName","src":"7038:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1215,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1213,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2773,"src":"7054:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1214,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7054:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"7038:28:7"},{"assignments":[1217],"declarations":[{"constant":false,"id":1217,"mutability":"mutable","name":"currentAllowance","nameLocation":"7084:16:7","nodeType":"VariableDeclaration","scope":1241,"src":"7076:24:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1216,"name":"uint256","nodeType":"ElementaryTypeName","src":"7076:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1222,"initialValue":{"arguments":[{"id":1219,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1212,"src":"7113:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1220,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1204,"src":"7120:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1218,"name":"allowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1114,"src":"7103:9:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view returns (uint256)"}},"id":1221,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7103:25:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7076:52:7"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1226,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1224,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1217,"src":"7146:16:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1225,"name":"subtractedValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1206,"src":"7166:15:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7146:35:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f","id":1227,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7183:39:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8","typeString":"literal_string \"ERC20: decreased allowance below zero\""},"value":"ERC20: decreased allowance below zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8","typeString":"literal_string \"ERC20: decreased allowance below zero\""}],"id":1223,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7138:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1228,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7138:85:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1229,"nodeType":"ExpressionStatement","src":"7138:85:7"},{"id":1238,"nodeType":"UncheckedBlock","src":"7233:95:7","statements":[{"expression":{"arguments":[{"id":1231,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1212,"src":"7266:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1232,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1204,"src":"7273:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1233,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1217,"src":"7282:16:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1234,"name":"subtractedValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1206,"src":"7301:15:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7282:34:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1230,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1493,"src":"7257:8:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1236,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7257:60:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1237,"nodeType":"ExpressionStatement","src":"7257:60:7"}]},{"expression":{"hexValue":"74727565","id":1239,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7345:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":1210,"id":1240,"nodeType":"Return","src":"7338:11:7"}]},"documentation":{"id":1202,"nodeType":"StructuredDocumentation","src":"6448:476:7","text":" @dev Atomically decreases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address.\n - `spender` must have allowance for the caller of at least\n `subtractedValue`."},"functionSelector":"a457c2d7","id":1242,"implemented":true,"kind":"function","modifiers":[],"name":"decreaseAllowance","nameLocation":"6938:17:7","nodeType":"FunctionDefinition","parameters":{"id":1207,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1204,"mutability":"mutable","name":"spender","nameLocation":"6964:7:7","nodeType":"VariableDeclaration","scope":1242,"src":"6956:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1203,"name":"address","nodeType":"ElementaryTypeName","src":"6956:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1206,"mutability":"mutable","name":"subtractedValue","nameLocation":"6981:15:7","nodeType":"VariableDeclaration","scope":1242,"src":"6973:23:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1205,"name":"uint256","nodeType":"ElementaryTypeName","src":"6973:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6955:42:7"},"returnParameters":{"id":1210,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1209,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1242,"src":"7022:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1208,"name":"bool","nodeType":"ElementaryTypeName","src":"7022:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7021:6:7"},"scope":1564,"src":"6929:427:7","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":1318,"nodeType":"Block","src":"7918:710:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1258,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1253,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1245,"src":"7936:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1256,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7952:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1255,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7944:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1254,"name":"address","nodeType":"ElementaryTypeName","src":"7944:7:7","typeDescriptions":{}}},"id":1257,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7944:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7936:18:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373","id":1259,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7956:39:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea","typeString":"literal_string \"ERC20: transfer from the zero address\""},"value":"ERC20: transfer from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea","typeString":"literal_string \"ERC20: transfer from the zero address\""}],"id":1252,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7928:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1260,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7928:68:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1261,"nodeType":"ExpressionStatement","src":"7928:68:7"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1268,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1263,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1247,"src":"8014:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1266,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8028:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1265,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8020:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1264,"name":"address","nodeType":"ElementaryTypeName","src":"8020:7:7","typeDescriptions":{}}},"id":1267,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8020:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8014:16:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a207472616e7366657220746f20746865207a65726f2061646472657373","id":1269,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8032:37:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f","typeString":"literal_string \"ERC20: transfer to the zero address\""},"value":"ERC20: transfer to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f","typeString":"literal_string \"ERC20: transfer to the zero address\""}],"id":1262,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8006:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1270,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8006:64:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1271,"nodeType":"ExpressionStatement","src":"8006:64:7"},{"expression":{"arguments":[{"id":1273,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1245,"src":"8102:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1274,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1247,"src":"8108:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1275,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1249,"src":"8112:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1272,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1547,"src":"8081:20:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1276,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8081:38:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1277,"nodeType":"ExpressionStatement","src":"8081:38:7"},{"assignments":[1279],"declarations":[{"constant":false,"id":1279,"mutability":"mutable","name":"fromBalance","nameLocation":"8138:11:7","nodeType":"VariableDeclaration","scope":1318,"src":"8130:19:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1278,"name":"uint256","nodeType":"ElementaryTypeName","src":"8130:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1283,"initialValue":{"baseExpression":{"id":1280,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":971,"src":"8152:9:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1282,"indexExpression":{"id":1281,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1245,"src":"8162:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8152:15:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8130:37:7"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1287,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1285,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1279,"src":"8185:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1286,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1249,"src":"8200:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8185:21:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365","id":1288,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8208:40:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6","typeString":"literal_string \"ERC20: transfer amount exceeds balance\""},"value":"ERC20: transfer amount exceeds balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6","typeString":"literal_string \"ERC20: transfer amount exceeds balance\""}],"id":1284,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8177:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1289,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8177:72:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1290,"nodeType":"ExpressionStatement","src":"8177:72:7"},{"id":1305,"nodeType":"UncheckedBlock","src":"8259:273:7","statements":[{"expression":{"id":1297,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1291,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":971,"src":"8283:9:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1293,"indexExpression":{"id":1292,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1245,"src":"8293:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8283:15:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1296,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1294,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1279,"src":"8301:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1295,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1249,"src":"8315:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8301:20:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8283:38:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1298,"nodeType":"ExpressionStatement","src":"8283:38:7"},{"expression":{"id":1303,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1299,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":971,"src":"8498:9:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1301,"indexExpression":{"id":1300,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1247,"src":"8508:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8498:13:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1302,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1249,"src":"8515:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8498:23:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1304,"nodeType":"ExpressionStatement","src":"8498:23:7"}]},{"eventCall":{"arguments":[{"id":1307,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1245,"src":"8556:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1308,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1247,"src":"8562:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1309,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1249,"src":"8566:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1306,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1576,"src":"8547:8:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1310,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8547:26:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1311,"nodeType":"EmitStatement","src":"8542:31:7"},{"expression":{"arguments":[{"id":1313,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1245,"src":"8604:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1314,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1247,"src":"8610:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1315,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1249,"src":"8614:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1312,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1558,"src":"8584:19:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1316,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8584:37:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1317,"nodeType":"ExpressionStatement","src":"8584:37:7"}]},"documentation":{"id":1243,"nodeType":"StructuredDocumentation","src":"7362:443:7","text":" @dev Moves `amount` of tokens from `from` to `to`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`."},"id":1319,"implemented":true,"kind":"function","modifiers":[],"name":"_transfer","nameLocation":"7819:9:7","nodeType":"FunctionDefinition","parameters":{"id":1250,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1245,"mutability":"mutable","name":"from","nameLocation":"7846:4:7","nodeType":"VariableDeclaration","scope":1319,"src":"7838:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1244,"name":"address","nodeType":"ElementaryTypeName","src":"7838:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1247,"mutability":"mutable","name":"to","nameLocation":"7868:2:7","nodeType":"VariableDeclaration","scope":1319,"src":"7860:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1246,"name":"address","nodeType":"ElementaryTypeName","src":"7860:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1249,"mutability":"mutable","name":"amount","nameLocation":"7888:6:7","nodeType":"VariableDeclaration","scope":1319,"src":"7880:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1248,"name":"uint256","nodeType":"ElementaryTypeName","src":"7880:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7828:72:7"},"returnParameters":{"id":1251,"nodeType":"ParameterList","parameters":[],"src":"7918:0:7"},"scope":1564,"src":"7810:818:7","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1375,"nodeType":"Block","src":"8969:470:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1333,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1328,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1322,"src":"8987:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1331,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9006:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1330,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8998:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1329,"name":"address","nodeType":"ElementaryTypeName","src":"8998:7:7","typeDescriptions":{}}},"id":1332,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8998:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8987:21:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a206d696e7420746f20746865207a65726f2061646472657373","id":1334,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9010:33:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e","typeString":"literal_string \"ERC20: mint to the zero address\""},"value":"ERC20: mint to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e","typeString":"literal_string \"ERC20: mint to the zero address\""}],"id":1327,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8979:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1335,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8979:65:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1336,"nodeType":"ExpressionStatement","src":"8979:65:7"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":1340,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9084:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1339,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9076:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1338,"name":"address","nodeType":"ElementaryTypeName","src":"9076:7:7","typeDescriptions":{}}},"id":1341,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9076:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1342,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1322,"src":"9088:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1343,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1324,"src":"9097:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1337,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1547,"src":"9055:20:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1344,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9055:49:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1345,"nodeType":"ExpressionStatement","src":"9055:49:7"},{"expression":{"id":1348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1346,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":979,"src":"9115:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1347,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1324,"src":"9131:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9115:22:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1349,"nodeType":"ExpressionStatement","src":"9115:22:7"},{"id":1356,"nodeType":"UncheckedBlock","src":"9147:175:7","statements":[{"expression":{"id":1354,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1350,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":971,"src":"9283:9:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1352,"indexExpression":{"id":1351,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1322,"src":"9293:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9283:18:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1353,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1324,"src":"9305:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9283:28:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1355,"nodeType":"ExpressionStatement","src":"9283:28:7"}]},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":1360,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9353:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1359,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9345:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1358,"name":"address","nodeType":"ElementaryTypeName","src":"9345:7:7","typeDescriptions":{}}},"id":1361,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9345:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1362,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1322,"src":"9357:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1363,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1324,"src":"9366:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1357,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1576,"src":"9336:8:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1364,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9336:37:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1365,"nodeType":"EmitStatement","src":"9331:42:7"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":1369,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9412:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1368,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9404:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1367,"name":"address","nodeType":"ElementaryTypeName","src":"9404:7:7","typeDescriptions":{}}},"id":1370,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9404:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1371,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1322,"src":"9416:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1372,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1324,"src":"9425:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1366,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1558,"src":"9384:19:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1373,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9384:48:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1374,"nodeType":"ExpressionStatement","src":"9384:48:7"}]},"documentation":{"id":1320,"nodeType":"StructuredDocumentation","src":"8634:265:7","text":"@dev Creates `amount` tokens and assigns them to `account`, increasing\n the total supply.\n Emits a {Transfer} event with `from` set to the zero address.\n Requirements:\n - `account` cannot be the zero address."},"id":1376,"implemented":true,"kind":"function","modifiers":[],"name":"_mint","nameLocation":"8913:5:7","nodeType":"FunctionDefinition","parameters":{"id":1325,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1322,"mutability":"mutable","name":"account","nameLocation":"8927:7:7","nodeType":"VariableDeclaration","scope":1376,"src":"8919:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1321,"name":"address","nodeType":"ElementaryTypeName","src":"8919:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1324,"mutability":"mutable","name":"amount","nameLocation":"8944:6:7","nodeType":"VariableDeclaration","scope":1376,"src":"8936:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1323,"name":"uint256","nodeType":"ElementaryTypeName","src":"8936:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8918:33:7"},"returnParameters":{"id":1326,"nodeType":"ParameterList","parameters":[],"src":"8969:0:7"},"scope":1564,"src":"8904:535:7","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1447,"nodeType":"Block","src":"9824:594:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1390,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1385,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1379,"src":"9842:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1388,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9861:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1387,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9853:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1386,"name":"address","nodeType":"ElementaryTypeName","src":"9853:7:7","typeDescriptions":{}}},"id":1389,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9853:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9842:21:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a206275726e2066726f6d20746865207a65726f2061646472657373","id":1391,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9865:35:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f","typeString":"literal_string \"ERC20: burn from the zero address\""},"value":"ERC20: burn from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f","typeString":"literal_string \"ERC20: burn from the zero address\""}],"id":1384,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9834:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1392,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9834:67:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1393,"nodeType":"ExpressionStatement","src":"9834:67:7"},{"expression":{"arguments":[{"id":1395,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1379,"src":"9933:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1398,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9950:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1397,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9942:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1396,"name":"address","nodeType":"ElementaryTypeName","src":"9942:7:7","typeDescriptions":{}}},"id":1399,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9942:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1400,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1381,"src":"9954:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1394,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1547,"src":"9912:20:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1401,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9912:49:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1402,"nodeType":"ExpressionStatement","src":"9912:49:7"},{"assignments":[1404],"declarations":[{"constant":false,"id":1404,"mutability":"mutable","name":"accountBalance","nameLocation":"9980:14:7","nodeType":"VariableDeclaration","scope":1447,"src":"9972:22:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1403,"name":"uint256","nodeType":"ElementaryTypeName","src":"9972:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1408,"initialValue":{"baseExpression":{"id":1405,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":971,"src":"9997:9:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1407,"indexExpression":{"id":1406,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1379,"src":"10007:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9997:18:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9972:43:7"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1412,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1410,"name":"accountBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1404,"src":"10033:14:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1411,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1381,"src":"10051:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10033:24:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a206275726e20616d6f756e7420657863656564732062616c616e6365","id":1413,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10059:36:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd","typeString":"literal_string \"ERC20: burn amount exceeds balance\""},"value":"ERC20: burn amount exceeds balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd","typeString":"literal_string \"ERC20: burn amount exceeds balance\""}],"id":1409,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10025:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1414,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10025:71:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1415,"nodeType":"ExpressionStatement","src":"10025:71:7"},{"id":1428,"nodeType":"UncheckedBlock","src":"10106:194:7","statements":[{"expression":{"id":1422,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1416,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":971,"src":"10130:9:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1418,"indexExpression":{"id":1417,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1379,"src":"10140:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10130:18:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1421,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1419,"name":"accountBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1404,"src":"10151:14:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1420,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1381,"src":"10168:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10151:23:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10130:44:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1423,"nodeType":"ExpressionStatement","src":"10130:44:7"},{"expression":{"id":1426,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1424,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":979,"src":"10267:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":1425,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1381,"src":"10283:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10267:22:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1427,"nodeType":"ExpressionStatement","src":"10267:22:7"}]},{"eventCall":{"arguments":[{"id":1430,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1379,"src":"10324:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1433,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10341:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1432,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10333:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1431,"name":"address","nodeType":"ElementaryTypeName","src":"10333:7:7","typeDescriptions":{}}},"id":1434,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10333:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1435,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1381,"src":"10345:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1429,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1576,"src":"10315:8:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1436,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10315:37:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1437,"nodeType":"EmitStatement","src":"10310:42:7"},{"expression":{"arguments":[{"id":1439,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1379,"src":"10383:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1442,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10400:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1441,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10392:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1440,"name":"address","nodeType":"ElementaryTypeName","src":"10392:7:7","typeDescriptions":{}}},"id":1443,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10392:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1444,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1381,"src":"10404:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1438,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1558,"src":"10363:19:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1445,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10363:48:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1446,"nodeType":"ExpressionStatement","src":"10363:48:7"}]},"documentation":{"id":1377,"nodeType":"StructuredDocumentation","src":"9445:309:7","text":" @dev Destroys `amount` tokens from `account`, reducing the\n total supply.\n Emits a {Transfer} event with `to` set to the zero address.\n Requirements:\n - `account` cannot be the zero address.\n - `account` must have at least `amount` tokens."},"id":1448,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"9768:5:7","nodeType":"FunctionDefinition","parameters":{"id":1382,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1379,"mutability":"mutable","name":"account","nameLocation":"9782:7:7","nodeType":"VariableDeclaration","scope":1448,"src":"9774:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1378,"name":"address","nodeType":"ElementaryTypeName","src":"9774:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1381,"mutability":"mutable","name":"amount","nameLocation":"9799:6:7","nodeType":"VariableDeclaration","scope":1448,"src":"9791:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1380,"name":"uint256","nodeType":"ElementaryTypeName","src":"9791:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9773:33:7"},"returnParameters":{"id":1383,"nodeType":"ParameterList","parameters":[],"src":"9824:0:7"},"scope":1564,"src":"9759:659:7","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1492,"nodeType":"Block","src":"10954:257:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1464,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1459,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1451,"src":"10972:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1462,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10989:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1461,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10981:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1460,"name":"address","nodeType":"ElementaryTypeName","src":"10981:7:7","typeDescriptions":{}}},"id":1463,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10981:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10972:19:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373","id":1465,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10993:38:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208","typeString":"literal_string \"ERC20: approve from the zero address\""},"value":"ERC20: approve from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208","typeString":"literal_string \"ERC20: approve from the zero address\""}],"id":1458,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10964:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1466,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10964:68:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1467,"nodeType":"ExpressionStatement","src":"10964:68:7"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1474,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1469,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1453,"src":"11050:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1472,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11069:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1471,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11061:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1470,"name":"address","nodeType":"ElementaryTypeName","src":"11061:7:7","typeDescriptions":{}}},"id":1473,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11061:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11050:21:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20617070726f766520746f20746865207a65726f2061646472657373","id":1475,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11073:36:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029","typeString":"literal_string \"ERC20: approve to the zero address\""},"value":"ERC20: approve to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029","typeString":"literal_string \"ERC20: approve to the zero address\""}],"id":1468,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11042:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1476,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11042:68:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1477,"nodeType":"ExpressionStatement","src":"11042:68:7"},{"expression":{"id":1484,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1478,"name":"_allowances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":977,"src":"11121:11:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":1481,"indexExpression":{"id":1479,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1451,"src":"11133:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11121:18:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1482,"indexExpression":{"id":1480,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1453,"src":"11140:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"11121:27:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1483,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1455,"src":"11151:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11121:36:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1485,"nodeType":"ExpressionStatement","src":"11121:36:7"},{"eventCall":{"arguments":[{"id":1487,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1451,"src":"11181:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1488,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1453,"src":"11188:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1489,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1455,"src":"11197:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1486,"name":"Approval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1585,"src":"11172:8:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1490,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11172:32:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1491,"nodeType":"EmitStatement","src":"11167:37:7"}]},"documentation":{"id":1449,"nodeType":"StructuredDocumentation","src":"10424:412:7","text":" @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address."},"id":1493,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"10850:8:7","nodeType":"FunctionDefinition","parameters":{"id":1456,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1451,"mutability":"mutable","name":"owner","nameLocation":"10876:5:7","nodeType":"VariableDeclaration","scope":1493,"src":"10868:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1450,"name":"address","nodeType":"ElementaryTypeName","src":"10868:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1453,"mutability":"mutable","name":"spender","nameLocation":"10899:7:7","nodeType":"VariableDeclaration","scope":1493,"src":"10891:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1452,"name":"address","nodeType":"ElementaryTypeName","src":"10891:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1455,"mutability":"mutable","name":"amount","nameLocation":"10924:6:7","nodeType":"VariableDeclaration","scope":1493,"src":"10916:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1454,"name":"uint256","nodeType":"ElementaryTypeName","src":"10916:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10858:78:7"},"returnParameters":{"id":1457,"nodeType":"ParameterList","parameters":[],"src":"10954:0:7"},"scope":1564,"src":"10841:370:7","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1535,"nodeType":"Block","src":"11612:321:7","statements":[{"assignments":[1504],"declarations":[{"constant":false,"id":1504,"mutability":"mutable","name":"currentAllowance","nameLocation":"11630:16:7","nodeType":"VariableDeclaration","scope":1535,"src":"11622:24:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1503,"name":"uint256","nodeType":"ElementaryTypeName","src":"11622:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1509,"initialValue":{"arguments":[{"id":1506,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1496,"src":"11659:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1507,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1498,"src":"11666:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1505,"name":"allowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1114,"src":"11649:9:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view returns (uint256)"}},"id":1508,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11649:25:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11622:52:7"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1516,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1510,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1504,"src":"11688:16:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"arguments":[{"id":1513,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11713:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1512,"name":"uint256","nodeType":"ElementaryTypeName","src":"11713:7:7","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"id":1511,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"11708:4:7","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1514,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11708:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint256","typeString":"type(uint256)"}},"id":1515,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"11708:17:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11688:37:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1534,"nodeType":"IfStatement","src":"11684:243:7","trueBody":{"id":1533,"nodeType":"Block","src":"11727:200:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1520,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1518,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1504,"src":"11749:16:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1519,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1500,"src":"11769:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11749:26:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20696e73756666696369656e7420616c6c6f77616e6365","id":1521,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11777:31:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe","typeString":"literal_string \"ERC20: insufficient allowance\""},"value":"ERC20: insufficient allowance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe","typeString":"literal_string \"ERC20: insufficient allowance\""}],"id":1517,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11741:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1522,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11741:68:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1523,"nodeType":"ExpressionStatement","src":"11741:68:7"},{"id":1532,"nodeType":"UncheckedBlock","src":"11823:94:7","statements":[{"expression":{"arguments":[{"id":1525,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1496,"src":"11860:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1526,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1498,"src":"11867:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1529,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1527,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1504,"src":"11876:16:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1528,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1500,"src":"11895:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11876:25:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1524,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1493,"src":"11851:8:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1530,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11851:51:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1531,"nodeType":"ExpressionStatement","src":"11851:51:7"}]}]}}]},"documentation":{"id":1494,"nodeType":"StructuredDocumentation","src":"11217:270:7","text":" @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n Does not update the allowance amount in case of infinite allowance.\n Revert if not enough allowance is available.\n Might emit an {Approval} event."},"id":1536,"implemented":true,"kind":"function","modifiers":[],"name":"_spendAllowance","nameLocation":"11501:15:7","nodeType":"FunctionDefinition","parameters":{"id":1501,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1496,"mutability":"mutable","name":"owner","nameLocation":"11534:5:7","nodeType":"VariableDeclaration","scope":1536,"src":"11526:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1495,"name":"address","nodeType":"ElementaryTypeName","src":"11526:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1498,"mutability":"mutable","name":"spender","nameLocation":"11557:7:7","nodeType":"VariableDeclaration","scope":1536,"src":"11549:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1497,"name":"address","nodeType":"ElementaryTypeName","src":"11549:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1500,"mutability":"mutable","name":"amount","nameLocation":"11582:6:7","nodeType":"VariableDeclaration","scope":1536,"src":"11574:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1499,"name":"uint256","nodeType":"ElementaryTypeName","src":"11574:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11516:78:7"},"returnParameters":{"id":1502,"nodeType":"ParameterList","parameters":[],"src":"11612:0:7"},"scope":1564,"src":"11492:441:7","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1546,"nodeType":"Block","src":"12636:2:7","statements":[]},"documentation":{"id":1537,"nodeType":"StructuredDocumentation","src":"11939:573:7","text":" @dev Hook that is called before any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n will be transferred to `to`.\n - when `from` is zero, `amount` tokens will be minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":1547,"implemented":true,"kind":"function","modifiers":[],"name":"_beforeTokenTransfer","nameLocation":"12526:20:7","nodeType":"FunctionDefinition","parameters":{"id":1544,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1539,"mutability":"mutable","name":"from","nameLocation":"12564:4:7","nodeType":"VariableDeclaration","scope":1547,"src":"12556:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1538,"name":"address","nodeType":"ElementaryTypeName","src":"12556:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1541,"mutability":"mutable","name":"to","nameLocation":"12586:2:7","nodeType":"VariableDeclaration","scope":1547,"src":"12578:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1540,"name":"address","nodeType":"ElementaryTypeName","src":"12578:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1543,"mutability":"mutable","name":"amount","nameLocation":"12606:6:7","nodeType":"VariableDeclaration","scope":1547,"src":"12598:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1542,"name":"uint256","nodeType":"ElementaryTypeName","src":"12598:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12546:72:7"},"returnParameters":{"id":1545,"nodeType":"ParameterList","parameters":[],"src":"12636:0:7"},"scope":1564,"src":"12517:121:7","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1557,"nodeType":"Block","src":"13344:2:7","statements":[]},"documentation":{"id":1548,"nodeType":"StructuredDocumentation","src":"12644:577:7","text":" @dev Hook that is called after any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n has been transferred to `to`.\n - when `from` is zero, `amount` tokens have been minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":1558,"implemented":true,"kind":"function","modifiers":[],"name":"_afterTokenTransfer","nameLocation":"13235:19:7","nodeType":"FunctionDefinition","parameters":{"id":1555,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1550,"mutability":"mutable","name":"from","nameLocation":"13272:4:7","nodeType":"VariableDeclaration","scope":1558,"src":"13264:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1549,"name":"address","nodeType":"ElementaryTypeName","src":"13264:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1552,"mutability":"mutable","name":"to","nameLocation":"13294:2:7","nodeType":"VariableDeclaration","scope":1558,"src":"13286:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1551,"name":"address","nodeType":"ElementaryTypeName","src":"13286:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1554,"mutability":"mutable","name":"amount","nameLocation":"13314:6:7","nodeType":"VariableDeclaration","scope":1558,"src":"13306:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1553,"name":"uint256","nodeType":"ElementaryTypeName","src":"13306:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13254:72:7"},"returnParameters":{"id":1556,"nodeType":"ParameterList","parameters":[],"src":"13344:0:7"},"scope":1564,"src":"13226:120:7","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":1559,"nodeType":"StructuredDocumentation","src":"13352:254:7","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":1563,"mutability":"mutable","name":"__gap","nameLocation":"13631:5:7","nodeType":"VariableDeclaration","scope":1564,"src":"13611:25:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$45_storage","typeString":"uint256[45]"},"typeName":{"baseType":{"id":1560,"name":"uint256","nodeType":"ElementaryTypeName","src":"13611:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1562,"length":{"hexValue":"3435","id":1561,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13619:2:7","typeDescriptions":{"typeIdentifier":"t_rational_45_by_1","typeString":"int_const 45"},"value":"45"},"nodeType":"ArrayTypeName","src":"13611:11:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$45_storage_ptr","typeString":"uint256[45]"}},"visibility":"private"}],"scope":1565,"src":"1480:12159:7","usedErrors":[]}],"src":"105:13535:7"},"id":7},"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol","exportedSymbols":{"IERC20Upgradeable":[1642]},"id":1643,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1566,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"106:23:8"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Upgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":1567,"nodeType":"StructuredDocumentation","src":"131:70:8","text":" @dev Interface of the ERC20 standard as defined in the EIP."},"fullyImplemented":false,"id":1642,"linearizedBaseContracts":[1642],"name":"IERC20Upgradeable","nameLocation":"212:17:8","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":1568,"nodeType":"StructuredDocumentation","src":"236:158:8","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"id":1576,"name":"Transfer","nameLocation":"405:8:8","nodeType":"EventDefinition","parameters":{"id":1575,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1570,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"430:4:8","nodeType":"VariableDeclaration","scope":1576,"src":"414:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1569,"name":"address","nodeType":"ElementaryTypeName","src":"414:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1572,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"452:2:8","nodeType":"VariableDeclaration","scope":1576,"src":"436:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1571,"name":"address","nodeType":"ElementaryTypeName","src":"436:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1574,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"464:5:8","nodeType":"VariableDeclaration","scope":1576,"src":"456:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1573,"name":"uint256","nodeType":"ElementaryTypeName","src":"456:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"413:57:8"},"src":"399:72:8"},{"anonymous":false,"documentation":{"id":1577,"nodeType":"StructuredDocumentation","src":"477:148:8","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"id":1585,"name":"Approval","nameLocation":"636:8:8","nodeType":"EventDefinition","parameters":{"id":1584,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1579,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"661:5:8","nodeType":"VariableDeclaration","scope":1585,"src":"645:21:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1578,"name":"address","nodeType":"ElementaryTypeName","src":"645:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1581,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"684:7:8","nodeType":"VariableDeclaration","scope":1585,"src":"668:23:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1580,"name":"address","nodeType":"ElementaryTypeName","src":"668:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1583,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"701:5:8","nodeType":"VariableDeclaration","scope":1585,"src":"693:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1582,"name":"uint256","nodeType":"ElementaryTypeName","src":"693:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"644:63:8"},"src":"630:78:8"},{"documentation":{"id":1586,"nodeType":"StructuredDocumentation","src":"714:66:8","text":" @dev Returns the amount of tokens in existence."},"functionSelector":"18160ddd","id":1591,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"794:11:8","nodeType":"FunctionDefinition","parameters":{"id":1587,"nodeType":"ParameterList","parameters":[],"src":"805:2:8"},"returnParameters":{"id":1590,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1589,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1591,"src":"831:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1588,"name":"uint256","nodeType":"ElementaryTypeName","src":"831:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"830:9:8"},"scope":1642,"src":"785:55:8","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1592,"nodeType":"StructuredDocumentation","src":"846:72:8","text":" @dev Returns the amount of tokens owned by `account`."},"functionSelector":"70a08231","id":1599,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"932:9:8","nodeType":"FunctionDefinition","parameters":{"id":1595,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1594,"mutability":"mutable","name":"account","nameLocation":"950:7:8","nodeType":"VariableDeclaration","scope":1599,"src":"942:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1593,"name":"address","nodeType":"ElementaryTypeName","src":"942:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"941:17:8"},"returnParameters":{"id":1598,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1597,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1599,"src":"982:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1596,"name":"uint256","nodeType":"ElementaryTypeName","src":"982:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"981:9:8"},"scope":1642,"src":"923:68:8","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1600,"nodeType":"StructuredDocumentation","src":"997:202:8","text":" @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":1609,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1213:8:8","nodeType":"FunctionDefinition","parameters":{"id":1605,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1602,"mutability":"mutable","name":"to","nameLocation":"1230:2:8","nodeType":"VariableDeclaration","scope":1609,"src":"1222:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1601,"name":"address","nodeType":"ElementaryTypeName","src":"1222:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1604,"mutability":"mutable","name":"amount","nameLocation":"1242:6:8","nodeType":"VariableDeclaration","scope":1609,"src":"1234:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1603,"name":"uint256","nodeType":"ElementaryTypeName","src":"1234:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1221:28:8"},"returnParameters":{"id":1608,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1607,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1609,"src":"1268:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1606,"name":"bool","nodeType":"ElementaryTypeName","src":"1268:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1267:6:8"},"scope":1642,"src":"1204:70:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1610,"nodeType":"StructuredDocumentation","src":"1280:264:8","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":1619,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1558:9:8","nodeType":"FunctionDefinition","parameters":{"id":1615,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1612,"mutability":"mutable","name":"owner","nameLocation":"1576:5:8","nodeType":"VariableDeclaration","scope":1619,"src":"1568:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1611,"name":"address","nodeType":"ElementaryTypeName","src":"1568:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1614,"mutability":"mutable","name":"spender","nameLocation":"1591:7:8","nodeType":"VariableDeclaration","scope":1619,"src":"1583:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1613,"name":"address","nodeType":"ElementaryTypeName","src":"1583:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1567:32:8"},"returnParameters":{"id":1618,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1617,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1619,"src":"1623:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1616,"name":"uint256","nodeType":"ElementaryTypeName","src":"1623:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1622:9:8"},"scope":1642,"src":"1549:83:8","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1620,"nodeType":"StructuredDocumentation","src":"1638:642:8","text":" @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":1629,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2294:7:8","nodeType":"FunctionDefinition","parameters":{"id":1625,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1622,"mutability":"mutable","name":"spender","nameLocation":"2310:7:8","nodeType":"VariableDeclaration","scope":1629,"src":"2302:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1621,"name":"address","nodeType":"ElementaryTypeName","src":"2302:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1624,"mutability":"mutable","name":"amount","nameLocation":"2327:6:8","nodeType":"VariableDeclaration","scope":1629,"src":"2319:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1623,"name":"uint256","nodeType":"ElementaryTypeName","src":"2319:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2301:33:8"},"returnParameters":{"id":1628,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1627,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1629,"src":"2353:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1626,"name":"bool","nodeType":"ElementaryTypeName","src":"2353:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2352:6:8"},"scope":1642,"src":"2285:74:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1630,"nodeType":"StructuredDocumentation","src":"2365:287:8","text":" @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":1641,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2666:12:8","nodeType":"FunctionDefinition","parameters":{"id":1637,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1632,"mutability":"mutable","name":"from","nameLocation":"2696:4:8","nodeType":"VariableDeclaration","scope":1641,"src":"2688:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1631,"name":"address","nodeType":"ElementaryTypeName","src":"2688:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1634,"mutability":"mutable","name":"to","nameLocation":"2718:2:8","nodeType":"VariableDeclaration","scope":1641,"src":"2710:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1633,"name":"address","nodeType":"ElementaryTypeName","src":"2710:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1636,"mutability":"mutable","name":"amount","nameLocation":"2738:6:8","nodeType":"VariableDeclaration","scope":1641,"src":"2730:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1635,"name":"uint256","nodeType":"ElementaryTypeName","src":"2730:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2678:72:8"},"returnParameters":{"id":1640,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1639,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1641,"src":"2769:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1638,"name":"bool","nodeType":"ElementaryTypeName","src":"2769:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2768:6:8"},"scope":1642,"src":"2657:118:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1643,"src":"202:2575:8","usedErrors":[]}],"src":"106:2672:8"},"id":8},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2590],"ContextUpgradeable":[2788],"ERC20BurnableUpgradeable":[1706],"ERC20Upgradeable":[1564],"IERC20MetadataUpgradeable":[2079],"IERC20Upgradeable":[1642],"Initializable":[689]},"id":1707,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1644,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"124:23:9"},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol","file":"../ERC20Upgradeable.sol","id":1645,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1707,"sourceUnit":1565,"src":"149:33:9","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","file":"../../../utils/ContextUpgradeable.sol","id":1646,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1707,"sourceUnit":2789,"src":"183:47:9","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../../../proxy/utils/Initializable.sol","id":1647,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1707,"sourceUnit":690,"src":"231:48:9","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1649,"name":"Initializable","nodeType":"IdentifierPath","referencedDeclaration":689,"src":"536:13:9"},"id":1650,"nodeType":"InheritanceSpecifier","src":"536:13:9"},{"baseName":{"id":1651,"name":"ContextUpgradeable","nodeType":"IdentifierPath","referencedDeclaration":2788,"src":"551:18:9"},"id":1652,"nodeType":"InheritanceSpecifier","src":"551:18:9"},{"baseName":{"id":1653,"name":"ERC20Upgradeable","nodeType":"IdentifierPath","referencedDeclaration":1564,"src":"571:16:9"},"id":1654,"nodeType":"InheritanceSpecifier","src":"571:16:9"}],"canonicalName":"ERC20BurnableUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":1648,"nodeType":"StructuredDocumentation","src":"281:208:9","text":" @dev Extension of {ERC20} that allows token holders to destroy both their own\n tokens and those that they have an allowance for, in a way that can be\n recognized off-chain (via event analysis)."},"fullyImplemented":true,"id":1706,"linearizedBaseContracts":[1706,1564,2079,1642,2788,689],"name":"ERC20BurnableUpgradeable","nameLocation":"508:24:9","nodeType":"ContractDefinition","nodes":[{"body":{"id":1659,"nodeType":"Block","src":"652:7:9","statements":[]},"id":1660,"implemented":true,"kind":"function","modifiers":[{"id":1657,"kind":"modifierInvocation","modifierName":{"id":1656,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":634,"src":"635:16:9"},"nodeType":"ModifierInvocation","src":"635:16:9"}],"name":"__ERC20Burnable_init","nameLocation":"603:20:9","nodeType":"FunctionDefinition","parameters":{"id":1655,"nodeType":"ParameterList","parameters":[],"src":"623:2:9"},"returnParameters":{"id":1658,"nodeType":"ParameterList","parameters":[],"src":"652:0:9"},"scope":1706,"src":"594:65:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1665,"nodeType":"Block","src":"733:7:9","statements":[]},"id":1666,"implemented":true,"kind":"function","modifiers":[{"id":1663,"kind":"modifierInvocation","modifierName":{"id":1662,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":634,"src":"716:16:9"},"nodeType":"ModifierInvocation","src":"716:16:9"}],"name":"__ERC20Burnable_init_unchained","nameLocation":"674:30:9","nodeType":"FunctionDefinition","parameters":{"id":1661,"nodeType":"ParameterList","parameters":[],"src":"704:2:9"},"returnParameters":{"id":1664,"nodeType":"ParameterList","parameters":[],"src":"733:0:9"},"scope":1706,"src":"665:75:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1678,"nodeType":"Block","src":"893:44:9","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1673,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2773,"src":"909:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1674,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"909:12:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1675,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1669,"src":"923:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1672,"name":"_burn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1448,"src":"903:5:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":1676,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"903:27:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1677,"nodeType":"ExpressionStatement","src":"903:27:9"}]},"documentation":{"id":1667,"nodeType":"StructuredDocumentation","src":"745:98:9","text":" @dev Destroys `amount` tokens from the caller.\n See {ERC20-_burn}."},"functionSelector":"42966c68","id":1679,"implemented":true,"kind":"function","modifiers":[],"name":"burn","nameLocation":"857:4:9","nodeType":"FunctionDefinition","parameters":{"id":1670,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1669,"mutability":"mutable","name":"amount","nameLocation":"870:6:9","nodeType":"VariableDeclaration","scope":1679,"src":"862:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1668,"name":"uint256","nodeType":"ElementaryTypeName","src":"862:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"861:16:9"},"returnParameters":{"id":1671,"nodeType":"ParameterList","parameters":[],"src":"893:0:9"},"scope":1706,"src":"848:89:9","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":1699,"nodeType":"Block","src":"1309:95:9","statements":[{"expression":{"arguments":[{"id":1688,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1682,"src":"1335:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":1689,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2773,"src":"1344:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1690,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1344:12:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1691,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1684,"src":"1358:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1687,"name":"_spendAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1536,"src":"1319:15:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1692,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1319:46:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1693,"nodeType":"ExpressionStatement","src":"1319:46:9"},{"expression":{"arguments":[{"id":1695,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1682,"src":"1381:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1696,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1684,"src":"1390:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1694,"name":"_burn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1448,"src":"1375:5:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":1697,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1375:22:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1698,"nodeType":"ExpressionStatement","src":"1375:22:9"}]},"documentation":{"id":1680,"nodeType":"StructuredDocumentation","src":"943:295:9","text":" @dev Destroys `amount` tokens from `account`, deducting from the caller's\n allowance.\n See {ERC20-_burn} and {ERC20-allowance}.\n Requirements:\n - the caller must have allowance for ``accounts``'s tokens of at least\n `amount`."},"functionSelector":"79cc6790","id":1700,"implemented":true,"kind":"function","modifiers":[],"name":"burnFrom","nameLocation":"1252:8:9","nodeType":"FunctionDefinition","parameters":{"id":1685,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1682,"mutability":"mutable","name":"account","nameLocation":"1269:7:9","nodeType":"VariableDeclaration","scope":1700,"src":"1261:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1681,"name":"address","nodeType":"ElementaryTypeName","src":"1261:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1684,"mutability":"mutable","name":"amount","nameLocation":"1286:6:9","nodeType":"VariableDeclaration","scope":1700,"src":"1278:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1683,"name":"uint256","nodeType":"ElementaryTypeName","src":"1278:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1260:33:9"},"returnParameters":{"id":1686,"nodeType":"ParameterList","parameters":[],"src":"1309:0:9"},"scope":1706,"src":"1243:161:9","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"constant":false,"documentation":{"id":1701,"nodeType":"StructuredDocumentation","src":"1410:254:9","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":1705,"mutability":"mutable","name":"__gap","nameLocation":"1689:5:9","nodeType":"VariableDeclaration","scope":1706,"src":"1669:25:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":1702,"name":"uint256","nodeType":"ElementaryTypeName","src":"1669:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1704,"length":{"hexValue":"3530","id":1703,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1677:2:9","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"1669:11:9","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":1707,"src":"490:1207:9","usedErrors":[]}],"src":"124:1574:9"},"id":9},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2590],"ArraysUpgradeable":[2746],"ContextUpgradeable":[2788],"CountersUpgradeable":[2862],"ERC20SnapshotUpgradeable":[2054],"ERC20Upgradeable":[1564],"IERC20MetadataUpgradeable":[2079],"IERC20Upgradeable":[1642],"Initializable":[689],"MathUpgradeable":[4473],"StorageSlotUpgradeable":[2922]},"id":2055,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1708,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"124:23:10"},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol","file":"../ERC20Upgradeable.sol","id":1709,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2055,"sourceUnit":1565,"src":"149:33:10","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ArraysUpgradeable.sol","file":"../../../utils/ArraysUpgradeable.sol","id":1710,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2055,"sourceUnit":2747,"src":"183:46:10","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol","file":"../../../utils/CountersUpgradeable.sol","id":1711,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2055,"sourceUnit":2863,"src":"230:48:10","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../../../proxy/utils/Initializable.sol","id":1712,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2055,"sourceUnit":690,"src":"279:48:10","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1714,"name":"Initializable","nodeType":"IdentifierPath","referencedDeclaration":689,"src":"2530:13:10"},"id":1715,"nodeType":"InheritanceSpecifier","src":"2530:13:10"},{"baseName":{"id":1716,"name":"ERC20Upgradeable","nodeType":"IdentifierPath","referencedDeclaration":1564,"src":"2545:16:10"},"id":1717,"nodeType":"InheritanceSpecifier","src":"2545:16:10"}],"canonicalName":"ERC20SnapshotUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":1713,"nodeType":"StructuredDocumentation","src":"329:2153:10","text":" @dev This contract extends an ERC20 token with a snapshot mechanism. When a snapshot is created, the balances and\n total supply at the time are recorded for later access.\n This can be used to safely create mechanisms based on token balances such as trustless dividends or weighted voting.\n In naive implementations it's possible to perform a \"double spend\" attack by reusing the same balance from different\n accounts. By using snapshots to calculate dividends or voting power, those attacks no longer apply. It can also be\n used to create an efficient ERC20 forking mechanism.\n Snapshots are created by the internal {_snapshot} function, which will emit the {Snapshot} event and return a\n snapshot id. To get the total supply at the time of a snapshot, call the function {totalSupplyAt} with the snapshot\n id. To get the balance of an account at the time of a snapshot, call the {balanceOfAt} function with the snapshot id\n and the account address.\n NOTE: Snapshot policy can be customized by overriding the {_getCurrentSnapshotId} method. For example, having it\n return `block.number` will trigger the creation of snapshot at the beginning of each new block. When overriding this\n function, be careful about the monotonicity of its result. Non-monotonic snapshot ids will break the contract.\n Implementing snapshots for every block using this method will incur significant gas costs. For a gas-efficient\n alternative consider {ERC20Votes}.\n ==== Gas Costs\n Snapshots are efficient. Snapshot creation is _O(1)_. Retrieval of balances or total supply from a snapshot is _O(log\n n)_ in the number of snapshots that have been created, although _n_ for a specific account will generally be much\n smaller since identical balances in subsequent snapshots are stored as a single entry.\n There is a constant overhead for normal ERC20 transfers due to the additional snapshot bookkeeping. This overhead is\n only significant for the first transfer that immediately follows a snapshot for a particular account. Subsequent\n transfers will have normal cost until the next snapshot, and so on."},"fullyImplemented":true,"id":2054,"linearizedBaseContracts":[2054,1564,2079,1642,2788,689],"name":"ERC20SnapshotUpgradeable","nameLocation":"2502:24:10","nodeType":"ContractDefinition","nodes":[{"body":{"id":1722,"nodeType":"Block","src":"2626:7:10","statements":[]},"id":1723,"implemented":true,"kind":"function","modifiers":[{"id":1720,"kind":"modifierInvocation","modifierName":{"id":1719,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":634,"src":"2609:16:10"},"nodeType":"ModifierInvocation","src":"2609:16:10"}],"name":"__ERC20Snapshot_init","nameLocation":"2577:20:10","nodeType":"FunctionDefinition","parameters":{"id":1718,"nodeType":"ParameterList","parameters":[],"src":"2597:2:10"},"returnParameters":{"id":1721,"nodeType":"ParameterList","parameters":[],"src":"2626:0:10"},"scope":2054,"src":"2568:65:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1728,"nodeType":"Block","src":"2707:7:10","statements":[]},"id":1729,"implemented":true,"kind":"function","modifiers":[{"id":1726,"kind":"modifierInvocation","modifierName":{"id":1725,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":634,"src":"2690:16:10"},"nodeType":"ModifierInvocation","src":"2690:16:10"}],"name":"__ERC20Snapshot_init_unchained","nameLocation":"2648:30:10","nodeType":"FunctionDefinition","parameters":{"id":1724,"nodeType":"ParameterList","parameters":[],"src":"2678:2:10"},"returnParameters":{"id":1727,"nodeType":"ParameterList","parameters":[],"src":"2707:0:10"},"scope":2054,"src":"2639:75:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":1733,"libraryName":{"id":1730,"name":"ArraysUpgradeable","nodeType":"IdentifierPath","referencedDeclaration":2746,"src":"2916:17:10"},"nodeType":"UsingForDirective","src":"2910:38:10","typeName":{"baseType":{"id":1731,"name":"uint256","nodeType":"ElementaryTypeName","src":"2938:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1732,"nodeType":"ArrayTypeName","src":"2938:9:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},{"id":1737,"libraryName":{"id":1734,"name":"CountersUpgradeable","nodeType":"IdentifierPath","referencedDeclaration":2862,"src":"2959:19:10"},"nodeType":"UsingForDirective","src":"2953:58:10","typeName":{"id":1736,"nodeType":"UserDefinedTypeName","pathNode":{"id":1735,"name":"CountersUpgradeable.Counter","nodeType":"IdentifierPath","referencedDeclaration":2794,"src":"2983:27:10"},"referencedDeclaration":2794,"src":"2983:27:10","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2794_storage_ptr","typeString":"struct CountersUpgradeable.Counter"}}},{"canonicalName":"ERC20SnapshotUpgradeable.Snapshots","id":1744,"members":[{"constant":false,"id":1740,"mutability":"mutable","name":"ids","nameLocation":"3256:3:10","nodeType":"VariableDeclaration","scope":1744,"src":"3246:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1738,"name":"uint256","nodeType":"ElementaryTypeName","src":"3246:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1739,"nodeType":"ArrayTypeName","src":"3246:9:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1743,"mutability":"mutable","name":"values","nameLocation":"3279:6:10","nodeType":"VariableDeclaration","scope":1744,"src":"3269:16:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1741,"name":"uint256","nodeType":"ElementaryTypeName","src":"3269:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1742,"nodeType":"ArrayTypeName","src":"3269:9:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"name":"Snapshots","nameLocation":"3226:9:10","nodeType":"StructDefinition","scope":2054,"src":"3219:73:10","visibility":"public"},{"constant":false,"id":1749,"mutability":"mutable","name":"_accountBalanceSnapshots","nameLocation":"3336:24:10","nodeType":"VariableDeclaration","scope":2054,"src":"3298:62:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Snapshots_$1744_storage_$","typeString":"mapping(address => struct ERC20SnapshotUpgradeable.Snapshots)"},"typeName":{"id":1748,"keyType":{"id":1745,"name":"address","nodeType":"ElementaryTypeName","src":"3306:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"3298:29:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Snapshots_$1744_storage_$","typeString":"mapping(address => struct ERC20SnapshotUpgradeable.Snapshots)"},"valueType":{"id":1747,"nodeType":"UserDefinedTypeName","pathNode":{"id":1746,"name":"Snapshots","nodeType":"IdentifierPath","referencedDeclaration":1744,"src":"3317:9:10"},"referencedDeclaration":1744,"src":"3317:9:10","typeDescriptions":{"typeIdentifier":"t_struct$_Snapshots_$1744_storage_ptr","typeString":"struct ERC20SnapshotUpgradeable.Snapshots"}}},"visibility":"private"},{"constant":false,"id":1752,"mutability":"mutable","name":"_totalSupplySnapshots","nameLocation":"3384:21:10","nodeType":"VariableDeclaration","scope":2054,"src":"3366:39:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Snapshots_$1744_storage","typeString":"struct ERC20SnapshotUpgradeable.Snapshots"},"typeName":{"id":1751,"nodeType":"UserDefinedTypeName","pathNode":{"id":1750,"name":"Snapshots","nodeType":"IdentifierPath","referencedDeclaration":1744,"src":"3366:9:10"},"referencedDeclaration":1744,"src":"3366:9:10","typeDescriptions":{"typeIdentifier":"t_struct$_Snapshots_$1744_storage_ptr","typeString":"struct ERC20SnapshotUpgradeable.Snapshots"}},"visibility":"private"},{"constant":false,"id":1755,"mutability":"mutable","name":"_currentSnapshotId","nameLocation":"3545:18:10","nodeType":"VariableDeclaration","scope":2054,"src":"3509:54:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2794_storage","typeString":"struct CountersUpgradeable.Counter"},"typeName":{"id":1754,"nodeType":"UserDefinedTypeName","pathNode":{"id":1753,"name":"CountersUpgradeable.Counter","nodeType":"IdentifierPath","referencedDeclaration":2794,"src":"3509:27:10"},"referencedDeclaration":2794,"src":"3509:27:10","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2794_storage_ptr","typeString":"struct CountersUpgradeable.Counter"}},"visibility":"private"},{"anonymous":false,"documentation":{"id":1756,"nodeType":"StructuredDocumentation","src":"3570:93:10","text":" @dev Emitted by {_snapshot} when a snapshot identified by `id` is created."},"id":1760,"name":"Snapshot","nameLocation":"3674:8:10","nodeType":"EventDefinition","parameters":{"id":1759,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1758,"indexed":false,"mutability":"mutable","name":"id","nameLocation":"3691:2:10","nodeType":"VariableDeclaration","scope":1760,"src":"3683:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1757,"name":"uint256","nodeType":"ElementaryTypeName","src":"3683:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3682:12:10"},"src":"3668:27:10"},{"body":{"id":1782,"nodeType":"Block","src":"4858:161:10","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1766,"name":"_currentSnapshotId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1755,"src":"4868:18:10","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2794_storage","typeString":"struct CountersUpgradeable.Counter storage ref"}},"id":1768,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"increment","nodeType":"MemberAccess","referencedDeclaration":2820,"src":"4868:28:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Counter_$2794_storage_ptr_$returns$__$bound_to$_t_struct$_Counter_$2794_storage_ptr_$","typeString":"function (struct CountersUpgradeable.Counter storage pointer)"}},"id":1769,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4868:30:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1770,"nodeType":"ExpressionStatement","src":"4868:30:10"},{"assignments":[1772],"declarations":[{"constant":false,"id":1772,"mutability":"mutable","name":"currentId","nameLocation":"4917:9:10","nodeType":"VariableDeclaration","scope":1782,"src":"4909:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1771,"name":"uint256","nodeType":"ElementaryTypeName","src":"4909:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1775,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1773,"name":"_getCurrentSnapshotId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1794,"src":"4929:21:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":1774,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4929:23:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4909:43:10"},{"eventCall":{"arguments":[{"id":1777,"name":"currentId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1772,"src":"4976:9:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1776,"name":"Snapshot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1760,"src":"4967:8:10","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":1778,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4967:19:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1779,"nodeType":"EmitStatement","src":"4962:24:10"},{"expression":{"id":1780,"name":"currentId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1772,"src":"5003:9:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1765,"id":1781,"nodeType":"Return","src":"4996:16:10"}]},"documentation":{"id":1761,"nodeType":"StructuredDocumentation","src":"3701:1096:10","text":" @dev Creates a new snapshot and returns its snapshot id.\n Emits a {Snapshot} event that contains the same id.\n {_snapshot} is `internal` and you have to decide how to expose it externally. Its usage may be restricted to a\n set of accounts, for example using {AccessControl}, or it may be open to the public.\n [WARNING]\n ====\n While an open way of calling {_snapshot} is required for certain trust minimization mechanisms such as forking,\n you must consider that it can potentially be used by attackers in two ways.\n First, it can be used to increase the cost of retrieval of values from snapshots, although it will grow\n logarithmically thus rendering this attack ineffective in the long term. Second, it can be used to target\n specific accounts and increase the cost of ERC20 transfers for them, in the ways specified in the Gas Costs\n section above.\n We haven't measured the actual numbers; if this is something you're interested in please reach out to us.\n ===="},"id":1783,"implemented":true,"kind":"function","modifiers":[],"name":"_snapshot","nameLocation":"4811:9:10","nodeType":"FunctionDefinition","parameters":{"id":1762,"nodeType":"ParameterList","parameters":[],"src":"4820:2:10"},"returnParameters":{"id":1765,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1764,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1783,"src":"4849:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1763,"name":"uint256","nodeType":"ElementaryTypeName","src":"4849:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4848:9:10"},"scope":2054,"src":"4802:217:10","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1793,"nodeType":"Block","src":"5153:52:10","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1789,"name":"_currentSnapshotId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1755,"src":"5170:18:10","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2794_storage","typeString":"struct CountersUpgradeable.Counter storage ref"}},"id":1790,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"current","nodeType":"MemberAccess","referencedDeclaration":2806,"src":"5170:26:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Counter_$2794_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_Counter_$2794_storage_ptr_$","typeString":"function (struct CountersUpgradeable.Counter storage pointer) view returns (uint256)"}},"id":1791,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5170:28:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1788,"id":1792,"nodeType":"Return","src":"5163:35:10"}]},"documentation":{"id":1784,"nodeType":"StructuredDocumentation","src":"5025:50:10","text":" @dev Get the current snapshotId"},"id":1794,"implemented":true,"kind":"function","modifiers":[],"name":"_getCurrentSnapshotId","nameLocation":"5089:21:10","nodeType":"FunctionDefinition","parameters":{"id":1785,"nodeType":"ParameterList","parameters":[],"src":"5110:2:10"},"returnParameters":{"id":1788,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1787,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1794,"src":"5144:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1786,"name":"uint256","nodeType":"ElementaryTypeName","src":"5144:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5143:9:10"},"scope":2054,"src":"5080:125:10","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1822,"nodeType":"Block","src":"5408:166:10","statements":[{"assignments":[1805,1807],"declarations":[{"constant":false,"id":1805,"mutability":"mutable","name":"snapshotted","nameLocation":"5424:11:10","nodeType":"VariableDeclaration","scope":1822,"src":"5419:16:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1804,"name":"bool","nodeType":"ElementaryTypeName","src":"5419:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1807,"mutability":"mutable","name":"value","nameLocation":"5445:5:10","nodeType":"VariableDeclaration","scope":1822,"src":"5437:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1806,"name":"uint256","nodeType":"ElementaryTypeName","src":"5437:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1814,"initialValue":{"arguments":[{"id":1809,"name":"snapshotId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1799,"src":"5463:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"baseExpression":{"id":1810,"name":"_accountBalanceSnapshots","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1749,"src":"5475:24:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Snapshots_$1744_storage_$","typeString":"mapping(address => struct ERC20SnapshotUpgradeable.Snapshots storage ref)"}},"id":1812,"indexExpression":{"id":1811,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1797,"src":"5500:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5475:33:10","typeDescriptions":{"typeIdentifier":"t_struct$_Snapshots_$1744_storage","typeString":"struct ERC20SnapshotUpgradeable.Snapshots storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_struct$_Snapshots_$1744_storage","typeString":"struct ERC20SnapshotUpgradeable.Snapshots storage ref"}],"id":1808,"name":"_valueAt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1960,"src":"5454:8:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$_t_struct$_Snapshots_$1744_storage_ptr_$returns$_t_bool_$_t_uint256_$","typeString":"function (uint256,struct ERC20SnapshotUpgradeable.Snapshots storage pointer) view returns (bool,uint256)"}},"id":1813,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5454:55:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"5418:91:10"},{"expression":{"condition":{"id":1815,"name":"snapshotted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1805,"src":"5527:11:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":1818,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1797,"src":"5559:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1817,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1071,"src":"5549:9:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":1819,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5549:18:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1820,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"5527:40:10","trueExpression":{"id":1816,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1807,"src":"5541:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1803,"id":1821,"nodeType":"Return","src":"5520:47:10"}]},"documentation":{"id":1795,"nodeType":"StructuredDocumentation","src":"5211:96:10","text":" @dev Retrieves the balance of `account` at the time `snapshotId` was created."},"functionSelector":"4ee2cd7e","id":1823,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOfAt","nameLocation":"5321:11:10","nodeType":"FunctionDefinition","parameters":{"id":1800,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1797,"mutability":"mutable","name":"account","nameLocation":"5341:7:10","nodeType":"VariableDeclaration","scope":1823,"src":"5333:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1796,"name":"address","nodeType":"ElementaryTypeName","src":"5333:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1799,"mutability":"mutable","name":"snapshotId","nameLocation":"5358:10:10","nodeType":"VariableDeclaration","scope":1823,"src":"5350:18:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1798,"name":"uint256","nodeType":"ElementaryTypeName","src":"5350:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5332:37:10"},"returnParameters":{"id":1803,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1802,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1823,"src":"5399:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1801,"name":"uint256","nodeType":"ElementaryTypeName","src":"5399:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5398:9:10"},"scope":2054,"src":"5312:262:10","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":1846,"nodeType":"Block","src":"5754:149:10","statements":[{"assignments":[1832,1834],"declarations":[{"constant":false,"id":1832,"mutability":"mutable","name":"snapshotted","nameLocation":"5770:11:10","nodeType":"VariableDeclaration","scope":1846,"src":"5765:16:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1831,"name":"bool","nodeType":"ElementaryTypeName","src":"5765:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1834,"mutability":"mutable","name":"value","nameLocation":"5791:5:10","nodeType":"VariableDeclaration","scope":1846,"src":"5783:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1833,"name":"uint256","nodeType":"ElementaryTypeName","src":"5783:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1839,"initialValue":{"arguments":[{"id":1836,"name":"snapshotId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1826,"src":"5809:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1837,"name":"_totalSupplySnapshots","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1752,"src":"5821:21:10","typeDescriptions":{"typeIdentifier":"t_struct$_Snapshots_$1744_storage","typeString":"struct ERC20SnapshotUpgradeable.Snapshots storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_struct$_Snapshots_$1744_storage","typeString":"struct ERC20SnapshotUpgradeable.Snapshots storage ref"}],"id":1835,"name":"_valueAt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1960,"src":"5800:8:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$_t_struct$_Snapshots_$1744_storage_ptr_$returns$_t_bool_$_t_uint256_$","typeString":"function (uint256,struct ERC20SnapshotUpgradeable.Snapshots storage pointer) view returns (bool,uint256)"}},"id":1838,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5800:43:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"5764:79:10"},{"expression":{"condition":{"id":1840,"name":"snapshotted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1832,"src":"5861:11:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":1842,"name":"totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1057,"src":"5883:11:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":1843,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5883:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"5861:35:10","trueExpression":{"id":1841,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1834,"src":"5875:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1830,"id":1845,"nodeType":"Return","src":"5854:42:10"}]},"documentation":{"id":1824,"nodeType":"StructuredDocumentation","src":"5580:88:10","text":" @dev Retrieves the total supply at the time `snapshotId` was created."},"functionSelector":"981b24d0","id":1847,"implemented":true,"kind":"function","modifiers":[],"name":"totalSupplyAt","nameLocation":"5682:13:10","nodeType":"FunctionDefinition","parameters":{"id":1827,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1826,"mutability":"mutable","name":"snapshotId","nameLocation":"5704:10:10","nodeType":"VariableDeclaration","scope":1847,"src":"5696:18:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1825,"name":"uint256","nodeType":"ElementaryTypeName","src":"5696:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5695:20:10"},"returnParameters":{"id":1830,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1829,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1847,"src":"5745:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1828,"name":"uint256","nodeType":"ElementaryTypeName","src":"5745:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5744:9:10"},"scope":2054,"src":"5673:230:10","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1547],"body":{"id":1904,"nodeType":"Block","src":"6244:474:10","statements":[{"expression":{"arguments":[{"id":1860,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1849,"src":"6281:4:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1861,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1851,"src":"6287:2:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1862,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1853,"src":"6291:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1857,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"6254:5:10","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC20SnapshotUpgradeable_$2054_$","typeString":"type(contract super ERC20SnapshotUpgradeable)"}},"id":1859,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"_beforeTokenTransfer","nodeType":"MemberAccess","referencedDeclaration":1547,"src":"6254:26:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1863,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6254:44:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1864,"nodeType":"ExpressionStatement","src":"6254:44:10"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1870,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1865,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1849,"src":"6313:4:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1868,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6329:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1867,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6321:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1866,"name":"address","nodeType":"ElementaryTypeName","src":"6321:7:10","typeDescriptions":{}}},"id":1869,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6321:10:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6313:18:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1884,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1879,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1851,"src":"6456:2:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1882,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6470:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1881,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6462:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1880,"name":"address","nodeType":"ElementaryTypeName","src":"6462:7:10","typeDescriptions":{}}},"id":1883,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6462:10:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6456:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1901,"nodeType":"Block","src":"6595:117:10","statements":[{"expression":{"arguments":[{"id":1894,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1849,"src":"6656:4:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1893,"name":"_updateAccountSnapshot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1975,"src":"6633:22:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1895,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6633:28:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1896,"nodeType":"ExpressionStatement","src":"6633:28:10"},{"expression":{"arguments":[{"id":1898,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1851,"src":"6698:2:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1897,"name":"_updateAccountSnapshot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1975,"src":"6675:22:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1899,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6675:26:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1900,"nodeType":"ExpressionStatement","src":"6675:26:10"}]},"id":1902,"nodeType":"IfStatement","src":"6452:260:10","trueBody":{"id":1892,"nodeType":"Block","src":"6474:115:10","statements":[{"expression":{"arguments":[{"id":1886,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1849,"src":"6531:4:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1885,"name":"_updateAccountSnapshot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1975,"src":"6508:22:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1887,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6508:28:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1888,"nodeType":"ExpressionStatement","src":"6508:28:10"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1889,"name":"_updateTotalSupplySnapshot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1985,"src":"6550:26:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":1890,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6550:28:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1891,"nodeType":"ExpressionStatement","src":"6550:28:10"}]}},"id":1903,"nodeType":"IfStatement","src":"6309:403:10","trueBody":{"id":1878,"nodeType":"Block","src":"6333:113:10","statements":[{"expression":{"arguments":[{"id":1872,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1851,"src":"6390:2:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1871,"name":"_updateAccountSnapshot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1975,"src":"6367:22:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1873,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6367:26:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1874,"nodeType":"ExpressionStatement","src":"6367:26:10"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1875,"name":"_updateTotalSupplySnapshot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1985,"src":"6407:26:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":1876,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6407:28:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1877,"nodeType":"ExpressionStatement","src":"6407:28:10"}]}}]},"id":1905,"implemented":true,"kind":"function","modifiers":[],"name":"_beforeTokenTransfer","nameLocation":"6125:20:10","nodeType":"FunctionDefinition","overrides":{"id":1855,"nodeType":"OverrideSpecifier","overrides":[],"src":"6235:8:10"},"parameters":{"id":1854,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1849,"mutability":"mutable","name":"from","nameLocation":"6163:4:10","nodeType":"VariableDeclaration","scope":1905,"src":"6155:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1848,"name":"address","nodeType":"ElementaryTypeName","src":"6155:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1851,"mutability":"mutable","name":"to","nameLocation":"6185:2:10","nodeType":"VariableDeclaration","scope":1905,"src":"6177:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1850,"name":"address","nodeType":"ElementaryTypeName","src":"6177:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1853,"mutability":"mutable","name":"amount","nameLocation":"6205:6:10","nodeType":"VariableDeclaration","scope":1905,"src":"6197:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1852,"name":"uint256","nodeType":"ElementaryTypeName","src":"6197:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6145:72:10"},"returnParameters":{"id":1856,"nodeType":"ParameterList","parameters":[],"src":"6244:0:10"},"scope":2054,"src":"6116:602:10","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1959,"nodeType":"Block","src":"6828:1490:10","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1920,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1918,"name":"snapshotId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1907,"src":"6846:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1919,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6859:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6846:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433230536e617073686f743a2069642069732030","id":1921,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6862:24:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_d85a3cdc203c5cdc6dda93c12cd017145671a0ed9058a16c7aa00b8398a4a8e6","typeString":"literal_string \"ERC20Snapshot: id is 0\""},"value":"ERC20Snapshot: id is 0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d85a3cdc203c5cdc6dda93c12cd017145671a0ed9058a16c7aa00b8398a4a8e6","typeString":"literal_string \"ERC20Snapshot: id is 0\""}],"id":1917,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6838:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1922,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6838:49:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1923,"nodeType":"ExpressionStatement","src":"6838:49:10"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1928,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1925,"name":"snapshotId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1907,"src":"6905:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":1926,"name":"_getCurrentSnapshotId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1794,"src":"6919:21:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":1927,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6919:23:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6905:37:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433230536e617073686f743a206e6f6e6578697374656e74206964","id":1929,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6944:31:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_031e0835d070e7bbd2c8dcce466eadb8c6b9fd22432b0357ab8c37bd9a385940","typeString":"literal_string \"ERC20Snapshot: nonexistent id\""},"value":"ERC20Snapshot: nonexistent id"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_031e0835d070e7bbd2c8dcce466eadb8c6b9fd22432b0357ab8c37bd9a385940","typeString":"literal_string \"ERC20Snapshot: nonexistent id\""}],"id":1924,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6897:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1930,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6897:79:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1931,"nodeType":"ExpressionStatement","src":"6897:79:10"},{"assignments":[1933],"declarations":[{"constant":false,"id":1933,"mutability":"mutable","name":"index","nameLocation":"8107:5:10","nodeType":"VariableDeclaration","scope":1959,"src":"8099:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1932,"name":"uint256","nodeType":"ElementaryTypeName","src":"8099:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1939,"initialValue":{"arguments":[{"id":1937,"name":"snapshotId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1907,"src":"8144:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"expression":{"id":1934,"name":"snapshots","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1910,"src":"8115:9:10","typeDescriptions":{"typeIdentifier":"t_struct$_Snapshots_$1744_storage_ptr","typeString":"struct ERC20SnapshotUpgradeable.Snapshots storage pointer"}},"id":1935,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"ids","nodeType":"MemberAccess","referencedDeclaration":1740,"src":"8115:13:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":1936,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"findUpperBound","nodeType":"MemberAccess","referencedDeclaration":2682,"src":"8115:28:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_array$_t_uint256_$dyn_storage_ptr_$_t_uint256_$returns$_t_uint256_$bound_to$_t_array$_t_uint256_$dyn_storage_ptr_$","typeString":"function (uint256[] storage pointer,uint256) view returns (uint256)"}},"id":1938,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8115:40:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8099:56:10"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1944,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1940,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1933,"src":"8170:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":1941,"name":"snapshots","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1910,"src":"8179:9:10","typeDescriptions":{"typeIdentifier":"t_struct$_Snapshots_$1744_storage_ptr","typeString":"struct ERC20SnapshotUpgradeable.Snapshots storage pointer"}},"id":1942,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"ids","nodeType":"MemberAccess","referencedDeclaration":1740,"src":"8179:13:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":1943,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"8179:20:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8170:29:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1957,"nodeType":"Block","src":"8249:63:10","statements":[{"expression":{"components":[{"hexValue":"74727565","id":1950,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8271:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"baseExpression":{"expression":{"id":1951,"name":"snapshots","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1910,"src":"8277:9:10","typeDescriptions":{"typeIdentifier":"t_struct$_Snapshots_$1744_storage_ptr","typeString":"struct ERC20SnapshotUpgradeable.Snapshots storage pointer"}},"id":1952,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"values","nodeType":"MemberAccess","referencedDeclaration":1743,"src":"8277:16:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":1954,"indexExpression":{"id":1953,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1933,"src":"8294:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8277:23:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1955,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8270:31:10","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":1916,"id":1956,"nodeType":"Return","src":"8263:38:10"}]},"id":1958,"nodeType":"IfStatement","src":"8166:146:10","trueBody":{"id":1949,"nodeType":"Block","src":"8201:42:10","statements":[{"expression":{"components":[{"hexValue":"66616c7365","id":1945,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8223:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":1946,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8230:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1947,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"8222:10:10","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":1916,"id":1948,"nodeType":"Return","src":"8215:17:10"}]}}]},"id":1960,"implemented":true,"kind":"function","modifiers":[],"name":"_valueAt","nameLocation":"6733:8:10","nodeType":"FunctionDefinition","parameters":{"id":1911,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1907,"mutability":"mutable","name":"snapshotId","nameLocation":"6750:10:10","nodeType":"VariableDeclaration","scope":1960,"src":"6742:18:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1906,"name":"uint256","nodeType":"ElementaryTypeName","src":"6742:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1910,"mutability":"mutable","name":"snapshots","nameLocation":"6780:9:10","nodeType":"VariableDeclaration","scope":1960,"src":"6762:27:10","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Snapshots_$1744_storage_ptr","typeString":"struct ERC20SnapshotUpgradeable.Snapshots"},"typeName":{"id":1909,"nodeType":"UserDefinedTypeName","pathNode":{"id":1908,"name":"Snapshots","nodeType":"IdentifierPath","referencedDeclaration":1744,"src":"6762:9:10"},"referencedDeclaration":1744,"src":"6762:9:10","typeDescriptions":{"typeIdentifier":"t_struct$_Snapshots_$1744_storage_ptr","typeString":"struct ERC20SnapshotUpgradeable.Snapshots"}},"visibility":"internal"}],"src":"6741:49:10"},"returnParameters":{"id":1916,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1913,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1960,"src":"6813:4:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1912,"name":"bool","nodeType":"ElementaryTypeName","src":"6813:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1915,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1960,"src":"6819:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1914,"name":"uint256","nodeType":"ElementaryTypeName","src":"6819:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6812:15:10"},"scope":2054,"src":"6724:1594:10","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":1974,"nodeType":"Block","src":"8381:87:10","statements":[{"expression":{"arguments":[{"baseExpression":{"id":1966,"name":"_accountBalanceSnapshots","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1749,"src":"8407:24:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Snapshots_$1744_storage_$","typeString":"mapping(address => struct ERC20SnapshotUpgradeable.Snapshots storage ref)"}},"id":1968,"indexExpression":{"id":1967,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1962,"src":"8432:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8407:33:10","typeDescriptions":{"typeIdentifier":"t_struct$_Snapshots_$1744_storage","typeString":"struct ERC20SnapshotUpgradeable.Snapshots storage ref"}},{"arguments":[{"id":1970,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1962,"src":"8452:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1969,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1071,"src":"8442:9:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":1971,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8442:18:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Snapshots_$1744_storage","typeString":"struct ERC20SnapshotUpgradeable.Snapshots storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1965,"name":"_updateSnapshot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2023,"src":"8391:15:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Snapshots_$1744_storage_ptr_$_t_uint256_$returns$__$","typeString":"function (struct ERC20SnapshotUpgradeable.Snapshots storage pointer,uint256)"}},"id":1972,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8391:70:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1973,"nodeType":"ExpressionStatement","src":"8391:70:10"}]},"id":1975,"implemented":true,"kind":"function","modifiers":[],"name":"_updateAccountSnapshot","nameLocation":"8333:22:10","nodeType":"FunctionDefinition","parameters":{"id":1963,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1962,"mutability":"mutable","name":"account","nameLocation":"8364:7:10","nodeType":"VariableDeclaration","scope":1975,"src":"8356:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1961,"name":"address","nodeType":"ElementaryTypeName","src":"8356:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8355:17:10"},"returnParameters":{"id":1964,"nodeType":"ParameterList","parameters":[],"src":"8381:0:10"},"scope":2054,"src":"8324:144:10","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":1984,"nodeType":"Block","src":"8520:70:10","statements":[{"expression":{"arguments":[{"id":1979,"name":"_totalSupplySnapshots","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1752,"src":"8546:21:10","typeDescriptions":{"typeIdentifier":"t_struct$_Snapshots_$1744_storage","typeString":"struct ERC20SnapshotUpgradeable.Snapshots storage ref"}},{"arguments":[],"expression":{"argumentTypes":[],"id":1980,"name":"totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1057,"src":"8569:11:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":1981,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8569:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Snapshots_$1744_storage","typeString":"struct ERC20SnapshotUpgradeable.Snapshots storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1978,"name":"_updateSnapshot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2023,"src":"8530:15:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Snapshots_$1744_storage_ptr_$_t_uint256_$returns$__$","typeString":"function (struct ERC20SnapshotUpgradeable.Snapshots storage pointer,uint256)"}},"id":1982,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8530:53:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1983,"nodeType":"ExpressionStatement","src":"8530:53:10"}]},"id":1985,"implemented":true,"kind":"function","modifiers":[],"name":"_updateTotalSupplySnapshot","nameLocation":"8483:26:10","nodeType":"FunctionDefinition","parameters":{"id":1976,"nodeType":"ParameterList","parameters":[],"src":"8509:2:10"},"returnParameters":{"id":1977,"nodeType":"ParameterList","parameters":[],"src":"8520:0:10"},"scope":2054,"src":"8474:116:10","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":2022,"nodeType":"Block","src":"8680:220:10","statements":[{"assignments":[1994],"declarations":[{"constant":false,"id":1994,"mutability":"mutable","name":"currentId","nameLocation":"8698:9:10","nodeType":"VariableDeclaration","scope":2022,"src":"8690:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1993,"name":"uint256","nodeType":"ElementaryTypeName","src":"8690:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1997,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1995,"name":"_getCurrentSnapshotId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1794,"src":"8710:21:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":1996,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8710:23:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8690:43:10"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2003,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"expression":{"id":1999,"name":"snapshots","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1988,"src":"8763:9:10","typeDescriptions":{"typeIdentifier":"t_struct$_Snapshots_$1744_storage_ptr","typeString":"struct ERC20SnapshotUpgradeable.Snapshots storage pointer"}},"id":2000,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"ids","nodeType":"MemberAccess","referencedDeclaration":1740,"src":"8763:13:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}],"id":1998,"name":"_lastSnapshotId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2048,"src":"8747:15:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_array$_t_uint256_$dyn_storage_ptr_$returns$_t_uint256_$","typeString":"function (uint256[] storage pointer) view returns (uint256)"}},"id":2001,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8747:30:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2002,"name":"currentId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1994,"src":"8780:9:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8747:42:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2021,"nodeType":"IfStatement","src":"8743:151:10","trueBody":{"id":2020,"nodeType":"Block","src":"8791:103:10","statements":[{"expression":{"arguments":[{"id":2009,"name":"currentId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1994,"src":"8824:9:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"expression":{"id":2004,"name":"snapshots","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1988,"src":"8805:9:10","typeDescriptions":{"typeIdentifier":"t_struct$_Snapshots_$1744_storage_ptr","typeString":"struct ERC20SnapshotUpgradeable.Snapshots storage pointer"}},"id":2007,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"ids","nodeType":"MemberAccess","referencedDeclaration":1740,"src":"8805:13:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":2008,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"push","nodeType":"MemberAccess","src":"8805:18:10","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_uint256_$dyn_storage_ptr_$_t_uint256_$returns$__$bound_to$_t_array$_t_uint256_$dyn_storage_ptr_$","typeString":"function (uint256[] storage pointer,uint256)"}},"id":2010,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8805:29:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2011,"nodeType":"ExpressionStatement","src":"8805:29:10"},{"expression":{"arguments":[{"id":2017,"name":"currentValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1990,"src":"8870:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"expression":{"id":2012,"name":"snapshots","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1988,"src":"8848:9:10","typeDescriptions":{"typeIdentifier":"t_struct$_Snapshots_$1744_storage_ptr","typeString":"struct ERC20SnapshotUpgradeable.Snapshots storage pointer"}},"id":2015,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"values","nodeType":"MemberAccess","referencedDeclaration":1743,"src":"8848:16:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":2016,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"push","nodeType":"MemberAccess","src":"8848:21:10","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_uint256_$dyn_storage_ptr_$_t_uint256_$returns$__$bound_to$_t_array$_t_uint256_$dyn_storage_ptr_$","typeString":"function (uint256[] storage pointer,uint256)"}},"id":2018,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8848:35:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2019,"nodeType":"ExpressionStatement","src":"8848:35:10"}]}}]},"id":2023,"implemented":true,"kind":"function","modifiers":[],"name":"_updateSnapshot","nameLocation":"8605:15:10","nodeType":"FunctionDefinition","parameters":{"id":1991,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1988,"mutability":"mutable","name":"snapshots","nameLocation":"8639:9:10","nodeType":"VariableDeclaration","scope":2023,"src":"8621:27:10","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Snapshots_$1744_storage_ptr","typeString":"struct ERC20SnapshotUpgradeable.Snapshots"},"typeName":{"id":1987,"nodeType":"UserDefinedTypeName","pathNode":{"id":1986,"name":"Snapshots","nodeType":"IdentifierPath","referencedDeclaration":1744,"src":"8621:9:10"},"referencedDeclaration":1744,"src":"8621:9:10","typeDescriptions":{"typeIdentifier":"t_struct$_Snapshots_$1744_storage_ptr","typeString":"struct ERC20SnapshotUpgradeable.Snapshots"}},"visibility":"internal"},{"constant":false,"id":1990,"mutability":"mutable","name":"currentValue","nameLocation":"8658:12:10","nodeType":"VariableDeclaration","scope":2023,"src":"8650:20:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1989,"name":"uint256","nodeType":"ElementaryTypeName","src":"8650:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8620:51:10"},"returnParameters":{"id":1992,"nodeType":"ParameterList","parameters":[],"src":"8680:0:10"},"scope":2054,"src":"8596:304:10","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":2047,"nodeType":"Block","src":"8985:127:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2034,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2031,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2026,"src":"8999:3:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[] storage pointer"}},"id":2032,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"8999:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2033,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9013:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8999:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2045,"nodeType":"Block","src":"9055:51:10","statements":[{"expression":{"baseExpression":{"id":2038,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2026,"src":"9076:3:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[] storage pointer"}},"id":2043,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2042,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2039,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2026,"src":"9080:3:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[] storage pointer"}},"id":2040,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"9080:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2041,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9093:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9080:14:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9076:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2030,"id":2044,"nodeType":"Return","src":"9069:26:10"}]},"id":2046,"nodeType":"IfStatement","src":"8995:111:10","trueBody":{"id":2037,"nodeType":"Block","src":"9016:33:10","statements":[{"expression":{"hexValue":"30","id":2035,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9037:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":2030,"id":2036,"nodeType":"Return","src":"9030:8:10"}]}}]},"id":2048,"implemented":true,"kind":"function","modifiers":[],"name":"_lastSnapshotId","nameLocation":"8915:15:10","nodeType":"FunctionDefinition","parameters":{"id":2027,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2026,"mutability":"mutable","name":"ids","nameLocation":"8949:3:10","nodeType":"VariableDeclaration","scope":2048,"src":"8931:21:10","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2024,"name":"uint256","nodeType":"ElementaryTypeName","src":"8931:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2025,"nodeType":"ArrayTypeName","src":"8931:9:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"8930:23:10"},"returnParameters":{"id":2030,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2029,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2048,"src":"8976:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2028,"name":"uint256","nodeType":"ElementaryTypeName","src":"8976:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8975:9:10"},"scope":2054,"src":"8906:206:10","stateMutability":"view","virtual":false,"visibility":"private"},{"constant":false,"documentation":{"id":2049,"nodeType":"StructuredDocumentation","src":"9118:254:10","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":2053,"mutability":"mutable","name":"__gap","nameLocation":"9397:5:10","nodeType":"VariableDeclaration","scope":2054,"src":"9377:25:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$46_storage","typeString":"uint256[46]"},"typeName":{"baseType":{"id":2050,"name":"uint256","nodeType":"ElementaryTypeName","src":"9377:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2052,"length":{"hexValue":"3436","id":2051,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9385:2:10","typeDescriptions":{"typeIdentifier":"t_rational_46_by_1","typeString":"int_const 46"},"value":"46"},"nodeType":"ArrayTypeName","src":"9377:11:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$46_storage_ptr","typeString":"uint256[46]"}},"visibility":"private"}],"scope":2055,"src":"2484:6921:10","usedErrors":[]}],"src":"124:9282:10"},"id":10},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol","exportedSymbols":{"IERC20MetadataUpgradeable":[2079],"IERC20Upgradeable":[1642]},"id":2080,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2056,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"110:23:11"},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol","file":"../IERC20Upgradeable.sol","id":2057,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2080,"sourceUnit":1643,"src":"135:34:11","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2059,"name":"IERC20Upgradeable","nodeType":"IdentifierPath","referencedDeclaration":1642,"src":"327:17:11"},"id":2060,"nodeType":"InheritanceSpecifier","src":"327:17:11"}],"canonicalName":"IERC20MetadataUpgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":2058,"nodeType":"StructuredDocumentation","src":"171:116:11","text":" @dev Interface for the optional metadata functions from the ERC20 standard.\n _Available since v4.1._"},"fullyImplemented":false,"id":2079,"linearizedBaseContracts":[2079,1642],"name":"IERC20MetadataUpgradeable","nameLocation":"298:25:11","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2061,"nodeType":"StructuredDocumentation","src":"351:54:11","text":" @dev Returns the name of the token."},"functionSelector":"06fdde03","id":2066,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"419:4:11","nodeType":"FunctionDefinition","parameters":{"id":2062,"nodeType":"ParameterList","parameters":[],"src":"423:2:11"},"returnParameters":{"id":2065,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2064,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2066,"src":"449:13:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2063,"name":"string","nodeType":"ElementaryTypeName","src":"449:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"448:15:11"},"scope":2079,"src":"410:54:11","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2067,"nodeType":"StructuredDocumentation","src":"470:56:11","text":" @dev Returns the symbol of the token."},"functionSelector":"95d89b41","id":2072,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"540:6:11","nodeType":"FunctionDefinition","parameters":{"id":2068,"nodeType":"ParameterList","parameters":[],"src":"546:2:11"},"returnParameters":{"id":2071,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2070,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2072,"src":"572:13:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2069,"name":"string","nodeType":"ElementaryTypeName","src":"572:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"571:15:11"},"scope":2079,"src":"531:56:11","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2073,"nodeType":"StructuredDocumentation","src":"593:65:11","text":" @dev Returns the decimals places of the token."},"functionSelector":"313ce567","id":2078,"implemented":false,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"672:8:11","nodeType":"FunctionDefinition","parameters":{"id":2074,"nodeType":"ParameterList","parameters":[],"src":"680:2:11"},"returnParameters":{"id":2077,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2076,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2078,"src":"706:5:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2075,"name":"uint8","nodeType":"ElementaryTypeName","src":"706:5:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"705:7:11"},"scope":2079,"src":"663:50:11","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2080,"src":"288:427:11","usedErrors":[]}],"src":"110:606:11"},"id":11},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2590],"ContextUpgradeable":[2788],"CountersUpgradeable":[2862],"ECDSAUpgradeable":[3458],"EIP712Upgradeable":[3608],"ERC20PermitUpgradeable":[2270],"ERC20Upgradeable":[1564],"IERC20MetadataUpgradeable":[2079],"IERC20PermitUpgradeable":[2306],"IERC20Upgradeable":[1642],"Initializable":[689],"MathUpgradeable":[4473],"StringsUpgradeable":[3097]},"id":2271,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2081,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"128:23:12"},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol","file":"./draft-IERC20PermitUpgradeable.sol","id":2082,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2271,"sourceUnit":2307,"src":"153:45:12","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol","file":"../ERC20Upgradeable.sol","id":2083,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2271,"sourceUnit":1565,"src":"199:33:12","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol","file":"../../../utils/cryptography/ECDSAUpgradeable.sol","id":2084,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2271,"sourceUnit":3459,"src":"233:58:12","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol","file":"../../../utils/cryptography/EIP712Upgradeable.sol","id":2085,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2271,"sourceUnit":3609,"src":"292:59:12","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol","file":"../../../utils/CountersUpgradeable.sol","id":2086,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2271,"sourceUnit":2863,"src":"352:48:12","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../../../proxy/utils/Initializable.sol","id":2087,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2271,"sourceUnit":690,"src":"401:48:12","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2089,"name":"Initializable","nodeType":"IdentifierPath","referencedDeclaration":689,"src":"1043:13:12"},"id":2090,"nodeType":"InheritanceSpecifier","src":"1043:13:12"},{"baseName":{"id":2091,"name":"ERC20Upgradeable","nodeType":"IdentifierPath","referencedDeclaration":1564,"src":"1058:16:12"},"id":2092,"nodeType":"InheritanceSpecifier","src":"1058:16:12"},{"baseName":{"id":2093,"name":"IERC20PermitUpgradeable","nodeType":"IdentifierPath","referencedDeclaration":2306,"src":"1076:23:12"},"id":2094,"nodeType":"InheritanceSpecifier","src":"1076:23:12"},{"baseName":{"id":2095,"name":"EIP712Upgradeable","nodeType":"IdentifierPath","referencedDeclaration":3608,"src":"1101:17:12"},"id":2096,"nodeType":"InheritanceSpecifier","src":"1101:17:12"}],"canonicalName":"ERC20PermitUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":2088,"nodeType":"StructuredDocumentation","src":"451:547:12","text":" @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all.\n _Available since v3.4._\n @custom:storage-size 51"},"fullyImplemented":true,"id":2270,"linearizedBaseContracts":[2270,3608,2306,1564,2079,1642,2788,689],"name":"ERC20PermitUpgradeable","nameLocation":"1017:22:12","nodeType":"ContractDefinition","nodes":[{"id":2100,"libraryName":{"id":2097,"name":"CountersUpgradeable","nodeType":"IdentifierPath","referencedDeclaration":2862,"src":"1131:19:12"},"nodeType":"UsingForDirective","src":"1125:58:12","typeName":{"id":2099,"nodeType":"UserDefinedTypeName","pathNode":{"id":2098,"name":"CountersUpgradeable.Counter","nodeType":"IdentifierPath","referencedDeclaration":2794,"src":"1155:27:12"},"referencedDeclaration":2794,"src":"1155:27:12","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2794_storage_ptr","typeString":"struct CountersUpgradeable.Counter"}}},{"constant":false,"id":2105,"mutability":"mutable","name":"_nonces","nameLocation":"1245:7:12","nodeType":"VariableDeclaration","scope":2270,"src":"1189:63:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Counter_$2794_storage_$","typeString":"mapping(address => struct CountersUpgradeable.Counter)"},"typeName":{"id":2104,"keyType":{"id":2101,"name":"address","nodeType":"ElementaryTypeName","src":"1197:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1189:47:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Counter_$2794_storage_$","typeString":"mapping(address => struct CountersUpgradeable.Counter)"},"valueType":{"id":2103,"nodeType":"UserDefinedTypeName","pathNode":{"id":2102,"name":"CountersUpgradeable.Counter","nodeType":"IdentifierPath","referencedDeclaration":2794,"src":"1208:27:12"},"referencedDeclaration":2794,"src":"1208:27:12","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2794_storage_ptr","typeString":"struct CountersUpgradeable.Counter"}}},"visibility":"private"},{"constant":true,"id":2110,"mutability":"constant","name":"_PERMIT_TYPEHASH","nameLocation":"1336:16:12","nodeType":"VariableDeclaration","scope":2270,"src":"1311:147:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2106,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1311:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"5065726d69742861646472657373206f776e65722c61646472657373207370656e6465722c75696e743235362076616c75652c75696e74323536206e6f6e63652c75696e7432353620646561646c696e6529","id":2108,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1373:84:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9","typeString":"literal_string \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\""},"value":"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9","typeString":"literal_string \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\""}],"id":2107,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1363:9:12","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2109,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1363:95:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"documentation":{"id":2111,"nodeType":"StructuredDocumentation","src":"1464:254:12","text":" @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\n However, to ensure consistency with the upgradeable transpiler, we will continue\n to reserve a slot.\n @custom:oz-renamed-from _PERMIT_TYPEHASH"},"id":2113,"mutability":"mutable","name":"_PERMIT_TYPEHASH_DEPRECATED_SLOT","nameLocation":"1791:32:12","nodeType":"VariableDeclaration","scope":2270,"src":"1775:48:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2112,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1775:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"body":{"id":2126,"nodeType":"Block","src":"2129:51:12","statements":[{"expression":{"arguments":[{"id":2122,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2116,"src":"2163:4:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"31","id":2123,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2169:3:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_c89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6","typeString":"literal_string \"1\""},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_c89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6","typeString":"literal_string \"1\""}],"id":2121,"name":"__EIP712_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"2139:23:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory,string memory)"}},"id":2124,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2139:34:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2125,"nodeType":"ExpressionStatement","src":"2139:34:12"}]},"documentation":{"id":2114,"nodeType":"StructuredDocumentation","src":"1830:220:12","text":" @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n It's a good idea to use the same `name` that is defined as the ERC20 token name."},"id":2127,"implemented":true,"kind":"function","modifiers":[{"id":2119,"kind":"modifierInvocation","modifierName":{"id":2118,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":634,"src":"2112:16:12"},"nodeType":"ModifierInvocation","src":"2112:16:12"}],"name":"__ERC20Permit_init","nameLocation":"2064:18:12","nodeType":"FunctionDefinition","parameters":{"id":2117,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2116,"mutability":"mutable","name":"name","nameLocation":"2097:4:12","nodeType":"VariableDeclaration","scope":2127,"src":"2083:18:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2115,"name":"string","nodeType":"ElementaryTypeName","src":"2083:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2082:20:12"},"returnParameters":{"id":2120,"nodeType":"ParameterList","parameters":[],"src":"2129:0:12"},"scope":2270,"src":"2055:125:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2134,"nodeType":"Block","src":"2265:2:12","statements":[]},"id":2135,"implemented":true,"kind":"function","modifiers":[{"id":2132,"kind":"modifierInvocation","modifierName":{"id":2131,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":634,"src":"2248:16:12"},"nodeType":"ModifierInvocation","src":"2248:16:12"}],"name":"__ERC20Permit_init_unchained","nameLocation":"2195:28:12","nodeType":"FunctionDefinition","parameters":{"id":2130,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2129,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2135,"src":"2224:13:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2128,"name":"string","nodeType":"ElementaryTypeName","src":"2224:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2223:15:12"},"returnParameters":{"id":2133,"nodeType":"ParameterList","parameters":[],"src":"2265:0:12"},"scope":2270,"src":"2186:81:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[2291],"body":{"id":2207,"nodeType":"Block","src":"2526:439:12","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2155,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"2544:5:12","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2156,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"2544:15:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":2157,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2144,"src":"2563:8:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2544:27:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332305065726d69743a206578706972656420646561646c696e65","id":2159,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2573:31:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd","typeString":"literal_string \"ERC20Permit: expired deadline\""},"value":"ERC20Permit: expired deadline"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd","typeString":"literal_string \"ERC20Permit: expired deadline\""}],"id":2154,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2536:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2160,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2536:69:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2161,"nodeType":"ExpressionStatement","src":"2536:69:12"},{"assignments":[2163],"declarations":[{"constant":false,"id":2163,"mutability":"mutable","name":"structHash","nameLocation":"2624:10:12","nodeType":"VariableDeclaration","scope":2207,"src":"2616:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2162,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2616:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2177,"initialValue":{"arguments":[{"arguments":[{"id":2167,"name":"_PERMIT_TYPEHASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2110,"src":"2658:16:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2168,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2138,"src":"2676:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2169,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2140,"src":"2683:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2170,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2142,"src":"2692:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":2172,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2138,"src":"2709:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2171,"name":"_useNonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2264,"src":"2699:9:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$_t_uint256_$","typeString":"function (address) returns (uint256)"}},"id":2173,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2699:16:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2174,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2144,"src":"2717:8:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2165,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2647:3:12","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2166,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encode","nodeType":"MemberAccess","src":"2647:10:12","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2175,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2647:79:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2164,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2637:9:12","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2176,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2637:90:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2616:111:12"},{"assignments":[2179],"declarations":[{"constant":false,"id":2179,"mutability":"mutable","name":"hash","nameLocation":"2746:4:12","nodeType":"VariableDeclaration","scope":2207,"src":"2738:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2178,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2738:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2183,"initialValue":{"arguments":[{"id":2181,"name":"structHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2163,"src":"2770:10:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2180,"name":"_hashTypedDataV4","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3584,"src":"2753:16:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":2182,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2753:28:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2738:43:12"},{"assignments":[2185],"declarations":[{"constant":false,"id":2185,"mutability":"mutable","name":"signer","nameLocation":"2800:6:12","nodeType":"VariableDeclaration","scope":2207,"src":"2792:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2184,"name":"address","nodeType":"ElementaryTypeName","src":"2792:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2193,"initialValue":{"arguments":[{"id":2188,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2179,"src":"2834:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2189,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2146,"src":"2840:1:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":2190,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2148,"src":"2843:1:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2191,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2150,"src":"2846:1:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":2186,"name":"ECDSAUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3458,"src":"2809:16:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ECDSAUpgradeable_$3458_$","typeString":"type(library ECDSAUpgradeable)"}},"id":2187,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"recover","nodeType":"MemberAccess","referencedDeclaration":3398,"src":"2809:24:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":2192,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2809:39:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2792:56:12"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2197,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2195,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2185,"src":"2866:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2196,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2138,"src":"2876:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2866:15:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332305065726d69743a20696e76616c6964207369676e6174757265","id":2198,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2883:32:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124","typeString":"literal_string \"ERC20Permit: invalid signature\""},"value":"ERC20Permit: invalid signature"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124","typeString":"literal_string \"ERC20Permit: invalid signature\""}],"id":2194,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2858:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2199,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2858:58:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2200,"nodeType":"ExpressionStatement","src":"2858:58:12"},{"expression":{"arguments":[{"id":2202,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2138,"src":"2936:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2203,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2140,"src":"2943:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2204,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2142,"src":"2952:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2201,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1493,"src":"2927:8:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2205,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2927:31:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2206,"nodeType":"ExpressionStatement","src":"2927:31:12"}]},"documentation":{"id":2136,"nodeType":"StructuredDocumentation","src":"2273:50:12","text":" @dev See {IERC20Permit-permit}."},"functionSelector":"d505accf","id":2208,"implemented":true,"kind":"function","modifiers":[],"name":"permit","nameLocation":"2337:6:12","nodeType":"FunctionDefinition","overrides":{"id":2152,"nodeType":"OverrideSpecifier","overrides":[],"src":"2517:8:12"},"parameters":{"id":2151,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2138,"mutability":"mutable","name":"owner","nameLocation":"2361:5:12","nodeType":"VariableDeclaration","scope":2208,"src":"2353:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2137,"name":"address","nodeType":"ElementaryTypeName","src":"2353:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2140,"mutability":"mutable","name":"spender","nameLocation":"2384:7:12","nodeType":"VariableDeclaration","scope":2208,"src":"2376:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2139,"name":"address","nodeType":"ElementaryTypeName","src":"2376:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2142,"mutability":"mutable","name":"value","nameLocation":"2409:5:12","nodeType":"VariableDeclaration","scope":2208,"src":"2401:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2141,"name":"uint256","nodeType":"ElementaryTypeName","src":"2401:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2144,"mutability":"mutable","name":"deadline","nameLocation":"2432:8:12","nodeType":"VariableDeclaration","scope":2208,"src":"2424:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2143,"name":"uint256","nodeType":"ElementaryTypeName","src":"2424:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2146,"mutability":"mutable","name":"v","nameLocation":"2456:1:12","nodeType":"VariableDeclaration","scope":2208,"src":"2450:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2145,"name":"uint8","nodeType":"ElementaryTypeName","src":"2450:5:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":2148,"mutability":"mutable","name":"r","nameLocation":"2475:1:12","nodeType":"VariableDeclaration","scope":2208,"src":"2467:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2147,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2467:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2150,"mutability":"mutable","name":"s","nameLocation":"2494:1:12","nodeType":"VariableDeclaration","scope":2208,"src":"2486:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2149,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2486:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2343:158:12"},"returnParameters":{"id":2153,"nodeType":"ParameterList","parameters":[],"src":"2526:0:12"},"scope":2270,"src":"2328:637:12","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[2299],"body":{"id":2223,"nodeType":"Block","src":"3104:48:12","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"baseExpression":{"id":2217,"name":"_nonces","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2105,"src":"3121:7:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Counter_$2794_storage_$","typeString":"mapping(address => struct CountersUpgradeable.Counter storage ref)"}},"id":2219,"indexExpression":{"id":2218,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"3129:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3121:14:12","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2794_storage","typeString":"struct CountersUpgradeable.Counter storage ref"}},"id":2220,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"current","nodeType":"MemberAccess","referencedDeclaration":2806,"src":"3121:22:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Counter_$2794_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_Counter_$2794_storage_ptr_$","typeString":"function (struct CountersUpgradeable.Counter storage pointer) view returns (uint256)"}},"id":2221,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3121:24:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2216,"id":2222,"nodeType":"Return","src":"3114:31:12"}]},"documentation":{"id":2209,"nodeType":"StructuredDocumentation","src":"2971:50:12","text":" @dev See {IERC20Permit-nonces}."},"functionSelector":"7ecebe00","id":2224,"implemented":true,"kind":"function","modifiers":[],"name":"nonces","nameLocation":"3035:6:12","nodeType":"FunctionDefinition","overrides":{"id":2213,"nodeType":"OverrideSpecifier","overrides":[],"src":"3077:8:12"},"parameters":{"id":2212,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2211,"mutability":"mutable","name":"owner","nameLocation":"3050:5:12","nodeType":"VariableDeclaration","scope":2224,"src":"3042:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2210,"name":"address","nodeType":"ElementaryTypeName","src":"3042:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3041:15:12"},"returnParameters":{"id":2216,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2215,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2224,"src":"3095:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2214,"name":"uint256","nodeType":"ElementaryTypeName","src":"3095:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3094:9:12"},"scope":2270,"src":"3026:126:12","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2305],"body":{"id":2234,"nodeType":"Block","src":"3345:44:12","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":2231,"name":"_domainSeparatorV4","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3541,"src":"3362:18:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes32_$","typeString":"function () view returns (bytes32)"}},"id":2232,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3362:20:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2230,"id":2233,"nodeType":"Return","src":"3355:27:12"}]},"documentation":{"id":2225,"nodeType":"StructuredDocumentation","src":"3158:60:12","text":" @dev See {IERC20Permit-DOMAIN_SEPARATOR}."},"functionSelector":"3644e515","id":2235,"implemented":true,"kind":"function","modifiers":[],"name":"DOMAIN_SEPARATOR","nameLocation":"3285:16:12","nodeType":"FunctionDefinition","overrides":{"id":2227,"nodeType":"OverrideSpecifier","overrides":[],"src":"3318:8:12"},"parameters":{"id":2226,"nodeType":"ParameterList","parameters":[],"src":"3301:2:12"},"returnParameters":{"id":2230,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2229,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2235,"src":"3336:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2228,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3336:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3335:9:12"},"scope":2270,"src":"3276:113:12","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":2263,"nodeType":"Block","src":"3597:137:12","statements":[{"assignments":[2247],"declarations":[{"constant":false,"id":2247,"mutability":"mutable","name":"nonce","nameLocation":"3643:5:12","nodeType":"VariableDeclaration","scope":2263,"src":"3607:41:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2794_storage_ptr","typeString":"struct CountersUpgradeable.Counter"},"typeName":{"id":2246,"nodeType":"UserDefinedTypeName","pathNode":{"id":2245,"name":"CountersUpgradeable.Counter","nodeType":"IdentifierPath","referencedDeclaration":2794,"src":"3607:27:12"},"referencedDeclaration":2794,"src":"3607:27:12","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2794_storage_ptr","typeString":"struct CountersUpgradeable.Counter"}},"visibility":"internal"}],"id":2251,"initialValue":{"baseExpression":{"id":2248,"name":"_nonces","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2105,"src":"3651:7:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Counter_$2794_storage_$","typeString":"mapping(address => struct CountersUpgradeable.Counter storage ref)"}},"id":2250,"indexExpression":{"id":2249,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2238,"src":"3659:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3651:14:12","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2794_storage","typeString":"struct CountersUpgradeable.Counter storage ref"}},"nodeType":"VariableDeclarationStatement","src":"3607:58:12"},{"expression":{"id":2256,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2252,"name":"current","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2241,"src":"3675:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2253,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2247,"src":"3685:5:12","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2794_storage_ptr","typeString":"struct CountersUpgradeable.Counter storage pointer"}},"id":2254,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"current","nodeType":"MemberAccess","referencedDeclaration":2806,"src":"3685:13:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Counter_$2794_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_Counter_$2794_storage_ptr_$","typeString":"function (struct CountersUpgradeable.Counter storage pointer) view returns (uint256)"}},"id":2255,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3685:15:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3675:25:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2257,"nodeType":"ExpressionStatement","src":"3675:25:12"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2258,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2247,"src":"3710:5:12","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2794_storage_ptr","typeString":"struct CountersUpgradeable.Counter storage pointer"}},"id":2260,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"increment","nodeType":"MemberAccess","referencedDeclaration":2820,"src":"3710:15:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Counter_$2794_storage_ptr_$returns$__$bound_to$_t_struct$_Counter_$2794_storage_ptr_$","typeString":"function (struct CountersUpgradeable.Counter storage pointer)"}},"id":2261,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3710:17:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2262,"nodeType":"ExpressionStatement","src":"3710:17:12"}]},"documentation":{"id":2236,"nodeType":"StructuredDocumentation","src":"3395:120:12","text":" @dev \"Consume a nonce\": return the current value and increment.\n _Available since v4.1._"},"id":2264,"implemented":true,"kind":"function","modifiers":[],"name":"_useNonce","nameLocation":"3529:9:12","nodeType":"FunctionDefinition","parameters":{"id":2239,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2238,"mutability":"mutable","name":"owner","nameLocation":"3547:5:12","nodeType":"VariableDeclaration","scope":2264,"src":"3539:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2237,"name":"address","nodeType":"ElementaryTypeName","src":"3539:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3538:15:12"},"returnParameters":{"id":2242,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2241,"mutability":"mutable","name":"current","nameLocation":"3588:7:12","nodeType":"VariableDeclaration","scope":2264,"src":"3580:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2240,"name":"uint256","nodeType":"ElementaryTypeName","src":"3580:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3579:17:12"},"scope":2270,"src":"3520:214:12","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":2265,"nodeType":"StructuredDocumentation","src":"3740:254:12","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":2269,"mutability":"mutable","name":"__gap","nameLocation":"4019:5:12","nodeType":"VariableDeclaration","scope":2270,"src":"3999:25:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage","typeString":"uint256[49]"},"typeName":{"baseType":{"id":2266,"name":"uint256","nodeType":"ElementaryTypeName","src":"3999:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2268,"length":{"hexValue":"3439","id":2267,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4007:2:12","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"nodeType":"ArrayTypeName","src":"3999:11:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage_ptr","typeString":"uint256[49]"}},"visibility":"private"}],"scope":2271,"src":"999:3028:12","usedErrors":[]}],"src":"128:3900:12"},"id":12},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol","exportedSymbols":{"IERC20PermitUpgradeable":[2306]},"id":2307,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2272,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"114:23:13"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20PermitUpgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":2273,"nodeType":"StructuredDocumentation","src":"139:480:13","text":" @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all."},"fullyImplemented":false,"id":2306,"linearizedBaseContracts":[2306],"name":"IERC20PermitUpgradeable","nameLocation":"630:23:13","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2274,"nodeType":"StructuredDocumentation","src":"660:792:13","text":" @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section]."},"functionSelector":"d505accf","id":2291,"implemented":false,"kind":"function","modifiers":[],"name":"permit","nameLocation":"1466:6:13","nodeType":"FunctionDefinition","parameters":{"id":2289,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2276,"mutability":"mutable","name":"owner","nameLocation":"1490:5:13","nodeType":"VariableDeclaration","scope":2291,"src":"1482:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2275,"name":"address","nodeType":"ElementaryTypeName","src":"1482:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2278,"mutability":"mutable","name":"spender","nameLocation":"1513:7:13","nodeType":"VariableDeclaration","scope":2291,"src":"1505:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2277,"name":"address","nodeType":"ElementaryTypeName","src":"1505:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2280,"mutability":"mutable","name":"value","nameLocation":"1538:5:13","nodeType":"VariableDeclaration","scope":2291,"src":"1530:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2279,"name":"uint256","nodeType":"ElementaryTypeName","src":"1530:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2282,"mutability":"mutable","name":"deadline","nameLocation":"1561:8:13","nodeType":"VariableDeclaration","scope":2291,"src":"1553:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2281,"name":"uint256","nodeType":"ElementaryTypeName","src":"1553:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2284,"mutability":"mutable","name":"v","nameLocation":"1585:1:13","nodeType":"VariableDeclaration","scope":2291,"src":"1579:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2283,"name":"uint8","nodeType":"ElementaryTypeName","src":"1579:5:13","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":2286,"mutability":"mutable","name":"r","nameLocation":"1604:1:13","nodeType":"VariableDeclaration","scope":2291,"src":"1596:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2285,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1596:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2288,"mutability":"mutable","name":"s","nameLocation":"1623:1:13","nodeType":"VariableDeclaration","scope":2291,"src":"1615:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2287,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1615:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1472:158:13"},"returnParameters":{"id":2290,"nodeType":"ParameterList","parameters":[],"src":"1639:0:13"},"scope":2306,"src":"1457:183:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2292,"nodeType":"StructuredDocumentation","src":"1646:294:13","text":" @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."},"functionSelector":"7ecebe00","id":2299,"implemented":false,"kind":"function","modifiers":[],"name":"nonces","nameLocation":"1954:6:13","nodeType":"FunctionDefinition","parameters":{"id":2295,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2294,"mutability":"mutable","name":"owner","nameLocation":"1969:5:13","nodeType":"VariableDeclaration","scope":2299,"src":"1961:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2293,"name":"address","nodeType":"ElementaryTypeName","src":"1961:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1960:15:13"},"returnParameters":{"id":2298,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2297,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2299,"src":"1999:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2296,"name":"uint256","nodeType":"ElementaryTypeName","src":"1999:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1998:9:13"},"scope":2306,"src":"1945:63:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2300,"nodeType":"StructuredDocumentation","src":"2014:128:13","text":" @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"functionSelector":"3644e515","id":2305,"implemented":false,"kind":"function","modifiers":[],"name":"DOMAIN_SEPARATOR","nameLocation":"2209:16:13","nodeType":"FunctionDefinition","parameters":{"id":2301,"nodeType":"ParameterList","parameters":[],"src":"2225:2:13"},"returnParameters":{"id":2304,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2303,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2305,"src":"2251:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2302,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2251:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2250:9:13"},"scope":2306,"src":"2200:60:13","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2307,"src":"620:1642:13","usedErrors":[]}],"src":"114:2149:13"},"id":13},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2590]},"id":2591,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2308,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:14"},{"abstract":false,"baseContracts":[],"canonicalName":"AddressUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":2309,"nodeType":"StructuredDocumentation","src":"126:67:14","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":2590,"linearizedBaseContracts":[2590],"name":"AddressUpgradeable","nameLocation":"202:18:14","nodeType":"ContractDefinition","nodes":[{"body":{"id":2323,"nodeType":"Block","src":"1252:254:14","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":2317,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2312,"src":"1476:7:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2318,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"code","nodeType":"MemberAccess","src":"1476:12:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"1476:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2320,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1498:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1476:23:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2316,"id":2322,"nodeType":"Return","src":"1469:30:14"}]},"documentation":{"id":2310,"nodeType":"StructuredDocumentation","src":"227:954:14","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":2324,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1195:10:14","nodeType":"FunctionDefinition","parameters":{"id":2313,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2312,"mutability":"mutable","name":"account","nameLocation":"1214:7:14","nodeType":"VariableDeclaration","scope":2324,"src":"1206:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2311,"name":"address","nodeType":"ElementaryTypeName","src":"1206:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1205:17:14"},"returnParameters":{"id":2316,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2315,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2324,"src":"1246:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2314,"name":"bool","nodeType":"ElementaryTypeName","src":"1246:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1245:6:14"},"scope":2590,"src":"1186:320:14","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2357,"nodeType":"Block","src":"2494:241:14","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2339,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2335,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2520:4:14","typeDescriptions":{"typeIdentifier":"t_contract$_AddressUpgradeable_$2590","typeString":"library AddressUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressUpgradeable_$2590","typeString":"library AddressUpgradeable"}],"id":2334,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2512:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2333,"name":"address","nodeType":"ElementaryTypeName","src":"2512:7:14","typeDescriptions":{}}},"id":2336,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2512:13:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2337,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"2512:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2338,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2329,"src":"2537:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2512:31:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":2340,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2545:31:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":2332,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2504:7:14","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2341,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2504:73:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2342,"nodeType":"ExpressionStatement","src":"2504:73:14"},{"assignments":[2344,null],"declarations":[{"constant":false,"id":2344,"mutability":"mutable","name":"success","nameLocation":"2594:7:14","nodeType":"VariableDeclaration","scope":2357,"src":"2589:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2343,"name":"bool","nodeType":"ElementaryTypeName","src":"2589:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":2351,"initialValue":{"arguments":[{"hexValue":"","id":2349,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2637:2:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":2345,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2327,"src":"2607:9:14","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":2346,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"2607:14:14","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":2347,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2329,"src":"2629:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2607:29:14","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2350,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2607:33:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2588:52:14"},{"expression":{"arguments":[{"id":2353,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2344,"src":"2658:7:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":2354,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2667:60:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":2352,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2650:7:14","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2355,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2650:78:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2356,"nodeType":"ExpressionStatement","src":"2650:78:14"}]},"documentation":{"id":2325,"nodeType":"StructuredDocumentation","src":"1512:906:14","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":2358,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2432:9:14","nodeType":"FunctionDefinition","parameters":{"id":2330,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2327,"mutability":"mutable","name":"recipient","nameLocation":"2458:9:14","nodeType":"VariableDeclaration","scope":2358,"src":"2442:25:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":2326,"name":"address","nodeType":"ElementaryTypeName","src":"2442:15:14","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":2329,"mutability":"mutable","name":"amount","nameLocation":"2477:6:14","nodeType":"VariableDeclaration","scope":2358,"src":"2469:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2328,"name":"uint256","nodeType":"ElementaryTypeName","src":"2469:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2441:43:14"},"returnParameters":{"id":2331,"nodeType":"ParameterList","parameters":[],"src":"2494:0:14"},"scope":2590,"src":"2423:312:14","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2375,"nodeType":"Block","src":"3566:96:14","statements":[{"expression":{"arguments":[{"id":2369,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2361,"src":"3605:6:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2370,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2363,"src":"3613:4:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":2371,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3619:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":2372,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3622:32:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":2368,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[2416,2460],"referencedDeclaration":2460,"src":"3583:21:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":2373,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3583:72:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2367,"id":2374,"nodeType":"Return","src":"3576:79:14"}]},"documentation":{"id":2359,"nodeType":"StructuredDocumentation","src":"2741:731:14","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":2376,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3486:12:14","nodeType":"FunctionDefinition","parameters":{"id":2364,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2361,"mutability":"mutable","name":"target","nameLocation":"3507:6:14","nodeType":"VariableDeclaration","scope":2376,"src":"3499:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2360,"name":"address","nodeType":"ElementaryTypeName","src":"3499:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2363,"mutability":"mutable","name":"data","nameLocation":"3528:4:14","nodeType":"VariableDeclaration","scope":2376,"src":"3515:17:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2362,"name":"bytes","nodeType":"ElementaryTypeName","src":"3515:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3498:35:14"},"returnParameters":{"id":2367,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2366,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2376,"src":"3552:12:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2365,"name":"bytes","nodeType":"ElementaryTypeName","src":"3552:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3551:14:14"},"scope":2590,"src":"3477:185:14","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2395,"nodeType":"Block","src":"4031:76:14","statements":[{"expression":{"arguments":[{"id":2389,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2379,"src":"4070:6:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2390,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2381,"src":"4078:4:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":2391,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4084:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":2392,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2383,"src":"4087:12:14","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2388,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[2416,2460],"referencedDeclaration":2460,"src":"4048:21:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":2393,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4048:52:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2387,"id":2394,"nodeType":"Return","src":"4041:59:14"}]},"documentation":{"id":2377,"nodeType":"StructuredDocumentation","src":"3668:211:14","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":2396,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3893:12:14","nodeType":"FunctionDefinition","parameters":{"id":2384,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2379,"mutability":"mutable","name":"target","nameLocation":"3923:6:14","nodeType":"VariableDeclaration","scope":2396,"src":"3915:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2378,"name":"address","nodeType":"ElementaryTypeName","src":"3915:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2381,"mutability":"mutable","name":"data","nameLocation":"3952:4:14","nodeType":"VariableDeclaration","scope":2396,"src":"3939:17:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2380,"name":"bytes","nodeType":"ElementaryTypeName","src":"3939:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2383,"mutability":"mutable","name":"errorMessage","nameLocation":"3980:12:14","nodeType":"VariableDeclaration","scope":2396,"src":"3966:26:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2382,"name":"string","nodeType":"ElementaryTypeName","src":"3966:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3905:93:14"},"returnParameters":{"id":2387,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2386,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2396,"src":"4017:12:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2385,"name":"bytes","nodeType":"ElementaryTypeName","src":"4017:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4016:14:14"},"scope":2590,"src":"3884:223:14","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2415,"nodeType":"Block","src":"4612:111:14","statements":[{"expression":{"arguments":[{"id":2409,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2399,"src":"4651:6:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2410,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2401,"src":"4659:4:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2411,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2403,"src":"4665:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":2412,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4672:43:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":2408,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[2416,2460],"referencedDeclaration":2460,"src":"4629:21:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":2413,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4629:87:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2407,"id":2414,"nodeType":"Return","src":"4622:94:14"}]},"documentation":{"id":2397,"nodeType":"StructuredDocumentation","src":"4113:351:14","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":2416,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4478:21:14","nodeType":"FunctionDefinition","parameters":{"id":2404,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2399,"mutability":"mutable","name":"target","nameLocation":"4517:6:14","nodeType":"VariableDeclaration","scope":2416,"src":"4509:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2398,"name":"address","nodeType":"ElementaryTypeName","src":"4509:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2401,"mutability":"mutable","name":"data","nameLocation":"4546:4:14","nodeType":"VariableDeclaration","scope":2416,"src":"4533:17:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2400,"name":"bytes","nodeType":"ElementaryTypeName","src":"4533:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2403,"mutability":"mutable","name":"value","nameLocation":"4568:5:14","nodeType":"VariableDeclaration","scope":2416,"src":"4560:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2402,"name":"uint256","nodeType":"ElementaryTypeName","src":"4560:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4499:80:14"},"returnParameters":{"id":2407,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2406,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2416,"src":"4598:12:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2405,"name":"bytes","nodeType":"ElementaryTypeName","src":"4598:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4597:14:14"},"scope":2590,"src":"4469:254:14","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2459,"nodeType":"Block","src":"5150:267:14","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2437,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2433,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5176:4:14","typeDescriptions":{"typeIdentifier":"t_contract$_AddressUpgradeable_$2590","typeString":"library AddressUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressUpgradeable_$2590","typeString":"library AddressUpgradeable"}],"id":2432,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5168:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2431,"name":"address","nodeType":"ElementaryTypeName","src":"5168:7:14","typeDescriptions":{}}},"id":2434,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5168:13:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2435,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"5168:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2436,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2423,"src":"5193:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5168:30:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":2438,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5200:40:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":2430,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5160:7:14","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2439,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5160:81:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2440,"nodeType":"ExpressionStatement","src":"5160:81:14"},{"assignments":[2442,2444],"declarations":[{"constant":false,"id":2442,"mutability":"mutable","name":"success","nameLocation":"5257:7:14","nodeType":"VariableDeclaration","scope":2459,"src":"5252:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2441,"name":"bool","nodeType":"ElementaryTypeName","src":"5252:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2444,"mutability":"mutable","name":"returndata","nameLocation":"5279:10:14","nodeType":"VariableDeclaration","scope":2459,"src":"5266:23:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2443,"name":"bytes","nodeType":"ElementaryTypeName","src":"5266:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2451,"initialValue":{"arguments":[{"id":2449,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2421,"src":"5319:4:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2445,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2419,"src":"5293:6:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2446,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"5293:11:14","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2448,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":2447,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2423,"src":"5312:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5293:25:14","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2450,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5293:31:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5251:73:14"},{"expression":{"arguments":[{"id":2453,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2419,"src":"5368:6:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2454,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2442,"src":"5376:7:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2455,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2444,"src":"5385:10:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2456,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2425,"src":"5397:12:14","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2452,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2545,"src":"5341:26:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":2457,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5341:69:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2429,"id":2458,"nodeType":"Return","src":"5334:76:14"}]},"documentation":{"id":2417,"nodeType":"StructuredDocumentation","src":"4729:237:14","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":2460,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4980:21:14","nodeType":"FunctionDefinition","parameters":{"id":2426,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2419,"mutability":"mutable","name":"target","nameLocation":"5019:6:14","nodeType":"VariableDeclaration","scope":2460,"src":"5011:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2418,"name":"address","nodeType":"ElementaryTypeName","src":"5011:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2421,"mutability":"mutable","name":"data","nameLocation":"5048:4:14","nodeType":"VariableDeclaration","scope":2460,"src":"5035:17:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2420,"name":"bytes","nodeType":"ElementaryTypeName","src":"5035:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2423,"mutability":"mutable","name":"value","nameLocation":"5070:5:14","nodeType":"VariableDeclaration","scope":2460,"src":"5062:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2422,"name":"uint256","nodeType":"ElementaryTypeName","src":"5062:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2425,"mutability":"mutable","name":"errorMessage","nameLocation":"5099:12:14","nodeType":"VariableDeclaration","scope":2460,"src":"5085:26:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2424,"name":"string","nodeType":"ElementaryTypeName","src":"5085:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5001:116:14"},"returnParameters":{"id":2429,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2428,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2460,"src":"5136:12:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2427,"name":"bytes","nodeType":"ElementaryTypeName","src":"5136:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5135:14:14"},"scope":2590,"src":"4971:446:14","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2476,"nodeType":"Block","src":"5694:97:14","statements":[{"expression":{"arguments":[{"id":2471,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2463,"src":"5730:6:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2472,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2465,"src":"5738:4:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":2473,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5744:39:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":2470,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[2477,2506],"referencedDeclaration":2506,"src":"5711:18:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":2474,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5711:73:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2469,"id":2475,"nodeType":"Return","src":"5704:80:14"}]},"documentation":{"id":2461,"nodeType":"StructuredDocumentation","src":"5423:166:14","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":2477,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5603:18:14","nodeType":"FunctionDefinition","parameters":{"id":2466,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2463,"mutability":"mutable","name":"target","nameLocation":"5630:6:14","nodeType":"VariableDeclaration","scope":2477,"src":"5622:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2462,"name":"address","nodeType":"ElementaryTypeName","src":"5622:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2465,"mutability":"mutable","name":"data","nameLocation":"5651:4:14","nodeType":"VariableDeclaration","scope":2477,"src":"5638:17:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2464,"name":"bytes","nodeType":"ElementaryTypeName","src":"5638:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5621:35:14"},"returnParameters":{"id":2469,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2468,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2477,"src":"5680:12:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2467,"name":"bytes","nodeType":"ElementaryTypeName","src":"5680:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5679:14:14"},"scope":2590,"src":"5594:197:14","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2505,"nodeType":"Block","src":"6133:168:14","statements":[{"assignments":[2490,2492],"declarations":[{"constant":false,"id":2490,"mutability":"mutable","name":"success","nameLocation":"6149:7:14","nodeType":"VariableDeclaration","scope":2505,"src":"6144:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2489,"name":"bool","nodeType":"ElementaryTypeName","src":"6144:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2492,"mutability":"mutable","name":"returndata","nameLocation":"6171:10:14","nodeType":"VariableDeclaration","scope":2505,"src":"6158:23:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2491,"name":"bytes","nodeType":"ElementaryTypeName","src":"6158:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2497,"initialValue":{"arguments":[{"id":2495,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2482,"src":"6203:4:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2493,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2480,"src":"6185:6:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2494,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"staticcall","nodeType":"MemberAccess","src":"6185:17:14","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":2496,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6185:23:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6143:65:14"},{"expression":{"arguments":[{"id":2499,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2480,"src":"6252:6:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2500,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2490,"src":"6260:7:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2501,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2492,"src":"6269:10:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2502,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2484,"src":"6281:12:14","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2498,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2545,"src":"6225:26:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":2503,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6225:69:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2488,"id":2504,"nodeType":"Return","src":"6218:76:14"}]},"documentation":{"id":2478,"nodeType":"StructuredDocumentation","src":"5797:173:14","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":2506,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5984:18:14","nodeType":"FunctionDefinition","parameters":{"id":2485,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2480,"mutability":"mutable","name":"target","nameLocation":"6020:6:14","nodeType":"VariableDeclaration","scope":2506,"src":"6012:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2479,"name":"address","nodeType":"ElementaryTypeName","src":"6012:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2482,"mutability":"mutable","name":"data","nameLocation":"6049:4:14","nodeType":"VariableDeclaration","scope":2506,"src":"6036:17:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2481,"name":"bytes","nodeType":"ElementaryTypeName","src":"6036:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2484,"mutability":"mutable","name":"errorMessage","nameLocation":"6077:12:14","nodeType":"VariableDeclaration","scope":2506,"src":"6063:26:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2483,"name":"string","nodeType":"ElementaryTypeName","src":"6063:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6002:93:14"},"returnParameters":{"id":2488,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2487,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2506,"src":"6119:12:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2486,"name":"bytes","nodeType":"ElementaryTypeName","src":"6119:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6118:14:14"},"scope":2590,"src":"5975:326:14","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2544,"nodeType":"Block","src":"6783:434:14","statements":[{"condition":{"id":2520,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2511,"src":"6797:7:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2542,"nodeType":"Block","src":"7153:58:14","statements":[{"expression":{"arguments":[{"id":2538,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2513,"src":"7175:10:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2539,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2515,"src":"7187:12:14","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2537,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2589,"src":"7167:7:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":2540,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7167:33:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2541,"nodeType":"ExpressionStatement","src":"7167:33:14"}]},"id":2543,"nodeType":"IfStatement","src":"6793:418:14","trueBody":{"id":2536,"nodeType":"Block","src":"6806:341:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2524,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2521,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2513,"src":"6824:10:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2522,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"6824:17:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2523,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6845:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6824:22:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2533,"nodeType":"IfStatement","src":"6820:286:14","trueBody":{"id":2532,"nodeType":"Block","src":"6848:258:14","statements":[{"expression":{"arguments":[{"arguments":[{"id":2527,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2509,"src":"7050:6:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2526,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2324,"src":"7039:10:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":2528,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7039:18:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":2529,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7059:31:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":2525,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7031:7:14","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2530,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7031:60:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2531,"nodeType":"ExpressionStatement","src":"7031:60:14"}]}},{"expression":{"id":2534,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2513,"src":"7126:10:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2519,"id":2535,"nodeType":"Return","src":"7119:17:14"}]}}]},"documentation":{"id":2507,"nodeType":"StructuredDocumentation","src":"6307:277:14","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":2545,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"6598:26:14","nodeType":"FunctionDefinition","parameters":{"id":2516,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2509,"mutability":"mutable","name":"target","nameLocation":"6642:6:14","nodeType":"VariableDeclaration","scope":2545,"src":"6634:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2508,"name":"address","nodeType":"ElementaryTypeName","src":"6634:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2511,"mutability":"mutable","name":"success","nameLocation":"6663:7:14","nodeType":"VariableDeclaration","scope":2545,"src":"6658:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2510,"name":"bool","nodeType":"ElementaryTypeName","src":"6658:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2513,"mutability":"mutable","name":"returndata","nameLocation":"6693:10:14","nodeType":"VariableDeclaration","scope":2545,"src":"6680:23:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2512,"name":"bytes","nodeType":"ElementaryTypeName","src":"6680:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2515,"mutability":"mutable","name":"errorMessage","nameLocation":"6727:12:14","nodeType":"VariableDeclaration","scope":2545,"src":"6713:26:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2514,"name":"string","nodeType":"ElementaryTypeName","src":"6713:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6624:121:14"},"returnParameters":{"id":2519,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2518,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2545,"src":"6769:12:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2517,"name":"bytes","nodeType":"ElementaryTypeName","src":"6769:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6768:14:14"},"scope":2590,"src":"6589:628:14","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2568,"nodeType":"Block","src":"7598:135:14","statements":[{"condition":{"id":2557,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2548,"src":"7612:7:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2566,"nodeType":"Block","src":"7669:58:14","statements":[{"expression":{"arguments":[{"id":2562,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2550,"src":"7691:10:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2563,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2552,"src":"7703:12:14","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2561,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2589,"src":"7683:7:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":2564,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7683:33:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2565,"nodeType":"ExpressionStatement","src":"7683:33:14"}]},"id":2567,"nodeType":"IfStatement","src":"7608:119:14","trueBody":{"id":2560,"nodeType":"Block","src":"7621:42:14","statements":[{"expression":{"id":2558,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2550,"src":"7642:10:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2556,"id":2559,"nodeType":"Return","src":"7635:17:14"}]}}]},"documentation":{"id":2546,"nodeType":"StructuredDocumentation","src":"7223:210:14","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":2569,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"7447:16:14","nodeType":"FunctionDefinition","parameters":{"id":2553,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2548,"mutability":"mutable","name":"success","nameLocation":"7478:7:14","nodeType":"VariableDeclaration","scope":2569,"src":"7473:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2547,"name":"bool","nodeType":"ElementaryTypeName","src":"7473:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2550,"mutability":"mutable","name":"returndata","nameLocation":"7508:10:14","nodeType":"VariableDeclaration","scope":2569,"src":"7495:23:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2549,"name":"bytes","nodeType":"ElementaryTypeName","src":"7495:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2552,"mutability":"mutable","name":"errorMessage","nameLocation":"7542:12:14","nodeType":"VariableDeclaration","scope":2569,"src":"7528:26:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2551,"name":"string","nodeType":"ElementaryTypeName","src":"7528:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7463:97:14"},"returnParameters":{"id":2556,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2555,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2569,"src":"7584:12:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2554,"name":"bytes","nodeType":"ElementaryTypeName","src":"7584:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7583:14:14"},"scope":2590,"src":"7438:295:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2588,"nodeType":"Block","src":"7822:457:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2579,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2576,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2571,"src":"7898:10:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2577,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"7898:17:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2578,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7918:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7898:21:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2586,"nodeType":"Block","src":"8228:45:14","statements":[{"expression":{"arguments":[{"id":2583,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2573,"src":"8249:12:14","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2582,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"8242:6:14","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":2584,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8242:20:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2585,"nodeType":"ExpressionStatement","src":"8242:20:14"}]},"id":2587,"nodeType":"IfStatement","src":"7894:379:14","trueBody":{"id":2581,"nodeType":"Block","src":"7921:301:14","statements":[{"AST":{"nodeType":"YulBlock","src":"8079:133:14","statements":[{"nodeType":"YulVariableDeclaration","src":"8097:40:14","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"8126:10:14"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8120:5:14"},"nodeType":"YulFunctionCall","src":"8120:17:14"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"8101:15:14","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8165:2:14","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"8169:10:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8161:3:14"},"nodeType":"YulFunctionCall","src":"8161:19:14"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"8182:15:14"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8154:6:14"},"nodeType":"YulFunctionCall","src":"8154:44:14"},"nodeType":"YulExpressionStatement","src":"8154:44:14"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":2571,"isOffset":false,"isSlot":false,"src":"8126:10:14","valueSize":1},{"declaration":2571,"isOffset":false,"isSlot":false,"src":"8169:10:14","valueSize":1}],"id":2580,"nodeType":"InlineAssembly","src":"8070:142:14"}]}}]},"id":2589,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"7748:7:14","nodeType":"FunctionDefinition","parameters":{"id":2574,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2571,"mutability":"mutable","name":"returndata","nameLocation":"7769:10:14","nodeType":"VariableDeclaration","scope":2589,"src":"7756:23:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2570,"name":"bytes","nodeType":"ElementaryTypeName","src":"7756:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2573,"mutability":"mutable","name":"errorMessage","nameLocation":"7795:12:14","nodeType":"VariableDeclaration","scope":2589,"src":"7781:26:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2572,"name":"string","nodeType":"ElementaryTypeName","src":"7781:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7755:53:14"},"returnParameters":{"id":2575,"nodeType":"ParameterList","parameters":[],"src":"7822:0:14"},"scope":2590,"src":"7739:540:14","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":2591,"src":"194:8087:14","usedErrors":[]}],"src":"101:8181:14"},"id":14},"@openzeppelin/contracts-upgradeable/utils/ArraysUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ArraysUpgradeable.sol","exportedSymbols":{"ArraysUpgradeable":[2746],"MathUpgradeable":[4473],"StorageSlotUpgradeable":[2922]},"id":2747,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2592,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"100:23:15"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol","file":"./StorageSlotUpgradeable.sol","id":2593,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2747,"sourceUnit":2923,"src":"125:38:15","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol","file":"./math/MathUpgradeable.sol","id":2594,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2747,"sourceUnit":4474,"src":"164:36:15","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ArraysUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":2595,"nodeType":"StructuredDocumentation","src":"202:63:15","text":" @dev Collection of functions related to array types."},"fullyImplemented":true,"id":2746,"linearizedBaseContracts":[2746],"name":"ArraysUpgradeable","nameLocation":"274:17:15","nodeType":"ContractDefinition","nodes":[{"id":2598,"libraryName":{"id":2596,"name":"StorageSlotUpgradeable","nodeType":"IdentifierPath","referencedDeclaration":2922,"src":"304:22:15"},"nodeType":"UsingForDirective","src":"298:41:15","typeName":{"id":2597,"name":"bytes32","nodeType":"ElementaryTypeName","src":"331:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}},{"body":{"id":2681,"nodeType":"Block","src":"855:845:15","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2612,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2609,"name":"array","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2602,"src":"869:5:15","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[] storage pointer"}},"id":2610,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"869:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2611,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"885:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"869:17:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2616,"nodeType":"IfStatement","src":"865:56:15","trueBody":{"id":2615,"nodeType":"Block","src":"888:33:15","statements":[{"expression":{"hexValue":"30","id":2613,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"909:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":2608,"id":2614,"nodeType":"Return","src":"902:8:15"}]}},{"assignments":[2618],"declarations":[{"constant":false,"id":2618,"mutability":"mutable","name":"low","nameLocation":"939:3:15","nodeType":"VariableDeclaration","scope":2681,"src":"931:11:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2617,"name":"uint256","nodeType":"ElementaryTypeName","src":"931:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2620,"initialValue":{"hexValue":"30","id":2619,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"945:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"931:15:15"},{"assignments":[2622],"declarations":[{"constant":false,"id":2622,"mutability":"mutable","name":"high","nameLocation":"964:4:15","nodeType":"VariableDeclaration","scope":2681,"src":"956:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2621,"name":"uint256","nodeType":"ElementaryTypeName","src":"956:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2625,"initialValue":{"expression":{"id":2623,"name":"array","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2602,"src":"971:5:15","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[] storage pointer"}},"id":2624,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"971:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"956:27:15"},{"body":{"id":2657,"nodeType":"Block","src":"1013:426:15","statements":[{"assignments":[2630],"declarations":[{"constant":false,"id":2630,"mutability":"mutable","name":"mid","nameLocation":"1035:3:15","nodeType":"VariableDeclaration","scope":2657,"src":"1027:11:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2629,"name":"uint256","nodeType":"ElementaryTypeName","src":"1027:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2636,"initialValue":{"arguments":[{"id":2633,"name":"low","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2618,"src":"1065:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2634,"name":"high","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2622,"src":"1070:4:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2631,"name":"MathUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4473,"src":"1041:15:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_MathUpgradeable_$4473_$","typeString":"type(library MathUpgradeable)"}},"id":2632,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"average","nodeType":"MemberAccess","referencedDeclaration":3674,"src":"1041:23:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2635,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1041:34:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1027:48:15"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2643,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2638,"name":"array","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2602,"src":"1305:5:15","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[] storage pointer"}},{"id":2639,"name":"mid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2630,"src":"1312:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[] storage pointer"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2637,"name":"unsafeAccess","nodeType":"Identifier","overloadedDeclarations":[2703,2724,2745],"referencedDeclaration":2745,"src":"1292:12:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_uint256_$dyn_storage_ptr_$_t_uint256_$returns$_t_struct$_Uint256Slot_$2877_storage_ptr_$","typeString":"function (uint256[] storage pointer,uint256) pure returns (struct StorageSlotUpgradeable.Uint256Slot storage pointer)"}},"id":2640,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1292:24:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2877_storage_ptr","typeString":"struct StorageSlotUpgradeable.Uint256Slot storage pointer"}},"id":2641,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","referencedDeclaration":2876,"src":"1292:30:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2642,"name":"element","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2604,"src":"1325:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1292:40:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2655,"nodeType":"Block","src":"1383:46:15","statements":[{"expression":{"id":2653,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2649,"name":"low","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2618,"src":"1401:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2652,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2650,"name":"mid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2630,"src":"1407:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2651,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1413:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1407:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1401:13:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2654,"nodeType":"ExpressionStatement","src":"1401:13:15"}]},"id":2656,"nodeType":"IfStatement","src":"1288:141:15","trueBody":{"id":2648,"nodeType":"Block","src":"1334:43:15","statements":[{"expression":{"id":2646,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2644,"name":"high","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2622,"src":"1352:4:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2645,"name":"mid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2630,"src":"1359:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1352:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2647,"nodeType":"ExpressionStatement","src":"1352:10:15"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2628,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2626,"name":"low","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2618,"src":"1001:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2627,"name":"high","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2622,"src":"1007:4:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1001:10:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2658,"nodeType":"WhileStatement","src":"994:445:15"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2671,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2661,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2659,"name":"low","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2618,"src":"1556:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2660,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1562:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1556:7:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2670,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2663,"name":"array","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2602,"src":"1580:5:15","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[] storage pointer"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2666,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2664,"name":"low","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2618,"src":"1587:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2665,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1593:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1587:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[] storage pointer"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2662,"name":"unsafeAccess","nodeType":"Identifier","overloadedDeclarations":[2703,2724,2745],"referencedDeclaration":2745,"src":"1567:12:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_uint256_$dyn_storage_ptr_$_t_uint256_$returns$_t_struct$_Uint256Slot_$2877_storage_ptr_$","typeString":"function (uint256[] storage pointer,uint256) pure returns (struct StorageSlotUpgradeable.Uint256Slot storage pointer)"}},"id":2667,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1567:28:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2877_storage_ptr","typeString":"struct StorageSlotUpgradeable.Uint256Slot storage pointer"}},"id":2668,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","referencedDeclaration":2876,"src":"1567:34:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2669,"name":"element","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2604,"src":"1605:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1567:45:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1556:56:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2679,"nodeType":"Block","src":"1659:35:15","statements":[{"expression":{"id":2677,"name":"low","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2618,"src":"1680:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2608,"id":2678,"nodeType":"Return","src":"1673:10:15"}]},"id":2680,"nodeType":"IfStatement","src":"1552:142:15","trueBody":{"id":2676,"nodeType":"Block","src":"1614:39:15","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2674,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2672,"name":"low","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2618,"src":"1635:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2673,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1641:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1635:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2608,"id":2675,"nodeType":"Return","src":"1628:14:15"}]}}]},"documentation":{"id":2599,"nodeType":"StructuredDocumentation","src":"345:407:15","text":" @dev Searches a sorted `array` and returns the first index that contains\n a value greater or equal to `element`. If no such index exists (i.e. all\n values in the array are strictly less than `element`), the array length is\n returned. Time complexity O(log n).\n `array` is expected to be sorted in ascending order, and to contain no\n repeated elements."},"id":2682,"implemented":true,"kind":"function","modifiers":[],"name":"findUpperBound","nameLocation":"766:14:15","nodeType":"FunctionDefinition","parameters":{"id":2605,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2602,"mutability":"mutable","name":"array","nameLocation":"799:5:15","nodeType":"VariableDeclaration","scope":2682,"src":"781:23:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2600,"name":"uint256","nodeType":"ElementaryTypeName","src":"781:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2601,"nodeType":"ArrayTypeName","src":"781:9:15","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2604,"mutability":"mutable","name":"element","nameLocation":"814:7:15","nodeType":"VariableDeclaration","scope":2682,"src":"806:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2603,"name":"uint256","nodeType":"ElementaryTypeName","src":"806:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"780:42:15"},"returnParameters":{"id":2608,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2607,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2682,"src":"846:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2606,"name":"uint256","nodeType":"ElementaryTypeName","src":"846:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"845:9:15"},"scope":2746,"src":"757:943:15","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2702,"nodeType":"Block","src":"2027:220:15","statements":[{"assignments":[2695],"declarations":[{"constant":false,"id":2695,"mutability":"mutable","name":"slot","nameLocation":"2045:4:15","nodeType":"VariableDeclaration","scope":2702,"src":"2037:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2694,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2037:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2696,"nodeType":"VariableDeclarationStatement","src":"2037:12:15"},{"AST":{"nodeType":"YulBlock","src":"2111:92:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2132:1:15","type":"","value":"0"},{"name":"arr.slot","nodeType":"YulIdentifier","src":"2135:8:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2125:6:15"},"nodeType":"YulFunctionCall","src":"2125:19:15"},"nodeType":"YulExpressionStatement","src":"2125:19:15"},{"nodeType":"YulAssignment","src":"2157:36:15","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2179:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2182:4:15","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"2169:9:15"},"nodeType":"YulFunctionCall","src":"2169:18:15"},{"name":"pos","nodeType":"YulIdentifier","src":"2189:3:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2165:3:15"},"nodeType":"YulFunctionCall","src":"2165:28:15"},"variableNames":[{"name":"slot","nodeType":"YulIdentifier","src":"2157:4:15"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":2686,"isOffset":false,"isSlot":true,"src":"2135:8:15","suffix":"slot","valueSize":1},{"declaration":2688,"isOffset":false,"isSlot":false,"src":"2189:3:15","valueSize":1},{"declaration":2695,"isOffset":false,"isSlot":false,"src":"2157:4:15","valueSize":1}],"id":2697,"nodeType":"InlineAssembly","src":"2102:101:15"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2698,"name":"slot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2695,"src":"2219:4:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2699,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":2888,"src":"2219:19:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$2868_storage_ptr_$bound_to$_t_bytes32_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":2700,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2219:21:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2868_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"functionReturnParameters":2693,"id":2701,"nodeType":"Return","src":"2212:28:15"}]},"documentation":{"id":2683,"nodeType":"StructuredDocumentation","src":"1706:191:15","text":" @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n WARNING: Only use if you are certain `pos` is lower than the array length."},"id":2703,"implemented":true,"kind":"function","modifiers":[],"name":"unsafeAccess","nameLocation":"1911:12:15","nodeType":"FunctionDefinition","parameters":{"id":2689,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2686,"mutability":"mutable","name":"arr","nameLocation":"1942:3:15","nodeType":"VariableDeclaration","scope":2703,"src":"1924:21:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2684,"name":"address","nodeType":"ElementaryTypeName","src":"1924:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2685,"nodeType":"ArrayTypeName","src":"1924:9:15","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":2688,"mutability":"mutable","name":"pos","nameLocation":"1955:3:15","nodeType":"VariableDeclaration","scope":2703,"src":"1947:11:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2687,"name":"uint256","nodeType":"ElementaryTypeName","src":"1947:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1923:36:15"},"returnParameters":{"id":2693,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2692,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2703,"src":"1983:42:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2868_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot"},"typeName":{"id":2691,"nodeType":"UserDefinedTypeName","pathNode":{"id":2690,"name":"StorageSlotUpgradeable.AddressSlot","nodeType":"IdentifierPath","referencedDeclaration":2868,"src":"1983:34:15"},"referencedDeclaration":2868,"src":"1983:34:15","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2868_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot"}},"visibility":"internal"}],"src":"1982:44:15"},"scope":2746,"src":"1902:345:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2723,"nodeType":"Block","src":"2574:220:15","statements":[{"assignments":[2716],"declarations":[{"constant":false,"id":2716,"mutability":"mutable","name":"slot","nameLocation":"2592:4:15","nodeType":"VariableDeclaration","scope":2723,"src":"2584:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2715,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2584:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2717,"nodeType":"VariableDeclarationStatement","src":"2584:12:15"},{"AST":{"nodeType":"YulBlock","src":"2658:92:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2679:1:15","type":"","value":"0"},{"name":"arr.slot","nodeType":"YulIdentifier","src":"2682:8:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2672:6:15"},"nodeType":"YulFunctionCall","src":"2672:19:15"},"nodeType":"YulExpressionStatement","src":"2672:19:15"},{"nodeType":"YulAssignment","src":"2704:36:15","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2726:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2729:4:15","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"2716:9:15"},"nodeType":"YulFunctionCall","src":"2716:18:15"},{"name":"pos","nodeType":"YulIdentifier","src":"2736:3:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2712:3:15"},"nodeType":"YulFunctionCall","src":"2712:28:15"},"variableNames":[{"name":"slot","nodeType":"YulIdentifier","src":"2704:4:15"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":2707,"isOffset":false,"isSlot":true,"src":"2682:8:15","suffix":"slot","valueSize":1},{"declaration":2709,"isOffset":false,"isSlot":false,"src":"2736:3:15","valueSize":1},{"declaration":2716,"isOffset":false,"isSlot":false,"src":"2704:4:15","valueSize":1}],"id":2718,"nodeType":"InlineAssembly","src":"2649:101:15"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2719,"name":"slot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2716,"src":"2766:4:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2720,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getBytes32Slot","nodeType":"MemberAccess","referencedDeclaration":2910,"src":"2766:19:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_Bytes32Slot_$2874_storage_ptr_$bound_to$_t_bytes32_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.Bytes32Slot storage pointer)"}},"id":2721,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2766:21:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$2874_storage_ptr","typeString":"struct StorageSlotUpgradeable.Bytes32Slot storage pointer"}},"functionReturnParameters":2714,"id":2722,"nodeType":"Return","src":"2759:28:15"}]},"documentation":{"id":2704,"nodeType":"StructuredDocumentation","src":"2253:191:15","text":" @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n WARNING: Only use if you are certain `pos` is lower than the array length."},"id":2724,"implemented":true,"kind":"function","modifiers":[],"name":"unsafeAccess","nameLocation":"2458:12:15","nodeType":"FunctionDefinition","parameters":{"id":2710,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2707,"mutability":"mutable","name":"arr","nameLocation":"2489:3:15","nodeType":"VariableDeclaration","scope":2724,"src":"2471:21:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2705,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2471:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2706,"nodeType":"ArrayTypeName","src":"2471:9:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":2709,"mutability":"mutable","name":"pos","nameLocation":"2502:3:15","nodeType":"VariableDeclaration","scope":2724,"src":"2494:11:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2708,"name":"uint256","nodeType":"ElementaryTypeName","src":"2494:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2470:36:15"},"returnParameters":{"id":2714,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2713,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2724,"src":"2530:42:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$2874_storage_ptr","typeString":"struct StorageSlotUpgradeable.Bytes32Slot"},"typeName":{"id":2712,"nodeType":"UserDefinedTypeName","pathNode":{"id":2711,"name":"StorageSlotUpgradeable.Bytes32Slot","nodeType":"IdentifierPath","referencedDeclaration":2874,"src":"2530:34:15"},"referencedDeclaration":2874,"src":"2530:34:15","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$2874_storage_ptr","typeString":"struct StorageSlotUpgradeable.Bytes32Slot"}},"visibility":"internal"}],"src":"2529:44:15"},"scope":2746,"src":"2449:345:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2744,"nodeType":"Block","src":"3121:220:15","statements":[{"assignments":[2737],"declarations":[{"constant":false,"id":2737,"mutability":"mutable","name":"slot","nameLocation":"3139:4:15","nodeType":"VariableDeclaration","scope":2744,"src":"3131:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2736,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3131:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2738,"nodeType":"VariableDeclarationStatement","src":"3131:12:15"},{"AST":{"nodeType":"YulBlock","src":"3205:92:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3226:1:15","type":"","value":"0"},{"name":"arr.slot","nodeType":"YulIdentifier","src":"3229:8:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3219:6:15"},"nodeType":"YulFunctionCall","src":"3219:19:15"},"nodeType":"YulExpressionStatement","src":"3219:19:15"},{"nodeType":"YulAssignment","src":"3251:36:15","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3273:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3276:4:15","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"3263:9:15"},"nodeType":"YulFunctionCall","src":"3263:18:15"},{"name":"pos","nodeType":"YulIdentifier","src":"3283:3:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3259:3:15"},"nodeType":"YulFunctionCall","src":"3259:28:15"},"variableNames":[{"name":"slot","nodeType":"YulIdentifier","src":"3251:4:15"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":2728,"isOffset":false,"isSlot":true,"src":"3229:8:15","suffix":"slot","valueSize":1},{"declaration":2730,"isOffset":false,"isSlot":false,"src":"3283:3:15","valueSize":1},{"declaration":2737,"isOffset":false,"isSlot":false,"src":"3251:4:15","valueSize":1}],"id":2739,"nodeType":"InlineAssembly","src":"3196:101:15"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2740,"name":"slot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2737,"src":"3313:4:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2741,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getUint256Slot","nodeType":"MemberAccess","referencedDeclaration":2921,"src":"3313:19:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_Uint256Slot_$2877_storage_ptr_$bound_to$_t_bytes32_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.Uint256Slot storage pointer)"}},"id":2742,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3313:21:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2877_storage_ptr","typeString":"struct StorageSlotUpgradeable.Uint256Slot storage pointer"}},"functionReturnParameters":2735,"id":2743,"nodeType":"Return","src":"3306:28:15"}]},"documentation":{"id":2725,"nodeType":"StructuredDocumentation","src":"2800:191:15","text":" @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n WARNING: Only use if you are certain `pos` is lower than the array length."},"id":2745,"implemented":true,"kind":"function","modifiers":[],"name":"unsafeAccess","nameLocation":"3005:12:15","nodeType":"FunctionDefinition","parameters":{"id":2731,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2728,"mutability":"mutable","name":"arr","nameLocation":"3036:3:15","nodeType":"VariableDeclaration","scope":2745,"src":"3018:21:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2726,"name":"uint256","nodeType":"ElementaryTypeName","src":"3018:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2727,"nodeType":"ArrayTypeName","src":"3018:9:15","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2730,"mutability":"mutable","name":"pos","nameLocation":"3049:3:15","nodeType":"VariableDeclaration","scope":2745,"src":"3041:11:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2729,"name":"uint256","nodeType":"ElementaryTypeName","src":"3041:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3017:36:15"},"returnParameters":{"id":2735,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2734,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2745,"src":"3077:42:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2877_storage_ptr","typeString":"struct StorageSlotUpgradeable.Uint256Slot"},"typeName":{"id":2733,"nodeType":"UserDefinedTypeName","pathNode":{"id":2732,"name":"StorageSlotUpgradeable.Uint256Slot","nodeType":"IdentifierPath","referencedDeclaration":2877,"src":"3077:34:15"},"referencedDeclaration":2877,"src":"3077:34:15","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2877_storage_ptr","typeString":"struct StorageSlotUpgradeable.Uint256Slot"}},"visibility":"internal"}],"src":"3076:44:15"},"scope":2746,"src":"2996:345:15","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2747,"src":"266:3077:15","usedErrors":[]}],"src":"100:3244:15"},"id":15},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2590],"ContextUpgradeable":[2788],"Initializable":[689]},"id":2789,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2748,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:16"},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":2749,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2789,"sourceUnit":690,"src":"110:42:16","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2751,"name":"Initializable","nodeType":"IdentifierPath","referencedDeclaration":689,"src":"691:13:16"},"id":2752,"nodeType":"InheritanceSpecifier","src":"691:13:16"}],"canonicalName":"ContextUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":2750,"nodeType":"StructuredDocumentation","src":"154:496:16","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":2788,"linearizedBaseContracts":[2788,689],"name":"ContextUpgradeable","nameLocation":"669:18:16","nodeType":"ContractDefinition","nodes":[{"body":{"id":2757,"nodeType":"Block","src":"763:7:16","statements":[]},"id":2758,"implemented":true,"kind":"function","modifiers":[{"id":2755,"kind":"modifierInvocation","modifierName":{"id":2754,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":634,"src":"746:16:16"},"nodeType":"ModifierInvocation","src":"746:16:16"}],"name":"__Context_init","nameLocation":"720:14:16","nodeType":"FunctionDefinition","parameters":{"id":2753,"nodeType":"ParameterList","parameters":[],"src":"734:2:16"},"returnParameters":{"id":2756,"nodeType":"ParameterList","parameters":[],"src":"763:0:16"},"scope":2788,"src":"711:59:16","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2763,"nodeType":"Block","src":"838:7:16","statements":[]},"id":2764,"implemented":true,"kind":"function","modifiers":[{"id":2761,"kind":"modifierInvocation","modifierName":{"id":2760,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":634,"src":"821:16:16"},"nodeType":"ModifierInvocation","src":"821:16:16"}],"name":"__Context_init_unchained","nameLocation":"785:24:16","nodeType":"FunctionDefinition","parameters":{"id":2759,"nodeType":"ParameterList","parameters":[],"src":"809:2:16"},"returnParameters":{"id":2762,"nodeType":"ParameterList","parameters":[],"src":"838:0:16"},"scope":2788,"src":"776:69:16","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2772,"nodeType":"Block","src":"912:34:16","statements":[{"expression":{"expression":{"id":2769,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"929:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2770,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"929:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2768,"id":2771,"nodeType":"Return","src":"922:17:16"}]},"id":2773,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"859:10:16","nodeType":"FunctionDefinition","parameters":{"id":2765,"nodeType":"ParameterList","parameters":[],"src":"869:2:16"},"returnParameters":{"id":2768,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2767,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2773,"src":"903:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2766,"name":"address","nodeType":"ElementaryTypeName","src":"903:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"902:9:16"},"scope":2788,"src":"850:96:16","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2781,"nodeType":"Block","src":"1019:32:16","statements":[{"expression":{"expression":{"id":2778,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1036:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2779,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"data","nodeType":"MemberAccess","src":"1036:8:16","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":2777,"id":2780,"nodeType":"Return","src":"1029:15:16"}]},"id":2782,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"961:8:16","nodeType":"FunctionDefinition","parameters":{"id":2774,"nodeType":"ParameterList","parameters":[],"src":"969:2:16"},"returnParameters":{"id":2777,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2776,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2782,"src":"1003:14:16","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2775,"name":"bytes","nodeType":"ElementaryTypeName","src":"1003:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1002:16:16"},"scope":2788,"src":"952:99:16","stateMutability":"view","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":2783,"nodeType":"StructuredDocumentation","src":"1057:254:16","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":2787,"mutability":"mutable","name":"__gap","nameLocation":"1336:5:16","nodeType":"VariableDeclaration","scope":2788,"src":"1316:25:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":2784,"name":"uint256","nodeType":"ElementaryTypeName","src":"1316:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2786,"length":{"hexValue":"3530","id":2785,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1324:2:16","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"1316:11:16","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":2789,"src":"651:693:16","usedErrors":[]}],"src":"86:1259:16"},"id":16},"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol","exportedSymbols":{"CountersUpgradeable":[2862]},"id":2863,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2790,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"87:23:17"},{"abstract":false,"baseContracts":[],"canonicalName":"CountersUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":2791,"nodeType":"StructuredDocumentation","src":"112:311:17","text":" @title Counters\n @author Matt Condon (@shrugs)\n @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n of elements in a mapping, issuing ERC721 ids, or counting request ids.\n Include with `using Counters for Counters.Counter;`"},"fullyImplemented":true,"id":2862,"linearizedBaseContracts":[2862],"name":"CountersUpgradeable","nameLocation":"432:19:17","nodeType":"ContractDefinition","nodes":[{"canonicalName":"CountersUpgradeable.Counter","id":2794,"members":[{"constant":false,"id":2793,"mutability":"mutable","name":"_value","nameLocation":"805:6:17","nodeType":"VariableDeclaration","scope":2794,"src":"797:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2792,"name":"uint256","nodeType":"ElementaryTypeName","src":"797:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Counter","nameLocation":"465:7:17","nodeType":"StructDefinition","scope":2862,"src":"458:374:17","visibility":"public"},{"body":{"id":2805,"nodeType":"Block","src":"912:38:17","statements":[{"expression":{"expression":{"id":2802,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2797,"src":"929:7:17","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2794_storage_ptr","typeString":"struct CountersUpgradeable.Counter storage pointer"}},"id":2803,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":2793,"src":"929:14:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2801,"id":2804,"nodeType":"Return","src":"922:21:17"}]},"id":2806,"implemented":true,"kind":"function","modifiers":[],"name":"current","nameLocation":"847:7:17","nodeType":"FunctionDefinition","parameters":{"id":2798,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2797,"mutability":"mutable","name":"counter","nameLocation":"871:7:17","nodeType":"VariableDeclaration","scope":2806,"src":"855:23:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2794_storage_ptr","typeString":"struct CountersUpgradeable.Counter"},"typeName":{"id":2796,"nodeType":"UserDefinedTypeName","pathNode":{"id":2795,"name":"Counter","nodeType":"IdentifierPath","referencedDeclaration":2794,"src":"855:7:17"},"referencedDeclaration":2794,"src":"855:7:17","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2794_storage_ptr","typeString":"struct CountersUpgradeable.Counter"}},"visibility":"internal"}],"src":"854:25:17"},"returnParameters":{"id":2801,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2800,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2806,"src":"903:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2799,"name":"uint256","nodeType":"ElementaryTypeName","src":"903:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"902:9:17"},"scope":2862,"src":"838:112:17","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2819,"nodeType":"Block","src":"1009:70:17","statements":[{"id":2818,"nodeType":"UncheckedBlock","src":"1019:54:17","statements":[{"expression":{"id":2816,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2812,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2809,"src":"1043:7:17","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2794_storage_ptr","typeString":"struct CountersUpgradeable.Counter storage pointer"}},"id":2814,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":2793,"src":"1043:14:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2815,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1061:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1043:19:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2817,"nodeType":"ExpressionStatement","src":"1043:19:17"}]}]},"id":2820,"implemented":true,"kind":"function","modifiers":[],"name":"increment","nameLocation":"965:9:17","nodeType":"FunctionDefinition","parameters":{"id":2810,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2809,"mutability":"mutable","name":"counter","nameLocation":"991:7:17","nodeType":"VariableDeclaration","scope":2820,"src":"975:23:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2794_storage_ptr","typeString":"struct CountersUpgradeable.Counter"},"typeName":{"id":2808,"nodeType":"UserDefinedTypeName","pathNode":{"id":2807,"name":"Counter","nodeType":"IdentifierPath","referencedDeclaration":2794,"src":"975:7:17"},"referencedDeclaration":2794,"src":"975:7:17","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2794_storage_ptr","typeString":"struct CountersUpgradeable.Counter"}},"visibility":"internal"}],"src":"974:25:17"},"returnParameters":{"id":2811,"nodeType":"ParameterList","parameters":[],"src":"1009:0:17"},"scope":2862,"src":"956:123:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2847,"nodeType":"Block","src":"1138:176:17","statements":[{"assignments":[2827],"declarations":[{"constant":false,"id":2827,"mutability":"mutable","name":"value","nameLocation":"1156:5:17","nodeType":"VariableDeclaration","scope":2847,"src":"1148:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2826,"name":"uint256","nodeType":"ElementaryTypeName","src":"1148:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2830,"initialValue":{"expression":{"id":2828,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2823,"src":"1164:7:17","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2794_storage_ptr","typeString":"struct CountersUpgradeable.Counter storage pointer"}},"id":2829,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":2793,"src":"1164:14:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1148:30:17"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2834,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2832,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2827,"src":"1196:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2833,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1204:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1196:9:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"436f756e7465723a2064656372656d656e74206f766572666c6f77","id":2835,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1207:29:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f","typeString":"literal_string \"Counter: decrement overflow\""},"value":"Counter: decrement overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f","typeString":"literal_string \"Counter: decrement overflow\""}],"id":2831,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1188:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2836,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1188:49:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2837,"nodeType":"ExpressionStatement","src":"1188:49:17"},{"id":2846,"nodeType":"UncheckedBlock","src":"1247:61:17","statements":[{"expression":{"id":2844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2838,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2823,"src":"1271:7:17","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2794_storage_ptr","typeString":"struct CountersUpgradeable.Counter storage pointer"}},"id":2840,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":2793,"src":"1271:14:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2843,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2841,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2827,"src":"1288:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2842,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1296:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1288:9:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1271:26:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2845,"nodeType":"ExpressionStatement","src":"1271:26:17"}]}]},"id":2848,"implemented":true,"kind":"function","modifiers":[],"name":"decrement","nameLocation":"1094:9:17","nodeType":"FunctionDefinition","parameters":{"id":2824,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2823,"mutability":"mutable","name":"counter","nameLocation":"1120:7:17","nodeType":"VariableDeclaration","scope":2848,"src":"1104:23:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2794_storage_ptr","typeString":"struct CountersUpgradeable.Counter"},"typeName":{"id":2822,"nodeType":"UserDefinedTypeName","pathNode":{"id":2821,"name":"Counter","nodeType":"IdentifierPath","referencedDeclaration":2794,"src":"1104:7:17"},"referencedDeclaration":2794,"src":"1104:7:17","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2794_storage_ptr","typeString":"struct CountersUpgradeable.Counter"}},"visibility":"internal"}],"src":"1103:25:17"},"returnParameters":{"id":2825,"nodeType":"ParameterList","parameters":[],"src":"1138:0:17"},"scope":2862,"src":"1085:229:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2860,"nodeType":"Block","src":"1369:35:17","statements":[{"expression":{"id":2858,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2854,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2851,"src":"1379:7:17","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2794_storage_ptr","typeString":"struct CountersUpgradeable.Counter storage pointer"}},"id":2856,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":2793,"src":"1379:14:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":2857,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1396:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1379:18:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2859,"nodeType":"ExpressionStatement","src":"1379:18:17"}]},"id":2861,"implemented":true,"kind":"function","modifiers":[],"name":"reset","nameLocation":"1329:5:17","nodeType":"FunctionDefinition","parameters":{"id":2852,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2851,"mutability":"mutable","name":"counter","nameLocation":"1351:7:17","nodeType":"VariableDeclaration","scope":2861,"src":"1335:23:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2794_storage_ptr","typeString":"struct CountersUpgradeable.Counter"},"typeName":{"id":2850,"nodeType":"UserDefinedTypeName","pathNode":{"id":2849,"name":"Counter","nodeType":"IdentifierPath","referencedDeclaration":2794,"src":"1335:7:17"},"referencedDeclaration":2794,"src":"1335:7:17","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2794_storage_ptr","typeString":"struct CountersUpgradeable.Counter"}},"visibility":"internal"}],"src":"1334:25:17"},"returnParameters":{"id":2853,"nodeType":"ParameterList","parameters":[],"src":"1369:0:17"},"scope":2862,"src":"1320:84:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":2863,"src":"424:982:17","usedErrors":[]}],"src":"87:1320:17"},"id":17},"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol","exportedSymbols":{"StorageSlotUpgradeable":[2922]},"id":2923,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2864,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"105:23:18"},{"abstract":false,"baseContracts":[],"canonicalName":"StorageSlotUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":2865,"nodeType":"StructuredDocumentation","src":"130:1148:18","text":" @dev Library for reading and writing primitive types to specific storage slots.\n Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n This library helps with reading and writing to such slots without the need for inline assembly.\n The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n Example usage to set ERC1967 implementation slot:\n ```\n contract ERC1967 {\n     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n     function _getImplementation() internal view returns (address) {\n         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n     }\n     function _setImplementation(address newImplementation) internal {\n         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n     }\n }\n ```\n _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._"},"fullyImplemented":true,"id":2922,"linearizedBaseContracts":[2922],"name":"StorageSlotUpgradeable","nameLocation":"1287:22:18","nodeType":"ContractDefinition","nodes":[{"canonicalName":"StorageSlotUpgradeable.AddressSlot","id":2868,"members":[{"constant":false,"id":2867,"mutability":"mutable","name":"value","nameLocation":"1353:5:18","nodeType":"VariableDeclaration","scope":2868,"src":"1345:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2866,"name":"address","nodeType":"ElementaryTypeName","src":"1345:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"AddressSlot","nameLocation":"1323:11:18","nodeType":"StructDefinition","scope":2922,"src":"1316:49:18","visibility":"public"},{"canonicalName":"StorageSlotUpgradeable.BooleanSlot","id":2871,"members":[{"constant":false,"id":2870,"mutability":"mutable","name":"value","nameLocation":"1405:5:18","nodeType":"VariableDeclaration","scope":2871,"src":"1400:10:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2869,"name":"bool","nodeType":"ElementaryTypeName","src":"1400:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"BooleanSlot","nameLocation":"1378:11:18","nodeType":"StructDefinition","scope":2922,"src":"1371:46:18","visibility":"public"},{"canonicalName":"StorageSlotUpgradeable.Bytes32Slot","id":2874,"members":[{"constant":false,"id":2873,"mutability":"mutable","name":"value","nameLocation":"1460:5:18","nodeType":"VariableDeclaration","scope":2874,"src":"1452:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2872,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1452:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"Bytes32Slot","nameLocation":"1430:11:18","nodeType":"StructDefinition","scope":2922,"src":"1423:49:18","visibility":"public"},{"canonicalName":"StorageSlotUpgradeable.Uint256Slot","id":2877,"members":[{"constant":false,"id":2876,"mutability":"mutable","name":"value","nameLocation":"1515:5:18","nodeType":"VariableDeclaration","scope":2877,"src":"1507:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2875,"name":"uint256","nodeType":"ElementaryTypeName","src":"1507:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Uint256Slot","nameLocation":"1485:11:18","nodeType":"StructDefinition","scope":2922,"src":"1478:49:18","visibility":"public"},{"body":{"id":2887,"nodeType":"Block","src":"1709:106:18","statements":[{"AST":{"nodeType":"YulBlock","src":"1771:38:18","statements":[{"nodeType":"YulAssignment","src":"1785:14:18","value":{"name":"slot","nodeType":"YulIdentifier","src":"1795:4:18"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"1785:6:18"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":2884,"isOffset":false,"isSlot":true,"src":"1785:6:18","suffix":"slot","valueSize":1},{"declaration":2880,"isOffset":false,"isSlot":false,"src":"1795:4:18","valueSize":1}],"id":2886,"nodeType":"InlineAssembly","src":"1762:47:18"}]},"documentation":{"id":2878,"nodeType":"StructuredDocumentation","src":"1533:87:18","text":" @dev Returns an `AddressSlot` with member `value` located at `slot`."},"id":2888,"implemented":true,"kind":"function","modifiers":[],"name":"getAddressSlot","nameLocation":"1634:14:18","nodeType":"FunctionDefinition","parameters":{"id":2881,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2880,"mutability":"mutable","name":"slot","nameLocation":"1657:4:18","nodeType":"VariableDeclaration","scope":2888,"src":"1649:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2879,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1649:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1648:14:18"},"returnParameters":{"id":2885,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2884,"mutability":"mutable","name":"r","nameLocation":"1706:1:18","nodeType":"VariableDeclaration","scope":2888,"src":"1686:21:18","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2868_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot"},"typeName":{"id":2883,"nodeType":"UserDefinedTypeName","pathNode":{"id":2882,"name":"AddressSlot","nodeType":"IdentifierPath","referencedDeclaration":2868,"src":"1686:11:18"},"referencedDeclaration":2868,"src":"1686:11:18","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2868_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot"}},"visibility":"internal"}],"src":"1685:23:18"},"scope":2922,"src":"1625:190:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2898,"nodeType":"Block","src":"1997:106:18","statements":[{"AST":{"nodeType":"YulBlock","src":"2059:38:18","statements":[{"nodeType":"YulAssignment","src":"2073:14:18","value":{"name":"slot","nodeType":"YulIdentifier","src":"2083:4:18"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2073:6:18"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":2895,"isOffset":false,"isSlot":true,"src":"2073:6:18","suffix":"slot","valueSize":1},{"declaration":2891,"isOffset":false,"isSlot":false,"src":"2083:4:18","valueSize":1}],"id":2897,"nodeType":"InlineAssembly","src":"2050:47:18"}]},"documentation":{"id":2889,"nodeType":"StructuredDocumentation","src":"1821:87:18","text":" @dev Returns an `BooleanSlot` with member `value` located at `slot`."},"id":2899,"implemented":true,"kind":"function","modifiers":[],"name":"getBooleanSlot","nameLocation":"1922:14:18","nodeType":"FunctionDefinition","parameters":{"id":2892,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2891,"mutability":"mutable","name":"slot","nameLocation":"1945:4:18","nodeType":"VariableDeclaration","scope":2899,"src":"1937:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2890,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1937:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1936:14:18"},"returnParameters":{"id":2896,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2895,"mutability":"mutable","name":"r","nameLocation":"1994:1:18","nodeType":"VariableDeclaration","scope":2899,"src":"1974:21:18","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$2871_storage_ptr","typeString":"struct StorageSlotUpgradeable.BooleanSlot"},"typeName":{"id":2894,"nodeType":"UserDefinedTypeName","pathNode":{"id":2893,"name":"BooleanSlot","nodeType":"IdentifierPath","referencedDeclaration":2871,"src":"1974:11:18"},"referencedDeclaration":2871,"src":"1974:11:18","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$2871_storage_ptr","typeString":"struct StorageSlotUpgradeable.BooleanSlot"}},"visibility":"internal"}],"src":"1973:23:18"},"scope":2922,"src":"1913:190:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2909,"nodeType":"Block","src":"2285:106:18","statements":[{"AST":{"nodeType":"YulBlock","src":"2347:38:18","statements":[{"nodeType":"YulAssignment","src":"2361:14:18","value":{"name":"slot","nodeType":"YulIdentifier","src":"2371:4:18"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2361:6:18"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":2906,"isOffset":false,"isSlot":true,"src":"2361:6:18","suffix":"slot","valueSize":1},{"declaration":2902,"isOffset":false,"isSlot":false,"src":"2371:4:18","valueSize":1}],"id":2908,"nodeType":"InlineAssembly","src":"2338:47:18"}]},"documentation":{"id":2900,"nodeType":"StructuredDocumentation","src":"2109:87:18","text":" @dev Returns an `Bytes32Slot` with member `value` located at `slot`."},"id":2910,"implemented":true,"kind":"function","modifiers":[],"name":"getBytes32Slot","nameLocation":"2210:14:18","nodeType":"FunctionDefinition","parameters":{"id":2903,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2902,"mutability":"mutable","name":"slot","nameLocation":"2233:4:18","nodeType":"VariableDeclaration","scope":2910,"src":"2225:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2901,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2225:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2224:14:18"},"returnParameters":{"id":2907,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2906,"mutability":"mutable","name":"r","nameLocation":"2282:1:18","nodeType":"VariableDeclaration","scope":2910,"src":"2262:21:18","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$2874_storage_ptr","typeString":"struct StorageSlotUpgradeable.Bytes32Slot"},"typeName":{"id":2905,"nodeType":"UserDefinedTypeName","pathNode":{"id":2904,"name":"Bytes32Slot","nodeType":"IdentifierPath","referencedDeclaration":2874,"src":"2262:11:18"},"referencedDeclaration":2874,"src":"2262:11:18","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$2874_storage_ptr","typeString":"struct StorageSlotUpgradeable.Bytes32Slot"}},"visibility":"internal"}],"src":"2261:23:18"},"scope":2922,"src":"2201:190:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2920,"nodeType":"Block","src":"2573:106:18","statements":[{"AST":{"nodeType":"YulBlock","src":"2635:38:18","statements":[{"nodeType":"YulAssignment","src":"2649:14:18","value":{"name":"slot","nodeType":"YulIdentifier","src":"2659:4:18"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2649:6:18"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":2917,"isOffset":false,"isSlot":true,"src":"2649:6:18","suffix":"slot","valueSize":1},{"declaration":2913,"isOffset":false,"isSlot":false,"src":"2659:4:18","valueSize":1}],"id":2919,"nodeType":"InlineAssembly","src":"2626:47:18"}]},"documentation":{"id":2911,"nodeType":"StructuredDocumentation","src":"2397:87:18","text":" @dev Returns an `Uint256Slot` with member `value` located at `slot`."},"id":2921,"implemented":true,"kind":"function","modifiers":[],"name":"getUint256Slot","nameLocation":"2498:14:18","nodeType":"FunctionDefinition","parameters":{"id":2914,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2913,"mutability":"mutable","name":"slot","nameLocation":"2521:4:18","nodeType":"VariableDeclaration","scope":2921,"src":"2513:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2912,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2513:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2512:14:18"},"returnParameters":{"id":2918,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2917,"mutability":"mutable","name":"r","nameLocation":"2570:1:18","nodeType":"VariableDeclaration","scope":2921,"src":"2550:21:18","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2877_storage_ptr","typeString":"struct StorageSlotUpgradeable.Uint256Slot"},"typeName":{"id":2916,"nodeType":"UserDefinedTypeName","pathNode":{"id":2915,"name":"Uint256Slot","nodeType":"IdentifierPath","referencedDeclaration":2877,"src":"2550:11:18"},"referencedDeclaration":2877,"src":"2550:11:18","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2877_storage_ptr","typeString":"struct StorageSlotUpgradeable.Uint256Slot"}},"visibility":"internal"}],"src":"2549:23:18"},"scope":2922,"src":"2489:190:18","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2923,"src":"1279:1402:18","usedErrors":[]}],"src":"105:2577:18"},"id":18},"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol","exportedSymbols":{"MathUpgradeable":[4473],"StringsUpgradeable":[3097]},"id":3098,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2924,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:19"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol","file":"./math/MathUpgradeable.sol","id":2925,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3098,"sourceUnit":4474,"src":"126:36:19","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"StringsUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":2926,"nodeType":"StructuredDocumentation","src":"164:34:19","text":" @dev String operations."},"fullyImplemented":true,"id":3097,"linearizedBaseContracts":[3097],"name":"StringsUpgradeable","nameLocation":"207:18:19","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":2929,"mutability":"constant","name":"_SYMBOLS","nameLocation":"257:8:19","nodeType":"VariableDeclaration","scope":3097,"src":"232:54:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":2927,"name":"bytes16","nodeType":"ElementaryTypeName","src":"232:7:19","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":2928,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"268:18:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":2932,"mutability":"constant","name":"_ADDRESS_LENGTH","nameLocation":"315:15:19","nodeType":"VariableDeclaration","scope":3097,"src":"292:43:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2930,"name":"uint8","nodeType":"ElementaryTypeName","src":"292:5:19","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":2931,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"333:2:19","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"body":{"id":2979,"nodeType":"Block","src":"508:636:19","statements":[{"id":2978,"nodeType":"UncheckedBlock","src":"518:620:19","statements":[{"assignments":[2941],"declarations":[{"constant":false,"id":2941,"mutability":"mutable","name":"length","nameLocation":"550:6:19","nodeType":"VariableDeclaration","scope":2978,"src":"542:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2940,"name":"uint256","nodeType":"ElementaryTypeName","src":"542:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2948,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2947,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2944,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2935,"src":"581:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2942,"name":"MathUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4473,"src":"559:15:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_MathUpgradeable_$4473_$","typeString":"type(library MathUpgradeable)"}},"id":2943,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":4310,"src":"559:21:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2945,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"559:28:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2946,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"590:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"559:32:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"542:49:19"},{"assignments":[2950],"declarations":[{"constant":false,"id":2950,"mutability":"mutable","name":"buffer","nameLocation":"619:6:19","nodeType":"VariableDeclaration","scope":2978,"src":"605:20:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2949,"name":"string","nodeType":"ElementaryTypeName","src":"605:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":2955,"initialValue":{"arguments":[{"id":2953,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2941,"src":"639:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2952,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"628:10:19","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":2951,"name":"string","nodeType":"ElementaryTypeName","src":"632:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":2954,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"628:18:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"605:41:19"},{"assignments":[2957],"declarations":[{"constant":false,"id":2957,"mutability":"mutable","name":"ptr","nameLocation":"668:3:19","nodeType":"VariableDeclaration","scope":2978,"src":"660:11:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2956,"name":"uint256","nodeType":"ElementaryTypeName","src":"660:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2958,"nodeType":"VariableDeclarationStatement","src":"660:11:19"},{"AST":{"nodeType":"YulBlock","src":"741:67:19","statements":[{"nodeType":"YulAssignment","src":"759:35:19","value":{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"770:6:19"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"782:2:19","type":"","value":"32"},{"name":"length","nodeType":"YulIdentifier","src":"786:6:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"778:3:19"},"nodeType":"YulFunctionCall","src":"778:15:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"766:3:19"},"nodeType":"YulFunctionCall","src":"766:28:19"},"variableNames":[{"name":"ptr","nodeType":"YulIdentifier","src":"759:3:19"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":2950,"isOffset":false,"isSlot":false,"src":"770:6:19","valueSize":1},{"declaration":2941,"isOffset":false,"isSlot":false,"src":"786:6:19","valueSize":1},{"declaration":2957,"isOffset":false,"isSlot":false,"src":"759:3:19","valueSize":1}],"id":2959,"nodeType":"InlineAssembly","src":"732:76:19"},{"body":{"id":2974,"nodeType":"Block","src":"834:267:19","statements":[{"expression":{"id":2962,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"852:5:19","subExpression":{"id":2961,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2957,"src":"852:3:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2963,"nodeType":"ExpressionStatement","src":"852:5:19"},{"AST":{"nodeType":"YulBlock","src":"935:84:19","statements":[{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"965:3:19"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"979:5:19"},{"kind":"number","nodeType":"YulLiteral","src":"986:2:19","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"975:3:19"},"nodeType":"YulFunctionCall","src":"975:14:19"},{"name":"_SYMBOLS","nodeType":"YulIdentifier","src":"991:8:19"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"970:4:19"},"nodeType":"YulFunctionCall","src":"970:30:19"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"957:7:19"},"nodeType":"YulFunctionCall","src":"957:44:19"},"nodeType":"YulExpressionStatement","src":"957:44:19"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":2929,"isOffset":false,"isSlot":false,"src":"991:8:19","valueSize":1},{"declaration":2957,"isOffset":false,"isSlot":false,"src":"965:3:19","valueSize":1},{"declaration":2935,"isOffset":false,"isSlot":false,"src":"979:5:19","valueSize":1}],"id":2964,"nodeType":"InlineAssembly","src":"926:93:19"},{"expression":{"id":2967,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2965,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2935,"src":"1036:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":2966,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1045:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1036:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2968,"nodeType":"ExpressionStatement","src":"1036:11:19"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2971,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2969,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2935,"src":"1069:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2970,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1078:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1069:10:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2973,"nodeType":"IfStatement","src":"1065:21:19","trueBody":{"id":2972,"nodeType":"Break","src":"1081:5:19"}}]},"condition":{"hexValue":"74727565","id":2960,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"828:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":2975,"nodeType":"WhileStatement","src":"821:280:19"},{"expression":{"id":2976,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2950,"src":"1121:6:19","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2939,"id":2977,"nodeType":"Return","src":"1114:13:19"}]}]},"documentation":{"id":2933,"nodeType":"StructuredDocumentation","src":"342:90:19","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":2980,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"446:8:19","nodeType":"FunctionDefinition","parameters":{"id":2936,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2935,"mutability":"mutable","name":"value","nameLocation":"463:5:19","nodeType":"VariableDeclaration","scope":2980,"src":"455:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2934,"name":"uint256","nodeType":"ElementaryTypeName","src":"455:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"454:15:19"},"returnParameters":{"id":2939,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2938,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2980,"src":"493:13:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2937,"name":"string","nodeType":"ElementaryTypeName","src":"493:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"492:15:19"},"scope":3097,"src":"437:707:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2999,"nodeType":"Block","src":"1323:111:19","statements":[{"id":2998,"nodeType":"UncheckedBlock","src":"1333:95:19","statements":[{"expression":{"arguments":[{"id":2989,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2983,"src":"1376:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2995,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2992,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2983,"src":"1406:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2990,"name":"MathUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4473,"src":"1383:15:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_MathUpgradeable_$4473_$","typeString":"type(library MathUpgradeable)"}},"id":2991,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":4433,"src":"1383:22:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2993,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1383:29:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2994,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1415:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1383:33:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2988,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[3000,3076,3096],"referencedDeclaration":3076,"src":"1364:11:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":2996,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1364:53:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2987,"id":2997,"nodeType":"Return","src":"1357:60:19"}]}]},"documentation":{"id":2981,"nodeType":"StructuredDocumentation","src":"1150:94:19","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":3000,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1258:11:19","nodeType":"FunctionDefinition","parameters":{"id":2984,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2983,"mutability":"mutable","name":"value","nameLocation":"1278:5:19","nodeType":"VariableDeclaration","scope":3000,"src":"1270:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2982,"name":"uint256","nodeType":"ElementaryTypeName","src":"1270:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1269:15:19"},"returnParameters":{"id":2987,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2986,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3000,"src":"1308:13:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2985,"name":"string","nodeType":"ElementaryTypeName","src":"1308:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1307:15:19"},"scope":3097,"src":"1249:185:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3075,"nodeType":"Block","src":"1647:347:19","statements":[{"assignments":[3011],"declarations":[{"constant":false,"id":3011,"mutability":"mutable","name":"buffer","nameLocation":"1670:6:19","nodeType":"VariableDeclaration","scope":3075,"src":"1657:19:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3010,"name":"bytes","nodeType":"ElementaryTypeName","src":"1657:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3020,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3018,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3016,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3014,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1689:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3015,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3005,"src":"1693:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1689:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":3017,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1702:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1689:14:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3013,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1679:9:19","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":3012,"name":"bytes","nodeType":"ElementaryTypeName","src":"1683:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":3019,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1679:25:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1657:47:19"},{"expression":{"id":3025,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3021,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3011,"src":"1714:6:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3023,"indexExpression":{"hexValue":"30","id":3022,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1721:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1714:9:19","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":3024,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1726:3:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"1714:15:19","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":3026,"nodeType":"ExpressionStatement","src":"1714:15:19"},{"expression":{"id":3031,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3027,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3011,"src":"1739:6:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3029,"indexExpression":{"hexValue":"31","id":3028,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1746:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1739:9:19","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":3030,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1751:3:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"1739:15:19","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":3032,"nodeType":"ExpressionStatement","src":"1739:15:19"},{"body":{"id":3061,"nodeType":"Block","src":"1809:83:19","statements":[{"expression":{"id":3055,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3047,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3011,"src":"1823:6:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3049,"indexExpression":{"id":3048,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3034,"src":"1830:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1823:9:19","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":3050,"name":"_SYMBOLS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2929,"src":"1835:8:19","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":3054,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3053,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3051,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3003,"src":"1844:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":3052,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1852:3:19","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"1844:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1835:21:19","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"1823:33:19","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":3056,"nodeType":"ExpressionStatement","src":"1823:33:19"},{"expression":{"id":3059,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3057,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3003,"src":"1870:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":3058,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1880:1:19","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"1870:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3060,"nodeType":"ExpressionStatement","src":"1870:11:19"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3043,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3041,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3034,"src":"1797:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":3042,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1801:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1797:5:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3062,"initializationExpression":{"assignments":[3034],"declarations":[{"constant":false,"id":3034,"mutability":"mutable","name":"i","nameLocation":"1777:1:19","nodeType":"VariableDeclaration","scope":3062,"src":"1769:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3033,"name":"uint256","nodeType":"ElementaryTypeName","src":"1769:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3040,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3039,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3037,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3035,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1781:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3036,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3005,"src":"1785:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1781:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3038,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1794:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1781:14:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1769:26:19"},"loopExpression":{"expression":{"id":3045,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"1804:3:19","subExpression":{"id":3044,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3034,"src":"1806:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3046,"nodeType":"ExpressionStatement","src":"1804:3:19"},"nodeType":"ForStatement","src":"1764:128:19"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3066,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3064,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3003,"src":"1909:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3065,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1918:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1909:10:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","id":3067,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1921:34:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""},"value":"Strings: hex length insufficient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""}],"id":3063,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1901:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3068,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1901:55:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3069,"nodeType":"ExpressionStatement","src":"1901:55:19"},{"expression":{"arguments":[{"id":3072,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3011,"src":"1980:6:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3071,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1973:6:19","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":3070,"name":"string","nodeType":"ElementaryTypeName","src":"1973:6:19","typeDescriptions":{}}},"id":3073,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1973:14:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3009,"id":3074,"nodeType":"Return","src":"1966:21:19"}]},"documentation":{"id":3001,"nodeType":"StructuredDocumentation","src":"1440:112:19","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":3076,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1566:11:19","nodeType":"FunctionDefinition","parameters":{"id":3006,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3003,"mutability":"mutable","name":"value","nameLocation":"1586:5:19","nodeType":"VariableDeclaration","scope":3076,"src":"1578:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3002,"name":"uint256","nodeType":"ElementaryTypeName","src":"1578:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3005,"mutability":"mutable","name":"length","nameLocation":"1601:6:19","nodeType":"VariableDeclaration","scope":3076,"src":"1593:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3004,"name":"uint256","nodeType":"ElementaryTypeName","src":"1593:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1577:31:19"},"returnParameters":{"id":3009,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3008,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3076,"src":"1632:13:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3007,"name":"string","nodeType":"ElementaryTypeName","src":"1632:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1631:15:19"},"scope":3097,"src":"1557:437:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3095,"nodeType":"Block","src":"2219:76:19","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":3089,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3079,"src":"2264:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3088,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2256:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":3087,"name":"uint160","nodeType":"ElementaryTypeName","src":"2256:7:19","typeDescriptions":{}}},"id":3090,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2256:13:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":3086,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2248:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3085,"name":"uint256","nodeType":"ElementaryTypeName","src":"2248:7:19","typeDescriptions":{}}},"id":3091,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2248:22:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3092,"name":"_ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2932,"src":"2272:15:19","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":3084,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[3000,3076,3096],"referencedDeclaration":3076,"src":"2236:11:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":3093,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2236:52:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3083,"id":3094,"nodeType":"Return","src":"2229:59:19"}]},"documentation":{"id":3077,"nodeType":"StructuredDocumentation","src":"2000:141:19","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."},"id":3096,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2155:11:19","nodeType":"FunctionDefinition","parameters":{"id":3080,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3079,"mutability":"mutable","name":"addr","nameLocation":"2175:4:19","nodeType":"VariableDeclaration","scope":3096,"src":"2167:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3078,"name":"address","nodeType":"ElementaryTypeName","src":"2167:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2166:14:19"},"returnParameters":{"id":3083,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3082,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3096,"src":"2204:13:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3081,"name":"string","nodeType":"ElementaryTypeName","src":"2204:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2203:15:19"},"scope":3097,"src":"2146:149:19","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3098,"src":"199:2098:19","usedErrors":[]}],"src":"101:2197:19"},"id":19},"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol","exportedSymbols":{"ECDSAUpgradeable":[3458],"MathUpgradeable":[4473],"StringsUpgradeable":[3097]},"id":3459,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3099,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"112:23:20"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol","file":"../StringsUpgradeable.sol","id":3100,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3459,"sourceUnit":3098,"src":"137:35:20","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ECDSAUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":3101,"nodeType":"StructuredDocumentation","src":"174:205:20","text":" @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n These functions can be used to verify that a message was signed by the holder\n of the private keys of a given address."},"fullyImplemented":true,"id":3458,"linearizedBaseContracts":[3458],"name":"ECDSAUpgradeable","nameLocation":"388:16:20","nodeType":"ContractDefinition","nodes":[{"canonicalName":"ECDSAUpgradeable.RecoverError","id":3107,"members":[{"id":3102,"name":"NoError","nameLocation":"439:7:20","nodeType":"EnumValue","src":"439:7:20"},{"id":3103,"name":"InvalidSignature","nameLocation":"456:16:20","nodeType":"EnumValue","src":"456:16:20"},{"id":3104,"name":"InvalidSignatureLength","nameLocation":"482:22:20","nodeType":"EnumValue","src":"482:22:20"},{"id":3105,"name":"InvalidSignatureS","nameLocation":"514:17:20","nodeType":"EnumValue","src":"514:17:20"},{"id":3106,"name":"InvalidSignatureV","nameLocation":"541:17:20","nodeType":"EnumValue","src":"541:17:20"}],"name":"RecoverError","nameLocation":"416:12:20","nodeType":"EnumDefinition","src":"411:175:20"},{"body":{"id":3150,"nodeType":"Block","src":"646:457:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$3107","typeString":"enum ECDSAUpgradeable.RecoverError"},"id":3116,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3113,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3110,"src":"660:5:20","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3107","typeString":"enum ECDSAUpgradeable.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3114,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3107,"src":"669:12:20","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3107_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":3115,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":3102,"src":"669:20:20","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3107","typeString":"enum ECDSAUpgradeable.RecoverError"}},"src":"660:29:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$3107","typeString":"enum ECDSAUpgradeable.RecoverError"},"id":3122,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3119,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3110,"src":"756:5:20","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3107","typeString":"enum ECDSAUpgradeable.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3120,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3107,"src":"765:12:20","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3107_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":3121,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":3103,"src":"765:29:20","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3107","typeString":"enum ECDSAUpgradeable.RecoverError"}},"src":"756:38:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$3107","typeString":"enum ECDSAUpgradeable.RecoverError"},"id":3131,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3128,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3110,"src":"865:5:20","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3107","typeString":"enum ECDSAUpgradeable.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3129,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3107,"src":"874:12:20","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3107_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":3130,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":3104,"src":"874:35:20","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3107","typeString":"enum ECDSAUpgradeable.RecoverError"}},"src":"865:44:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$3107","typeString":"enum ECDSAUpgradeable.RecoverError"},"id":3140,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3137,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3110,"src":"987:5:20","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3107","typeString":"enum ECDSAUpgradeable.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3138,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3107,"src":"996:12:20","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3107_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":3139,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":3105,"src":"996:30:20","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3107","typeString":"enum ECDSAUpgradeable.RecoverError"}},"src":"987:39:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3146,"nodeType":"IfStatement","src":"983:114:20","trueBody":{"id":3145,"nodeType":"Block","src":"1028:69:20","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265202773272076616c7565","id":3142,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1049:36:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","typeString":"literal_string \"ECDSA: invalid signature 's' value\""},"value":"ECDSA: invalid signature 's' value"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","typeString":"literal_string \"ECDSA: invalid signature 's' value\""}],"id":3141,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"1042:6:20","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":3143,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1042:44:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3144,"nodeType":"ExpressionStatement","src":"1042:44:20"}]}},"id":3147,"nodeType":"IfStatement","src":"861:236:20","trueBody":{"id":3136,"nodeType":"Block","src":"911:66:20","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265206c656e677468","id":3133,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"932:33:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","typeString":"literal_string \"ECDSA: invalid signature length\""},"value":"ECDSA: invalid signature length"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","typeString":"literal_string \"ECDSA: invalid signature length\""}],"id":3132,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"925:6:20","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":3134,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"925:41:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3135,"nodeType":"ExpressionStatement","src":"925:41:20"}]}},"id":3148,"nodeType":"IfStatement","src":"752:345:20","trueBody":{"id":3127,"nodeType":"Block","src":"796:59:20","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265","id":3124,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"817:26:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","typeString":"literal_string \"ECDSA: invalid signature\""},"value":"ECDSA: invalid signature"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","typeString":"literal_string \"ECDSA: invalid signature\""}],"id":3123,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"810:6:20","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":3125,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"810:34:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3126,"nodeType":"ExpressionStatement","src":"810:34:20"}]}},"id":3149,"nodeType":"IfStatement","src":"656:441:20","trueBody":{"id":3118,"nodeType":"Block","src":"691:55:20","statements":[{"functionReturnParameters":3112,"id":3117,"nodeType":"Return","src":"705:7:20"}]}}]},"id":3151,"implemented":true,"kind":"function","modifiers":[],"name":"_throwError","nameLocation":"601:11:20","nodeType":"FunctionDefinition","parameters":{"id":3111,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3110,"mutability":"mutable","name":"error","nameLocation":"626:5:20","nodeType":"VariableDeclaration","scope":3151,"src":"613:18:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3107","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":3109,"nodeType":"UserDefinedTypeName","pathNode":{"id":3108,"name":"RecoverError","nodeType":"IdentifierPath","referencedDeclaration":3107,"src":"613:12:20"},"referencedDeclaration":3107,"src":"613:12:20","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3107","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"src":"612:20:20"},"returnParameters":{"id":3112,"nodeType":"ParameterList","parameters":[],"src":"646:0:20"},"scope":3458,"src":"592:511:20","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":3196,"nodeType":"Block","src":"2271:626:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3167,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3164,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3156,"src":"2285:9:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"2285:16:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"3635","id":3166,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2305:2:20","typeDescriptions":{"typeIdentifier":"t_rational_65_by_1","typeString":"int_const 65"},"value":"65"},"src":"2285:22:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3194,"nodeType":"Block","src":"2810:81:20","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":3188,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2840:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3187,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2832:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3186,"name":"address","nodeType":"ElementaryTypeName","src":"2832:7:20","typeDescriptions":{}}},"id":3189,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2832:10:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3190,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3107,"src":"2844:12:20","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3107_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":3191,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":3104,"src":"2844:35:20","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3107","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"id":3192,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2831:49:20","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3107_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":3163,"id":3193,"nodeType":"Return","src":"2824:56:20"}]},"id":3195,"nodeType":"IfStatement","src":"2281:610:20","trueBody":{"id":3185,"nodeType":"Block","src":"2309:495:20","statements":[{"assignments":[3169],"declarations":[{"constant":false,"id":3169,"mutability":"mutable","name":"r","nameLocation":"2331:1:20","nodeType":"VariableDeclaration","scope":3185,"src":"2323:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3168,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2323:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3170,"nodeType":"VariableDeclarationStatement","src":"2323:9:20"},{"assignments":[3172],"declarations":[{"constant":false,"id":3172,"mutability":"mutable","name":"s","nameLocation":"2354:1:20","nodeType":"VariableDeclaration","scope":3185,"src":"2346:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3171,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2346:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3173,"nodeType":"VariableDeclarationStatement","src":"2346:9:20"},{"assignments":[3175],"declarations":[{"constant":false,"id":3175,"mutability":"mutable","name":"v","nameLocation":"2375:1:20","nodeType":"VariableDeclaration","scope":3185,"src":"2369:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3174,"name":"uint8","nodeType":"ElementaryTypeName","src":"2369:5:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":3176,"nodeType":"VariableDeclarationStatement","src":"2369:7:20"},{"AST":{"nodeType":"YulBlock","src":"2577:171:20","statements":[{"nodeType":"YulAssignment","src":"2595:32:20","value":{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2610:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"2621:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2606:3:20"},"nodeType":"YulFunctionCall","src":"2606:20:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2600:5:20"},"nodeType":"YulFunctionCall","src":"2600:27:20"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"2595:1:20"}]},{"nodeType":"YulAssignment","src":"2644:32:20","value":{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2659:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"2670:4:20","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2655:3:20"},"nodeType":"YulFunctionCall","src":"2655:20:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2649:5:20"},"nodeType":"YulFunctionCall","src":"2649:27:20"},"variableNames":[{"name":"s","nodeType":"YulIdentifier","src":"2644:1:20"}]},{"nodeType":"YulAssignment","src":"2693:41:20","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2703:1:20","type":"","value":"0"},{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2716:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"2727:4:20","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2712:3:20"},"nodeType":"YulFunctionCall","src":"2712:20:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2706:5:20"},"nodeType":"YulFunctionCall","src":"2706:27:20"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"2698:4:20"},"nodeType":"YulFunctionCall","src":"2698:36:20"},"variableNames":[{"name":"v","nodeType":"YulIdentifier","src":"2693:1:20"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":3169,"isOffset":false,"isSlot":false,"src":"2595:1:20","valueSize":1},{"declaration":3172,"isOffset":false,"isSlot":false,"src":"2644:1:20","valueSize":1},{"declaration":3156,"isOffset":false,"isSlot":false,"src":"2610:9:20","valueSize":1},{"declaration":3156,"isOffset":false,"isSlot":false,"src":"2659:9:20","valueSize":1},{"declaration":3156,"isOffset":false,"isSlot":false,"src":"2716:9:20","valueSize":1},{"declaration":3175,"isOffset":false,"isSlot":false,"src":"2693:1:20","valueSize":1}],"id":3177,"nodeType":"InlineAssembly","src":"2568:180:20"},{"expression":{"arguments":[{"id":3179,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3154,"src":"2779:4:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3180,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3175,"src":"2785:1:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":3181,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3169,"src":"2788:1:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3182,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3172,"src":"2791:1:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3178,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[3197,3271,3365],"referencedDeclaration":3365,"src":"2768:10:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$3107_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":3183,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2768:25:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3107_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":3163,"id":3184,"nodeType":"Return","src":"2761:32:20"}]}}]},"documentation":{"id":3152,"nodeType":"StructuredDocumentation","src":"1109:1053:20","text":" @dev Returns the address that signed a hashed message (`hash`) with\n `signature` or error string. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it.\n Documentation for signature generation:\n - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n _Available since v4.3._"},"id":3197,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"2176:10:20","nodeType":"FunctionDefinition","parameters":{"id":3157,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3154,"mutability":"mutable","name":"hash","nameLocation":"2195:4:20","nodeType":"VariableDeclaration","scope":3197,"src":"2187:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3153,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2187:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3156,"mutability":"mutable","name":"signature","nameLocation":"2214:9:20","nodeType":"VariableDeclaration","scope":3197,"src":"2201:22:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3155,"name":"bytes","nodeType":"ElementaryTypeName","src":"2201:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2186:38:20"},"returnParameters":{"id":3163,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3159,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3197,"src":"2248:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3158,"name":"address","nodeType":"ElementaryTypeName","src":"2248:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3162,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3197,"src":"2257:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3107","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":3161,"nodeType":"UserDefinedTypeName","pathNode":{"id":3160,"name":"RecoverError","nodeType":"IdentifierPath","referencedDeclaration":3107,"src":"2257:12:20"},"referencedDeclaration":3107,"src":"2257:12:20","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3107","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"src":"2247:23:20"},"scope":3458,"src":"2167:730:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3223,"nodeType":"Block","src":"3770:140:20","statements":[{"assignments":[3208,3211],"declarations":[{"constant":false,"id":3208,"mutability":"mutable","name":"recovered","nameLocation":"3789:9:20","nodeType":"VariableDeclaration","scope":3223,"src":"3781:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3207,"name":"address","nodeType":"ElementaryTypeName","src":"3781:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3211,"mutability":"mutable","name":"error","nameLocation":"3813:5:20","nodeType":"VariableDeclaration","scope":3223,"src":"3800:18:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3107","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":3210,"nodeType":"UserDefinedTypeName","pathNode":{"id":3209,"name":"RecoverError","nodeType":"IdentifierPath","referencedDeclaration":3107,"src":"3800:12:20"},"referencedDeclaration":3107,"src":"3800:12:20","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3107","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"id":3216,"initialValue":{"arguments":[{"id":3213,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3200,"src":"3833:4:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3214,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3202,"src":"3839:9:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3212,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[3197,3271,3365],"referencedDeclaration":3197,"src":"3822:10:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$_t_enum$_RecoverError_$3107_$","typeString":"function (bytes32,bytes memory) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":3215,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3822:27:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3107_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"3780:69:20"},{"expression":{"arguments":[{"id":3218,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3211,"src":"3871:5:20","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3107","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$3107","typeString":"enum ECDSAUpgradeable.RecoverError"}],"id":3217,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3151,"src":"3859:11:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$3107_$returns$__$","typeString":"function (enum ECDSAUpgradeable.RecoverError) pure"}},"id":3219,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3859:18:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3220,"nodeType":"ExpressionStatement","src":"3859:18:20"},{"expression":{"id":3221,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3208,"src":"3894:9:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3206,"id":3222,"nodeType":"Return","src":"3887:16:20"}]},"documentation":{"id":3198,"nodeType":"StructuredDocumentation","src":"2903:775:20","text":" @dev Returns the address that signed a hashed message (`hash`) with\n `signature`. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it."},"id":3224,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"3692:7:20","nodeType":"FunctionDefinition","parameters":{"id":3203,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3200,"mutability":"mutable","name":"hash","nameLocation":"3708:4:20","nodeType":"VariableDeclaration","scope":3224,"src":"3700:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3199,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3700:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3202,"mutability":"mutable","name":"signature","nameLocation":"3727:9:20","nodeType":"VariableDeclaration","scope":3224,"src":"3714:22:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3201,"name":"bytes","nodeType":"ElementaryTypeName","src":"3714:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3699:38:20"},"returnParameters":{"id":3206,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3205,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3224,"src":"3761:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3204,"name":"address","nodeType":"ElementaryTypeName","src":"3761:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3760:9:20"},"scope":3458,"src":"3683:227:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3270,"nodeType":"Block","src":"4297:203:20","statements":[{"assignments":[3240],"declarations":[{"constant":false,"id":3240,"mutability":"mutable","name":"s","nameLocation":"4315:1:20","nodeType":"VariableDeclaration","scope":3270,"src":"4307:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3239,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4307:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3247,"initialValue":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":3246,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3241,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3231,"src":"4319:2:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"arguments":[{"hexValue":"307837666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666","id":3244,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4332:66:20","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"},"value":"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"}],"id":3243,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4324:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3242,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4324:7:20","typeDescriptions":{}}},"id":3245,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4324:75:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4319:80:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4307:92:20"},{"assignments":[3249],"declarations":[{"constant":false,"id":3249,"mutability":"mutable","name":"v","nameLocation":"4415:1:20","nodeType":"VariableDeclaration","scope":3270,"src":"4409:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3248,"name":"uint8","nodeType":"ElementaryTypeName","src":"4409:5:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":3262,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3260,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3254,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3231,"src":"4434:2:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3253,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4426:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3252,"name":"uint256","nodeType":"ElementaryTypeName","src":"4426:7:20","typeDescriptions":{}}},"id":3255,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4426:11:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":3256,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4441:3:20","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"4426:18:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3258,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4425:20:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3237","id":3259,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4448:2:20","typeDescriptions":{"typeIdentifier":"t_rational_27_by_1","typeString":"int_const 27"},"value":"27"},"src":"4425:25:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3251,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4419:5:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":3250,"name":"uint8","nodeType":"ElementaryTypeName","src":"4419:5:20","typeDescriptions":{}}},"id":3261,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4419:32:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"4409:42:20"},{"expression":{"arguments":[{"id":3264,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3227,"src":"4479:4:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3265,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3249,"src":"4485:1:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":3266,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3229,"src":"4488:1:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3267,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3240,"src":"4491:1:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3263,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[3197,3271,3365],"referencedDeclaration":3365,"src":"4468:10:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$3107_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":3268,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4468:25:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3107_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":3238,"id":3269,"nodeType":"Return","src":"4461:32:20"}]},"documentation":{"id":3225,"nodeType":"StructuredDocumentation","src":"3916:243:20","text":" @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n _Available since v4.3._"},"id":3271,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"4173:10:20","nodeType":"FunctionDefinition","parameters":{"id":3232,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3227,"mutability":"mutable","name":"hash","nameLocation":"4201:4:20","nodeType":"VariableDeclaration","scope":3271,"src":"4193:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3226,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4193:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3229,"mutability":"mutable","name":"r","nameLocation":"4223:1:20","nodeType":"VariableDeclaration","scope":3271,"src":"4215:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3228,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4215:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3231,"mutability":"mutable","name":"vs","nameLocation":"4242:2:20","nodeType":"VariableDeclaration","scope":3271,"src":"4234:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3230,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4234:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4183:67:20"},"returnParameters":{"id":3238,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3234,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3271,"src":"4274:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3233,"name":"address","nodeType":"ElementaryTypeName","src":"4274:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3237,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3271,"src":"4283:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3107","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":3236,"nodeType":"UserDefinedTypeName","pathNode":{"id":3235,"name":"RecoverError","nodeType":"IdentifierPath","referencedDeclaration":3107,"src":"4283:12:20"},"referencedDeclaration":3107,"src":"4283:12:20","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3107","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"src":"4273:23:20"},"scope":3458,"src":"4164:336:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3300,"nodeType":"Block","src":"4781:136:20","statements":[{"assignments":[3284,3287],"declarations":[{"constant":false,"id":3284,"mutability":"mutable","name":"recovered","nameLocation":"4800:9:20","nodeType":"VariableDeclaration","scope":3300,"src":"4792:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3283,"name":"address","nodeType":"ElementaryTypeName","src":"4792:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3287,"mutability":"mutable","name":"error","nameLocation":"4824:5:20","nodeType":"VariableDeclaration","scope":3300,"src":"4811:18:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3107","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":3286,"nodeType":"UserDefinedTypeName","pathNode":{"id":3285,"name":"RecoverError","nodeType":"IdentifierPath","referencedDeclaration":3107,"src":"4811:12:20"},"referencedDeclaration":3107,"src":"4811:12:20","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3107","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"id":3293,"initialValue":{"arguments":[{"id":3289,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3274,"src":"4844:4:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3290,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3276,"src":"4850:1:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3291,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3278,"src":"4853:2:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3288,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[3197,3271,3365],"referencedDeclaration":3271,"src":"4833:10:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$3107_$","typeString":"function (bytes32,bytes32,bytes32) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":3292,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4833:23:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3107_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"4791:65:20"},{"expression":{"arguments":[{"id":3295,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3287,"src":"4878:5:20","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3107","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$3107","typeString":"enum ECDSAUpgradeable.RecoverError"}],"id":3294,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3151,"src":"4866:11:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$3107_$returns$__$","typeString":"function (enum ECDSAUpgradeable.RecoverError) pure"}},"id":3296,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4866:18:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3297,"nodeType":"ExpressionStatement","src":"4866:18:20"},{"expression":{"id":3298,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3284,"src":"4901:9:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3282,"id":3299,"nodeType":"Return","src":"4894:16:20"}]},"documentation":{"id":3272,"nodeType":"StructuredDocumentation","src":"4506:154:20","text":" @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n _Available since v4.2._"},"id":3301,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"4674:7:20","nodeType":"FunctionDefinition","parameters":{"id":3279,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3274,"mutability":"mutable","name":"hash","nameLocation":"4699:4:20","nodeType":"VariableDeclaration","scope":3301,"src":"4691:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3273,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4691:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3276,"mutability":"mutable","name":"r","nameLocation":"4721:1:20","nodeType":"VariableDeclaration","scope":3301,"src":"4713:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3275,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4713:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3278,"mutability":"mutable","name":"vs","nameLocation":"4740:2:20","nodeType":"VariableDeclaration","scope":3301,"src":"4732:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3277,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4732:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4681:67:20"},"returnParameters":{"id":3282,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3281,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3301,"src":"4772:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3280,"name":"address","nodeType":"ElementaryTypeName","src":"4772:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4771:9:20"},"scope":3458,"src":"4665:252:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3364,"nodeType":"Block","src":"5240:1345:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3323,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3320,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3310,"src":"6136:1:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3319,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6128:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3318,"name":"uint256","nodeType":"ElementaryTypeName","src":"6128:7:20","typeDescriptions":{}}},"id":3321,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6128:10:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"307837464646464646464646464646464646464646464646464646464646464646463544353736453733353741343530314444464539324634363638314232304130","id":3322,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6141:66:20","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926418782139537452191302581570759080747168_by_1","typeString":"int_const 5789...(69 digits omitted)...7168"},"value":"0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"},"src":"6128:79:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3333,"nodeType":"IfStatement","src":"6124:161:20","trueBody":{"id":3332,"nodeType":"Block","src":"6209:76:20","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":3326,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6239:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3325,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6231:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3324,"name":"address","nodeType":"ElementaryTypeName","src":"6231:7:20","typeDescriptions":{}}},"id":3327,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6231:10:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3328,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3107,"src":"6243:12:20","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3107_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":3329,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":3105,"src":"6243:30:20","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3107","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"id":3330,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6230:44:20","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3107_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":3317,"id":3331,"nodeType":"Return","src":"6223:51:20"}]}},{"assignments":[3335],"declarations":[{"constant":false,"id":3335,"mutability":"mutable","name":"signer","nameLocation":"6387:6:20","nodeType":"VariableDeclaration","scope":3364,"src":"6379:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3334,"name":"address","nodeType":"ElementaryTypeName","src":"6379:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3342,"initialValue":{"arguments":[{"id":3337,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3304,"src":"6406:4:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3338,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3306,"src":"6412:1:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":3339,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3308,"src":"6415:1:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3340,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3310,"src":"6418:1:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3336,"name":"ecrecover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-6,"src":"6396:9:20","typeDescriptions":{"typeIdentifier":"t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":3341,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6396:24:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6379:41:20"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3343,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3335,"src":"6434:6:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":3346,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6452:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3345,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6444:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3344,"name":"address","nodeType":"ElementaryTypeName","src":"6444:7:20","typeDescriptions":{}}},"id":3347,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6444:10:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6434:20:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3358,"nodeType":"IfStatement","src":"6430:101:20","trueBody":{"id":3357,"nodeType":"Block","src":"6456:75:20","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":3351,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6486:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3350,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6478:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3349,"name":"address","nodeType":"ElementaryTypeName","src":"6478:7:20","typeDescriptions":{}}},"id":3352,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6478:10:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3353,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3107,"src":"6490:12:20","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3107_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":3354,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":3103,"src":"6490:29:20","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3107","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"id":3355,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6477:43:20","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3107_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":3317,"id":3356,"nodeType":"Return","src":"6470:50:20"}]}},{"expression":{"components":[{"id":3359,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3335,"src":"6549:6:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3360,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3107,"src":"6557:12:20","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3107_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":3361,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":3102,"src":"6557:20:20","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3107","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"id":3362,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6548:30:20","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3107_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":3317,"id":3363,"nodeType":"Return","src":"6541:37:20"}]},"documentation":{"id":3302,"nodeType":"StructuredDocumentation","src":"4923:163:20","text":" @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n `r` and `s` signature fields separately.\n _Available since v4.3._"},"id":3365,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"5100:10:20","nodeType":"FunctionDefinition","parameters":{"id":3311,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3304,"mutability":"mutable","name":"hash","nameLocation":"5128:4:20","nodeType":"VariableDeclaration","scope":3365,"src":"5120:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3303,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5120:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3306,"mutability":"mutable","name":"v","nameLocation":"5148:1:20","nodeType":"VariableDeclaration","scope":3365,"src":"5142:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3305,"name":"uint8","nodeType":"ElementaryTypeName","src":"5142:5:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":3308,"mutability":"mutable","name":"r","nameLocation":"5167:1:20","nodeType":"VariableDeclaration","scope":3365,"src":"5159:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3307,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5159:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3310,"mutability":"mutable","name":"s","nameLocation":"5186:1:20","nodeType":"VariableDeclaration","scope":3365,"src":"5178:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3309,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5178:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5110:83:20"},"returnParameters":{"id":3317,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3313,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3365,"src":"5217:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3312,"name":"address","nodeType":"ElementaryTypeName","src":"5217:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3316,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3365,"src":"5226:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3107","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":3315,"nodeType":"UserDefinedTypeName","pathNode":{"id":3314,"name":"RecoverError","nodeType":"IdentifierPath","referencedDeclaration":3107,"src":"5226:12:20"},"referencedDeclaration":3107,"src":"5226:12:20","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3107","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"src":"5216:23:20"},"scope":3458,"src":"5091:1494:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3397,"nodeType":"Block","src":"6850:138:20","statements":[{"assignments":[3380,3383],"declarations":[{"constant":false,"id":3380,"mutability":"mutable","name":"recovered","nameLocation":"6869:9:20","nodeType":"VariableDeclaration","scope":3397,"src":"6861:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3379,"name":"address","nodeType":"ElementaryTypeName","src":"6861:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3383,"mutability":"mutable","name":"error","nameLocation":"6893:5:20","nodeType":"VariableDeclaration","scope":3397,"src":"6880:18:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3107","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":3382,"nodeType":"UserDefinedTypeName","pathNode":{"id":3381,"name":"RecoverError","nodeType":"IdentifierPath","referencedDeclaration":3107,"src":"6880:12:20"},"referencedDeclaration":3107,"src":"6880:12:20","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3107","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"id":3390,"initialValue":{"arguments":[{"id":3385,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3368,"src":"6913:4:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3386,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3370,"src":"6919:1:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":3387,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3372,"src":"6922:1:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3388,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3374,"src":"6925:1:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3384,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[3197,3271,3365],"referencedDeclaration":3365,"src":"6902:10:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$3107_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":3389,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6902:25:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3107_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"6860:67:20"},{"expression":{"arguments":[{"id":3392,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3383,"src":"6949:5:20","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3107","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$3107","typeString":"enum ECDSAUpgradeable.RecoverError"}],"id":3391,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3151,"src":"6937:11:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$3107_$returns$__$","typeString":"function (enum ECDSAUpgradeable.RecoverError) pure"}},"id":3393,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6937:18:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3394,"nodeType":"ExpressionStatement","src":"6937:18:20"},{"expression":{"id":3395,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3380,"src":"6972:9:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3378,"id":3396,"nodeType":"Return","src":"6965:16:20"}]},"documentation":{"id":3366,"nodeType":"StructuredDocumentation","src":"6591:122:20","text":" @dev Overload of {ECDSA-recover} that receives the `v`,\n `r` and `s` signature fields separately."},"id":3398,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"6727:7:20","nodeType":"FunctionDefinition","parameters":{"id":3375,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3368,"mutability":"mutable","name":"hash","nameLocation":"6752:4:20","nodeType":"VariableDeclaration","scope":3398,"src":"6744:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3367,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6744:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3370,"mutability":"mutable","name":"v","nameLocation":"6772:1:20","nodeType":"VariableDeclaration","scope":3398,"src":"6766:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3369,"name":"uint8","nodeType":"ElementaryTypeName","src":"6766:5:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":3372,"mutability":"mutable","name":"r","nameLocation":"6791:1:20","nodeType":"VariableDeclaration","scope":3398,"src":"6783:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3371,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6783:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3374,"mutability":"mutable","name":"s","nameLocation":"6810:1:20","nodeType":"VariableDeclaration","scope":3398,"src":"6802:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3373,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6802:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6734:83:20"},"returnParameters":{"id":3378,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3377,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3398,"src":"6841:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3376,"name":"address","nodeType":"ElementaryTypeName","src":"6841:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6840:9:20"},"scope":3458,"src":"6718:270:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3414,"nodeType":"Block","src":"7356:187:20","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a3332","id":3409,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7494:34:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a3332\""},"value":"\u0019Ethereum Signed Message:\n32"},{"id":3410,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3401,"src":"7530:4:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a3332\""},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3407,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7477:3:20","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3408,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"7477:16:20","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3411,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7477:58:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3406,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"7467:9:20","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3412,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7467:69:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3405,"id":3413,"nodeType":"Return","src":"7460:76:20"}]},"documentation":{"id":3399,"nodeType":"StructuredDocumentation","src":"6994:279:20","text":" @dev Returns an Ethereum Signed Message, created from a `hash`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."},"id":3415,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"7287:22:20","nodeType":"FunctionDefinition","parameters":{"id":3402,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3401,"mutability":"mutable","name":"hash","nameLocation":"7318:4:20","nodeType":"VariableDeclaration","scope":3415,"src":"7310:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3400,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7310:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7309:14:20"},"returnParameters":{"id":3405,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3404,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3415,"src":"7347:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3403,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7347:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7346:9:20"},"scope":3458,"src":"7278:265:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3436,"nodeType":"Block","src":"7908:127:20","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a","id":3426,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7952:32:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},"value":"\u0019Ethereum Signed Message:\n"},{"arguments":[{"expression":{"id":3429,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3418,"src":"8014:1:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3430,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"8014:8:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3427,"name":"StringsUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3097,"src":"7986:18:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StringsUpgradeable_$3097_$","typeString":"type(library StringsUpgradeable)"}},"id":3428,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":2980,"src":"7986:27:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":3431,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7986:37:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":3432,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3418,"src":"8025:1:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3424,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7935:3:20","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3425,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"7935:16:20","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3433,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7935:92:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3423,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"7925:9:20","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3434,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7925:103:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3422,"id":3435,"nodeType":"Return","src":"7918:110:20"}]},"documentation":{"id":3416,"nodeType":"StructuredDocumentation","src":"7549:274:20","text":" @dev Returns an Ethereum Signed Message, created from `s`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."},"id":3437,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"7837:22:20","nodeType":"FunctionDefinition","parameters":{"id":3419,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3418,"mutability":"mutable","name":"s","nameLocation":"7873:1:20","nodeType":"VariableDeclaration","scope":3437,"src":"7860:14:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3417,"name":"bytes","nodeType":"ElementaryTypeName","src":"7860:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7859:16:20"},"returnParameters":{"id":3422,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3421,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3437,"src":"7899:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3420,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7899:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7898:9:20"},"scope":3458,"src":"7828:207:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3456,"nodeType":"Block","src":"8476:92:20","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"1901","id":3450,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8520:10:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541","typeString":"literal_string hex\"1901\""},"value":"\u0019\u0001"},{"id":3451,"name":"domainSeparator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3440,"src":"8532:15:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3452,"name":"structHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3442,"src":"8549:10:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541","typeString":"literal_string hex\"1901\""},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3448,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"8503:3:20","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3449,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"8503:16:20","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3453,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8503:57:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3447,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"8493:9:20","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3454,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8493:68:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3446,"id":3455,"nodeType":"Return","src":"8486:75:20"}]},"documentation":{"id":3438,"nodeType":"StructuredDocumentation","src":"8041:328:20","text":" @dev Returns an Ethereum Signed Typed Data, created from a\n `domainSeparator` and a `structHash`. This produces hash corresponding\n to the one signed with the\n https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n JSON-RPC method as part of EIP-712.\n See {recover}."},"id":3457,"implemented":true,"kind":"function","modifiers":[],"name":"toTypedDataHash","nameLocation":"8383:15:20","nodeType":"FunctionDefinition","parameters":{"id":3443,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3440,"mutability":"mutable","name":"domainSeparator","nameLocation":"8407:15:20","nodeType":"VariableDeclaration","scope":3457,"src":"8399:23:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3439,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8399:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3442,"mutability":"mutable","name":"structHash","nameLocation":"8432:10:20","nodeType":"VariableDeclaration","scope":3457,"src":"8424:18:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3441,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8424:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8398:45:20"},"returnParameters":{"id":3446,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3445,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3457,"src":"8467:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3444,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8467:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8466:9:20"},"scope":3458,"src":"8374:194:20","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3459,"src":"380:8190:20","usedErrors":[]}],"src":"112:8459:20"},"id":20},"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2590],"ECDSAUpgradeable":[3458],"EIP712Upgradeable":[3608],"Initializable":[689],"MathUpgradeable":[4473],"StringsUpgradeable":[3097]},"id":3609,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3460,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"113:23:21"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol","file":"./ECDSAUpgradeable.sol","id":3461,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3609,"sourceUnit":3459,"src":"138:32:21","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../../proxy/utils/Initializable.sol","id":3462,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3609,"sourceUnit":690,"src":"171:45:21","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":3464,"name":"Initializable","nodeType":"IdentifierPath","referencedDeclaration":689,"src":"1430:13:21"},"id":3465,"nodeType":"InheritanceSpecifier","src":"1430:13:21"}],"canonicalName":"EIP712Upgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":3463,"nodeType":"StructuredDocumentation","src":"218:1172:21","text":" @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n they need in their contracts using a combination of `abi.encode` and `keccak256`.\n This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n ({_hashTypedDataV4}).\n The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n the chain id to protect against replay attacks on an eventual fork of the chain.\n NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n _Available since v3.4._\n @custom:storage-size 52"},"fullyImplemented":true,"id":3608,"linearizedBaseContracts":[3608,689],"name":"EIP712Upgradeable","nameLocation":"1409:17:21","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":3467,"mutability":"mutable","name":"_HASHED_NAME","nameLocation":"1511:12:21","nodeType":"VariableDeclaration","scope":3608,"src":"1495:28:21","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3466,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1495:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"id":3469,"mutability":"mutable","name":"_HASHED_VERSION","nameLocation":"1545:15:21","nodeType":"VariableDeclaration","scope":3608,"src":"1529:31:21","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3468,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1529:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":true,"id":3474,"mutability":"constant","name":"_TYPE_HASH","nameLocation":"1591:10:21","nodeType":"VariableDeclaration","scope":3608,"src":"1566:133:21","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3470,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1566:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429","id":3472,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1614:84:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f","typeString":"literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""},"value":"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f","typeString":"literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""}],"id":3471,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1604:9:21","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3473,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1604:95:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"body":{"id":3489,"nodeType":"Block","src":"2407:55:21","statements":[{"expression":{"arguments":[{"id":3485,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3477,"src":"2441:4:21","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":3486,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3479,"src":"2447:7:21","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3484,"name":"__EIP712_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"2417:23:21","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory,string memory)"}},"id":3487,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2417:38:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3488,"nodeType":"ExpressionStatement","src":"2417:38:21"}]},"documentation":{"id":3475,"nodeType":"StructuredDocumentation","src":"1751:559:21","text":" @dev Initializes the domain separator and parameter caches.\n The meaning of `name` and `version` is specified in\n https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n - `version`: the current major version of the signing domain.\n NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n contract upgrade]."},"id":3490,"implemented":true,"kind":"function","modifiers":[{"id":3482,"kind":"modifierInvocation","modifierName":{"id":3481,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":634,"src":"2390:16:21"},"nodeType":"ModifierInvocation","src":"2390:16:21"}],"name":"__EIP712_init","nameLocation":"2324:13:21","nodeType":"FunctionDefinition","parameters":{"id":3480,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3477,"mutability":"mutable","name":"name","nameLocation":"2352:4:21","nodeType":"VariableDeclaration","scope":3490,"src":"2338:18:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3476,"name":"string","nodeType":"ElementaryTypeName","src":"2338:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3479,"mutability":"mutable","name":"version","nameLocation":"2372:7:21","nodeType":"VariableDeclaration","scope":3490,"src":"2358:21:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3478,"name":"string","nodeType":"ElementaryTypeName","src":"2358:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2337:43:21"},"returnParameters":{"id":3483,"nodeType":"ParameterList","parameters":[],"src":"2407:0:21"},"scope":3608,"src":"2315:147:21","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3525,"nodeType":"Block","src":"2570:195:21","statements":[{"assignments":[3500],"declarations":[{"constant":false,"id":3500,"mutability":"mutable","name":"hashedName","nameLocation":"2588:10:21","nodeType":"VariableDeclaration","scope":3525,"src":"2580:18:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3499,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2580:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3507,"initialValue":{"arguments":[{"arguments":[{"id":3504,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3492,"src":"2617:4:21","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3503,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2611:5:21","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3502,"name":"bytes","nodeType":"ElementaryTypeName","src":"2611:5:21","typeDescriptions":{}}},"id":3505,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2611:11:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3501,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2601:9:21","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3506,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2601:22:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2580:43:21"},{"assignments":[3509],"declarations":[{"constant":false,"id":3509,"mutability":"mutable","name":"hashedVersion","nameLocation":"2641:13:21","nodeType":"VariableDeclaration","scope":3525,"src":"2633:21:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3508,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2633:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3516,"initialValue":{"arguments":[{"arguments":[{"id":3513,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3494,"src":"2673:7:21","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3512,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2667:5:21","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3511,"name":"bytes","nodeType":"ElementaryTypeName","src":"2667:5:21","typeDescriptions":{}}},"id":3514,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2667:14:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3510,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2657:9:21","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3515,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2657:25:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2633:49:21"},{"expression":{"id":3519,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3517,"name":"_HASHED_NAME","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3467,"src":"2692:12:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3518,"name":"hashedName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3500,"src":"2707:10:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2692:25:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3520,"nodeType":"ExpressionStatement","src":"2692:25:21"},{"expression":{"id":3523,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3521,"name":"_HASHED_VERSION","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3469,"src":"2727:15:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3522,"name":"hashedVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3509,"src":"2745:13:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2727:31:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3524,"nodeType":"ExpressionStatement","src":"2727:31:21"}]},"id":3526,"implemented":true,"kind":"function","modifiers":[{"id":3497,"kind":"modifierInvocation","modifierName":{"id":3496,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":634,"src":"2553:16:21"},"nodeType":"ModifierInvocation","src":"2553:16:21"}],"name":"__EIP712_init_unchained","nameLocation":"2477:23:21","nodeType":"FunctionDefinition","parameters":{"id":3495,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3492,"mutability":"mutable","name":"name","nameLocation":"2515:4:21","nodeType":"VariableDeclaration","scope":3526,"src":"2501:18:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3491,"name":"string","nodeType":"ElementaryTypeName","src":"2501:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3494,"mutability":"mutable","name":"version","nameLocation":"2535:7:21","nodeType":"VariableDeclaration","scope":3526,"src":"2521:21:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3493,"name":"string","nodeType":"ElementaryTypeName","src":"2521:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2500:43:21"},"returnParameters":{"id":3498,"nodeType":"ParameterList","parameters":[],"src":"2570:0:21"},"scope":3608,"src":"2468:297:21","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3540,"nodeType":"Block","src":"2913:98:21","statements":[{"expression":{"arguments":[{"id":3533,"name":"_TYPE_HASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3474,"src":"2952:10:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":3534,"name":"_EIP712NameHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3593,"src":"2964:15:21","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes32_$","typeString":"function () view returns (bytes32)"}},"id":3535,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2964:17:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":3536,"name":"_EIP712VersionHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3602,"src":"2983:18:21","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes32_$","typeString":"function () view returns (bytes32)"}},"id":3537,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2983:20:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3532,"name":"_buildDomainSeparator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3568,"src":"2930:21:21","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32,bytes32) view returns (bytes32)"}},"id":3538,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2930:74:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3531,"id":3539,"nodeType":"Return","src":"2923:81:21"}]},"documentation":{"id":3527,"nodeType":"StructuredDocumentation","src":"2771:75:21","text":" @dev Returns the domain separator for the current chain."},"id":3541,"implemented":true,"kind":"function","modifiers":[],"name":"_domainSeparatorV4","nameLocation":"2860:18:21","nodeType":"FunctionDefinition","parameters":{"id":3528,"nodeType":"ParameterList","parameters":[],"src":"2878:2:21"},"returnParameters":{"id":3531,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3530,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3541,"src":"2904:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3529,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2904:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2903:9:21"},"scope":3608,"src":"2851:160:21","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3567,"nodeType":"Block","src":"3166:108:21","statements":[{"expression":{"arguments":[{"arguments":[{"id":3555,"name":"typeHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3543,"src":"3204:8:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3556,"name":"nameHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3545,"src":"3214:8:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3557,"name":"versionHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3547,"src":"3224:11:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":3558,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"3237:5:21","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3559,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"chainid","nodeType":"MemberAccess","src":"3237:13:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":3562,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3260:4:21","typeDescriptions":{"typeIdentifier":"t_contract$_EIP712Upgradeable_$3608","typeString":"contract EIP712Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_EIP712Upgradeable_$3608","typeString":"contract EIP712Upgradeable"}],"id":3561,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3252:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3560,"name":"address","nodeType":"ElementaryTypeName","src":"3252:7:21","typeDescriptions":{}}},"id":3563,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3252:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3553,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3193:3:21","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3554,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encode","nodeType":"MemberAccess","src":"3193:10:21","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3564,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3193:73:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3552,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3183:9:21","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3565,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3183:84:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3551,"id":3566,"nodeType":"Return","src":"3176:91:21"}]},"id":3568,"implemented":true,"kind":"function","modifiers":[],"name":"_buildDomainSeparator","nameLocation":"3026:21:21","nodeType":"FunctionDefinition","parameters":{"id":3548,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3543,"mutability":"mutable","name":"typeHash","nameLocation":"3065:8:21","nodeType":"VariableDeclaration","scope":3568,"src":"3057:16:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3542,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3057:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3545,"mutability":"mutable","name":"nameHash","nameLocation":"3091:8:21","nodeType":"VariableDeclaration","scope":3568,"src":"3083:16:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3544,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3083:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3547,"mutability":"mutable","name":"versionHash","nameLocation":"3117:11:21","nodeType":"VariableDeclaration","scope":3568,"src":"3109:19:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3546,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3109:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3047:87:21"},"returnParameters":{"id":3551,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3550,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3568,"src":"3157:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3549,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3157:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3156:9:21"},"scope":3608,"src":"3017:257:21","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":3583,"nodeType":"Block","src":"3985:90:21","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":3578,"name":"_domainSeparatorV4","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3541,"src":"4035:18:21","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes32_$","typeString":"function () view returns (bytes32)"}},"id":3579,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4035:20:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3580,"name":"structHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3571,"src":"4057:10:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3576,"name":"ECDSAUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3458,"src":"4002:16:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ECDSAUpgradeable_$3458_$","typeString":"type(library ECDSAUpgradeable)"}},"id":3577,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"toTypedDataHash","nodeType":"MemberAccess","referencedDeclaration":3457,"src":"4002:32:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":3581,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4002:66:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3575,"id":3582,"nodeType":"Return","src":"3995:73:21"}]},"documentation":{"id":3569,"nodeType":"StructuredDocumentation","src":"3280:614:21","text":" @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n function returns the hash of the fully encoded EIP712 message for this domain.\n This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n ```solidity\n bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     keccak256(\"Mail(address to,string contents)\"),\n     mailTo,\n     keccak256(bytes(mailContents))\n )));\n address signer = ECDSA.recover(digest, signature);\n ```"},"id":3584,"implemented":true,"kind":"function","modifiers":[],"name":"_hashTypedDataV4","nameLocation":"3908:16:21","nodeType":"FunctionDefinition","parameters":{"id":3572,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3571,"mutability":"mutable","name":"structHash","nameLocation":"3933:10:21","nodeType":"VariableDeclaration","scope":3584,"src":"3925:18:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3570,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3925:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3924:20:21"},"returnParameters":{"id":3575,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3574,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3584,"src":"3976:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3573,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3976:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3975:9:21"},"scope":3608,"src":"3899:176:21","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":3592,"nodeType":"Block","src":"4378:36:21","statements":[{"expression":{"id":3590,"name":"_HASHED_NAME","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3467,"src":"4395:12:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3589,"id":3591,"nodeType":"Return","src":"4388:19:21"}]},"documentation":{"id":3585,"nodeType":"StructuredDocumentation","src":"4081:225:21","text":" @dev The hash of the name parameter for the EIP712 domain.\n NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n are a concern."},"id":3593,"implemented":true,"kind":"function","modifiers":[],"name":"_EIP712NameHash","nameLocation":"4320:15:21","nodeType":"FunctionDefinition","parameters":{"id":3586,"nodeType":"ParameterList","parameters":[],"src":"4335:2:21"},"returnParameters":{"id":3589,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3588,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3593,"src":"4369:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3587,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4369:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4368:9:21"},"scope":3608,"src":"4311:103:21","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":3601,"nodeType":"Block","src":"4723:39:21","statements":[{"expression":{"id":3599,"name":"_HASHED_VERSION","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3469,"src":"4740:15:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3598,"id":3600,"nodeType":"Return","src":"4733:22:21"}]},"documentation":{"id":3594,"nodeType":"StructuredDocumentation","src":"4420:228:21","text":" @dev The hash of the version parameter for the EIP712 domain.\n NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n are a concern."},"id":3602,"implemented":true,"kind":"function","modifiers":[],"name":"_EIP712VersionHash","nameLocation":"4662:18:21","nodeType":"FunctionDefinition","parameters":{"id":3595,"nodeType":"ParameterList","parameters":[],"src":"4680:2:21"},"returnParameters":{"id":3598,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3597,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3602,"src":"4714:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3596,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4714:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4713:9:21"},"scope":3608,"src":"4653:109:21","stateMutability":"view","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":3603,"nodeType":"StructuredDocumentation","src":"4768:254:21","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":3607,"mutability":"mutable","name":"__gap","nameLocation":"5047:5:21","nodeType":"VariableDeclaration","scope":3608,"src":"5027:25:21","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":3604,"name":"uint256","nodeType":"ElementaryTypeName","src":"5027:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3606,"length":{"hexValue":"3530","id":3605,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5035:2:21","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"5027:11:21","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":3609,"src":"1391:3664:21","usedErrors":[]}],"src":"113:4943:21"},"id":21},"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol","exportedSymbols":{"MathUpgradeable":[4473]},"id":4474,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3610,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"103:23:22"},{"abstract":false,"baseContracts":[],"canonicalName":"MathUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":3611,"nodeType":"StructuredDocumentation","src":"128:73:22","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":4473,"linearizedBaseContracts":[4473],"name":"MathUpgradeable","nameLocation":"210:15:22","nodeType":"ContractDefinition","nodes":[{"canonicalName":"MathUpgradeable.Rounding","id":3615,"members":[{"id":3612,"name":"Down","nameLocation":"256:4:22","nodeType":"EnumValue","src":"256:4:22"},{"id":3613,"name":"Up","nameLocation":"298:2:22","nodeType":"EnumValue","src":"298:2:22"},{"id":3614,"name":"Zero","nameLocation":"329:4:22","nodeType":"EnumValue","src":"329:4:22"}],"name":"Rounding","nameLocation":"237:8:22","nodeType":"EnumDefinition","src":"232:122:22"},{"body":{"id":3632,"nodeType":"Block","src":"491:37:22","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3627,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3625,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3618,"src":"508:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":3626,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3620,"src":"512:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"508:5:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3629,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3620,"src":"520:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3630,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"508:13:22","trueExpression":{"id":3628,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3618,"src":"516:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3624,"id":3631,"nodeType":"Return","src":"501:20:22"}]},"documentation":{"id":3616,"nodeType":"StructuredDocumentation","src":"360:59:22","text":" @dev Returns the largest of two numbers."},"id":3633,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"433:3:22","nodeType":"FunctionDefinition","parameters":{"id":3621,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3618,"mutability":"mutable","name":"a","nameLocation":"445:1:22","nodeType":"VariableDeclaration","scope":3633,"src":"437:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3617,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3620,"mutability":"mutable","name":"b","nameLocation":"456:1:22","nodeType":"VariableDeclaration","scope":3633,"src":"448:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3619,"name":"uint256","nodeType":"ElementaryTypeName","src":"448:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"436:22:22"},"returnParameters":{"id":3624,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3623,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3633,"src":"482:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3622,"name":"uint256","nodeType":"ElementaryTypeName","src":"482:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"481:9:22"},"scope":4473,"src":"424:104:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3650,"nodeType":"Block","src":"666:37:22","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3645,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3643,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3636,"src":"683:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3644,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3638,"src":"687:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"683:5:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3647,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3638,"src":"695:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3648,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"683:13:22","trueExpression":{"id":3646,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3636,"src":"691:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3642,"id":3649,"nodeType":"Return","src":"676:20:22"}]},"documentation":{"id":3634,"nodeType":"StructuredDocumentation","src":"534:60:22","text":" @dev Returns the smallest of two numbers."},"id":3651,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"608:3:22","nodeType":"FunctionDefinition","parameters":{"id":3639,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3636,"mutability":"mutable","name":"a","nameLocation":"620:1:22","nodeType":"VariableDeclaration","scope":3651,"src":"612:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3635,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3638,"mutability":"mutable","name":"b","nameLocation":"631:1:22","nodeType":"VariableDeclaration","scope":3651,"src":"623:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3637,"name":"uint256","nodeType":"ElementaryTypeName","src":"623:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"611:22:22"},"returnParameters":{"id":3642,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3641,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3651,"src":"657:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3640,"name":"uint256","nodeType":"ElementaryTypeName","src":"657:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"656:9:22"},"scope":4473,"src":"599:104:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3673,"nodeType":"Block","src":"887:82:22","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3671,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3663,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3661,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3654,"src":"942:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":3662,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3656,"src":"946:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"942:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3664,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"941:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3670,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3665,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3654,"src":"952:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":3666,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3656,"src":"956:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"952:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3668,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"951:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":3669,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"961:1:22","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"951:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"941:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3660,"id":3672,"nodeType":"Return","src":"934:28:22"}]},"documentation":{"id":3652,"nodeType":"StructuredDocumentation","src":"709:102:22","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":3674,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"825:7:22","nodeType":"FunctionDefinition","parameters":{"id":3657,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3654,"mutability":"mutable","name":"a","nameLocation":"841:1:22","nodeType":"VariableDeclaration","scope":3674,"src":"833:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3653,"name":"uint256","nodeType":"ElementaryTypeName","src":"833:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3656,"mutability":"mutable","name":"b","nameLocation":"852:1:22","nodeType":"VariableDeclaration","scope":3674,"src":"844:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3655,"name":"uint256","nodeType":"ElementaryTypeName","src":"844:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"832:22:22"},"returnParameters":{"id":3660,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3659,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3674,"src":"878:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3658,"name":"uint256","nodeType":"ElementaryTypeName","src":"878:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"877:9:22"},"scope":4473,"src":"816:153:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3698,"nodeType":"Block","src":"1239:123:22","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3686,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3684,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3677,"src":"1327:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3685,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1332:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1327:6:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3695,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3693,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3690,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3688,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3677,"src":"1341:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":3689,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1345:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1341:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3691,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1340:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3692,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3679,"src":"1350:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1340:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3694,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1354:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1340:15:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3696,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1327:28:22","trueExpression":{"hexValue":"30","id":3687,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1336:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3683,"id":3697,"nodeType":"Return","src":"1320:35:22"}]},"documentation":{"id":3675,"nodeType":"StructuredDocumentation","src":"975:188:22","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."},"id":3699,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"1177:7:22","nodeType":"FunctionDefinition","parameters":{"id":3680,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3677,"mutability":"mutable","name":"a","nameLocation":"1193:1:22","nodeType":"VariableDeclaration","scope":3699,"src":"1185:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3676,"name":"uint256","nodeType":"ElementaryTypeName","src":"1185:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3679,"mutability":"mutable","name":"b","nameLocation":"1204:1:22","nodeType":"VariableDeclaration","scope":3699,"src":"1196:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3678,"name":"uint256","nodeType":"ElementaryTypeName","src":"1196:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1184:22:22"},"returnParameters":{"id":3683,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3682,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3699,"src":"1230:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3681,"name":"uint256","nodeType":"ElementaryTypeName","src":"1230:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1229:9:22"},"scope":4473,"src":"1168:194:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3820,"nodeType":"Block","src":"1806:3797:22","statements":[{"id":3819,"nodeType":"UncheckedBlock","src":"1816:3781:22","statements":[{"assignments":[3712],"declarations":[{"constant":false,"id":3712,"mutability":"mutable","name":"prod0","nameLocation":"2145:5:22","nodeType":"VariableDeclaration","scope":3819,"src":"2137:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3711,"name":"uint256","nodeType":"ElementaryTypeName","src":"2137:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3713,"nodeType":"VariableDeclarationStatement","src":"2137:13:22"},{"assignments":[3715],"declarations":[{"constant":false,"id":3715,"mutability":"mutable","name":"prod1","nameLocation":"2217:5:22","nodeType":"VariableDeclaration","scope":3819,"src":"2209:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3714,"name":"uint256","nodeType":"ElementaryTypeName","src":"2209:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3716,"nodeType":"VariableDeclarationStatement","src":"2209:13:22"},{"AST":{"nodeType":"YulBlock","src":"2289:157:22","statements":[{"nodeType":"YulVariableDeclaration","src":"2307:30:22","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2324:1:22"},{"name":"y","nodeType":"YulIdentifier","src":"2327:1:22"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2334:1:22","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2330:3:22"},"nodeType":"YulFunctionCall","src":"2330:6:22"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"2317:6:22"},"nodeType":"YulFunctionCall","src":"2317:20:22"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"2311:2:22","type":""}]},{"nodeType":"YulAssignment","src":"2354:18:22","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2367:1:22"},{"name":"y","nodeType":"YulIdentifier","src":"2370:1:22"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2363:3:22"},"nodeType":"YulFunctionCall","src":"2363:9:22"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"2354:5:22"}]},{"nodeType":"YulAssignment","src":"2389:43:22","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2406:2:22"},{"name":"prod0","nodeType":"YulIdentifier","src":"2410:5:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2402:3:22"},"nodeType":"YulFunctionCall","src":"2402:14:22"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2421:2:22"},{"name":"prod0","nodeType":"YulIdentifier","src":"2425:5:22"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2418:2:22"},"nodeType":"YulFunctionCall","src":"2418:13:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2398:3:22"},"nodeType":"YulFunctionCall","src":"2398:34:22"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"2389:5:22"}]}]},"evmVersion":"london","externalReferences":[{"declaration":3712,"isOffset":false,"isSlot":false,"src":"2354:5:22","valueSize":1},{"declaration":3712,"isOffset":false,"isSlot":false,"src":"2410:5:22","valueSize":1},{"declaration":3712,"isOffset":false,"isSlot":false,"src":"2425:5:22","valueSize":1},{"declaration":3715,"isOffset":false,"isSlot":false,"src":"2389:5:22","valueSize":1},{"declaration":3702,"isOffset":false,"isSlot":false,"src":"2324:1:22","valueSize":1},{"declaration":3702,"isOffset":false,"isSlot":false,"src":"2367:1:22","valueSize":1},{"declaration":3704,"isOffset":false,"isSlot":false,"src":"2327:1:22","valueSize":1},{"declaration":3704,"isOffset":false,"isSlot":false,"src":"2370:1:22","valueSize":1}],"id":3717,"nodeType":"InlineAssembly","src":"2280:166:22"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3720,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3718,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3715,"src":"2527:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3719,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2536:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2527:10:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3726,"nodeType":"IfStatement","src":"2523:75:22","trueBody":{"id":3725,"nodeType":"Block","src":"2539:59:22","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3723,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3721,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3712,"src":"2564:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3722,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3706,"src":"2572:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2564:19:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3710,"id":3724,"nodeType":"Return","src":"2557:26:22"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3730,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3728,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3706,"src":"2708:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":3729,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3715,"src":"2722:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2708:19:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":3727,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2700:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":3731,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2700:28:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3732,"nodeType":"ExpressionStatement","src":"2700:28:22"},{"assignments":[3734],"declarations":[{"constant":false,"id":3734,"mutability":"mutable","name":"remainder","nameLocation":"2992:9:22","nodeType":"VariableDeclaration","scope":3819,"src":"2984:17:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3733,"name":"uint256","nodeType":"ElementaryTypeName","src":"2984:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3735,"nodeType":"VariableDeclarationStatement","src":"2984:17:22"},{"AST":{"nodeType":"YulBlock","src":"3024:291:22","statements":[{"nodeType":"YulAssignment","src":"3093:38:22","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3113:1:22"},{"name":"y","nodeType":"YulIdentifier","src":"3116:1:22"},{"name":"denominator","nodeType":"YulIdentifier","src":"3119:11:22"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"3106:6:22"},"nodeType":"YulFunctionCall","src":"3106:25:22"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"3093:9:22"}]},{"nodeType":"YulAssignment","src":"3213:41:22","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"3226:5:22"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"3236:9:22"},{"name":"prod0","nodeType":"YulIdentifier","src":"3247:5:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3233:2:22"},"nodeType":"YulFunctionCall","src":"3233:20:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3222:3:22"},"nodeType":"YulFunctionCall","src":"3222:32:22"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"3213:5:22"}]},{"nodeType":"YulAssignment","src":"3271:30:22","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3284:5:22"},{"name":"remainder","nodeType":"YulIdentifier","src":"3291:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3280:3:22"},"nodeType":"YulFunctionCall","src":"3280:21:22"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3271:5:22"}]}]},"evmVersion":"london","externalReferences":[{"declaration":3706,"isOffset":false,"isSlot":false,"src":"3119:11:22","valueSize":1},{"declaration":3712,"isOffset":false,"isSlot":false,"src":"3247:5:22","valueSize":1},{"declaration":3712,"isOffset":false,"isSlot":false,"src":"3271:5:22","valueSize":1},{"declaration":3712,"isOffset":false,"isSlot":false,"src":"3284:5:22","valueSize":1},{"declaration":3715,"isOffset":false,"isSlot":false,"src":"3213:5:22","valueSize":1},{"declaration":3715,"isOffset":false,"isSlot":false,"src":"3226:5:22","valueSize":1},{"declaration":3734,"isOffset":false,"isSlot":false,"src":"3093:9:22","valueSize":1},{"declaration":3734,"isOffset":false,"isSlot":false,"src":"3236:9:22","valueSize":1},{"declaration":3734,"isOffset":false,"isSlot":false,"src":"3291:9:22","valueSize":1},{"declaration":3702,"isOffset":false,"isSlot":false,"src":"3113:1:22","valueSize":1},{"declaration":3704,"isOffset":false,"isSlot":false,"src":"3116:1:22","valueSize":1}],"id":3736,"nodeType":"InlineAssembly","src":"3015:300:22"},{"assignments":[3738],"declarations":[{"constant":false,"id":3738,"mutability":"mutable","name":"twos","nameLocation":"3630:4:22","nodeType":"VariableDeclaration","scope":3819,"src":"3622:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3737,"name":"uint256","nodeType":"ElementaryTypeName","src":"3622:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3746,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3745,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3739,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3706,"src":"3637:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3743,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3741,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3652:12:22","subExpression":{"id":3740,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3706,"src":"3653:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3742,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3667:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3652:16:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3744,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3651:18:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3637:32:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3622:47:22"},{"AST":{"nodeType":"YulBlock","src":"3692:362:22","statements":[{"nodeType":"YulAssignment","src":"3757:37:22","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"3776:11:22"},{"name":"twos","nodeType":"YulIdentifier","src":"3789:4:22"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3772:3:22"},"nodeType":"YulFunctionCall","src":"3772:22:22"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"3757:11:22"}]},{"nodeType":"YulAssignment","src":"3861:25:22","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3874:5:22"},{"name":"twos","nodeType":"YulIdentifier","src":"3881:4:22"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3870:3:22"},"nodeType":"YulFunctionCall","src":"3870:16:22"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3861:5:22"}]},{"nodeType":"YulAssignment","src":"4001:39:22","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4021:1:22","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"4024:4:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4017:3:22"},"nodeType":"YulFunctionCall","src":"4017:12:22"},{"name":"twos","nodeType":"YulIdentifier","src":"4031:4:22"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4013:3:22"},"nodeType":"YulFunctionCall","src":"4013:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"4038:1:22","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4009:3:22"},"nodeType":"YulFunctionCall","src":"4009:31:22"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"4001:4:22"}]}]},"evmVersion":"london","externalReferences":[{"declaration":3706,"isOffset":false,"isSlot":false,"src":"3757:11:22","valueSize":1},{"declaration":3706,"isOffset":false,"isSlot":false,"src":"3776:11:22","valueSize":1},{"declaration":3712,"isOffset":false,"isSlot":false,"src":"3861:5:22","valueSize":1},{"declaration":3712,"isOffset":false,"isSlot":false,"src":"3874:5:22","valueSize":1},{"declaration":3738,"isOffset":false,"isSlot":false,"src":"3789:4:22","valueSize":1},{"declaration":3738,"isOffset":false,"isSlot":false,"src":"3881:4:22","valueSize":1},{"declaration":3738,"isOffset":false,"isSlot":false,"src":"4001:4:22","valueSize":1},{"declaration":3738,"isOffset":false,"isSlot":false,"src":"4024:4:22","valueSize":1},{"declaration":3738,"isOffset":false,"isSlot":false,"src":"4031:4:22","valueSize":1}],"id":3747,"nodeType":"InlineAssembly","src":"3683:371:22"},{"expression":{"id":3752,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3748,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3712,"src":"4120:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3751,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3749,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3715,"src":"4129:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3750,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3738,"src":"4137:4:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4129:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4120:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3753,"nodeType":"ExpressionStatement","src":"4120:21:22"},{"assignments":[3755],"declarations":[{"constant":false,"id":3755,"mutability":"mutable","name":"inverse","nameLocation":"4467:7:22","nodeType":"VariableDeclaration","scope":3819,"src":"4459:15:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3754,"name":"uint256","nodeType":"ElementaryTypeName","src":"4459:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3762,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3761,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3758,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":3756,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4478:1:22","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3757,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3706,"src":"4482:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4478:15:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3759,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4477:17:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":3760,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4497:1:22","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4477:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4459:39:22"},{"expression":{"id":3769,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3763,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3755,"src":"4715:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3768,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3764,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4726:1:22","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3767,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3765,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3706,"src":"4730:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3766,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3755,"src":"4744:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4730:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4726:25:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4715:36:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3770,"nodeType":"ExpressionStatement","src":"4715:36:22"},{"expression":{"id":3777,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3771,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3755,"src":"4784:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3776,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3772,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4795:1:22","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3775,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3773,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3706,"src":"4799:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3774,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3755,"src":"4813:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4799:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4795:25:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4784:36:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3778,"nodeType":"ExpressionStatement","src":"4784:36:22"},{"expression":{"id":3785,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3779,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3755,"src":"4854:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3784,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3780,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4865:1:22","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3783,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3781,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3706,"src":"4869:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3782,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3755,"src":"4883:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4869:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4865:25:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4854:36:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3786,"nodeType":"ExpressionStatement","src":"4854:36:22"},{"expression":{"id":3793,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3787,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3755,"src":"4924:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3792,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3788,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4935:1:22","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3791,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3789,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3706,"src":"4939:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3790,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3755,"src":"4953:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4939:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4935:25:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4924:36:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3794,"nodeType":"ExpressionStatement","src":"4924:36:22"},{"expression":{"id":3801,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3795,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3755,"src":"4994:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3800,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3796,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5005:1:22","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3799,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3797,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3706,"src":"5009:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3798,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3755,"src":"5023:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5009:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5005:25:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4994:36:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3802,"nodeType":"ExpressionStatement","src":"4994:36:22"},{"expression":{"id":3809,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3803,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3755,"src":"5065:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3808,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3804,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5076:1:22","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3807,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3805,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3706,"src":"5080:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3806,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3755,"src":"5094:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5080:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5076:25:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5065:36:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3810,"nodeType":"ExpressionStatement","src":"5065:36:22"},{"expression":{"id":3815,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3811,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3709,"src":"5535:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3814,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3812,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3712,"src":"5544:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3813,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3755,"src":"5552:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5544:15:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5535:24:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3816,"nodeType":"ExpressionStatement","src":"5535:24:22"},{"expression":{"id":3817,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3709,"src":"5580:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3710,"id":3818,"nodeType":"Return","src":"5573:13:22"}]}]},"documentation":{"id":3700,"nodeType":"StructuredDocumentation","src":"1368:305:22","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."},"id":3821,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"1687:6:22","nodeType":"FunctionDefinition","parameters":{"id":3707,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3702,"mutability":"mutable","name":"x","nameLocation":"1711:1:22","nodeType":"VariableDeclaration","scope":3821,"src":"1703:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3701,"name":"uint256","nodeType":"ElementaryTypeName","src":"1703:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3704,"mutability":"mutable","name":"y","nameLocation":"1730:1:22","nodeType":"VariableDeclaration","scope":3821,"src":"1722:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3703,"name":"uint256","nodeType":"ElementaryTypeName","src":"1722:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3706,"mutability":"mutable","name":"denominator","nameLocation":"1749:11:22","nodeType":"VariableDeclaration","scope":3821,"src":"1741:19:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3705,"name":"uint256","nodeType":"ElementaryTypeName","src":"1741:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1693:73:22"},"returnParameters":{"id":3710,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3709,"mutability":"mutable","name":"result","nameLocation":"1798:6:22","nodeType":"VariableDeclaration","scope":3821,"src":"1790:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3708,"name":"uint256","nodeType":"ElementaryTypeName","src":"1790:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1789:16:22"},"scope":4473,"src":"1678:3925:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3864,"nodeType":"Block","src":"5883:189:22","statements":[{"assignments":[3837],"declarations":[{"constant":false,"id":3837,"mutability":"mutable","name":"result","nameLocation":"5901:6:22","nodeType":"VariableDeclaration","scope":3864,"src":"5893:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3836,"name":"uint256","nodeType":"ElementaryTypeName","src":"5893:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3843,"initialValue":{"arguments":[{"id":3839,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3824,"src":"5917:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3840,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3826,"src":"5920:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3841,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3828,"src":"5923:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3838,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[3821,3865],"referencedDeclaration":3821,"src":"5910:6:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":3842,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5910:25:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5893:42:22"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3855,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$3615","typeString":"enum MathUpgradeable.Rounding"},"id":3847,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3844,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3831,"src":"5949:8:22","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3615","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3845,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3615,"src":"5961:8:22","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$3615_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":3846,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":3613,"src":"5961:11:22","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3615","typeString":"enum MathUpgradeable.Rounding"}},"src":"5949:23:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3854,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3849,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3824,"src":"5983:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3850,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3826,"src":"5986:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3851,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3828,"src":"5989:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3848,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"5976:6:22","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":3852,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5976:25:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3853,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6004:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5976:29:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5949:56:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3861,"nodeType":"IfStatement","src":"5945:98:22","trueBody":{"id":3860,"nodeType":"Block","src":"6007:36:22","statements":[{"expression":{"id":3858,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3856,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3837,"src":"6021:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3857,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6031:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6021:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3859,"nodeType":"ExpressionStatement","src":"6021:11:22"}]}},{"expression":{"id":3862,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3837,"src":"6059:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3835,"id":3863,"nodeType":"Return","src":"6052:13:22"}]},"documentation":{"id":3822,"nodeType":"StructuredDocumentation","src":"5609:121:22","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":3865,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"5744:6:22","nodeType":"FunctionDefinition","parameters":{"id":3832,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3824,"mutability":"mutable","name":"x","nameLocation":"5768:1:22","nodeType":"VariableDeclaration","scope":3865,"src":"5760:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3823,"name":"uint256","nodeType":"ElementaryTypeName","src":"5760:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3826,"mutability":"mutable","name":"y","nameLocation":"5787:1:22","nodeType":"VariableDeclaration","scope":3865,"src":"5779:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3825,"name":"uint256","nodeType":"ElementaryTypeName","src":"5779:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3828,"mutability":"mutable","name":"denominator","nameLocation":"5806:11:22","nodeType":"VariableDeclaration","scope":3865,"src":"5798:19:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3827,"name":"uint256","nodeType":"ElementaryTypeName","src":"5798:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3831,"mutability":"mutable","name":"rounding","nameLocation":"5836:8:22","nodeType":"VariableDeclaration","scope":3865,"src":"5827:17:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3615","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":3830,"nodeType":"UserDefinedTypeName","pathNode":{"id":3829,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":3615,"src":"5827:8:22"},"referencedDeclaration":3615,"src":"5827:8:22","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3615","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"5750:100:22"},"returnParameters":{"id":3835,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3834,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3865,"src":"5874:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3833,"name":"uint256","nodeType":"ElementaryTypeName","src":"5874:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5873:9:22"},"scope":4473,"src":"5735:337:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3976,"nodeType":"Block","src":"6348:1585:22","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3875,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3873,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3868,"src":"6362:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3874,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6367:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6362:6:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3879,"nodeType":"IfStatement","src":"6358:45:22","trueBody":{"id":3878,"nodeType":"Block","src":"6370:33:22","statements":[{"expression":{"hexValue":"30","id":3876,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6391:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":3872,"id":3877,"nodeType":"Return","src":"6384:8:22"}]}},{"assignments":[3881],"declarations":[{"constant":false,"id":3881,"mutability":"mutable","name":"result","nameLocation":"7090:6:22","nodeType":"VariableDeclaration","scope":3976,"src":"7082:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3880,"name":"uint256","nodeType":"ElementaryTypeName","src":"7082:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3890,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3889,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3882,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7099:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3887,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3884,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3868,"src":"7110:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3883,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[4145,4181],"referencedDeclaration":4145,"src":"7105:4:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3885,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7105:7:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3886,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7116:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7105:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3888,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7104:14:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7099:19:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7082:36:22"},{"id":3975,"nodeType":"UncheckedBlock","src":"7519:408:22","statements":[{"expression":{"id":3900,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3891,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3881,"src":"7543:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3899,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3896,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3892,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3881,"src":"7553:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3895,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3893,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3868,"src":"7562:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3894,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3881,"src":"7566:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7562:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7553:19:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3897,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7552:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3898,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7577:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7552:26:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7543:35:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3901,"nodeType":"ExpressionStatement","src":"7543:35:22"},{"expression":{"id":3911,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3902,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3881,"src":"7592:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3910,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3907,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3903,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3881,"src":"7602:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3906,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3904,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3868,"src":"7611:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3905,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3881,"src":"7615:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7611:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7602:19:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3908,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7601:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3909,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7626:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7601:26:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7592:35:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3912,"nodeType":"ExpressionStatement","src":"7592:35:22"},{"expression":{"id":3922,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3913,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3881,"src":"7641:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3921,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3918,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3914,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3881,"src":"7651:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3917,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3915,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3868,"src":"7660:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3916,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3881,"src":"7664:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7660:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7651:19:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3919,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7650:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3920,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7675:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7650:26:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7641:35:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3923,"nodeType":"ExpressionStatement","src":"7641:35:22"},{"expression":{"id":3933,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3924,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3881,"src":"7690:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3932,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3929,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3925,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3881,"src":"7700:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3928,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3926,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3868,"src":"7709:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3927,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3881,"src":"7713:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7709:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7700:19:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3930,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7699:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3931,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7724:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7699:26:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7690:35:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3934,"nodeType":"ExpressionStatement","src":"7690:35:22"},{"expression":{"id":3944,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3935,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3881,"src":"7739:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3943,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3940,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3936,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3881,"src":"7749:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3939,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3937,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3868,"src":"7758:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3938,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3881,"src":"7762:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7758:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7749:19:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3941,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7748:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3942,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7773:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7748:26:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7739:35:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3945,"nodeType":"ExpressionStatement","src":"7739:35:22"},{"expression":{"id":3955,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3946,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3881,"src":"7788:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3954,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3951,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3947,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3881,"src":"7798:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3950,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3948,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3868,"src":"7807:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3949,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3881,"src":"7811:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7807:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7798:19:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3952,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7797:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3953,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7822:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7797:26:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7788:35:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3956,"nodeType":"ExpressionStatement","src":"7788:35:22"},{"expression":{"id":3966,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3957,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3881,"src":"7837:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3965,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3962,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3958,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3881,"src":"7847:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3961,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3959,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3868,"src":"7856:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3960,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3881,"src":"7860:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7856:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7847:19:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3963,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7846:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3964,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7871:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7846:26:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7837:35:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3967,"nodeType":"ExpressionStatement","src":"7837:35:22"},{"expression":{"arguments":[{"id":3969,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3881,"src":"7897:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3972,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3970,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3868,"src":"7905:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3971,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3881,"src":"7909:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7905:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3968,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3651,"src":"7893:3:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":3973,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7893:23:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3872,"id":3974,"nodeType":"Return","src":"7886:30:22"}]}]},"documentation":{"id":3866,"nodeType":"StructuredDocumentation","src":"6078:208:22","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":3977,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"6300:4:22","nodeType":"FunctionDefinition","parameters":{"id":3869,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3868,"mutability":"mutable","name":"a","nameLocation":"6313:1:22","nodeType":"VariableDeclaration","scope":3977,"src":"6305:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3867,"name":"uint256","nodeType":"ElementaryTypeName","src":"6305:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6304:11:22"},"returnParameters":{"id":3872,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3871,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3977,"src":"6339:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3870,"name":"uint256","nodeType":"ElementaryTypeName","src":"6339:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6338:9:22"},"scope":4473,"src":"6291:1642:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4012,"nodeType":"Block","src":"8109:161:22","statements":[{"id":4011,"nodeType":"UncheckedBlock","src":"8119:145:22","statements":[{"assignments":[3989],"declarations":[{"constant":false,"id":3989,"mutability":"mutable","name":"result","nameLocation":"8151:6:22","nodeType":"VariableDeclaration","scope":4011,"src":"8143:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3988,"name":"uint256","nodeType":"ElementaryTypeName","src":"8143:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3993,"initialValue":{"arguments":[{"id":3991,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3980,"src":"8165:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3990,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[3977,4013],"referencedDeclaration":3977,"src":"8160:4:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3992,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8160:7:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8143:24:22"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3994,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3989,"src":"8188:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4004,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$3615","typeString":"enum MathUpgradeable.Rounding"},"id":3998,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3995,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3983,"src":"8198:8:22","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3615","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3996,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3615,"src":"8210:8:22","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$3615_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":3997,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":3613,"src":"8210:11:22","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3615","typeString":"enum MathUpgradeable.Rounding"}},"src":"8198:23:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4003,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4001,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3999,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3989,"src":"8225:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4000,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3989,"src":"8234:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8225:15:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4002,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3980,"src":"8243:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8225:19:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8198:46:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":4006,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8251:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":4007,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8198:54:22","trueExpression":{"hexValue":"31","id":4005,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8247:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":4008,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8197:56:22","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"8188:65:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3987,"id":4010,"nodeType":"Return","src":"8181:72:22"}]}]},"documentation":{"id":3978,"nodeType":"StructuredDocumentation","src":"7939:89:22","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":4013,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8042:4:22","nodeType":"FunctionDefinition","parameters":{"id":3984,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3980,"mutability":"mutable","name":"a","nameLocation":"8055:1:22","nodeType":"VariableDeclaration","scope":4013,"src":"8047:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3979,"name":"uint256","nodeType":"ElementaryTypeName","src":"8047:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3983,"mutability":"mutable","name":"rounding","nameLocation":"8067:8:22","nodeType":"VariableDeclaration","scope":4013,"src":"8058:17:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3615","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":3982,"nodeType":"UserDefinedTypeName","pathNode":{"id":3981,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":3615,"src":"8058:8:22"},"referencedDeclaration":3615,"src":"8058:8:22","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3615","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"8046:30:22"},"returnParameters":{"id":3987,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3986,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4013,"src":"8100:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3985,"name":"uint256","nodeType":"ElementaryTypeName","src":"8100:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8099:9:22"},"scope":4473,"src":"8033:237:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4144,"nodeType":"Block","src":"8455:922:22","statements":[{"assignments":[4022],"declarations":[{"constant":false,"id":4022,"mutability":"mutable","name":"result","nameLocation":"8473:6:22","nodeType":"VariableDeclaration","scope":4144,"src":"8465:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4021,"name":"uint256","nodeType":"ElementaryTypeName","src":"8465:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4024,"initialValue":{"hexValue":"30","id":4023,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8482:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8465:18:22"},{"id":4141,"nodeType":"UncheckedBlock","src":"8493:855:22","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4029,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4025,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4016,"src":"8521:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":4026,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8530:3:22","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8521:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4028,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8536:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8521:16:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4039,"nodeType":"IfStatement","src":"8517:99:22","trueBody":{"id":4038,"nodeType":"Block","src":"8539:77:22","statements":[{"expression":{"id":4032,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4030,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4016,"src":"8557:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":4031,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8567:3:22","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8557:13:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4033,"nodeType":"ExpressionStatement","src":"8557:13:22"},{"expression":{"id":4036,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4034,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4022,"src":"8588:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":4035,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8598:3:22","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8588:13:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4037,"nodeType":"ExpressionStatement","src":"8588:13:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4044,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4042,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4040,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4016,"src":"8633:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":4041,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8642:2:22","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8633:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4043,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8647:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8633:15:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4054,"nodeType":"IfStatement","src":"8629:96:22","trueBody":{"id":4053,"nodeType":"Block","src":"8650:75:22","statements":[{"expression":{"id":4047,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4045,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4016,"src":"8668:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":4046,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8678:2:22","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8668:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4048,"nodeType":"ExpressionStatement","src":"8668:12:22"},{"expression":{"id":4051,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4049,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4022,"src":"8698:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":4050,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8708:2:22","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8698:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4052,"nodeType":"ExpressionStatement","src":"8698:12:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4059,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4057,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4055,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4016,"src":"8742:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":4056,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8751:2:22","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8742:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4058,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8756:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8742:15:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4069,"nodeType":"IfStatement","src":"8738:96:22","trueBody":{"id":4068,"nodeType":"Block","src":"8759:75:22","statements":[{"expression":{"id":4062,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4060,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4016,"src":"8777:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":4061,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8787:2:22","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8777:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4063,"nodeType":"ExpressionStatement","src":"8777:12:22"},{"expression":{"id":4066,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4064,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4022,"src":"8807:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":4065,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8817:2:22","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8807:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4067,"nodeType":"ExpressionStatement","src":"8807:12:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4074,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4072,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4070,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4016,"src":"8851:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":4071,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8860:2:22","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8851:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4073,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8865:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8851:15:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4084,"nodeType":"IfStatement","src":"8847:96:22","trueBody":{"id":4083,"nodeType":"Block","src":"8868:75:22","statements":[{"expression":{"id":4077,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4075,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4016,"src":"8886:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":4076,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8896:2:22","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8886:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4078,"nodeType":"ExpressionStatement","src":"8886:12:22"},{"expression":{"id":4081,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4079,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4022,"src":"8916:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":4080,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8926:2:22","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8916:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4082,"nodeType":"ExpressionStatement","src":"8916:12:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4089,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4087,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4085,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4016,"src":"8960:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":4086,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8969:1:22","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"8960:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4088,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8973:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8960:14:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4099,"nodeType":"IfStatement","src":"8956:93:22","trueBody":{"id":4098,"nodeType":"Block","src":"8976:73:22","statements":[{"expression":{"id":4092,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4090,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4016,"src":"8994:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":4091,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9004:1:22","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"8994:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4093,"nodeType":"ExpressionStatement","src":"8994:11:22"},{"expression":{"id":4096,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4094,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4022,"src":"9023:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":4095,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9033:1:22","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9023:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4097,"nodeType":"ExpressionStatement","src":"9023:11:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4104,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4102,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4100,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4016,"src":"9066:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":4101,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9075:1:22","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9066:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4103,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9079:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9066:14:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4114,"nodeType":"IfStatement","src":"9062:93:22","trueBody":{"id":4113,"nodeType":"Block","src":"9082:73:22","statements":[{"expression":{"id":4107,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4105,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4016,"src":"9100:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":4106,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9110:1:22","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9100:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4108,"nodeType":"ExpressionStatement","src":"9100:11:22"},{"expression":{"id":4111,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4109,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4022,"src":"9129:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":4110,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9139:1:22","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9129:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4112,"nodeType":"ExpressionStatement","src":"9129:11:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4119,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4115,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4016,"src":"9172:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":4116,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9181:1:22","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9172:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4118,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9185:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9172:14:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4129,"nodeType":"IfStatement","src":"9168:93:22","trueBody":{"id":4128,"nodeType":"Block","src":"9188:73:22","statements":[{"expression":{"id":4122,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4120,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4016,"src":"9206:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":4121,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9216:1:22","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9206:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4123,"nodeType":"ExpressionStatement","src":"9206:11:22"},{"expression":{"id":4126,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4124,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4022,"src":"9235:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":4125,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9245:1:22","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9235:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4127,"nodeType":"ExpressionStatement","src":"9235:11:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4134,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4132,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4130,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4016,"src":"9278:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4131,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9287:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9278:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4133,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9291:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9278:14:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4140,"nodeType":"IfStatement","src":"9274:64:22","trueBody":{"id":4139,"nodeType":"Block","src":"9294:44:22","statements":[{"expression":{"id":4137,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4135,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4022,"src":"9312:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":4136,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9322:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9312:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4138,"nodeType":"ExpressionStatement","src":"9312:11:22"}]}}]},{"expression":{"id":4142,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4022,"src":"9364:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4020,"id":4143,"nodeType":"Return","src":"9357:13:22"}]},"documentation":{"id":4014,"nodeType":"StructuredDocumentation","src":"8276:113:22","text":" @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."},"id":4145,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"8403:4:22","nodeType":"FunctionDefinition","parameters":{"id":4017,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4016,"mutability":"mutable","name":"value","nameLocation":"8416:5:22","nodeType":"VariableDeclaration","scope":4145,"src":"8408:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4015,"name":"uint256","nodeType":"ElementaryTypeName","src":"8408:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8407:15:22"},"returnParameters":{"id":4020,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4019,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4145,"src":"8446:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4018,"name":"uint256","nodeType":"ElementaryTypeName","src":"8446:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8445:9:22"},"scope":4473,"src":"8394:983:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4180,"nodeType":"Block","src":"9610:165:22","statements":[{"id":4179,"nodeType":"UncheckedBlock","src":"9620:149:22","statements":[{"assignments":[4157],"declarations":[{"constant":false,"id":4157,"mutability":"mutable","name":"result","nameLocation":"9652:6:22","nodeType":"VariableDeclaration","scope":4179,"src":"9644:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4156,"name":"uint256","nodeType":"ElementaryTypeName","src":"9644:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4161,"initialValue":{"arguments":[{"id":4159,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4148,"src":"9666:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4158,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[4145,4181],"referencedDeclaration":4145,"src":"9661:4:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4160,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9661:11:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9644:28:22"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4162,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4157,"src":"9693:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4172,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$3615","typeString":"enum MathUpgradeable.Rounding"},"id":4166,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4163,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4151,"src":"9703:8:22","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3615","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4164,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3615,"src":"9715:8:22","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$3615_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":4165,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":3613,"src":"9715:11:22","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3615","typeString":"enum MathUpgradeable.Rounding"}},"src":"9703:23:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4171,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4169,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":4167,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9730:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":4168,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4157,"src":"9735:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9730:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4170,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4148,"src":"9744:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9730:19:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9703:46:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":4174,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9756:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":4175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9703:54:22","trueExpression":{"hexValue":"31","id":4173,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9752:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":4176,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9702:56:22","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"9693:65:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4155,"id":4178,"nodeType":"Return","src":"9686:72:22"}]}]},"documentation":{"id":4146,"nodeType":"StructuredDocumentation","src":"9383:142:22","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":4181,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"9539:4:22","nodeType":"FunctionDefinition","parameters":{"id":4152,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4148,"mutability":"mutable","name":"value","nameLocation":"9552:5:22","nodeType":"VariableDeclaration","scope":4181,"src":"9544:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4147,"name":"uint256","nodeType":"ElementaryTypeName","src":"9544:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4151,"mutability":"mutable","name":"rounding","nameLocation":"9568:8:22","nodeType":"VariableDeclaration","scope":4181,"src":"9559:17:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3615","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":4150,"nodeType":"UserDefinedTypeName","pathNode":{"id":4149,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":3615,"src":"9559:8:22"},"referencedDeclaration":3615,"src":"9559:8:22","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3615","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"9543:34:22"},"returnParameters":{"id":4155,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4154,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4181,"src":"9601:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4153,"name":"uint256","nodeType":"ElementaryTypeName","src":"9601:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9600:9:22"},"scope":4473,"src":"9530:245:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4309,"nodeType":"Block","src":"9962:828:22","statements":[{"assignments":[4190],"declarations":[{"constant":false,"id":4190,"mutability":"mutable","name":"result","nameLocation":"9980:6:22","nodeType":"VariableDeclaration","scope":4309,"src":"9972:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4189,"name":"uint256","nodeType":"ElementaryTypeName","src":"9972:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4192,"initialValue":{"hexValue":"30","id":4191,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9989:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"9972:18:22"},{"id":4306,"nodeType":"UncheckedBlock","src":"10000:761:22","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4197,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4193,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4184,"src":"10028:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":4196,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4194,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10037:2:22","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":4195,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10041:2:22","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10037:6:22","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10028:15:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4209,"nodeType":"IfStatement","src":"10024:99:22","trueBody":{"id":4208,"nodeType":"Block","src":"10045:78:22","statements":[{"expression":{"id":4202,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4198,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4184,"src":"10063:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":4201,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4199,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10072:2:22","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":4200,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10076:2:22","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10072:6:22","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10063:15:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4203,"nodeType":"ExpressionStatement","src":"10063:15:22"},{"expression":{"id":4206,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4204,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4190,"src":"10096:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":4205,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10106:2:22","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10096:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4207,"nodeType":"ExpressionStatement","src":"10096:12:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4214,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4210,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4184,"src":"10140:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":4213,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4211,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10149:2:22","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":4212,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10153:2:22","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10149:6:22","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10140:15:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4226,"nodeType":"IfStatement","src":"10136:99:22","trueBody":{"id":4225,"nodeType":"Block","src":"10157:78:22","statements":[{"expression":{"id":4219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4215,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4184,"src":"10175:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":4218,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4216,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10184:2:22","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":4217,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10188:2:22","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10184:6:22","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10175:15:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4220,"nodeType":"ExpressionStatement","src":"10175:15:22"},{"expression":{"id":4223,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4221,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4190,"src":"10208:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":4222,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10218:2:22","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10208:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4224,"nodeType":"ExpressionStatement","src":"10208:12:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4231,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4227,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4184,"src":"10252:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":4230,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4228,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10261:2:22","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":4229,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10265:2:22","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10261:6:22","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10252:15:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4243,"nodeType":"IfStatement","src":"10248:99:22","trueBody":{"id":4242,"nodeType":"Block","src":"10269:78:22","statements":[{"expression":{"id":4236,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4232,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4184,"src":"10287:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":4235,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4233,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10296:2:22","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":4234,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10300:2:22","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10296:6:22","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10287:15:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4237,"nodeType":"ExpressionStatement","src":"10287:15:22"},{"expression":{"id":4240,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4238,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4190,"src":"10320:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":4239,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10330:2:22","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10320:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4241,"nodeType":"ExpressionStatement","src":"10320:12:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4248,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4244,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4184,"src":"10364:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":4247,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4245,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10373:2:22","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":4246,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10377:1:22","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10373:5:22","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10364:14:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4260,"nodeType":"IfStatement","src":"10360:96:22","trueBody":{"id":4259,"nodeType":"Block","src":"10380:76:22","statements":[{"expression":{"id":4253,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4249,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4184,"src":"10398:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":4252,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4250,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10407:2:22","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":4251,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10411:1:22","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10407:5:22","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10398:14:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4254,"nodeType":"ExpressionStatement","src":"10398:14:22"},{"expression":{"id":4257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4255,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4190,"src":"10430:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":4256,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10440:1:22","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10430:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4258,"nodeType":"ExpressionStatement","src":"10430:11:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4265,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4261,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4184,"src":"10473:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":4264,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4262,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10482:2:22","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":4263,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10486:1:22","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10482:5:22","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10473:14:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4277,"nodeType":"IfStatement","src":"10469:96:22","trueBody":{"id":4276,"nodeType":"Block","src":"10489:76:22","statements":[{"expression":{"id":4270,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4266,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4184,"src":"10507:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":4269,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4267,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10516:2:22","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":4268,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10520:1:22","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10516:5:22","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10507:14:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4271,"nodeType":"ExpressionStatement","src":"10507:14:22"},{"expression":{"id":4274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4272,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4190,"src":"10539:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":4273,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10549:1:22","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10539:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4275,"nodeType":"ExpressionStatement","src":"10539:11:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4282,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4278,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4184,"src":"10582:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":4281,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4279,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10591:2:22","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":4280,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10595:1:22","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10591:5:22","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10582:14:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4294,"nodeType":"IfStatement","src":"10578:96:22","trueBody":{"id":4293,"nodeType":"Block","src":"10598:76:22","statements":[{"expression":{"id":4287,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4283,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4184,"src":"10616:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":4286,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4284,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10625:2:22","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":4285,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10629:1:22","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10625:5:22","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10616:14:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4288,"nodeType":"ExpressionStatement","src":"10616:14:22"},{"expression":{"id":4291,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4289,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4190,"src":"10648:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":4290,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10658:1:22","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10648:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4292,"nodeType":"ExpressionStatement","src":"10648:11:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4299,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4295,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4184,"src":"10691:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":4298,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4296,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10700:2:22","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":4297,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10704:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10700:5:22","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"10691:14:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4305,"nodeType":"IfStatement","src":"10687:64:22","trueBody":{"id":4304,"nodeType":"Block","src":"10707:44:22","statements":[{"expression":{"id":4302,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4300,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4190,"src":"10725:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":4301,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10735:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10725:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4303,"nodeType":"ExpressionStatement","src":"10725:11:22"}]}}]},{"expression":{"id":4307,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4190,"src":"10777:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4188,"id":4308,"nodeType":"Return","src":"10770:13:22"}]},"documentation":{"id":4182,"nodeType":"StructuredDocumentation","src":"9781:114:22","text":" @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."},"id":4310,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"9909:5:22","nodeType":"FunctionDefinition","parameters":{"id":4185,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4184,"mutability":"mutable","name":"value","nameLocation":"9923:5:22","nodeType":"VariableDeclaration","scope":4310,"src":"9915:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4183,"name":"uint256","nodeType":"ElementaryTypeName","src":"9915:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9914:15:22"},"returnParameters":{"id":4188,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4187,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4310,"src":"9953:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4186,"name":"uint256","nodeType":"ElementaryTypeName","src":"9953:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9952:9:22"},"scope":4473,"src":"9900:890:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4345,"nodeType":"Block","src":"11025:165:22","statements":[{"id":4344,"nodeType":"UncheckedBlock","src":"11035:149:22","statements":[{"assignments":[4322],"declarations":[{"constant":false,"id":4322,"mutability":"mutable","name":"result","nameLocation":"11067:6:22","nodeType":"VariableDeclaration","scope":4344,"src":"11059:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4321,"name":"uint256","nodeType":"ElementaryTypeName","src":"11059:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4326,"initialValue":{"arguments":[{"id":4324,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4313,"src":"11082:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4323,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[4310,4346],"referencedDeclaration":4310,"src":"11076:5:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4325,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11076:12:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11059:29:22"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4342,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4327,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4322,"src":"11109:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4337,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$3615","typeString":"enum MathUpgradeable.Rounding"},"id":4331,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4328,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4316,"src":"11119:8:22","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3615","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4329,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3615,"src":"11131:8:22","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$3615_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":4330,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":3613,"src":"11131:11:22","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3615","typeString":"enum MathUpgradeable.Rounding"}},"src":"11119:23:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4336,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4334,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4332,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11146:2:22","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":4333,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4322,"src":"11150:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11146:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4335,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4313,"src":"11159:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11146:18:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11119:45:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":4339,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11171:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":4340,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11119:53:22","trueExpression":{"hexValue":"31","id":4338,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11167:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":4341,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11118:55:22","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11109:64:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4320,"id":4343,"nodeType":"Return","src":"11102:71:22"}]}]},"documentation":{"id":4311,"nodeType":"StructuredDocumentation","src":"10796:143:22","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":4346,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"10953:5:22","nodeType":"FunctionDefinition","parameters":{"id":4317,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4313,"mutability":"mutable","name":"value","nameLocation":"10967:5:22","nodeType":"VariableDeclaration","scope":4346,"src":"10959:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4312,"name":"uint256","nodeType":"ElementaryTypeName","src":"10959:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4316,"mutability":"mutable","name":"rounding","nameLocation":"10983:8:22","nodeType":"VariableDeclaration","scope":4346,"src":"10974:17:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3615","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":4315,"nodeType":"UserDefinedTypeName","pathNode":{"id":4314,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":3615,"src":"10974:8:22"},"referencedDeclaration":3615,"src":"10974:8:22","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3615","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"10958:34:22"},"returnParameters":{"id":4320,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4319,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4346,"src":"11016:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4318,"name":"uint256","nodeType":"ElementaryTypeName","src":"11016:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11015:9:22"},"scope":4473,"src":"10944:246:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4432,"nodeType":"Block","src":"11504:600:22","statements":[{"assignments":[4355],"declarations":[{"constant":false,"id":4355,"mutability":"mutable","name":"result","nameLocation":"11522:6:22","nodeType":"VariableDeclaration","scope":4432,"src":"11514:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4354,"name":"uint256","nodeType":"ElementaryTypeName","src":"11514:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4357,"initialValue":{"hexValue":"30","id":4356,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11531:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11514:18:22"},{"id":4429,"nodeType":"UncheckedBlock","src":"11542:533:22","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4362,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4360,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4358,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4349,"src":"11570:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":4359,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11579:3:22","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11570:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4361,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11585:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11570:16:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4372,"nodeType":"IfStatement","src":"11566:98:22","trueBody":{"id":4371,"nodeType":"Block","src":"11588:76:22","statements":[{"expression":{"id":4365,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4363,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4349,"src":"11606:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":4364,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11616:3:22","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11606:13:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4366,"nodeType":"ExpressionStatement","src":"11606:13:22"},{"expression":{"id":4369,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4367,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4355,"src":"11637:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":4368,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11647:2:22","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11637:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4370,"nodeType":"ExpressionStatement","src":"11637:12:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4377,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4375,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4373,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4349,"src":"11681:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":4374,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11690:2:22","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11681:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4376,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11695:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11681:15:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4387,"nodeType":"IfStatement","src":"11677:95:22","trueBody":{"id":4386,"nodeType":"Block","src":"11698:74:22","statements":[{"expression":{"id":4380,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4378,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4349,"src":"11716:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":4379,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11726:2:22","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11716:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4381,"nodeType":"ExpressionStatement","src":"11716:12:22"},{"expression":{"id":4384,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4382,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4355,"src":"11746:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":4383,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11756:1:22","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11746:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4385,"nodeType":"ExpressionStatement","src":"11746:11:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4392,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4390,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4388,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4349,"src":"11789:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":4389,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11798:2:22","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11789:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4391,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11803:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11789:15:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4402,"nodeType":"IfStatement","src":"11785:95:22","trueBody":{"id":4401,"nodeType":"Block","src":"11806:74:22","statements":[{"expression":{"id":4395,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4393,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4349,"src":"11824:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":4394,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11834:2:22","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11824:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4396,"nodeType":"ExpressionStatement","src":"11824:12:22"},{"expression":{"id":4399,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4397,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4355,"src":"11854:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":4398,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11864:1:22","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11854:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4400,"nodeType":"ExpressionStatement","src":"11854:11:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4407,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4405,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4403,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4349,"src":"11897:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":4404,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11906:2:22","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11897:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4406,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11911:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11897:15:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4417,"nodeType":"IfStatement","src":"11893:95:22","trueBody":{"id":4416,"nodeType":"Block","src":"11914:74:22","statements":[{"expression":{"id":4410,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4408,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4349,"src":"11932:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":4409,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11942:2:22","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11932:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4411,"nodeType":"ExpressionStatement","src":"11932:12:22"},{"expression":{"id":4414,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4412,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4355,"src":"11962:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":4413,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11972:1:22","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11962:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4415,"nodeType":"ExpressionStatement","src":"11962:11:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4422,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4420,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4418,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4349,"src":"12005:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":4419,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12014:1:22","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12005:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4421,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12018:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12005:14:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4428,"nodeType":"IfStatement","src":"12001:64:22","trueBody":{"id":4427,"nodeType":"Block","src":"12021:44:22","statements":[{"expression":{"id":4425,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4423,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4355,"src":"12039:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":4424,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12049:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12039:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4426,"nodeType":"ExpressionStatement","src":"12039:11:22"}]}}]},{"expression":{"id":4430,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4355,"src":"12091:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4353,"id":4431,"nodeType":"Return","src":"12084:13:22"}]},"documentation":{"id":4347,"nodeType":"StructuredDocumentation","src":"11196:240:22","text":" @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":4433,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"11450:6:22","nodeType":"FunctionDefinition","parameters":{"id":4350,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4349,"mutability":"mutable","name":"value","nameLocation":"11465:5:22","nodeType":"VariableDeclaration","scope":4433,"src":"11457:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4348,"name":"uint256","nodeType":"ElementaryTypeName","src":"11457:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11456:15:22"},"returnParameters":{"id":4353,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4352,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4433,"src":"11495:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4351,"name":"uint256","nodeType":"ElementaryTypeName","src":"11495:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11494:9:22"},"scope":4473,"src":"11441:663:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4471,"nodeType":"Block","src":"12340:173:22","statements":[{"id":4470,"nodeType":"UncheckedBlock","src":"12350:157:22","statements":[{"assignments":[4445],"declarations":[{"constant":false,"id":4445,"mutability":"mutable","name":"result","nameLocation":"12382:6:22","nodeType":"VariableDeclaration","scope":4470,"src":"12374:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4444,"name":"uint256","nodeType":"ElementaryTypeName","src":"12374:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4449,"initialValue":{"arguments":[{"id":4447,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4436,"src":"12398:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4446,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[4433,4472],"referencedDeclaration":4433,"src":"12391:6:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4448,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12391:13:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12374:30:22"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4468,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4450,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4445,"src":"12425:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4463,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$3615","typeString":"enum MathUpgradeable.Rounding"},"id":4454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4451,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4439,"src":"12435:8:22","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3615","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4452,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3615,"src":"12447:8:22","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$3615_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":4453,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":3613,"src":"12447:11:22","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3615","typeString":"enum MathUpgradeable.Rounding"}},"src":"12435:23:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4462,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4460,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":4455,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12462:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4458,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4456,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4445,"src":"12468:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"38","id":4457,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12477:1:22","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12468:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4459,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12467:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12462:17:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4461,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4436,"src":"12482:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12462:25:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12435:52:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":4465,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12494:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":4466,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12435:60:22","trueExpression":{"hexValue":"31","id":4464,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12490:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":4467,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12434:62:22","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12425:71:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4443,"id":4469,"nodeType":"Return","src":"12418:78:22"}]}]},"documentation":{"id":4434,"nodeType":"StructuredDocumentation","src":"12110:143:22","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":4472,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"12267:6:22","nodeType":"FunctionDefinition","parameters":{"id":4440,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4436,"mutability":"mutable","name":"value","nameLocation":"12282:5:22","nodeType":"VariableDeclaration","scope":4472,"src":"12274:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4435,"name":"uint256","nodeType":"ElementaryTypeName","src":"12274:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4439,"mutability":"mutable","name":"rounding","nameLocation":"12298:8:22","nodeType":"VariableDeclaration","scope":4472,"src":"12289:17:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3615","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":4438,"nodeType":"UserDefinedTypeName","pathNode":{"id":4437,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":3615,"src":"12289:8:22"},"referencedDeclaration":3615,"src":"12289:8:22","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3615","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"12273:34:22"},"returnParameters":{"id":4443,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4442,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4472,"src":"12331:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4441,"name":"uint256","nodeType":"ElementaryTypeName","src":"12331:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12330:9:22"},"scope":4473,"src":"12258:255:22","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":4474,"src":"202:12313:22","usedErrors":[]}],"src":"103:12413:22"},"id":22},"@openzeppelin/contracts/interfaces/draft-IERC1822.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/draft-IERC1822.sol","exportedSymbols":{"IERC1822Proxiable":[4483]},"id":4484,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4475,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"113:23:23"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1822Proxiable","contractDependencies":[],"contractKind":"interface","documentation":{"id":4476,"nodeType":"StructuredDocumentation","src":"138:203:23","text":" @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n proxy whose upgrades are fully controlled by the current implementation."},"fullyImplemented":false,"id":4483,"linearizedBaseContracts":[4483],"name":"IERC1822Proxiable","nameLocation":"352:17:23","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":4477,"nodeType":"StructuredDocumentation","src":"376:438:23","text":" @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n address.\n IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n function revert if invoked through a proxy."},"functionSelector":"52d1902d","id":4482,"implemented":false,"kind":"function","modifiers":[],"name":"proxiableUUID","nameLocation":"828:13:23","nodeType":"FunctionDefinition","parameters":{"id":4478,"nodeType":"ParameterList","parameters":[],"src":"841:2:23"},"returnParameters":{"id":4481,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4480,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4482,"src":"867:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4479,"name":"bytes32","nodeType":"ElementaryTypeName","src":"867:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"866:9:23"},"scope":4483,"src":"819:57:23","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":4484,"src":"342:536:23","usedErrors":[]}],"src":"113:766:23"},"id":23},"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol","exportedSymbols":{"Address":[5230],"ERC1967Proxy":[4520],"ERC1967Upgrade":[4838],"IBeacon":[4900],"IERC1822Proxiable":[4483],"Proxy":[4890],"StorageSlot":[5290]},"id":4521,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4485,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"114:23:24"},{"absolutePath":"@openzeppelin/contracts/proxy/Proxy.sol","file":"../Proxy.sol","id":4486,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4521,"sourceUnit":4891,"src":"139:22:24","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol","file":"./ERC1967Upgrade.sol","id":4487,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4521,"sourceUnit":4839,"src":"162:30:24","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":4489,"name":"Proxy","nodeType":"IdentifierPath","referencedDeclaration":4890,"src":"592:5:24"},"id":4490,"nodeType":"InheritanceSpecifier","src":"592:5:24"},{"baseName":{"id":4491,"name":"ERC1967Upgrade","nodeType":"IdentifierPath","referencedDeclaration":4838,"src":"599:14:24"},"id":4492,"nodeType":"InheritanceSpecifier","src":"599:14:24"}],"canonicalName":"ERC1967Proxy","contractDependencies":[],"contractKind":"contract","documentation":{"id":4488,"nodeType":"StructuredDocumentation","src":"194:372:24","text":" @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n implementation address that can be changed. This address is stored in storage in the location specified by\n https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n implementation behind the proxy."},"fullyImplemented":true,"id":4520,"linearizedBaseContracts":[4520,4838,4890],"name":"ERC1967Proxy","nameLocation":"576:12:24","nodeType":"ContractDefinition","nodes":[{"body":{"id":4506,"nodeType":"Block","src":"1014:56:24","statements":[{"expression":{"arguments":[{"id":4501,"name":"_logic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4495,"src":"1042:6:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4502,"name":"_data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4497,"src":"1050:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"66616c7365","id":4503,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1057:5:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":4500,"name":"_upgradeToAndCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4621,"src":"1024:17:24","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bool_$returns$__$","typeString":"function (address,bytes memory,bool)"}},"id":4504,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1024:39:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4505,"nodeType":"ExpressionStatement","src":"1024:39:24"}]},"documentation":{"id":4493,"nodeType":"StructuredDocumentation","src":"620:333:24","text":" @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n function call, and allows initializing the storage of the proxy like a Solidity constructor."},"id":4507,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":4498,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4495,"mutability":"mutable","name":"_logic","nameLocation":"978:6:24","nodeType":"VariableDeclaration","scope":4507,"src":"970:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4494,"name":"address","nodeType":"ElementaryTypeName","src":"970:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4497,"mutability":"mutable","name":"_data","nameLocation":"999:5:24","nodeType":"VariableDeclaration","scope":4507,"src":"986:18:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4496,"name":"bytes","nodeType":"ElementaryTypeName","src":"986:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"969:36:24"},"returnParameters":{"id":4499,"nodeType":"ParameterList","parameters":[],"src":"1014:0:24"},"scope":4520,"src":"958:112:24","stateMutability":"payable","virtual":false,"visibility":"public"},{"baseFunctions":[4855],"body":{"id":4518,"nodeType":"Block","src":"1229:59:24","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4514,"name":"ERC1967Upgrade","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4838,"src":"1246:14:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC1967Upgrade_$4838_$","typeString":"type(contract ERC1967Upgrade)"}},"id":4515,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"_getImplementation","nodeType":"MemberAccess","referencedDeclaration":4552,"src":"1246:33:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4516,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1246:35:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":4513,"id":4517,"nodeType":"Return","src":"1239:42:24"}]},"documentation":{"id":4508,"nodeType":"StructuredDocumentation","src":"1076:67:24","text":" @dev Returns the current implementation address."},"id":4519,"implemented":true,"kind":"function","modifiers":[],"name":"_implementation","nameLocation":"1157:15:24","nodeType":"FunctionDefinition","overrides":{"id":4510,"nodeType":"OverrideSpecifier","overrides":[],"src":"1197:8:24"},"parameters":{"id":4509,"nodeType":"ParameterList","parameters":[],"src":"1172:2:24"},"returnParameters":{"id":4513,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4512,"mutability":"mutable","name":"impl","nameLocation":"1223:4:24","nodeType":"VariableDeclaration","scope":4519,"src":"1215:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4511,"name":"address","nodeType":"ElementaryTypeName","src":"1215:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1214:14:24"},"scope":4520,"src":"1148:140:24","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":4521,"src":"567:723:24","usedErrors":[]}],"src":"114:1177:24"},"id":24},"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol","exportedSymbols":{"Address":[5230],"ERC1967Upgrade":[4838],"IBeacon":[4900],"IERC1822Proxiable":[4483],"StorageSlot":[5290]},"id":4839,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4522,"literals":["solidity","^","0.8",".2"],"nodeType":"PragmaDirective","src":"116:23:25"},{"absolutePath":"@openzeppelin/contracts/proxy/beacon/IBeacon.sol","file":"../beacon/IBeacon.sol","id":4523,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4839,"sourceUnit":4901,"src":"141:31:25","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/interfaces/draft-IERC1822.sol","file":"../../interfaces/draft-IERC1822.sol","id":4524,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4839,"sourceUnit":4484,"src":"173:45:25","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"../../utils/Address.sol","id":4525,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4839,"sourceUnit":5231,"src":"219:33:25","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","file":"../../utils/StorageSlot.sol","id":4526,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4839,"sourceUnit":5291,"src":"253:37:25","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"ERC1967Upgrade","contractDependencies":[],"contractKind":"contract","documentation":{"id":4527,"nodeType":"StructuredDocumentation","src":"292:236:25","text":" @dev This abstract contract provides getters and event emitting update functions for\n https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n _Available since v4.1._\n @custom:oz-upgrades-unsafe-allow delegatecall"},"fullyImplemented":true,"id":4838,"linearizedBaseContracts":[4838],"name":"ERC1967Upgrade","nameLocation":"547:14:25","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":4530,"mutability":"constant","name":"_ROLLBACK_SLOT","nameLocation":"672:14:25","nodeType":"VariableDeclaration","scope":4838,"src":"647:108:25","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4528,"name":"bytes32","nodeType":"ElementaryTypeName","src":"647:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307834393130666466613136666564333236306564306537313437663763633664613131613630323038623562393430366431326136333536313466666439313433","id":4529,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"689:66:25","typeDescriptions":{"typeIdentifier":"t_rational_33048860383849004559742813297059419343339852917517107368639918720169455489347_by_1","typeString":"int_const 3304...(69 digits omitted)...9347"},"value":"0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143"},"visibility":"private"},{"constant":true,"documentation":{"id":4531,"nodeType":"StructuredDocumentation","src":"762:214:25","text":" @dev Storage slot with the address of the current implementation.\n This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n validated in the constructor."},"id":4534,"mutability":"constant","name":"_IMPLEMENTATION_SLOT","nameLocation":"1007:20:25","nodeType":"VariableDeclaration","scope":4838,"src":"981:115:25","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4532,"name":"bytes32","nodeType":"ElementaryTypeName","src":"981:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307833363038393461313362613161333231303636376338323834393264623938646361336532303736636333373335613932306133636135303564333832626263","id":4533,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1030:66:25","typeDescriptions":{"typeIdentifier":"t_rational_24440054405305269366569402256811496959409073762505157381672968839269610695612_by_1","typeString":"int_const 2444...(69 digits omitted)...5612"},"value":"0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc"},"visibility":"internal"},{"anonymous":false,"documentation":{"id":4535,"nodeType":"StructuredDocumentation","src":"1103:68:25","text":" @dev Emitted when the implementation is upgraded."},"id":4539,"name":"Upgraded","nameLocation":"1182:8:25","nodeType":"EventDefinition","parameters":{"id":4538,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4537,"indexed":true,"mutability":"mutable","name":"implementation","nameLocation":"1207:14:25","nodeType":"VariableDeclaration","scope":4539,"src":"1191:30:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4536,"name":"address","nodeType":"ElementaryTypeName","src":"1191:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1190:32:25"},"src":"1176:47:25"},{"body":{"id":4551,"nodeType":"Block","src":"1363:78:25","statements":[{"expression":{"expression":{"arguments":[{"id":4547,"name":"_IMPLEMENTATION_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4534,"src":"1407:20:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":4545,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5290,"src":"1380:11:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$5290_$","typeString":"type(library StorageSlot)"}},"id":4546,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":5256,"src":"1380:26:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$5236_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlot.AddressSlot storage pointer)"}},"id":4548,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1380:48:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$5236_storage_ptr","typeString":"struct StorageSlot.AddressSlot storage pointer"}},"id":4549,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","referencedDeclaration":5235,"src":"1380:54:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":4544,"id":4550,"nodeType":"Return","src":"1373:61:25"}]},"documentation":{"id":4540,"nodeType":"StructuredDocumentation","src":"1229:67:25","text":" @dev Returns the current implementation address."},"id":4552,"implemented":true,"kind":"function","modifiers":[],"name":"_getImplementation","nameLocation":"1310:18:25","nodeType":"FunctionDefinition","parameters":{"id":4541,"nodeType":"ParameterList","parameters":[],"src":"1328:2:25"},"returnParameters":{"id":4544,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4543,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4552,"src":"1354:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4542,"name":"address","nodeType":"ElementaryTypeName","src":"1354:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1353:9:25"},"scope":4838,"src":"1301:140:25","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4575,"nodeType":"Block","src":"1595:196:25","statements":[{"expression":{"arguments":[{"arguments":[{"id":4561,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4555,"src":"1632:17:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4559,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5230,"src":"1613:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Address_$5230_$","typeString":"type(library Address)"}},"id":4560,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":4918,"src":"1613:18:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":4562,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1613:37:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a206e657720696d706c656d656e746174696f6e206973206e6f74206120636f6e7472616374","id":4563,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1652:47:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65","typeString":"literal_string \"ERC1967: new implementation is not a contract\""},"value":"ERC1967: new implementation is not a contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65","typeString":"literal_string \"ERC1967: new implementation is not a contract\""}],"id":4558,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1605:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4564,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1605:95:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4565,"nodeType":"ExpressionStatement","src":"1605:95:25"},{"expression":{"id":4573,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"arguments":[{"id":4569,"name":"_IMPLEMENTATION_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4534,"src":"1737:20:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":4566,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5290,"src":"1710:11:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$5290_$","typeString":"type(library StorageSlot)"}},"id":4568,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":5256,"src":"1710:26:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$5236_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlot.AddressSlot storage pointer)"}},"id":4570,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1710:48:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$5236_storage_ptr","typeString":"struct StorageSlot.AddressSlot storage pointer"}},"id":4571,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"value","nodeType":"MemberAccess","referencedDeclaration":5235,"src":"1710:54:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4572,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4555,"src":"1767:17:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1710:74:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4574,"nodeType":"ExpressionStatement","src":"1710:74:25"}]},"documentation":{"id":4553,"nodeType":"StructuredDocumentation","src":"1447:80:25","text":" @dev Stores a new address in the EIP1967 implementation slot."},"id":4576,"implemented":true,"kind":"function","modifiers":[],"name":"_setImplementation","nameLocation":"1541:18:25","nodeType":"FunctionDefinition","parameters":{"id":4556,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4555,"mutability":"mutable","name":"newImplementation","nameLocation":"1568:17:25","nodeType":"VariableDeclaration","scope":4576,"src":"1560:25:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4554,"name":"address","nodeType":"ElementaryTypeName","src":"1560:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1559:27:25"},"returnParameters":{"id":4557,"nodeType":"ParameterList","parameters":[],"src":"1595:0:25"},"scope":4838,"src":"1532:259:25","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":4590,"nodeType":"Block","src":"1953:96:25","statements":[{"expression":{"arguments":[{"id":4583,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4579,"src":"1982:17:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4582,"name":"_setImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4576,"src":"1963:18:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":4584,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1963:37:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4585,"nodeType":"ExpressionStatement","src":"1963:37:25"},{"eventCall":{"arguments":[{"id":4587,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4579,"src":"2024:17:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4586,"name":"Upgraded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4539,"src":"2015:8:25","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":4588,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2015:27:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4589,"nodeType":"EmitStatement","src":"2010:32:25"}]},"documentation":{"id":4577,"nodeType":"StructuredDocumentation","src":"1797:95:25","text":" @dev Perform implementation upgrade\n Emits an {Upgraded} event."},"id":4591,"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeTo","nameLocation":"1906:10:25","nodeType":"FunctionDefinition","parameters":{"id":4580,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4579,"mutability":"mutable","name":"newImplementation","nameLocation":"1925:17:25","nodeType":"VariableDeclaration","scope":4591,"src":"1917:25:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4578,"name":"address","nodeType":"ElementaryTypeName","src":"1917:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1916:27:25"},"returnParameters":{"id":4581,"nodeType":"ParameterList","parameters":[],"src":"1953:0:25"},"scope":4838,"src":"1897:152:25","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4620,"nodeType":"Block","src":"2311:167:25","statements":[{"expression":{"arguments":[{"id":4602,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4594,"src":"2332:17:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4601,"name":"_upgradeTo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4591,"src":"2321:10:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":4603,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2321:29:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4604,"nodeType":"ExpressionStatement","src":"2321:29:25"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4610,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4608,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4605,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4596,"src":"2364:4:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4606,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"2364:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4607,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2378:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2364:15:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"id":4609,"name":"forceCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4598,"src":"2383:9:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2364:28:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4619,"nodeType":"IfStatement","src":"2360:112:25","trueBody":{"id":4618,"nodeType":"Block","src":"2394:78:25","statements":[{"expression":{"arguments":[{"id":4614,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4594,"src":"2437:17:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4615,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4596,"src":"2456:4:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":4611,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5230,"src":"2408:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Address_$5230_$","typeString":"type(library Address)"}},"id":4613,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"functionDelegateCall","nodeType":"MemberAccess","referencedDeclaration":5117,"src":"2408:28:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory) returns (bytes memory)"}},"id":4616,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2408:53:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4617,"nodeType":"ExpressionStatement","src":"2408:53:25"}]}}]},"documentation":{"id":4592,"nodeType":"StructuredDocumentation","src":"2055:123:25","text":" @dev Perform implementation upgrade with additional setup call.\n Emits an {Upgraded} event."},"id":4621,"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeToAndCall","nameLocation":"2192:17:25","nodeType":"FunctionDefinition","parameters":{"id":4599,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4594,"mutability":"mutable","name":"newImplementation","nameLocation":"2227:17:25","nodeType":"VariableDeclaration","scope":4621,"src":"2219:25:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4593,"name":"address","nodeType":"ElementaryTypeName","src":"2219:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4596,"mutability":"mutable","name":"data","nameLocation":"2267:4:25","nodeType":"VariableDeclaration","scope":4621,"src":"2254:17:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4595,"name":"bytes","nodeType":"ElementaryTypeName","src":"2254:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4598,"mutability":"mutable","name":"forceCall","nameLocation":"2286:9:25","nodeType":"VariableDeclaration","scope":4621,"src":"2281:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4597,"name":"bool","nodeType":"ElementaryTypeName","src":"2281:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2209:92:25"},"returnParameters":{"id":4600,"nodeType":"ParameterList","parameters":[],"src":"2311:0:25"},"scope":4838,"src":"2183:295:25","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4673,"nodeType":"Block","src":"2782:820:25","statements":[{"condition":{"expression":{"arguments":[{"id":4633,"name":"_ROLLBACK_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4530,"src":"3123:14:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":4631,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5290,"src":"3096:11:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$5290_$","typeString":"type(library StorageSlot)"}},"id":4632,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getBooleanSlot","nodeType":"MemberAccess","referencedDeclaration":5267,"src":"3096:26:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_BooleanSlot_$5239_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlot.BooleanSlot storage pointer)"}},"id":4634,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3096:42:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$5239_storage_ptr","typeString":"struct StorageSlot.BooleanSlot storage pointer"}},"id":4635,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","referencedDeclaration":5238,"src":"3096:48:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4671,"nodeType":"Block","src":"3214:382:25","statements":[{"clauses":[{"block":{"id":4656,"nodeType":"Block","src":"3308:115:25","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":4652,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4650,"name":"slot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4647,"src":"3334:4:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":4651,"name":"_IMPLEMENTATION_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4534,"src":"3342:20:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3334:28:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524331393637557067726164653a20756e737570706f727465642070726f786961626c6555554944","id":4653,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3364:43:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c","typeString":"literal_string \"ERC1967Upgrade: unsupported proxiableUUID\""},"value":"ERC1967Upgrade: unsupported proxiableUUID"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c","typeString":"literal_string \"ERC1967Upgrade: unsupported proxiableUUID\""}],"id":4649,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3326:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4654,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3326:82:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4655,"nodeType":"ExpressionStatement","src":"3326:82:25"}]},"errorName":"","id":4657,"nodeType":"TryCatchClause","parameters":{"id":4648,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4647,"mutability":"mutable","name":"slot","nameLocation":"3302:4:25","nodeType":"VariableDeclaration","scope":4657,"src":"3294:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4646,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3294:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3293:14:25"},"src":"3285:138:25"},{"block":{"id":4662,"nodeType":"Block","src":"3430:89:25","statements":[{"expression":{"arguments":[{"hexValue":"45524331393637557067726164653a206e657720696d706c656d656e746174696f6e206973206e6f742055555053","id":4659,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3455:48:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24","typeString":"literal_string \"ERC1967Upgrade: new implementation is not UUPS\""},"value":"ERC1967Upgrade: new implementation is not UUPS"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24","typeString":"literal_string \"ERC1967Upgrade: new implementation is not UUPS\""}],"id":4658,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"3448:6:25","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":4660,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3448:56:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4661,"nodeType":"ExpressionStatement","src":"3448:56:25"}]},"errorName":"","id":4663,"nodeType":"TryCatchClause","src":"3424:95:25"}],"externalCall":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":4642,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4624,"src":"3250:17:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4641,"name":"IERC1822Proxiable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4483,"src":"3232:17:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1822Proxiable_$4483_$","typeString":"type(contract IERC1822Proxiable)"}},"id":4643,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3232:36:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC1822Proxiable_$4483","typeString":"contract IERC1822Proxiable"}},"id":4644,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"proxiableUUID","nodeType":"MemberAccess","referencedDeclaration":4482,"src":"3232:50:25","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_bytes32_$","typeString":"function () view external returns (bytes32)"}},"id":4645,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3232:52:25","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4664,"nodeType":"TryStatement","src":"3228:291:25"},{"expression":{"arguments":[{"id":4666,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4624,"src":"3550:17:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4667,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4626,"src":"3569:4:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":4668,"name":"forceCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4628,"src":"3575:9:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":4665,"name":"_upgradeToAndCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4621,"src":"3532:17:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bool_$returns$__$","typeString":"function (address,bytes memory,bool)"}},"id":4669,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3532:53:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4670,"nodeType":"ExpressionStatement","src":"3532:53:25"}]},"id":4672,"nodeType":"IfStatement","src":"3092:504:25","trueBody":{"id":4640,"nodeType":"Block","src":"3146:62:25","statements":[{"expression":{"arguments":[{"id":4637,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4624,"src":"3179:17:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4636,"name":"_setImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4576,"src":"3160:18:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":4638,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3160:37:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4639,"nodeType":"ExpressionStatement","src":"3160:37:25"}]}}]},"documentation":{"id":4622,"nodeType":"StructuredDocumentation","src":"2484:161:25","text":" @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n Emits an {Upgraded} event."},"id":4674,"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeToAndCallUUPS","nameLocation":"2659:21:25","nodeType":"FunctionDefinition","parameters":{"id":4629,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4624,"mutability":"mutable","name":"newImplementation","nameLocation":"2698:17:25","nodeType":"VariableDeclaration","scope":4674,"src":"2690:25:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4623,"name":"address","nodeType":"ElementaryTypeName","src":"2690:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4626,"mutability":"mutable","name":"data","nameLocation":"2738:4:25","nodeType":"VariableDeclaration","scope":4674,"src":"2725:17:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4625,"name":"bytes","nodeType":"ElementaryTypeName","src":"2725:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4628,"mutability":"mutable","name":"forceCall","nameLocation":"2757:9:25","nodeType":"VariableDeclaration","scope":4674,"src":"2752:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4627,"name":"bool","nodeType":"ElementaryTypeName","src":"2752:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2680:92:25"},"returnParameters":{"id":4630,"nodeType":"ParameterList","parameters":[],"src":"2782:0:25"},"scope":4838,"src":"2650:952:25","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":true,"documentation":{"id":4675,"nodeType":"StructuredDocumentation","src":"3608:189:25","text":" @dev Storage slot with the admin of the contract.\n This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n validated in the constructor."},"id":4678,"mutability":"constant","name":"_ADMIN_SLOT","nameLocation":"3828:11:25","nodeType":"VariableDeclaration","scope":4838,"src":"3802:106:25","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4676,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3802:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307862353331323736383461353638623331373361653133623966386136303136653234336536336236653865653131373864366137313738353062356436313033","id":4677,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3842:66:25","typeDescriptions":{"typeIdentifier":"t_rational_81955473079516046949633743016697847541294818689821282749996681496272635257091_by_1","typeString":"int_const 8195...(69 digits omitted)...7091"},"value":"0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103"},"visibility":"internal"},{"anonymous":false,"documentation":{"id":4679,"nodeType":"StructuredDocumentation","src":"3915:67:25","text":" @dev Emitted when the admin account has changed."},"id":4685,"name":"AdminChanged","nameLocation":"3993:12:25","nodeType":"EventDefinition","parameters":{"id":4684,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4681,"indexed":false,"mutability":"mutable","name":"previousAdmin","nameLocation":"4014:13:25","nodeType":"VariableDeclaration","scope":4685,"src":"4006:21:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4680,"name":"address","nodeType":"ElementaryTypeName","src":"4006:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4683,"indexed":false,"mutability":"mutable","name":"newAdmin","nameLocation":"4037:8:25","nodeType":"VariableDeclaration","scope":4685,"src":"4029:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4682,"name":"address","nodeType":"ElementaryTypeName","src":"4029:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4005:41:25"},"src":"3987:60:25"},{"body":{"id":4697,"nodeType":"Block","src":"4161:69:25","statements":[{"expression":{"expression":{"arguments":[{"id":4693,"name":"_ADMIN_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4678,"src":"4205:11:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":4691,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5290,"src":"4178:11:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$5290_$","typeString":"type(library StorageSlot)"}},"id":4692,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":5256,"src":"4178:26:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$5236_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlot.AddressSlot storage pointer)"}},"id":4694,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4178:39:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$5236_storage_ptr","typeString":"struct StorageSlot.AddressSlot storage pointer"}},"id":4695,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","referencedDeclaration":5235,"src":"4178:45:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":4690,"id":4696,"nodeType":"Return","src":"4171:52:25"}]},"documentation":{"id":4686,"nodeType":"StructuredDocumentation","src":"4053:50:25","text":" @dev Returns the current admin."},"id":4698,"implemented":true,"kind":"function","modifiers":[],"name":"_getAdmin","nameLocation":"4117:9:25","nodeType":"FunctionDefinition","parameters":{"id":4687,"nodeType":"ParameterList","parameters":[],"src":"4126:2:25"},"returnParameters":{"id":4690,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4689,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4698,"src":"4152:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4688,"name":"address","nodeType":"ElementaryTypeName","src":"4152:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4151:9:25"},"scope":4838,"src":"4108:122:25","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4723,"nodeType":"Block","src":"4357:156:25","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4710,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4705,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4701,"src":"4375:8:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":4708,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4395:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4707,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4387:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4706,"name":"address","nodeType":"ElementaryTypeName","src":"4387:7:25","typeDescriptions":{}}},"id":4709,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4387:10:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4375:22:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a206e65772061646d696e20697320746865207a65726f2061646472657373","id":4711,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4399:40:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_3820e16891102c1360a787e6e648431097d92537f969d458f5c94b56f8318be5","typeString":"literal_string \"ERC1967: new admin is the zero address\""},"value":"ERC1967: new admin is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3820e16891102c1360a787e6e648431097d92537f969d458f5c94b56f8318be5","typeString":"literal_string \"ERC1967: new admin is the zero address\""}],"id":4704,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4367:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4712,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4367:73:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4713,"nodeType":"ExpressionStatement","src":"4367:73:25"},{"expression":{"id":4721,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"arguments":[{"id":4717,"name":"_ADMIN_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4678,"src":"4477:11:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":4714,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5290,"src":"4450:11:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$5290_$","typeString":"type(library StorageSlot)"}},"id":4716,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":5256,"src":"4450:26:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$5236_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlot.AddressSlot storage pointer)"}},"id":4718,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4450:39:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$5236_storage_ptr","typeString":"struct StorageSlot.AddressSlot storage pointer"}},"id":4719,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"value","nodeType":"MemberAccess","referencedDeclaration":5235,"src":"4450:45:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4720,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4701,"src":"4498:8:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4450:56:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4722,"nodeType":"ExpressionStatement","src":"4450:56:25"}]},"documentation":{"id":4699,"nodeType":"StructuredDocumentation","src":"4236:71:25","text":" @dev Stores a new address in the EIP1967 admin slot."},"id":4724,"implemented":true,"kind":"function","modifiers":[],"name":"_setAdmin","nameLocation":"4321:9:25","nodeType":"FunctionDefinition","parameters":{"id":4702,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4701,"mutability":"mutable","name":"newAdmin","nameLocation":"4339:8:25","nodeType":"VariableDeclaration","scope":4724,"src":"4331:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4700,"name":"address","nodeType":"ElementaryTypeName","src":"4331:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4330:18:25"},"returnParameters":{"id":4703,"nodeType":"ParameterList","parameters":[],"src":"4357:0:25"},"scope":4838,"src":"4312:201:25","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":4740,"nodeType":"Block","src":"4673:86:25","statements":[{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":4731,"name":"_getAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4698,"src":"4701:9:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4732,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4701:11:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4733,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4727,"src":"4714:8:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4730,"name":"AdminChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4685,"src":"4688:12:25","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":4734,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4688:35:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4735,"nodeType":"EmitStatement","src":"4683:40:25"},{"expression":{"arguments":[{"id":4737,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4727,"src":"4743:8:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4736,"name":"_setAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4724,"src":"4733:9:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":4738,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4733:19:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4739,"nodeType":"ExpressionStatement","src":"4733:19:25"}]},"documentation":{"id":4725,"nodeType":"StructuredDocumentation","src":"4519:100:25","text":" @dev Changes the admin of the proxy.\n Emits an {AdminChanged} event."},"id":4741,"implemented":true,"kind":"function","modifiers":[],"name":"_changeAdmin","nameLocation":"4633:12:25","nodeType":"FunctionDefinition","parameters":{"id":4728,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4727,"mutability":"mutable","name":"newAdmin","nameLocation":"4654:8:25","nodeType":"VariableDeclaration","scope":4741,"src":"4646:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4726,"name":"address","nodeType":"ElementaryTypeName","src":"4646:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4645:18:25"},"returnParameters":{"id":4729,"nodeType":"ParameterList","parameters":[],"src":"4673:0:25"},"scope":4838,"src":"4624:135:25","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":true,"documentation":{"id":4742,"nodeType":"StructuredDocumentation","src":"4765:232:25","text":" @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor."},"id":4745,"mutability":"constant","name":"_BEACON_SLOT","nameLocation":"5028:12:25","nodeType":"VariableDeclaration","scope":4838,"src":"5002:107:25","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4743,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5002:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307861336630616437346535343233616562666438306433656634333436353738333335613961373261656165653539666636636233353832623335313333643530","id":4744,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5043:66:25","typeDescriptions":{"typeIdentifier":"t_rational_74152234768234802001998023604048924213078445070507226371336425913862612794704_by_1","typeString":"int_const 7415...(69 digits omitted)...4704"},"value":"0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50"},"visibility":"internal"},{"anonymous":false,"documentation":{"id":4746,"nodeType":"StructuredDocumentation","src":"5116:60:25","text":" @dev Emitted when the beacon is upgraded."},"id":4750,"name":"BeaconUpgraded","nameLocation":"5187:14:25","nodeType":"EventDefinition","parameters":{"id":4749,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4748,"indexed":true,"mutability":"mutable","name":"beacon","nameLocation":"5218:6:25","nodeType":"VariableDeclaration","scope":4750,"src":"5202:22:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4747,"name":"address","nodeType":"ElementaryTypeName","src":"5202:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5201:24:25"},"src":"5181:45:25"},{"body":{"id":4762,"nodeType":"Block","src":"5342:70:25","statements":[{"expression":{"expression":{"arguments":[{"id":4758,"name":"_BEACON_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4745,"src":"5386:12:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":4756,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5290,"src":"5359:11:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$5290_$","typeString":"type(library StorageSlot)"}},"id":4757,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":5256,"src":"5359:26:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$5236_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlot.AddressSlot storage pointer)"}},"id":4759,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5359:40:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$5236_storage_ptr","typeString":"struct StorageSlot.AddressSlot storage pointer"}},"id":4760,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","referencedDeclaration":5235,"src":"5359:46:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":4755,"id":4761,"nodeType":"Return","src":"5352:53:25"}]},"documentation":{"id":4751,"nodeType":"StructuredDocumentation","src":"5232:51:25","text":" @dev Returns the current beacon."},"id":4763,"implemented":true,"kind":"function","modifiers":[],"name":"_getBeacon","nameLocation":"5297:10:25","nodeType":"FunctionDefinition","parameters":{"id":4752,"nodeType":"ParameterList","parameters":[],"src":"5307:2:25"},"returnParameters":{"id":4755,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4754,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4763,"src":"5333:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4753,"name":"address","nodeType":"ElementaryTypeName","src":"5333:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5332:9:25"},"scope":4838,"src":"5288:124:25","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4798,"nodeType":"Block","src":"5541:324:25","statements":[{"expression":{"arguments":[{"arguments":[{"id":4772,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4766,"src":"5578:9:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4770,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5230,"src":"5559:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Address_$5230_$","typeString":"type(library Address)"}},"id":4771,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":4918,"src":"5559:18:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":4773,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5559:29:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a206e657720626561636f6e206973206e6f74206120636f6e7472616374","id":4774,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5590:39:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_9589b7809634e4928033de18bb696e9af4ef71b703652af5245f2dbebf2f4470","typeString":"literal_string \"ERC1967: new beacon is not a contract\""},"value":"ERC1967: new beacon is not a contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9589b7809634e4928033de18bb696e9af4ef71b703652af5245f2dbebf2f4470","typeString":"literal_string \"ERC1967: new beacon is not a contract\""}],"id":4769,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5551:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4775,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5551:79:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4776,"nodeType":"ExpressionStatement","src":"5551:79:25"},{"expression":{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":4781,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4766,"src":"5688:9:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4780,"name":"IBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4900,"src":"5680:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IBeacon_$4900_$","typeString":"type(contract IBeacon)"}},"id":4782,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5680:18:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IBeacon_$4900","typeString":"contract IBeacon"}},"id":4783,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"implementation","nodeType":"MemberAccess","referencedDeclaration":4899,"src":"5680:33:25","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":4784,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5680:35:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4778,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5230,"src":"5661:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Address_$5230_$","typeString":"type(library Address)"}},"id":4779,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":4918,"src":"5661:18:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":4785,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5661:55:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a20626561636f6e20696d706c656d656e746174696f6e206973206e6f74206120636f6e7472616374","id":4786,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5730:50:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_f95fd1f5b5578816eb23f6ca0f2439b4b5e4094dc16e99c3b8e91603a83f93c8","typeString":"literal_string \"ERC1967: beacon implementation is not a contract\""},"value":"ERC1967: beacon implementation is not a contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f95fd1f5b5578816eb23f6ca0f2439b4b5e4094dc16e99c3b8e91603a83f93c8","typeString":"literal_string \"ERC1967: beacon implementation is not a contract\""}],"id":4777,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5640:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4787,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5640:150:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4788,"nodeType":"ExpressionStatement","src":"5640:150:25"},{"expression":{"id":4796,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"arguments":[{"id":4792,"name":"_BEACON_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4745,"src":"5827:12:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":4789,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5290,"src":"5800:11:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$5290_$","typeString":"type(library StorageSlot)"}},"id":4791,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":5256,"src":"5800:26:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$5236_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlot.AddressSlot storage pointer)"}},"id":4793,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5800:40:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$5236_storage_ptr","typeString":"struct StorageSlot.AddressSlot storage pointer"}},"id":4794,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"value","nodeType":"MemberAccess","referencedDeclaration":5235,"src":"5800:46:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4795,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4766,"src":"5849:9:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5800:58:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4797,"nodeType":"ExpressionStatement","src":"5800:58:25"}]},"documentation":{"id":4764,"nodeType":"StructuredDocumentation","src":"5418:71:25","text":" @dev Stores a new beacon in the EIP1967 beacon slot."},"id":4799,"implemented":true,"kind":"function","modifiers":[],"name":"_setBeacon","nameLocation":"5503:10:25","nodeType":"FunctionDefinition","parameters":{"id":4767,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4766,"mutability":"mutable","name":"newBeacon","nameLocation":"5522:9:25","nodeType":"VariableDeclaration","scope":4799,"src":"5514:17:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4765,"name":"address","nodeType":"ElementaryTypeName","src":"5514:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5513:19:25"},"returnParameters":{"id":4768,"nodeType":"ParameterList","parameters":[],"src":"5541:0:25"},"scope":4838,"src":"5494:371:25","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":4836,"nodeType":"Block","src":"6294:217:25","statements":[{"expression":{"arguments":[{"id":4810,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4802,"src":"6315:9:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4809,"name":"_setBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4799,"src":"6304:10:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":4811,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6304:21:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4812,"nodeType":"ExpressionStatement","src":"6304:21:25"},{"eventCall":{"arguments":[{"id":4814,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4802,"src":"6355:9:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4813,"name":"BeaconUpgraded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4750,"src":"6340:14:25","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":4815,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6340:25:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4816,"nodeType":"EmitStatement","src":"6335:30:25"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4822,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4820,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4817,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4804,"src":"6379:4:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4818,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"6379:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4819,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6393:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6379:15:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"id":4821,"name":"forceCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4806,"src":"6398:9:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6379:28:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4835,"nodeType":"IfStatement","src":"6375:130:25","trueBody":{"id":4834,"nodeType":"Block","src":"6409:96:25","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":4827,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4802,"src":"6460:9:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4826,"name":"IBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4900,"src":"6452:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IBeacon_$4900_$","typeString":"type(contract IBeacon)"}},"id":4828,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6452:18:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IBeacon_$4900","typeString":"contract IBeacon"}},"id":4829,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"implementation","nodeType":"MemberAccess","referencedDeclaration":4899,"src":"6452:33:25","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":4830,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6452:35:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4831,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4804,"src":"6489:4:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":4823,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5230,"src":"6423:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Address_$5230_$","typeString":"type(library Address)"}},"id":4825,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"functionDelegateCall","nodeType":"MemberAccess","referencedDeclaration":5117,"src":"6423:28:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory) returns (bytes memory)"}},"id":4832,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6423:71:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4833,"nodeType":"ExpressionStatement","src":"6423:71:25"}]}}]},"documentation":{"id":4800,"nodeType":"StructuredDocumentation","src":"5871:292:25","text":" @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n Emits a {BeaconUpgraded} event."},"id":4837,"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeBeaconToAndCall","nameLocation":"6177:23:25","nodeType":"FunctionDefinition","parameters":{"id":4807,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4802,"mutability":"mutable","name":"newBeacon","nameLocation":"6218:9:25","nodeType":"VariableDeclaration","scope":4837,"src":"6210:17:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4801,"name":"address","nodeType":"ElementaryTypeName","src":"6210:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4804,"mutability":"mutable","name":"data","nameLocation":"6250:4:25","nodeType":"VariableDeclaration","scope":4837,"src":"6237:17:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4803,"name":"bytes","nodeType":"ElementaryTypeName","src":"6237:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4806,"mutability":"mutable","name":"forceCall","nameLocation":"6269:9:25","nodeType":"VariableDeclaration","scope":4837,"src":"6264:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4805,"name":"bool","nodeType":"ElementaryTypeName","src":"6264:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6200:84:25"},"returnParameters":{"id":4808,"nodeType":"ParameterList","parameters":[],"src":"6294:0:25"},"scope":4838,"src":"6168:343:25","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":4839,"src":"529:5984:25","usedErrors":[]}],"src":"116:6398:25"},"id":25},"@openzeppelin/contracts/proxy/Proxy.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/proxy/Proxy.sol","exportedSymbols":{"Proxy":[4890]},"id":4891,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4840,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"99:23:26"},{"abstract":true,"baseContracts":[],"canonicalName":"Proxy","contractDependencies":[],"contractKind":"contract","documentation":{"id":4841,"nodeType":"StructuredDocumentation","src":"124:598:26","text":" @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n be specified by overriding the virtual {_implementation} function.\n Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n different contract through the {_delegate} function.\n The success and return data of the delegated call will be returned back to the caller of the proxy."},"fullyImplemented":false,"id":4890,"linearizedBaseContracts":[4890],"name":"Proxy","nameLocation":"741:5:26","nodeType":"ContractDefinition","nodes":[{"body":{"id":4848,"nodeType":"Block","src":"1008:835:26","statements":[{"AST":{"nodeType":"YulBlock","src":"1027:810:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1280:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1283:1:26","type":"","value":"0"},{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"1286:12:26"},"nodeType":"YulFunctionCall","src":"1286:14:26"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"1267:12:26"},"nodeType":"YulFunctionCall","src":"1267:34:26"},"nodeType":"YulExpressionStatement","src":"1267:34:26"},{"nodeType":"YulVariableDeclaration","src":"1428:74:26","value":{"arguments":[{"arguments":[],"functionName":{"name":"gas","nodeType":"YulIdentifier","src":"1455:3:26"},"nodeType":"YulFunctionCall","src":"1455:5:26"},{"name":"implementation","nodeType":"YulIdentifier","src":"1462:14:26"},{"kind":"number","nodeType":"YulLiteral","src":"1478:1:26","type":"","value":"0"},{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"1481:12:26"},"nodeType":"YulFunctionCall","src":"1481:14:26"},{"kind":"number","nodeType":"YulLiteral","src":"1497:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1500:1:26","type":"","value":"0"}],"functionName":{"name":"delegatecall","nodeType":"YulIdentifier","src":"1442:12:26"},"nodeType":"YulFunctionCall","src":"1442:60:26"},"variables":[{"name":"result","nodeType":"YulTypedName","src":"1432:6:26","type":""}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1570:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1573:1:26","type":"","value":"0"},{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"1576:14:26"},"nodeType":"YulFunctionCall","src":"1576:16:26"}],"functionName":{"name":"returndatacopy","nodeType":"YulIdentifier","src":"1555:14:26"},"nodeType":"YulFunctionCall","src":"1555:38:26"},"nodeType":"YulExpressionStatement","src":"1555:38:26"},{"cases":[{"body":{"nodeType":"YulBlock","src":"1688:59:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1713:1:26","type":"","value":"0"},{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"1716:14:26"},"nodeType":"YulFunctionCall","src":"1716:16:26"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1706:6:26"},"nodeType":"YulFunctionCall","src":"1706:27:26"},"nodeType":"YulExpressionStatement","src":"1706:27:26"}]},"nodeType":"YulCase","src":"1681:66:26","value":{"kind":"number","nodeType":"YulLiteral","src":"1686:1:26","type":"","value":"0"}},{"body":{"nodeType":"YulBlock","src":"1768:59:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1793:1:26","type":"","value":"0"},{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"1796:14:26"},"nodeType":"YulFunctionCall","src":"1796:16:26"}],"functionName":{"name":"return","nodeType":"YulIdentifier","src":"1786:6:26"},"nodeType":"YulFunctionCall","src":"1786:27:26"},"nodeType":"YulExpressionStatement","src":"1786:27:26"}]},"nodeType":"YulCase","src":"1760:67:26","value":"default"}],"expression":{"name":"result","nodeType":"YulIdentifier","src":"1614:6:26"},"nodeType":"YulSwitch","src":"1607:220:26"}]},"evmVersion":"london","externalReferences":[{"declaration":4844,"isOffset":false,"isSlot":false,"src":"1462:14:26","valueSize":1}],"id":4847,"nodeType":"InlineAssembly","src":"1018:819:26"}]},"documentation":{"id":4842,"nodeType":"StructuredDocumentation","src":"753:190:26","text":" @dev Delegates the current call to `implementation`.\n This function does not return to its internal call site, it will return directly to the external caller."},"id":4849,"implemented":true,"kind":"function","modifiers":[],"name":"_delegate","nameLocation":"957:9:26","nodeType":"FunctionDefinition","parameters":{"id":4845,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4844,"mutability":"mutable","name":"implementation","nameLocation":"975:14:26","nodeType":"VariableDeclaration","scope":4849,"src":"967:22:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4843,"name":"address","nodeType":"ElementaryTypeName","src":"967:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"966:24:26"},"returnParameters":{"id":4846,"nodeType":"ParameterList","parameters":[],"src":"1008:0:26"},"scope":4890,"src":"948:895:26","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"documentation":{"id":4850,"nodeType":"StructuredDocumentation","src":"1849:173:26","text":" @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n and {_fallback} should delegate."},"id":4855,"implemented":false,"kind":"function","modifiers":[],"name":"_implementation","nameLocation":"2036:15:26","nodeType":"FunctionDefinition","parameters":{"id":4851,"nodeType":"ParameterList","parameters":[],"src":"2051:2:26"},"returnParameters":{"id":4854,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4853,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4855,"src":"2085:7:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4852,"name":"address","nodeType":"ElementaryTypeName","src":"2085:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2084:9:26"},"scope":4890,"src":"2027:67:26","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":4867,"nodeType":"Block","src":"2360:72:26","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":4859,"name":"_beforeFallback","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4889,"src":"2370:15:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":4860,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2370:17:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4861,"nodeType":"ExpressionStatement","src":"2370:17:26"},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":4863,"name":"_implementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4855,"src":"2407:15:26","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4864,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2407:17:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4862,"name":"_delegate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4849,"src":"2397:9:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":4865,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2397:28:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4866,"nodeType":"ExpressionStatement","src":"2397:28:26"}]},"documentation":{"id":4856,"nodeType":"StructuredDocumentation","src":"2100:217:26","text":" @dev Delegates the current call to the address returned by `_implementation()`.\n This function does not return to its internal call site, it will return directly to the external caller."},"id":4868,"implemented":true,"kind":"function","modifiers":[],"name":"_fallback","nameLocation":"2331:9:26","nodeType":"FunctionDefinition","parameters":{"id":4857,"nodeType":"ParameterList","parameters":[],"src":"2340:2:26"},"returnParameters":{"id":4858,"nodeType":"ParameterList","parameters":[],"src":"2360:0:26"},"scope":4890,"src":"2322:110:26","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":4875,"nodeType":"Block","src":"2665:28:26","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":4872,"name":"_fallback","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4868,"src":"2675:9:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":4873,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2675:11:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4874,"nodeType":"ExpressionStatement","src":"2675:11:26"}]},"documentation":{"id":4869,"nodeType":"StructuredDocumentation","src":"2438:186:26","text":" @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n function in the contract matches the call data."},"id":4876,"implemented":true,"kind":"fallback","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":4870,"nodeType":"ParameterList","parameters":[],"src":"2637:2:26"},"returnParameters":{"id":4871,"nodeType":"ParameterList","parameters":[],"src":"2665:0:26"},"scope":4890,"src":"2629:64:26","stateMutability":"payable","virtual":true,"visibility":"external"},{"body":{"id":4883,"nodeType":"Block","src":"2888:28:26","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":4880,"name":"_fallback","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4868,"src":"2898:9:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":4881,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2898:11:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4882,"nodeType":"ExpressionStatement","src":"2898:11:26"}]},"documentation":{"id":4877,"nodeType":"StructuredDocumentation","src":"2699:149:26","text":" @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n is empty."},"id":4884,"implemented":true,"kind":"receive","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":4878,"nodeType":"ParameterList","parameters":[],"src":"2860:2:26"},"returnParameters":{"id":4879,"nodeType":"ParameterList","parameters":[],"src":"2888:0:26"},"scope":4890,"src":"2853:63:26","stateMutability":"payable","virtual":true,"visibility":"external"},{"body":{"id":4888,"nodeType":"Block","src":"3242:2:26","statements":[]},"documentation":{"id":4885,"nodeType":"StructuredDocumentation","src":"2922:271:26","text":" @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n call, or as part of the Solidity `fallback` or `receive` functions.\n If overridden should call `super._beforeFallback()`."},"id":4889,"implemented":true,"kind":"function","modifiers":[],"name":"_beforeFallback","nameLocation":"3207:15:26","nodeType":"FunctionDefinition","parameters":{"id":4886,"nodeType":"ParameterList","parameters":[],"src":"3222:2:26"},"returnParameters":{"id":4887,"nodeType":"ParameterList","parameters":[],"src":"3242:0:26"},"scope":4890,"src":"3198:46:26","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":4891,"src":"723:2523:26","usedErrors":[]}],"src":"99:3148:26"},"id":26},"@openzeppelin/contracts/proxy/beacon/IBeacon.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/proxy/beacon/IBeacon.sol","exportedSymbols":{"IBeacon":[4900]},"id":4901,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4892,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"93:23:27"},{"abstract":false,"baseContracts":[],"canonicalName":"IBeacon","contractDependencies":[],"contractKind":"interface","documentation":{"id":4893,"nodeType":"StructuredDocumentation","src":"118:79:27","text":" @dev This is the interface that {BeaconProxy} expects of its beacon."},"fullyImplemented":false,"id":4900,"linearizedBaseContracts":[4900],"name":"IBeacon","nameLocation":"208:7:27","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":4894,"nodeType":"StructuredDocumentation","src":"222:162:27","text":" @dev Must return an address that can be used as a delegate call target.\n {BeaconProxy} will check that this address is a contract."},"functionSelector":"5c60da1b","id":4899,"implemented":false,"kind":"function","modifiers":[],"name":"implementation","nameLocation":"398:14:27","nodeType":"FunctionDefinition","parameters":{"id":4895,"nodeType":"ParameterList","parameters":[],"src":"412:2:27"},"returnParameters":{"id":4898,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4897,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4899,"src":"438:7:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4896,"name":"address","nodeType":"ElementaryTypeName","src":"438:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"437:9:27"},"scope":4900,"src":"389:58:27","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":4901,"src":"198:251:27","usedErrors":[]}],"src":"93:357:27"},"id":27},"@openzeppelin/contracts/utils/Address.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","exportedSymbols":{"Address":[5230]},"id":5231,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4902,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:28"},{"abstract":false,"baseContracts":[],"canonicalName":"Address","contractDependencies":[],"contractKind":"library","documentation":{"id":4903,"nodeType":"StructuredDocumentation","src":"126:67:28","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":5230,"linearizedBaseContracts":[5230],"name":"Address","nameLocation":"202:7:28","nodeType":"ContractDefinition","nodes":[{"body":{"id":4917,"nodeType":"Block","src":"1241:254:28","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4915,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":4911,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4906,"src":"1465:7:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4912,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"code","nodeType":"MemberAccess","src":"1465:12:28","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4913,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"1465:19:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4914,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1487:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1465:23:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4910,"id":4916,"nodeType":"Return","src":"1458:30:28"}]},"documentation":{"id":4904,"nodeType":"StructuredDocumentation","src":"216:954:28","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":4918,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1184:10:28","nodeType":"FunctionDefinition","parameters":{"id":4907,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4906,"mutability":"mutable","name":"account","nameLocation":"1203:7:28","nodeType":"VariableDeclaration","scope":4918,"src":"1195:15:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4905,"name":"address","nodeType":"ElementaryTypeName","src":"1195:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1194:17:28"},"returnParameters":{"id":4910,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4909,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4918,"src":"1235:4:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4908,"name":"bool","nodeType":"ElementaryTypeName","src":"1235:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1234:6:28"},"scope":5230,"src":"1175:320:28","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4951,"nodeType":"Block","src":"2483:241:28","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4933,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":4929,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2509:4:28","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$5230","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$5230","typeString":"library Address"}],"id":4928,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2501:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4927,"name":"address","nodeType":"ElementaryTypeName","src":"2501:7:28","typeDescriptions":{}}},"id":4930,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2501:13:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4931,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"2501:21:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":4932,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4923,"src":"2526:6:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2501:31:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":4934,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2534:31:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":4926,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2493:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4935,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2493:73:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4936,"nodeType":"ExpressionStatement","src":"2493:73:28"},{"assignments":[4938,null],"declarations":[{"constant":false,"id":4938,"mutability":"mutable","name":"success","nameLocation":"2583:7:28","nodeType":"VariableDeclaration","scope":4951,"src":"2578:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4937,"name":"bool","nodeType":"ElementaryTypeName","src":"2578:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":4945,"initialValue":{"arguments":[{"hexValue":"","id":4943,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2626:2:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":4939,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4921,"src":"2596:9:28","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":4940,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"2596:14:28","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":4942,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":4941,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4923,"src":"2618:6:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2596:29:28","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":4944,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2596:33:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2577:52:28"},{"expression":{"arguments":[{"id":4947,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4938,"src":"2647:7:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":4948,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2656:60:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":4946,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2639:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4949,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2639:78:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4950,"nodeType":"ExpressionStatement","src":"2639:78:28"}]},"documentation":{"id":4919,"nodeType":"StructuredDocumentation","src":"1501:906:28","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":4952,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2421:9:28","nodeType":"FunctionDefinition","parameters":{"id":4924,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4921,"mutability":"mutable","name":"recipient","nameLocation":"2447:9:28","nodeType":"VariableDeclaration","scope":4952,"src":"2431:25:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":4920,"name":"address","nodeType":"ElementaryTypeName","src":"2431:15:28","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":4923,"mutability":"mutable","name":"amount","nameLocation":"2466:6:28","nodeType":"VariableDeclaration","scope":4952,"src":"2458:14:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4922,"name":"uint256","nodeType":"ElementaryTypeName","src":"2458:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2430:43:28"},"returnParameters":{"id":4925,"nodeType":"ParameterList","parameters":[],"src":"2483:0:28"},"scope":5230,"src":"2412:312:28","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4969,"nodeType":"Block","src":"3555:96:28","statements":[{"expression":{"arguments":[{"id":4963,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4955,"src":"3594:6:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4964,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4957,"src":"3602:4:28","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":4965,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3608:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":4966,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3611:32:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":4962,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[5010,5054],"referencedDeclaration":5054,"src":"3572:21:28","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":4967,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3572:72:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":4961,"id":4968,"nodeType":"Return","src":"3565:79:28"}]},"documentation":{"id":4953,"nodeType":"StructuredDocumentation","src":"2730:731:28","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":4970,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3475:12:28","nodeType":"FunctionDefinition","parameters":{"id":4958,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4955,"mutability":"mutable","name":"target","nameLocation":"3496:6:28","nodeType":"VariableDeclaration","scope":4970,"src":"3488:14:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4954,"name":"address","nodeType":"ElementaryTypeName","src":"3488:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4957,"mutability":"mutable","name":"data","nameLocation":"3517:4:28","nodeType":"VariableDeclaration","scope":4970,"src":"3504:17:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4956,"name":"bytes","nodeType":"ElementaryTypeName","src":"3504:5:28","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3487:35:28"},"returnParameters":{"id":4961,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4960,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4970,"src":"3541:12:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4959,"name":"bytes","nodeType":"ElementaryTypeName","src":"3541:5:28","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3540:14:28"},"scope":5230,"src":"3466:185:28","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4989,"nodeType":"Block","src":"4020:76:28","statements":[{"expression":{"arguments":[{"id":4983,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4973,"src":"4059:6:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4984,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4975,"src":"4067:4:28","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":4985,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4073:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":4986,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4977,"src":"4076:12:28","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4982,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[5010,5054],"referencedDeclaration":5054,"src":"4037:21:28","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":4987,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4037:52:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":4981,"id":4988,"nodeType":"Return","src":"4030:59:28"}]},"documentation":{"id":4971,"nodeType":"StructuredDocumentation","src":"3657:211:28","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":4990,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3882:12:28","nodeType":"FunctionDefinition","parameters":{"id":4978,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4973,"mutability":"mutable","name":"target","nameLocation":"3912:6:28","nodeType":"VariableDeclaration","scope":4990,"src":"3904:14:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4972,"name":"address","nodeType":"ElementaryTypeName","src":"3904:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4975,"mutability":"mutable","name":"data","nameLocation":"3941:4:28","nodeType":"VariableDeclaration","scope":4990,"src":"3928:17:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4974,"name":"bytes","nodeType":"ElementaryTypeName","src":"3928:5:28","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4977,"mutability":"mutable","name":"errorMessage","nameLocation":"3969:12:28","nodeType":"VariableDeclaration","scope":4990,"src":"3955:26:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4976,"name":"string","nodeType":"ElementaryTypeName","src":"3955:6:28","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3894:93:28"},"returnParameters":{"id":4981,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4980,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4990,"src":"4006:12:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4979,"name":"bytes","nodeType":"ElementaryTypeName","src":"4006:5:28","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4005:14:28"},"scope":5230,"src":"3873:223:28","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5009,"nodeType":"Block","src":"4601:111:28","statements":[{"expression":{"arguments":[{"id":5003,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4993,"src":"4640:6:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5004,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4995,"src":"4648:4:28","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":5005,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4997,"src":"4654:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":5006,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4661:43:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":5002,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[5010,5054],"referencedDeclaration":5054,"src":"4618:21:28","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":5007,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4618:87:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":5001,"id":5008,"nodeType":"Return","src":"4611:94:28"}]},"documentation":{"id":4991,"nodeType":"StructuredDocumentation","src":"4102:351:28","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":5010,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4467:21:28","nodeType":"FunctionDefinition","parameters":{"id":4998,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4993,"mutability":"mutable","name":"target","nameLocation":"4506:6:28","nodeType":"VariableDeclaration","scope":5010,"src":"4498:14:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4992,"name":"address","nodeType":"ElementaryTypeName","src":"4498:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4995,"mutability":"mutable","name":"data","nameLocation":"4535:4:28","nodeType":"VariableDeclaration","scope":5010,"src":"4522:17:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4994,"name":"bytes","nodeType":"ElementaryTypeName","src":"4522:5:28","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4997,"mutability":"mutable","name":"value","nameLocation":"4557:5:28","nodeType":"VariableDeclaration","scope":5010,"src":"4549:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4996,"name":"uint256","nodeType":"ElementaryTypeName","src":"4549:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4488:80:28"},"returnParameters":{"id":5001,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5000,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5010,"src":"4587:12:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4999,"name":"bytes","nodeType":"ElementaryTypeName","src":"4587:5:28","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4586:14:28"},"scope":5230,"src":"4458:254:28","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5053,"nodeType":"Block","src":"5139:267:28","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5031,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":5027,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5165:4:28","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$5230","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$5230","typeString":"library Address"}],"id":5026,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5157:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5025,"name":"address","nodeType":"ElementaryTypeName","src":"5157:7:28","typeDescriptions":{}}},"id":5028,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5157:13:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5029,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"5157:21:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":5030,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5017,"src":"5182:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5157:30:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":5032,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5189:40:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":5024,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5149:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5033,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5149:81:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5034,"nodeType":"ExpressionStatement","src":"5149:81:28"},{"assignments":[5036,5038],"declarations":[{"constant":false,"id":5036,"mutability":"mutable","name":"success","nameLocation":"5246:7:28","nodeType":"VariableDeclaration","scope":5053,"src":"5241:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5035,"name":"bool","nodeType":"ElementaryTypeName","src":"5241:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":5038,"mutability":"mutable","name":"returndata","nameLocation":"5268:10:28","nodeType":"VariableDeclaration","scope":5053,"src":"5255:23:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5037,"name":"bytes","nodeType":"ElementaryTypeName","src":"5255:5:28","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":5045,"initialValue":{"arguments":[{"id":5043,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5015,"src":"5308:4:28","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":5039,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5013,"src":"5282:6:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5040,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"5282:11:28","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":5042,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":5041,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5017,"src":"5301:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5282:25:28","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":5044,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5282:31:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5240:73:28"},{"expression":{"arguments":[{"id":5047,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5013,"src":"5357:6:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5048,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5036,"src":"5365:7:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":5049,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5038,"src":"5374:10:28","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":5050,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5019,"src":"5386:12:28","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":5046,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5185,"src":"5330:26:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":5051,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5330:69:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":5023,"id":5052,"nodeType":"Return","src":"5323:76:28"}]},"documentation":{"id":5011,"nodeType":"StructuredDocumentation","src":"4718:237:28","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":5054,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4969:21:28","nodeType":"FunctionDefinition","parameters":{"id":5020,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5013,"mutability":"mutable","name":"target","nameLocation":"5008:6:28","nodeType":"VariableDeclaration","scope":5054,"src":"5000:14:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5012,"name":"address","nodeType":"ElementaryTypeName","src":"5000:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5015,"mutability":"mutable","name":"data","nameLocation":"5037:4:28","nodeType":"VariableDeclaration","scope":5054,"src":"5024:17:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5014,"name":"bytes","nodeType":"ElementaryTypeName","src":"5024:5:28","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":5017,"mutability":"mutable","name":"value","nameLocation":"5059:5:28","nodeType":"VariableDeclaration","scope":5054,"src":"5051:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5016,"name":"uint256","nodeType":"ElementaryTypeName","src":"5051:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5019,"mutability":"mutable","name":"errorMessage","nameLocation":"5088:12:28","nodeType":"VariableDeclaration","scope":5054,"src":"5074:26:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5018,"name":"string","nodeType":"ElementaryTypeName","src":"5074:6:28","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4990:116:28"},"returnParameters":{"id":5023,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5022,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5054,"src":"5125:12:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5021,"name":"bytes","nodeType":"ElementaryTypeName","src":"5125:5:28","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5124:14:28"},"scope":5230,"src":"4960:446:28","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5070,"nodeType":"Block","src":"5683:97:28","statements":[{"expression":{"arguments":[{"id":5065,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5057,"src":"5719:6:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5066,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5059,"src":"5727:4:28","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":5067,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5733:39:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":5064,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[5071,5100],"referencedDeclaration":5100,"src":"5700:18:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":5068,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5700:73:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":5063,"id":5069,"nodeType":"Return","src":"5693:80:28"}]},"documentation":{"id":5055,"nodeType":"StructuredDocumentation","src":"5412:166:28","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":5071,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5592:18:28","nodeType":"FunctionDefinition","parameters":{"id":5060,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5057,"mutability":"mutable","name":"target","nameLocation":"5619:6:28","nodeType":"VariableDeclaration","scope":5071,"src":"5611:14:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5056,"name":"address","nodeType":"ElementaryTypeName","src":"5611:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5059,"mutability":"mutable","name":"data","nameLocation":"5640:4:28","nodeType":"VariableDeclaration","scope":5071,"src":"5627:17:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5058,"name":"bytes","nodeType":"ElementaryTypeName","src":"5627:5:28","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5610:35:28"},"returnParameters":{"id":5063,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5062,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5071,"src":"5669:12:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5061,"name":"bytes","nodeType":"ElementaryTypeName","src":"5669:5:28","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5668:14:28"},"scope":5230,"src":"5583:197:28","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5099,"nodeType":"Block","src":"6122:168:28","statements":[{"assignments":[5084,5086],"declarations":[{"constant":false,"id":5084,"mutability":"mutable","name":"success","nameLocation":"6138:7:28","nodeType":"VariableDeclaration","scope":5099,"src":"6133:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5083,"name":"bool","nodeType":"ElementaryTypeName","src":"6133:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":5086,"mutability":"mutable","name":"returndata","nameLocation":"6160:10:28","nodeType":"VariableDeclaration","scope":5099,"src":"6147:23:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5085,"name":"bytes","nodeType":"ElementaryTypeName","src":"6147:5:28","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":5091,"initialValue":{"arguments":[{"id":5089,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5076,"src":"6192:4:28","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":5087,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5074,"src":"6174:6:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5088,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"staticcall","nodeType":"MemberAccess","src":"6174:17:28","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":5090,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6174:23:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6132:65:28"},{"expression":{"arguments":[{"id":5093,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5074,"src":"6241:6:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5094,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5084,"src":"6249:7:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":5095,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5086,"src":"6258:10:28","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":5096,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5078,"src":"6270:12:28","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":5092,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5185,"src":"6214:26:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":5097,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6214:69:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":5082,"id":5098,"nodeType":"Return","src":"6207:76:28"}]},"documentation":{"id":5072,"nodeType":"StructuredDocumentation","src":"5786:173:28","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":5100,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5973:18:28","nodeType":"FunctionDefinition","parameters":{"id":5079,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5074,"mutability":"mutable","name":"target","nameLocation":"6009:6:28","nodeType":"VariableDeclaration","scope":5100,"src":"6001:14:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5073,"name":"address","nodeType":"ElementaryTypeName","src":"6001:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5076,"mutability":"mutable","name":"data","nameLocation":"6038:4:28","nodeType":"VariableDeclaration","scope":5100,"src":"6025:17:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5075,"name":"bytes","nodeType":"ElementaryTypeName","src":"6025:5:28","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":5078,"mutability":"mutable","name":"errorMessage","nameLocation":"6066:12:28","nodeType":"VariableDeclaration","scope":5100,"src":"6052:26:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5077,"name":"string","nodeType":"ElementaryTypeName","src":"6052:6:28","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5991:93:28"},"returnParameters":{"id":5082,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5081,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5100,"src":"6108:12:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5080,"name":"bytes","nodeType":"ElementaryTypeName","src":"6108:5:28","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6107:14:28"},"scope":5230,"src":"5964:326:28","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5116,"nodeType":"Block","src":"6566:101:28","statements":[{"expression":{"arguments":[{"id":5111,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5103,"src":"6604:6:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5112,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5105,"src":"6612:4:28","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":5113,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6618:41:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":5110,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[5117,5146],"referencedDeclaration":5146,"src":"6583:20:28","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":5114,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6583:77:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":5109,"id":5115,"nodeType":"Return","src":"6576:84:28"}]},"documentation":{"id":5101,"nodeType":"StructuredDocumentation","src":"6296:168:28","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":5117,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6478:20:28","nodeType":"FunctionDefinition","parameters":{"id":5106,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5103,"mutability":"mutable","name":"target","nameLocation":"6507:6:28","nodeType":"VariableDeclaration","scope":5117,"src":"6499:14:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5102,"name":"address","nodeType":"ElementaryTypeName","src":"6499:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5105,"mutability":"mutable","name":"data","nameLocation":"6528:4:28","nodeType":"VariableDeclaration","scope":5117,"src":"6515:17:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5104,"name":"bytes","nodeType":"ElementaryTypeName","src":"6515:5:28","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6498:35:28"},"returnParameters":{"id":5109,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5108,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5117,"src":"6552:12:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5107,"name":"bytes","nodeType":"ElementaryTypeName","src":"6552:5:28","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6551:14:28"},"scope":5230,"src":"6469:198:28","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5145,"nodeType":"Block","src":"7008:170:28","statements":[{"assignments":[5130,5132],"declarations":[{"constant":false,"id":5130,"mutability":"mutable","name":"success","nameLocation":"7024:7:28","nodeType":"VariableDeclaration","scope":5145,"src":"7019:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5129,"name":"bool","nodeType":"ElementaryTypeName","src":"7019:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":5132,"mutability":"mutable","name":"returndata","nameLocation":"7046:10:28","nodeType":"VariableDeclaration","scope":5145,"src":"7033:23:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5131,"name":"bytes","nodeType":"ElementaryTypeName","src":"7033:5:28","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":5137,"initialValue":{"arguments":[{"id":5135,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5122,"src":"7080:4:28","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":5133,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5120,"src":"7060:6:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5134,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"delegatecall","nodeType":"MemberAccess","src":"7060:19:28","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":5136,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7060:25:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7018:67:28"},{"expression":{"arguments":[{"id":5139,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5120,"src":"7129:6:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5140,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5130,"src":"7137:7:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":5141,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5132,"src":"7146:10:28","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":5142,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5124,"src":"7158:12:28","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":5138,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5185,"src":"7102:26:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":5143,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7102:69:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":5128,"id":5144,"nodeType":"Return","src":"7095:76:28"}]},"documentation":{"id":5118,"nodeType":"StructuredDocumentation","src":"6673:175:28","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":5146,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6862:20:28","nodeType":"FunctionDefinition","parameters":{"id":5125,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5120,"mutability":"mutable","name":"target","nameLocation":"6900:6:28","nodeType":"VariableDeclaration","scope":5146,"src":"6892:14:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5119,"name":"address","nodeType":"ElementaryTypeName","src":"6892:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5122,"mutability":"mutable","name":"data","nameLocation":"6929:4:28","nodeType":"VariableDeclaration","scope":5146,"src":"6916:17:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5121,"name":"bytes","nodeType":"ElementaryTypeName","src":"6916:5:28","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":5124,"mutability":"mutable","name":"errorMessage","nameLocation":"6957:12:28","nodeType":"VariableDeclaration","scope":5146,"src":"6943:26:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5123,"name":"string","nodeType":"ElementaryTypeName","src":"6943:6:28","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6882:93:28"},"returnParameters":{"id":5128,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5127,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5146,"src":"6994:12:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5126,"name":"bytes","nodeType":"ElementaryTypeName","src":"6994:5:28","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6993:14:28"},"scope":5230,"src":"6853:325:28","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5184,"nodeType":"Block","src":"7660:434:28","statements":[{"condition":{"id":5160,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5151,"src":"7674:7:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":5182,"nodeType":"Block","src":"8030:58:28","statements":[{"expression":{"arguments":[{"id":5178,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5153,"src":"8052:10:28","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":5179,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5155,"src":"8064:12:28","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":5177,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5229,"src":"8044:7:28","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":5180,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8044:33:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5181,"nodeType":"ExpressionStatement","src":"8044:33:28"}]},"id":5183,"nodeType":"IfStatement","src":"7670:418:28","trueBody":{"id":5176,"nodeType":"Block","src":"7683:341:28","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5164,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5161,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5153,"src":"7701:10:28","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"7701:17:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":5163,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7722:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7701:22:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5173,"nodeType":"IfStatement","src":"7697:286:28","trueBody":{"id":5172,"nodeType":"Block","src":"7725:258:28","statements":[{"expression":{"arguments":[{"arguments":[{"id":5167,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5149,"src":"7927:6:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5166,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4918,"src":"7916:10:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":5168,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7916:18:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":5169,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7936:31:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":5165,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7908:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5170,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7908:60:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5171,"nodeType":"ExpressionStatement","src":"7908:60:28"}]}},{"expression":{"id":5174,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5153,"src":"8003:10:28","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":5159,"id":5175,"nodeType":"Return","src":"7996:17:28"}]}}]},"documentation":{"id":5147,"nodeType":"StructuredDocumentation","src":"7184:277:28","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":5185,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7475:26:28","nodeType":"FunctionDefinition","parameters":{"id":5156,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5149,"mutability":"mutable","name":"target","nameLocation":"7519:6:28","nodeType":"VariableDeclaration","scope":5185,"src":"7511:14:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5148,"name":"address","nodeType":"ElementaryTypeName","src":"7511:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5151,"mutability":"mutable","name":"success","nameLocation":"7540:7:28","nodeType":"VariableDeclaration","scope":5185,"src":"7535:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5150,"name":"bool","nodeType":"ElementaryTypeName","src":"7535:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":5153,"mutability":"mutable","name":"returndata","nameLocation":"7570:10:28","nodeType":"VariableDeclaration","scope":5185,"src":"7557:23:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5152,"name":"bytes","nodeType":"ElementaryTypeName","src":"7557:5:28","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":5155,"mutability":"mutable","name":"errorMessage","nameLocation":"7604:12:28","nodeType":"VariableDeclaration","scope":5185,"src":"7590:26:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5154,"name":"string","nodeType":"ElementaryTypeName","src":"7590:6:28","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7501:121:28"},"returnParameters":{"id":5159,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5158,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5185,"src":"7646:12:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5157,"name":"bytes","nodeType":"ElementaryTypeName","src":"7646:5:28","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7645:14:28"},"scope":5230,"src":"7466:628:28","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5208,"nodeType":"Block","src":"8475:135:28","statements":[{"condition":{"id":5197,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5188,"src":"8489:7:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":5206,"nodeType":"Block","src":"8546:58:28","statements":[{"expression":{"arguments":[{"id":5202,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5190,"src":"8568:10:28","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":5203,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5192,"src":"8580:12:28","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":5201,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5229,"src":"8560:7:28","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":5204,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8560:33:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5205,"nodeType":"ExpressionStatement","src":"8560:33:28"}]},"id":5207,"nodeType":"IfStatement","src":"8485:119:28","trueBody":{"id":5200,"nodeType":"Block","src":"8498:42:28","statements":[{"expression":{"id":5198,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5190,"src":"8519:10:28","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":5196,"id":5199,"nodeType":"Return","src":"8512:17:28"}]}}]},"documentation":{"id":5186,"nodeType":"StructuredDocumentation","src":"8100:210:28","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":5209,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8324:16:28","nodeType":"FunctionDefinition","parameters":{"id":5193,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5188,"mutability":"mutable","name":"success","nameLocation":"8355:7:28","nodeType":"VariableDeclaration","scope":5209,"src":"8350:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5187,"name":"bool","nodeType":"ElementaryTypeName","src":"8350:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":5190,"mutability":"mutable","name":"returndata","nameLocation":"8385:10:28","nodeType":"VariableDeclaration","scope":5209,"src":"8372:23:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5189,"name":"bytes","nodeType":"ElementaryTypeName","src":"8372:5:28","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":5192,"mutability":"mutable","name":"errorMessage","nameLocation":"8419:12:28","nodeType":"VariableDeclaration","scope":5209,"src":"8405:26:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5191,"name":"string","nodeType":"ElementaryTypeName","src":"8405:6:28","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8340:97:28"},"returnParameters":{"id":5196,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5195,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5209,"src":"8461:12:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5194,"name":"bytes","nodeType":"ElementaryTypeName","src":"8461:5:28","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8460:14:28"},"scope":5230,"src":"8315:295:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5228,"nodeType":"Block","src":"8699:457:28","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5216,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5211,"src":"8775:10:28","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5217,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"8775:17:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5218,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8795:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8775:21:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":5226,"nodeType":"Block","src":"9105:45:28","statements":[{"expression":{"arguments":[{"id":5223,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5213,"src":"9126:12:28","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":5222,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9119:6:28","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":5224,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9119:20:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5225,"nodeType":"ExpressionStatement","src":"9119:20:28"}]},"id":5227,"nodeType":"IfStatement","src":"8771:379:28","trueBody":{"id":5221,"nodeType":"Block","src":"8798:301:28","statements":[{"AST":{"nodeType":"YulBlock","src":"8956:133:28","statements":[{"nodeType":"YulVariableDeclaration","src":"8974:40:28","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"9003:10:28"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8997:5:28"},"nodeType":"YulFunctionCall","src":"8997:17:28"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"8978:15:28","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9042:2:28","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"9046:10:28"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9038:3:28"},"nodeType":"YulFunctionCall","src":"9038:19:28"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"9059:15:28"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9031:6:28"},"nodeType":"YulFunctionCall","src":"9031:44:28"},"nodeType":"YulExpressionStatement","src":"9031:44:28"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":5211,"isOffset":false,"isSlot":false,"src":"9003:10:28","valueSize":1},{"declaration":5211,"isOffset":false,"isSlot":false,"src":"9046:10:28","valueSize":1}],"id":5220,"nodeType":"InlineAssembly","src":"8947:142:28"}]}}]},"id":5229,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8625:7:28","nodeType":"FunctionDefinition","parameters":{"id":5214,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5211,"mutability":"mutable","name":"returndata","nameLocation":"8646:10:28","nodeType":"VariableDeclaration","scope":5229,"src":"8633:23:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5210,"name":"bytes","nodeType":"ElementaryTypeName","src":"8633:5:28","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":5213,"mutability":"mutable","name":"errorMessage","nameLocation":"8672:12:28","nodeType":"VariableDeclaration","scope":5229,"src":"8658:26:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5212,"name":"string","nodeType":"ElementaryTypeName","src":"8658:6:28","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8632:53:28"},"returnParameters":{"id":5215,"nodeType":"ParameterList","parameters":[],"src":"8699:0:28"},"scope":5230,"src":"8616:540:28","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":5231,"src":"194:8964:28","usedErrors":[]}],"src":"101:9058:28"},"id":28},"@openzeppelin/contracts/utils/StorageSlot.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","exportedSymbols":{"StorageSlot":[5290]},"id":5291,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5232,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"105:23:29"},{"abstract":false,"baseContracts":[],"canonicalName":"StorageSlot","contractDependencies":[],"contractKind":"library","documentation":{"id":5233,"nodeType":"StructuredDocumentation","src":"130:1148:29","text":" @dev Library for reading and writing primitive types to specific storage slots.\n Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n This library helps with reading and writing to such slots without the need for inline assembly.\n The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n Example usage to set ERC1967 implementation slot:\n ```\n contract ERC1967 {\n     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n     function _getImplementation() internal view returns (address) {\n         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n     }\n     function _setImplementation(address newImplementation) internal {\n         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n     }\n }\n ```\n _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._"},"fullyImplemented":true,"id":5290,"linearizedBaseContracts":[5290],"name":"StorageSlot","nameLocation":"1287:11:29","nodeType":"ContractDefinition","nodes":[{"canonicalName":"StorageSlot.AddressSlot","id":5236,"members":[{"constant":false,"id":5235,"mutability":"mutable","name":"value","nameLocation":"1342:5:29","nodeType":"VariableDeclaration","scope":5236,"src":"1334:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5234,"name":"address","nodeType":"ElementaryTypeName","src":"1334:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"AddressSlot","nameLocation":"1312:11:29","nodeType":"StructDefinition","scope":5290,"src":"1305:49:29","visibility":"public"},{"canonicalName":"StorageSlot.BooleanSlot","id":5239,"members":[{"constant":false,"id":5238,"mutability":"mutable","name":"value","nameLocation":"1394:5:29","nodeType":"VariableDeclaration","scope":5239,"src":"1389:10:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5237,"name":"bool","nodeType":"ElementaryTypeName","src":"1389:4:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"BooleanSlot","nameLocation":"1367:11:29","nodeType":"StructDefinition","scope":5290,"src":"1360:46:29","visibility":"public"},{"canonicalName":"StorageSlot.Bytes32Slot","id":5242,"members":[{"constant":false,"id":5241,"mutability":"mutable","name":"value","nameLocation":"1449:5:29","nodeType":"VariableDeclaration","scope":5242,"src":"1441:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5240,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1441:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"Bytes32Slot","nameLocation":"1419:11:29","nodeType":"StructDefinition","scope":5290,"src":"1412:49:29","visibility":"public"},{"canonicalName":"StorageSlot.Uint256Slot","id":5245,"members":[{"constant":false,"id":5244,"mutability":"mutable","name":"value","nameLocation":"1504:5:29","nodeType":"VariableDeclaration","scope":5245,"src":"1496:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5243,"name":"uint256","nodeType":"ElementaryTypeName","src":"1496:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Uint256Slot","nameLocation":"1474:11:29","nodeType":"StructDefinition","scope":5290,"src":"1467:49:29","visibility":"public"},{"body":{"id":5255,"nodeType":"Block","src":"1698:106:29","statements":[{"AST":{"nodeType":"YulBlock","src":"1760:38:29","statements":[{"nodeType":"YulAssignment","src":"1774:14:29","value":{"name":"slot","nodeType":"YulIdentifier","src":"1784:4:29"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"1774:6:29"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":5252,"isOffset":false,"isSlot":true,"src":"1774:6:29","suffix":"slot","valueSize":1},{"declaration":5248,"isOffset":false,"isSlot":false,"src":"1784:4:29","valueSize":1}],"id":5254,"nodeType":"InlineAssembly","src":"1751:47:29"}]},"documentation":{"id":5246,"nodeType":"StructuredDocumentation","src":"1522:87:29","text":" @dev Returns an `AddressSlot` with member `value` located at `slot`."},"id":5256,"implemented":true,"kind":"function","modifiers":[],"name":"getAddressSlot","nameLocation":"1623:14:29","nodeType":"FunctionDefinition","parameters":{"id":5249,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5248,"mutability":"mutable","name":"slot","nameLocation":"1646:4:29","nodeType":"VariableDeclaration","scope":5256,"src":"1638:12:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5247,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1638:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1637:14:29"},"returnParameters":{"id":5253,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5252,"mutability":"mutable","name":"r","nameLocation":"1695:1:29","nodeType":"VariableDeclaration","scope":5256,"src":"1675:21:29","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$5236_storage_ptr","typeString":"struct StorageSlot.AddressSlot"},"typeName":{"id":5251,"nodeType":"UserDefinedTypeName","pathNode":{"id":5250,"name":"AddressSlot","nodeType":"IdentifierPath","referencedDeclaration":5236,"src":"1675:11:29"},"referencedDeclaration":5236,"src":"1675:11:29","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$5236_storage_ptr","typeString":"struct StorageSlot.AddressSlot"}},"visibility":"internal"}],"src":"1674:23:29"},"scope":5290,"src":"1614:190:29","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5266,"nodeType":"Block","src":"1986:106:29","statements":[{"AST":{"nodeType":"YulBlock","src":"2048:38:29","statements":[{"nodeType":"YulAssignment","src":"2062:14:29","value":{"name":"slot","nodeType":"YulIdentifier","src":"2072:4:29"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2062:6:29"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":5263,"isOffset":false,"isSlot":true,"src":"2062:6:29","suffix":"slot","valueSize":1},{"declaration":5259,"isOffset":false,"isSlot":false,"src":"2072:4:29","valueSize":1}],"id":5265,"nodeType":"InlineAssembly","src":"2039:47:29"}]},"documentation":{"id":5257,"nodeType":"StructuredDocumentation","src":"1810:87:29","text":" @dev Returns an `BooleanSlot` with member `value` located at `slot`."},"id":5267,"implemented":true,"kind":"function","modifiers":[],"name":"getBooleanSlot","nameLocation":"1911:14:29","nodeType":"FunctionDefinition","parameters":{"id":5260,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5259,"mutability":"mutable","name":"slot","nameLocation":"1934:4:29","nodeType":"VariableDeclaration","scope":5267,"src":"1926:12:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5258,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1926:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1925:14:29"},"returnParameters":{"id":5264,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5263,"mutability":"mutable","name":"r","nameLocation":"1983:1:29","nodeType":"VariableDeclaration","scope":5267,"src":"1963:21:29","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$5239_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"},"typeName":{"id":5262,"nodeType":"UserDefinedTypeName","pathNode":{"id":5261,"name":"BooleanSlot","nodeType":"IdentifierPath","referencedDeclaration":5239,"src":"1963:11:29"},"referencedDeclaration":5239,"src":"1963:11:29","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$5239_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"}},"visibility":"internal"}],"src":"1962:23:29"},"scope":5290,"src":"1902:190:29","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5277,"nodeType":"Block","src":"2274:106:29","statements":[{"AST":{"nodeType":"YulBlock","src":"2336:38:29","statements":[{"nodeType":"YulAssignment","src":"2350:14:29","value":{"name":"slot","nodeType":"YulIdentifier","src":"2360:4:29"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2350:6:29"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":5274,"isOffset":false,"isSlot":true,"src":"2350:6:29","suffix":"slot","valueSize":1},{"declaration":5270,"isOffset":false,"isSlot":false,"src":"2360:4:29","valueSize":1}],"id":5276,"nodeType":"InlineAssembly","src":"2327:47:29"}]},"documentation":{"id":5268,"nodeType":"StructuredDocumentation","src":"2098:87:29","text":" @dev Returns an `Bytes32Slot` with member `value` located at `slot`."},"id":5278,"implemented":true,"kind":"function","modifiers":[],"name":"getBytes32Slot","nameLocation":"2199:14:29","nodeType":"FunctionDefinition","parameters":{"id":5271,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5270,"mutability":"mutable","name":"slot","nameLocation":"2222:4:29","nodeType":"VariableDeclaration","scope":5278,"src":"2214:12:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5269,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2214:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2213:14:29"},"returnParameters":{"id":5275,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5274,"mutability":"mutable","name":"r","nameLocation":"2271:1:29","nodeType":"VariableDeclaration","scope":5278,"src":"2251:21:29","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$5242_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"},"typeName":{"id":5273,"nodeType":"UserDefinedTypeName","pathNode":{"id":5272,"name":"Bytes32Slot","nodeType":"IdentifierPath","referencedDeclaration":5242,"src":"2251:11:29"},"referencedDeclaration":5242,"src":"2251:11:29","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$5242_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"}},"visibility":"internal"}],"src":"2250:23:29"},"scope":5290,"src":"2190:190:29","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5288,"nodeType":"Block","src":"2562:106:29","statements":[{"AST":{"nodeType":"YulBlock","src":"2624:38:29","statements":[{"nodeType":"YulAssignment","src":"2638:14:29","value":{"name":"slot","nodeType":"YulIdentifier","src":"2648:4:29"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2638:6:29"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":5285,"isOffset":false,"isSlot":true,"src":"2638:6:29","suffix":"slot","valueSize":1},{"declaration":5281,"isOffset":false,"isSlot":false,"src":"2648:4:29","valueSize":1}],"id":5287,"nodeType":"InlineAssembly","src":"2615:47:29"}]},"documentation":{"id":5279,"nodeType":"StructuredDocumentation","src":"2386:87:29","text":" @dev Returns an `Uint256Slot` with member `value` located at `slot`."},"id":5289,"implemented":true,"kind":"function","modifiers":[],"name":"getUint256Slot","nameLocation":"2487:14:29","nodeType":"FunctionDefinition","parameters":{"id":5282,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5281,"mutability":"mutable","name":"slot","nameLocation":"2510:4:29","nodeType":"VariableDeclaration","scope":5289,"src":"2502:12:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5280,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2502:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2501:14:29"},"returnParameters":{"id":5286,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5285,"mutability":"mutable","name":"r","nameLocation":"2559:1:29","nodeType":"VariableDeclaration","scope":5289,"src":"2539:21:29","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$5245_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"},"typeName":{"id":5284,"nodeType":"UserDefinedTypeName","pathNode":{"id":5283,"name":"Uint256Slot","nodeType":"IdentifierPath","referencedDeclaration":5245,"src":"2539:11:29"},"referencedDeclaration":5245,"src":"2539:11:29","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$5245_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"}},"visibility":"internal"}],"src":"2538:23:29"},"scope":5290,"src":"2478:190:29","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":5291,"src":"1279:1391:29","usedErrors":[]}],"src":"105:2566:29"},"id":29},"contracts/PKDR.sol":{"ast":{"absolutePath":"contracts/PKDR.sol","exportedSymbols":{"Address":[5230],"AddressUpgradeable":[2590],"ArraysUpgradeable":[2746],"ContextUpgradeable":[2788],"CountersUpgradeable":[2862],"ECDSAUpgradeable":[3458],"EIP712Upgradeable":[3608],"ERC1967Proxy":[4520],"ERC1967Upgrade":[4838],"ERC1967UpgradeUpgradeable":[510],"ERC20BurnableUpgradeable":[1706],"ERC20PermitUpgradeable":[2270],"ERC20SnapshotUpgradeable":[2054],"ERC20Upgradeable":[1564],"IBeacon":[4900],"IBeaconUpgradeable":[520],"IERC1822Proxiable":[4483],"IERC1822ProxiableUpgradeable":[141],"IERC20MetadataUpgradeable":[2079],"IERC20PermitUpgradeable":[2306],"IERC20Upgradeable":[1642],"IProfiles":[6289],"Initializable":[689],"MathUpgradeable":[4473],"OwnableUpgradeable":[131],"PKDR":[5736],"PausableUpgradeable":[952],"Profiles":[6234],"Proxy":[4890],"StorageSlot":[5290],"StorageSlotUpgradeable":[2922],"StringsUpgradeable":[3097],"UUPSUpgradeable":[825]},"id":5737,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5292,"literals":["solidity","^","0.8",".9"],"nodeType":"PragmaDirective","src":"32:23:30"},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol","file":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol","id":5293,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5737,"sourceUnit":1565,"src":"57:78:30","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol","id":5294,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5737,"sourceUnit":1707,"src":"136:97:30","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol","id":5295,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5737,"sourceUnit":2055,"src":"234:97:30","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","id":5296,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5737,"sourceUnit":132,"src":"332:75:30","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol","id":5297,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5737,"sourceUnit":953,"src":"408:78:30","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol","id":5298,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5737,"sourceUnit":2271,"src":"487:101:30","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","id":5299,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5737,"sourceUnit":690,"src":"589:75:30","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol","id":5300,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5737,"sourceUnit":826,"src":"665:77:30","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/Profiles.sol","file":"./Profiles.sol","id":5301,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5737,"sourceUnit":6235,"src":"744:24:30","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":5303,"name":"Initializable","nodeType":"IdentifierPath","referencedDeclaration":689,"src":"992:13:30"},"id":5304,"nodeType":"InheritanceSpecifier","src":"992:13:30"},{"baseName":{"id":5305,"name":"ERC20Upgradeable","nodeType":"IdentifierPath","referencedDeclaration":1564,"src":"1011:16:30"},"id":5306,"nodeType":"InheritanceSpecifier","src":"1011:16:30"},{"baseName":{"id":5307,"name":"ERC20BurnableUpgradeable","nodeType":"IdentifierPath","referencedDeclaration":1706,"src":"1033:24:30"},"id":5308,"nodeType":"InheritanceSpecifier","src":"1033:24:30"},{"baseName":{"id":5309,"name":"ERC20SnapshotUpgradeable","nodeType":"IdentifierPath","referencedDeclaration":2054,"src":"1063:24:30"},"id":5310,"nodeType":"InheritanceSpecifier","src":"1063:24:30"},{"baseName":{"id":5311,"name":"OwnableUpgradeable","nodeType":"IdentifierPath","referencedDeclaration":131,"src":"1093:18:30"},"id":5312,"nodeType":"InheritanceSpecifier","src":"1093:18:30"},{"baseName":{"id":5313,"name":"PausableUpgradeable","nodeType":"IdentifierPath","referencedDeclaration":952,"src":"1117:19:30"},"id":5314,"nodeType":"InheritanceSpecifier","src":"1117:19:30"},{"baseName":{"id":5315,"name":"ERC20PermitUpgradeable","nodeType":"IdentifierPath","referencedDeclaration":2270,"src":"1142:22:30"},"id":5316,"nodeType":"InheritanceSpecifier","src":"1142:22:30"},{"baseName":{"id":5317,"name":"UUPSUpgradeable","nodeType":"IdentifierPath","referencedDeclaration":825,"src":"1170:15:30"},"id":5318,"nodeType":"InheritanceSpecifier","src":"1170:15:30"}],"canonicalName":"PKDR","contractDependencies":[],"contractKind":"contract","documentation":{"id":5302,"nodeType":"StructuredDocumentation","src":"917:54:30","text":"@custom:security-contact zohaib10092001@gmail.com"},"fullyImplemented":true,"id":5736,"linearizedBaseContracts":[5736,825,510,141,2270,3608,2306,952,131,2054,1706,1564,2079,1642,2788,689],"name":"PKDR","nameLocation":"980:4:30","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":5321,"mutability":"mutable","name":"_contractValue","nameLocation":"1231:14:30","nodeType":"VariableDeclaration","scope":5736,"src":"1215:34:30","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5319,"name":"uint256","nodeType":"ElementaryTypeName","src":"1215:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30","id":5320,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1248:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"visibility":"private"},{"constant":false,"id":5329,"mutability":"immutable","name":"_multiSig","nameLocation":"1281:9:30","nodeType":"VariableDeclaration","scope":5736,"src":"1255:85:30","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5322,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1255:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"arguments":[{"hexValue":"415050524f564544","id":5326,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1328:10:30","typeDescriptions":{"typeIdentifier":"t_stringliteral_e321069d1ac41cdfb1421ffa231cd2dc5e3a334703a998a5f84566b6fbf3f7bd","typeString":"literal_string \"APPROVED\""},"value":"APPROVED"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_e321069d1ac41cdfb1421ffa231cd2dc5e3a334703a998a5f84566b6fbf3f7bd","typeString":"literal_string \"APPROVED\""}],"expression":{"id":5324,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1311:3:30","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":5325,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"1311:16:30","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":5327,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1311:28:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":5323,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1301:9:30","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":5328,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1301:39:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"id":5337,"mutability":"immutable","name":"_revokeMultiSig","nameLocation":"1372:15:30","nodeType":"VariableDeclaration","scope":5736,"src":"1346:87:30","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5330,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1346:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"arguments":[{"hexValue":"4e554c4c","id":5334,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1425:6:30","typeDescriptions":{"typeIdentifier":"t_stringliteral_bb4e1f8434f661d4c52cce6e51dba6eb9c909f0b452eb22968b55416ecb18fb5","typeString":"literal_string \"NULL\""},"value":"NULL"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_bb4e1f8434f661d4c52cce6e51dba6eb9c909f0b452eb22968b55416ecb18fb5","typeString":"literal_string \"NULL\""}],"expression":{"id":5332,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1408:3:30","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":5333,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"1408:16:30","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":5335,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1408:24:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":5331,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1398:9:30","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":5336,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1398:35:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"id":5340,"mutability":"mutable","name":"profiles","nameLocation":"1448:8:30","nodeType":"VariableDeclaration","scope":5736,"src":"1439:17:30","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_Profiles_$6234","typeString":"contract Profiles"},"typeName":{"id":5339,"nodeType":"UserDefinedTypeName","pathNode":{"id":5338,"name":"Profiles","nodeType":"IdentifierPath","referencedDeclaration":6234,"src":"1439:8:30"},"referencedDeclaration":6234,"src":"1439:8:30","typeDescriptions":{"typeIdentifier":"t_contract$_Profiles_$6234","typeString":"contract Profiles"}},"visibility":"internal"},{"id":5344,"name":"USER_NOT_VERIFIED","nameLocation":"1482:17:30","nodeType":"ErrorDefinition","parameters":{"id":5343,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5342,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5344,"src":"1500:7:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5341,"name":"address","nodeType":"ElementaryTypeName","src":"1500:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1499:9:30"},"src":"1476:33:30"},{"id":5348,"name":"MULTISIG_REQUIRED","nameLocation":"1520:17:30","nodeType":"ErrorDefinition","parameters":{"id":5347,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5346,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5348,"src":"1538:7:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5345,"name":"address","nodeType":"ElementaryTypeName","src":"1538:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1537:9:30"},"src":"1514:33:30"},{"anonymous":false,"id":5352,"name":"AMOUNT_RECEIVED_THROUGH_FALLBACK","nameLocation":"1573:32:30","nodeType":"EventDefinition","parameters":{"id":5351,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5350,"indexed":false,"mutability":"mutable","name":"fallbackAmount","nameLocation":"1614:14:30","nodeType":"VariableDeclaration","scope":5352,"src":"1606:22:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5349,"name":"uint256","nodeType":"ElementaryTypeName","src":"1606:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1605:24:30"},"src":"1567:63:30"},{"anonymous":false,"id":5356,"name":"AMOUNT_RECEIVED_THROUGH_RECEIVE","nameLocation":"1641:31:30","nodeType":"EventDefinition","parameters":{"id":5355,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5354,"indexed":false,"mutability":"mutable","name":"receiveAmount","nameLocation":"1681:13:30","nodeType":"VariableDeclaration","scope":5356,"src":"1673:21:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5353,"name":"uint256","nodeType":"ElementaryTypeName","src":"1673:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1672:23:30"},"src":"1635:61:30"},{"anonymous":false,"id":5360,"name":"TRANSFER_REQUIRED_MULTI_SIGNATURE","nameLocation":"1707:33:30","nodeType":"EventDefinition","parameters":{"id":5359,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5358,"indexed":false,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5360,"src":"1741:7:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5357,"name":"address","nodeType":"ElementaryTypeName","src":"1741:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1740:9:30"},"src":"1701:49:30"},{"anonymous":false,"id":5364,"name":"TRANSFER_REQUIRED_VERIFICATION_I","nameLocation":"1761:32:30","nodeType":"EventDefinition","parameters":{"id":5363,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5362,"indexed":false,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5364,"src":"1794:7:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5361,"name":"address","nodeType":"ElementaryTypeName","src":"1794:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1793:9:30"},"src":"1755:48:30"},{"body":{"id":5376,"nodeType":"Block","src":"1860:76:30","statements":[{"expression":{"arguments":[{"arguments":[{"id":5370,"name":"_user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5366,"src":"1890:5:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5369,"name":"_isVerified","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5677,"src":"1878:11:30","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":5371,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1878:18:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"555345525f4e4f545f5645524946494544","id":5372,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1898:19:30","typeDescriptions":{"typeIdentifier":"t_stringliteral_16f4986ff02b8ec65b8228ad4d9cfee3779ad1f090ec2a1e15009246e11bf55f","typeString":"literal_string \"USER_NOT_VERIFIED\""},"value":"USER_NOT_VERIFIED"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_16f4986ff02b8ec65b8228ad4d9cfee3779ad1f090ec2a1e15009246e11bf55f","typeString":"literal_string \"USER_NOT_VERIFIED\""}],"id":5368,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1870:7:30","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5373,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1870:48:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5374,"nodeType":"ExpressionStatement","src":"1870:48:30"},{"id":5375,"nodeType":"PlaceholderStatement","src":"1928:1:30"}]},"id":5377,"name":"isVerified","nameLocation":"1834:10:30","nodeType":"ModifierDefinition","parameters":{"id":5367,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5366,"mutability":"mutable","name":"_user","nameLocation":"1853:5:30","nodeType":"VariableDeclaration","scope":5377,"src":"1845:13:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5365,"name":"address","nodeType":"ElementaryTypeName","src":"1845:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1844:15:30"},"src":"1825:111:30","virtual":false,"visibility":"internal"},{"body":{"id":5393,"nodeType":"Block","src":"1984:127:30","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":5385,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":5382,"name":"_user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5379,"src":"2011:5:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5381,"name":"_getMultiSig","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5690,"src":"1998:12:30","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bytes32_$","typeString":"function (address) view returns (bytes32)"}},"id":5383,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1998:19:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":5384,"name":"_revokeMultiSig","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5337,"src":"2021:15:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1998:38:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5391,"nodeType":"IfStatement","src":"1994:100:30","trueBody":{"id":5390,"nodeType":"Block","src":"2038:56:30","statements":[{"errorCall":{"arguments":[{"id":5387,"name":"_user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5379,"src":"2077:5:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5386,"name":"MULTISIG_REQUIRED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5348,"src":"2059:17:30","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":5388,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2059:24:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5389,"nodeType":"RevertStatement","src":"2052:31:30"}]}},{"id":5392,"nodeType":"PlaceholderStatement","src":"2103:1:30"}]},"id":5394,"name":"isMultiSigApprove","nameLocation":"1951:17:30","nodeType":"ModifierDefinition","parameters":{"id":5380,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5379,"mutability":"mutable","name":"_user","nameLocation":"1977:5:30","nodeType":"VariableDeclaration","scope":5394,"src":"1969:13:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5378,"name":"address","nodeType":"ElementaryTypeName","src":"1969:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1968:15:30"},"src":"1942:169:30","virtual":false,"visibility":"internal"},{"body":{"id":5401,"nodeType":"Block","src":"2204:39:30","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":5398,"name":"_disableInitializers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":670,"src":"2214:20:30","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":5399,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2214:22:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5400,"nodeType":"ExpressionStatement","src":"2214:22:30"}]},"documentation":{"id":5395,"nodeType":"StructuredDocumentation","src":"2137:48:30","text":"@custom:oz-upgrades-unsafe-allow constructor"},"id":5402,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":5396,"nodeType":"ParameterList","parameters":[],"src":"2201:2:30"},"returnParameters":{"id":5397,"nodeType":"ParameterList","parameters":[],"src":"2204:0:30"},"scope":5736,"src":"2190:53:30","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5415,"nodeType":"Block","src":"2291:101:30","statements":[{"expression":{"id":5408,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5405,"name":"_contractValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5321,"src":"2301:14:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"expression":{"id":5406,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2319:3:30","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5407,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","src":"2319:9:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2301:27:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5409,"nodeType":"ExpressionStatement","src":"2301:27:30"},{"eventCall":{"arguments":[{"expression":{"id":5411,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2375:3:30","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5412,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","src":"2375:9:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5410,"name":"AMOUNT_RECEIVED_THROUGH_RECEIVE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5356,"src":"2343:31:30","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":5413,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2343:42:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5414,"nodeType":"EmitStatement","src":"2338:47:30"}]},"id":5416,"implemented":true,"kind":"receive","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":5403,"nodeType":"ParameterList","parameters":[],"src":"2271:2:30"},"returnParameters":{"id":5404,"nodeType":"ParameterList","parameters":[],"src":"2291:0:30"},"scope":5736,"src":"2264:128:30","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":5429,"nodeType":"Block","src":"2442:102:30","statements":[{"expression":{"id":5422,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5419,"name":"_contractValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5321,"src":"2452:14:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"expression":{"id":5420,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2470:3:30","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5421,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","src":"2470:9:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2452:27:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5423,"nodeType":"ExpressionStatement","src":"2452:27:30"},{"eventCall":{"arguments":[{"expression":{"id":5425,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2527:3:30","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5426,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","src":"2527:9:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5424,"name":"AMOUNT_RECEIVED_THROUGH_FALLBACK","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5352,"src":"2494:32:30","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":5427,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2494:43:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5428,"nodeType":"EmitStatement","src":"2489:48:30"}]},"id":5430,"implemented":true,"kind":"fallback","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":5417,"nodeType":"ParameterList","parameters":[],"src":"2422:2:30"},"returnParameters":{"id":5418,"nodeType":"ParameterList","parameters":[],"src":"2442:0:30"},"scope":5736,"src":"2414:130:30","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":5443,"nodeType":"Block","src":"2824:47:30","statements":[{"expression":{"id":5441,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5437,"name":"profiles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5340,"src":"2834:8:30","typeDescriptions":{"typeIdentifier":"t_contract$_Profiles_$6234","typeString":"contract Profiles"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5439,"name":"_profiles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5432,"src":"2854:9:30","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":5438,"name":"Profiles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6234,"src":"2845:8:30","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Profiles_$6234_$","typeString":"type(contract Profiles)"}},"id":5440,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2845:19:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_Profiles_$6234","typeString":"contract Profiles"}},"src":"2834:30:30","typeDescriptions":{"typeIdentifier":"t_contract$_Profiles_$6234","typeString":"contract Profiles"}},"id":5442,"nodeType":"ExpressionStatement","src":"2834:30:30"}]},"functionSelector":"59e78460","id":5444,"implemented":true,"kind":"function","modifiers":[{"id":5435,"kind":"modifierInvocation","modifierName":{"id":5434,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":45,"src":"2814:9:30"},"nodeType":"ModifierInvocation","src":"2814:9:30"}],"name":"setProfileAddress","nameLocation":"2760:17:30","nodeType":"FunctionDefinition","parameters":{"id":5433,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5432,"mutability":"mutable","name":"_profiles","nameLocation":"2794:9:30","nodeType":"VariableDeclaration","scope":5444,"src":"2778:25:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":5431,"name":"address","nodeType":"ElementaryTypeName","src":"2778:15:30","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"src":"2777:27:30"},"returnParameters":{"id":5436,"nodeType":"ParameterList","parameters":[],"src":"2824:0:30"},"scope":5736,"src":"2751:120:30","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5458,"nodeType":"Block","src":"2940:33:30","statements":[{"expression":{"arguments":[{"id":5454,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5446,"src":"2955:2:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5455,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5448,"src":"2959:6:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5453,"name":"mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5660,"src":"2950:4:30","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":5456,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2950:16:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5457,"nodeType":"ExpressionStatement","src":"2950:16:30"}]},"functionSelector":"449a52f8","id":5459,"implemented":true,"kind":"function","modifiers":[{"id":5451,"kind":"modifierInvocation","modifierName":{"id":5450,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":45,"src":"2930:9:30"},"nodeType":"ModifierInvocation","src":"2930:9:30"}],"name":"mintTo","nameLocation":"2886:6:30","nodeType":"FunctionDefinition","parameters":{"id":5449,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5446,"mutability":"mutable","name":"to","nameLocation":"2901:2:30","nodeType":"VariableDeclaration","scope":5459,"src":"2893:10:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5445,"name":"address","nodeType":"ElementaryTypeName","src":"2893:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5448,"mutability":"mutable","name":"amount","nameLocation":"2913:6:30","nodeType":"VariableDeclaration","scope":5459,"src":"2905:14:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5447,"name":"uint256","nodeType":"ElementaryTypeName","src":"2905:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2892:28:30"},"returnParameters":{"id":5452,"nodeType":"ParameterList","parameters":[],"src":"2940:0:30"},"scope":5736,"src":"2877:96:30","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[1679],"body":{"id":5473,"nodeType":"Block","src":"3035:35:30","statements":[{"expression":{"arguments":[{"id":5470,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5461,"src":"3056:6:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5467,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"3045:5:30","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_PKDR_$5736_$","typeString":"type(contract super PKDR)"}},"id":5469,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"burn","nodeType":"MemberAccess","referencedDeclaration":1679,"src":"3045:10:30","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":5471,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3045:18:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5472,"nodeType":"ExpressionStatement","src":"3045:18:30"}]},"functionSelector":"42966c68","id":5474,"implemented":true,"kind":"function","modifiers":[{"id":5465,"kind":"modifierInvocation","modifierName":{"id":5464,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":45,"src":"3025:9:30"},"nodeType":"ModifierInvocation","src":"3025:9:30"}],"name":"burn","nameLocation":"2988:4:30","nodeType":"FunctionDefinition","overrides":{"id":5463,"nodeType":"OverrideSpecifier","overrides":[],"src":"3016:8:30"},"parameters":{"id":5462,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5461,"mutability":"mutable","name":"amount","nameLocation":"3001:6:30","nodeType":"VariableDeclaration","scope":5474,"src":"2993:14:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5460,"name":"uint256","nodeType":"ElementaryTypeName","src":"2993:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2992:16:30"},"returnParameters":{"id":5466,"nodeType":"ParameterList","parameters":[],"src":"3035:0:30"},"scope":5736,"src":"2979:91:30","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[1700],"body":{"id":5491,"nodeType":"Block","src":"3175:48:30","statements":[{"expression":{"arguments":[{"id":5487,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5476,"src":"3200:7:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5488,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5478,"src":"3209:6:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5484,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"3185:5:30","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_PKDR_$5736_$","typeString":"type(contract super PKDR)"}},"id":5486,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"burnFrom","nodeType":"MemberAccess","referencedDeclaration":1700,"src":"3185:14:30","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":5489,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3185:31:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5490,"nodeType":"ExpressionStatement","src":"3185:31:30"}]},"functionSelector":"79cc6790","id":5492,"implemented":true,"kind":"function","modifiers":[{"id":5482,"kind":"modifierInvocation","modifierName":{"id":5481,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":45,"src":"3165:9:30"},"nodeType":"ModifierInvocation","src":"3165:9:30"}],"name":"burnFrom","nameLocation":"3085:8:30","nodeType":"FunctionDefinition","overrides":{"id":5480,"nodeType":"OverrideSpecifier","overrides":[],"src":"3156:8:30"},"parameters":{"id":5479,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5476,"mutability":"mutable","name":"account","nameLocation":"3111:7:30","nodeType":"VariableDeclaration","scope":5492,"src":"3103:15:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5475,"name":"address","nodeType":"ElementaryTypeName","src":"3103:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5478,"mutability":"mutable","name":"amount","nameLocation":"3136:6:30","nodeType":"VariableDeclaration","scope":5492,"src":"3128:14:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5477,"name":"uint256","nodeType":"ElementaryTypeName","src":"3128:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3093:55:30"},"returnParameters":{"id":5483,"nodeType":"ParameterList","parameters":[],"src":"3175:0:30"},"scope":5736,"src":"3076:147:30","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5521,"nodeType":"Block","src":"3284:232:30","statements":[{"expression":{"arguments":[{"hexValue":"504b4452","id":5498,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3307:6:30","typeDescriptions":{"typeIdentifier":"t_stringliteral_3bbaa0e4d8fdedb8f9a158a0e968b58e599c9d14beb645c266cca2ef89ea6d5a","typeString":"literal_string \"PKDR\""},"value":"PKDR"},{"hexValue":"504b4452","id":5499,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3315:6:30","typeDescriptions":{"typeIdentifier":"t_stringliteral_3bbaa0e4d8fdedb8f9a158a0e968b58e599c9d14beb645c266cca2ef89ea6d5a","typeString":"literal_string \"PKDR\""},"value":"PKDR"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_3bbaa0e4d8fdedb8f9a158a0e968b58e599c9d14beb645c266cca2ef89ea6d5a","typeString":"literal_string \"PKDR\""},{"typeIdentifier":"t_stringliteral_3bbaa0e4d8fdedb8f9a158a0e968b58e599c9d14beb645c266cca2ef89ea6d5a","typeString":"literal_string \"PKDR\""}],"id":5497,"name":"__ERC20_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":999,"src":"3294:12:30","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory,string memory)"}},"id":5500,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3294:28:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5501,"nodeType":"ExpressionStatement","src":"3294:28:30"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":5502,"name":"__ERC20Burnable_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1660,"src":"3332:20:30","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":5503,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3332:22:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5504,"nodeType":"ExpressionStatement","src":"3332:22:30"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":5505,"name":"__ERC20Snapshot_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1723,"src":"3364:20:30","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":5506,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3364:22:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5507,"nodeType":"ExpressionStatement","src":"3364:22:30"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":5508,"name":"__Ownable_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":26,"src":"3396:14:30","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":5509,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3396:16:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5510,"nodeType":"ExpressionStatement","src":"3396:16:30"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":5511,"name":"__Pausable_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":856,"src":"3422:15:30","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":5512,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3422:17:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5513,"nodeType":"ExpressionStatement","src":"3422:17:30"},{"expression":{"arguments":[{"hexValue":"504b4452","id":5515,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3468:6:30","typeDescriptions":{"typeIdentifier":"t_stringliteral_3bbaa0e4d8fdedb8f9a158a0e968b58e599c9d14beb645c266cca2ef89ea6d5a","typeString":"literal_string \"PKDR\""},"value":"PKDR"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_3bbaa0e4d8fdedb8f9a158a0e968b58e599c9d14beb645c266cca2ef89ea6d5a","typeString":"literal_string \"PKDR\""}],"id":5514,"name":"__ERC20Permit_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2127,"src":"3449:18:30","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory)"}},"id":5516,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3449:26:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5517,"nodeType":"ExpressionStatement","src":"3449:26:30"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":5518,"name":"__UUPSUpgradeable_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":707,"src":"3485:22:30","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":5519,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3485:24:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5520,"nodeType":"ExpressionStatement","src":"3485:24:30"}]},"functionSelector":"8129fc1c","id":5522,"implemented":true,"kind":"function","modifiers":[{"id":5495,"kind":"modifierInvocation","modifierName":{"id":5494,"name":"initializer","nodeType":"IdentifierPath","referencedDeclaration":591,"src":"3272:11:30"},"nodeType":"ModifierInvocation","src":"3272:11:30"}],"name":"initialize","nameLocation":"3252:10:30","nodeType":"FunctionDefinition","parameters":{"id":5493,"nodeType":"ParameterList","parameters":[],"src":"3262:2:30"},"returnParameters":{"id":5496,"nodeType":"ParameterList","parameters":[],"src":"3284:0:30"},"scope":5736,"src":"3243:273:30","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[1096],"body":{"id":5572,"nodeType":"Block","src":"3621:500:30","statements":[{"expression":{"arguments":[{"arguments":[{"expression":{"id":5534,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3664:3:30","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5535,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"3664:10:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5533,"name":"_isVerified","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5677,"src":"3652:11:30","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":5536,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3652:23:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"66726f6d3a205452414e534645525f52455155495245445f564552494649434154494f4e5f49","id":5537,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3689:40:30","typeDescriptions":{"typeIdentifier":"t_stringliteral_60b31d48ddf4a3a7e36589333cb85fe8601f83d35365f582cb69e77a74e2c530","typeString":"literal_string \"from: TRANSFER_REQUIRED_VERIFICATION_I\""},"value":"from: TRANSFER_REQUIRED_VERIFICATION_I"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_60b31d48ddf4a3a7e36589333cb85fe8601f83d35365f582cb69e77a74e2c530","typeString":"literal_string \"from: TRANSFER_REQUIRED_VERIFICATION_I\""}],"id":5532,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3631:7:30","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5538,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3631:108:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5539,"nodeType":"ExpressionStatement","src":"3631:108:30"},{"expression":{"arguments":[{"arguments":[{"id":5542,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5524,"src":"3769:2:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5541,"name":"_isVerified","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5677,"src":"3757:11:30","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":5543,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3757:15:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"746f203a205452414e534645525f52455155495245445f564552494649434154494f4e5f49","id":5544,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3774:39:30","typeDescriptions":{"typeIdentifier":"t_stringliteral_6a474febbac6df5530c874e2802245fb2d8492a7ff2734cf08d72da489a71589","typeString":"literal_string \"to : TRANSFER_REQUIRED_VERIFICATION_I\""},"value":"to : TRANSFER_REQUIRED_VERIFICATION_I"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6a474febbac6df5530c874e2802245fb2d8492a7ff2734cf08d72da489a71589","typeString":"literal_string \"to : TRANSFER_REQUIRED_VERIFICATION_I\""}],"id":5540,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3749:7:30","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5545,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3749:65:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5546,"nodeType":"ExpressionStatement","src":"3749:65:30"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":5553,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"expression":{"id":5549,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3858:3:30","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5550,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"3858:10:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5548,"name":"_getMultiSig","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5690,"src":"3845:12:30","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bytes32_$","typeString":"function (address) view returns (bytes32)"}},"id":5551,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3845:24:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":5552,"name":"_multiSig","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5329,"src":"3873:9:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3845:37:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"66726f6d3a205452414e534645525f52455155495245445f4d554c54495f5349474e4154555245","id":5554,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3896:41:30","typeDescriptions":{"typeIdentifier":"t_stringliteral_2d3c3eb826a2c156a3f5fda2e8c203bbbb959ef4be16522182f3c73c9ba3575d","typeString":"literal_string \"from: TRANSFER_REQUIRED_MULTI_SIGNATURE\""},"value":"from: TRANSFER_REQUIRED_MULTI_SIGNATURE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2d3c3eb826a2c156a3f5fda2e8c203bbbb959ef4be16522182f3c73c9ba3575d","typeString":"literal_string \"from: TRANSFER_REQUIRED_MULTI_SIGNATURE\""}],"id":5547,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3824:7:30","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5555,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3824:123:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5556,"nodeType":"ExpressionStatement","src":"3824:123:30"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":5562,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":5559,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5524,"src":"3991:2:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5558,"name":"_getMultiSig","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5690,"src":"3978:12:30","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bytes32_$","typeString":"function (address) view returns (bytes32)"}},"id":5560,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3978:16:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":5561,"name":"_multiSig","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5329,"src":"3998:9:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3978:29:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"746f3a205452414e534645525f52455155495245445f4d554c54495f5349474e4154555245","id":5563,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4021:39:30","typeDescriptions":{"typeIdentifier":"t_stringliteral_5bea970c8c5b2c16f9984fa1b49104cd8ac4cec162360b95949413a68a6073f9","typeString":"literal_string \"to: TRANSFER_REQUIRED_MULTI_SIGNATURE\""},"value":"to: TRANSFER_REQUIRED_MULTI_SIGNATURE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5bea970c8c5b2c16f9984fa1b49104cd8ac4cec162360b95949413a68a6073f9","typeString":"literal_string \"to: TRANSFER_REQUIRED_MULTI_SIGNATURE\""}],"id":5557,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3957:7:30","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5564,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3957:113:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5565,"nodeType":"ExpressionStatement","src":"3957:113:30"},{"expression":{"arguments":[{"id":5568,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5524,"src":"4103:2:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5569,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5526,"src":"4107:6:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5566,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"4088:5:30","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_PKDR_$5736_$","typeString":"type(contract super PKDR)"}},"id":5567,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":1096,"src":"4088:14:30","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) returns (bool)"}},"id":5570,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4088:26:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5531,"id":5571,"nodeType":"Return","src":"4081:33:30"}]},"functionSelector":"a9059cbb","id":5573,"implemented":true,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"3531:8:30","nodeType":"FunctionDefinition","overrides":{"id":5528,"nodeType":"OverrideSpecifier","overrides":[],"src":"3597:8:30"},"parameters":{"id":5527,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5524,"mutability":"mutable","name":"to","nameLocation":"3557:2:30","nodeType":"VariableDeclaration","scope":5573,"src":"3549:10:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5523,"name":"address","nodeType":"ElementaryTypeName","src":"3549:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5526,"mutability":"mutable","name":"amount","nameLocation":"3577:6:30","nodeType":"VariableDeclaration","scope":5573,"src":"3569:14:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5525,"name":"uint256","nodeType":"ElementaryTypeName","src":"3569:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3539:50:30"},"returnParameters":{"id":5531,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5530,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5573,"src":"3615:4:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5529,"name":"bool","nodeType":"ElementaryTypeName","src":"3615:4:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3614:6:30"},"scope":5736,"src":"3522:599:30","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[1172],"body":{"id":5606,"nodeType":"Block","src":"4424:60:30","statements":[{"expression":{"arguments":[{"id":5601,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5575,"src":"4460:4:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5602,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5577,"src":"4466:2:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5603,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5579,"src":"4470:6:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5599,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"4441:5:30","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_PKDR_$5736_$","typeString":"type(contract super PKDR)"}},"id":5600,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":1172,"src":"4441:18:30","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) returns (bool)"}},"id":5604,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4441:36:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5598,"id":5605,"nodeType":"Return","src":"4434:43:30"}]},"functionSelector":"23b872dd","id":5607,"implemented":true,"kind":"function","modifiers":[{"id":5583,"kind":"modifierInvocation","modifierName":{"id":5582,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":45,"src":"4277:9:30"},"nodeType":"ModifierInvocation","src":"4277:9:30"},{"arguments":[{"id":5585,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5575,"src":"4306:4:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":5586,"kind":"modifierInvocation","modifierName":{"id":5584,"name":"isVerified","nodeType":"IdentifierPath","referencedDeclaration":5377,"src":"4295:10:30"},"nodeType":"ModifierInvocation","src":"4295:16:30"},{"arguments":[{"id":5588,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5577,"src":"4331:2:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":5589,"kind":"modifierInvocation","modifierName":{"id":5587,"name":"isVerified","nodeType":"IdentifierPath","referencedDeclaration":5377,"src":"4320:10:30"},"nodeType":"ModifierInvocation","src":"4320:14:30"},{"arguments":[{"id":5591,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5575,"src":"4361:4:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":5592,"kind":"modifierInvocation","modifierName":{"id":5590,"name":"isMultiSigApprove","nodeType":"IdentifierPath","referencedDeclaration":5394,"src":"4343:17:30"},"nodeType":"ModifierInvocation","src":"4343:23:30"},{"arguments":[{"id":5594,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5577,"src":"4393:2:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":5595,"kind":"modifierInvocation","modifierName":{"id":5593,"name":"isMultiSigApprove","nodeType":"IdentifierPath","referencedDeclaration":5394,"src":"4375:17:30"},"nodeType":"ModifierInvocation","src":"4375:21:30"}],"name":"transferFrom","nameLocation":"4136:12:30","nodeType":"FunctionDefinition","overrides":{"id":5581,"nodeType":"OverrideSpecifier","overrides":[],"src":"4260:8:30"},"parameters":{"id":5580,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5575,"mutability":"mutable","name":"from","nameLocation":"4166:4:30","nodeType":"VariableDeclaration","scope":5607,"src":"4158:12:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5574,"name":"address","nodeType":"ElementaryTypeName","src":"4158:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5577,"mutability":"mutable","name":"to","nameLocation":"4188:2:30","nodeType":"VariableDeclaration","scope":5607,"src":"4180:10:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5576,"name":"address","nodeType":"ElementaryTypeName","src":"4180:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5579,"mutability":"mutable","name":"amount","nameLocation":"4208:6:30","nodeType":"VariableDeclaration","scope":5607,"src":"4200:14:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5578,"name":"uint256","nodeType":"ElementaryTypeName","src":"4200:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4148:72:30"},"returnParameters":{"id":5598,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5597,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5607,"src":"4414:4:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5596,"name":"bool","nodeType":"ElementaryTypeName","src":"4414:4:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4413:6:30"},"scope":5736,"src":"4127:357:30","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[54],"body":{"id":5617,"nodeType":"Block","src":"4548:37:30","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5613,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"4565:5:30","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_PKDR_$5736_$","typeString":"type(contract super PKDR)"}},"id":5614,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"owner","nodeType":"MemberAccess","referencedDeclaration":54,"src":"4565:11:30","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5615,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4565:13:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":5612,"id":5616,"nodeType":"Return","src":"4558:20:30"}]},"functionSelector":"8da5cb5b","id":5618,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"4501:5:30","nodeType":"FunctionDefinition","overrides":{"id":5609,"nodeType":"OverrideSpecifier","overrides":[],"src":"4521:8:30"},"parameters":{"id":5608,"nodeType":"ParameterList","parameters":[],"src":"4506:2:30"},"returnParameters":{"id":5612,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5611,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5618,"src":"4539:7:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5610,"name":"address","nodeType":"ElementaryTypeName","src":"4539:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4538:9:30"},"scope":5736,"src":"4492:93:30","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":5626,"nodeType":"Block","src":"4646:28:30","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":5623,"name":"_snapshot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1783,"src":"4656:9:30","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$_t_uint256_$","typeString":"function () returns (uint256)"}},"id":5624,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4656:11:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5625,"nodeType":"ExpressionStatement","src":"4656:11:30"}]},"id":5627,"implemented":true,"kind":"function","modifiers":[{"id":5621,"kind":"modifierInvocation","modifierName":{"id":5620,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":45,"src":"4636:9:30"},"nodeType":"ModifierInvocation","src":"4636:9:30"}],"name":"snapshot","nameLocation":"4616:8:30","nodeType":"FunctionDefinition","parameters":{"id":5619,"nodeType":"ParameterList","parameters":[],"src":"4624:2:30"},"returnParameters":{"id":5622,"nodeType":"ParameterList","parameters":[],"src":"4646:0:30"},"scope":5736,"src":"4607:67:30","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5635,"nodeType":"Block","src":"4716:25:30","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":5632,"name":"_pause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":930,"src":"4726:6:30","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":5633,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4726:8:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5634,"nodeType":"ExpressionStatement","src":"4726:8:30"}]},"id":5636,"implemented":true,"kind":"function","modifiers":[{"id":5630,"kind":"modifierInvocation","modifierName":{"id":5629,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":45,"src":"4706:9:30"},"nodeType":"ModifierInvocation","src":"4706:9:30"}],"name":"pause","nameLocation":"4689:5:30","nodeType":"FunctionDefinition","parameters":{"id":5628,"nodeType":"ParameterList","parameters":[],"src":"4694:2:30"},"returnParameters":{"id":5631,"nodeType":"ParameterList","parameters":[],"src":"4716:0:30"},"scope":5736,"src":"4680:61:30","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5644,"nodeType":"Block","src":"4785:27:30","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":5641,"name":"_unpause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":946,"src":"4795:8:30","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":5642,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4795:10:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5643,"nodeType":"ExpressionStatement","src":"4795:10:30"}]},"id":5645,"implemented":true,"kind":"function","modifiers":[{"id":5639,"kind":"modifierInvocation","modifierName":{"id":5638,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":45,"src":"4775:9:30"},"nodeType":"ModifierInvocation","src":"4775:9:30"}],"name":"unpause","nameLocation":"4756:7:30","nodeType":"FunctionDefinition","parameters":{"id":5637,"nodeType":"ParameterList","parameters":[],"src":"4763:2:30"},"returnParameters":{"id":5640,"nodeType":"ParameterList","parameters":[],"src":"4785:0:30"},"scope":5736,"src":"4747:65:30","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5659,"nodeType":"Block","src":"4879:34:30","statements":[{"expression":{"arguments":[{"id":5655,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5647,"src":"4895:2:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5656,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5649,"src":"4899:6:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5654,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1376,"src":"4889:5:30","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":5657,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4889:17:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5658,"nodeType":"ExpressionStatement","src":"4889:17:30"}]},"id":5660,"implemented":true,"kind":"function","modifiers":[{"id":5652,"kind":"modifierInvocation","modifierName":{"id":5651,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":45,"src":"4869:9:30"},"nodeType":"ModifierInvocation","src":"4869:9:30"}],"name":"mint","nameLocation":"4827:4:30","nodeType":"FunctionDefinition","parameters":{"id":5650,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5647,"mutability":"mutable","name":"to","nameLocation":"4840:2:30","nodeType":"VariableDeclaration","scope":5660,"src":"4832:10:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5646,"name":"address","nodeType":"ElementaryTypeName","src":"4832:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5649,"mutability":"mutable","name":"amount","nameLocation":"4852:6:30","nodeType":"VariableDeclaration","scope":5660,"src":"4844:14:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5648,"name":"uint256","nodeType":"ElementaryTypeName","src":"4844:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4831:28:30"},"returnParameters":{"id":5653,"nodeType":"ParameterList","parameters":[],"src":"4879:0:30"},"scope":5736,"src":"4818:95:30","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5676,"nodeType":"Block","src":"4984:85:30","statements":[{"assignments":[5668],"declarations":[{"constant":false,"id":5668,"mutability":"mutable","name":"status","nameLocation":"4999:6:30","nodeType":"VariableDeclaration","scope":5676,"src":"4994:11:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5667,"name":"bool","nodeType":"ElementaryTypeName","src":"4994:4:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":5673,"initialValue":{"arguments":[{"id":5671,"name":"_user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5662,"src":"5033:5:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":5669,"name":"profiles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5340,"src":"5008:8:30","typeDescriptions":{"typeIdentifier":"t_contract$_Profiles_$6234","typeString":"contract Profiles"}},"id":5670,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getVerifiedUser","nodeType":"MemberAccess","referencedDeclaration":6217,"src":"5008:24:30","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view external returns (bool)"}},"id":5672,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5008:31:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"4994:45:30"},{"expression":{"id":5674,"name":"status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5668,"src":"5056:6:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5666,"id":5675,"nodeType":"Return","src":"5049:13:30"}]},"id":5677,"implemented":true,"kind":"function","modifiers":[],"name":"_isVerified","nameLocation":"4928:11:30","nodeType":"FunctionDefinition","parameters":{"id":5663,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5662,"mutability":"mutable","name":"_user","nameLocation":"4948:5:30","nodeType":"VariableDeclaration","scope":5677,"src":"4940:13:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5661,"name":"address","nodeType":"ElementaryTypeName","src":"4940:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4939:15:30"},"returnParameters":{"id":5666,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5665,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5677,"src":"4978:4:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5664,"name":"bool","nodeType":"ElementaryTypeName","src":"4978:4:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4977:6:30"},"scope":5736,"src":"4919:150:30","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5689,"nodeType":"Block","src":"5144:51:30","statements":[{"expression":{"arguments":[{"id":5686,"name":"_user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5679,"src":"5182:5:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":5684,"name":"profiles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5340,"src":"5161:8:30","typeDescriptions":{"typeIdentifier":"t_contract$_Profiles_$6234","typeString":"contract Profiles"}},"id":5685,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getMultiSig","nodeType":"MemberAccess","referencedDeclaration":6233,"src":"5161:20:30","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_bytes32_$","typeString":"function (address) view external returns (bytes32)"}},"id":5687,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5161:27:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":5683,"id":5688,"nodeType":"Return","src":"5154:34:30"}]},"id":5690,"implemented":true,"kind":"function","modifiers":[],"name":"_getMultiSig","nameLocation":"5084:12:30","nodeType":"FunctionDefinition","parameters":{"id":5680,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5679,"mutability":"mutable","name":"_user","nameLocation":"5105:5:30","nodeType":"VariableDeclaration","scope":5690,"src":"5097:13:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5678,"name":"address","nodeType":"ElementaryTypeName","src":"5097:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5096:15:30"},"returnParameters":{"id":5683,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5682,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5690,"src":"5135:7:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5681,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5135:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5134:9:30"},"scope":5736,"src":"5075:120:30","stateMutability":"view","virtual":false,"visibility":"internal"},{"baseFunctions":[1547,1905],"body":{"id":5712,"nodeType":"Block","src":"5407:61:30","statements":[{"expression":{"arguments":[{"id":5707,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5692,"src":"5444:4:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5708,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5694,"src":"5450:2:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5709,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5696,"src":"5454:6:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5704,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"5417:5:30","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_PKDR_$5736_$","typeString":"type(contract super PKDR)"}},"id":5706,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"_beforeTokenTransfer","nodeType":"MemberAccess","referencedDeclaration":1905,"src":"5417:26:30","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":5710,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5417:44:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5711,"nodeType":"ExpressionStatement","src":"5417:44:30"}]},"id":5713,"implemented":true,"kind":"function","modifiers":[{"id":5702,"kind":"modifierInvocation","modifierName":{"id":5701,"name":"whenNotPaused","nodeType":"IdentifierPath","referencedDeclaration":874,"src":"5389:13:30"},"nodeType":"ModifierInvocation","src":"5389:13:30"}],"name":"_beforeTokenTransfer","nameLocation":"5210:20:30","nodeType":"FunctionDefinition","overrides":{"id":5700,"nodeType":"OverrideSpecifier","overrides":[{"id":5698,"name":"ERC20Upgradeable","nodeType":"IdentifierPath","referencedDeclaration":1564,"src":"5337:16:30"},{"id":5699,"name":"ERC20SnapshotUpgradeable","nodeType":"IdentifierPath","referencedDeclaration":2054,"src":"5355:24:30"}],"src":"5328:52:30"},"parameters":{"id":5697,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5692,"mutability":"mutable","name":"from","nameLocation":"5248:4:30","nodeType":"VariableDeclaration","scope":5713,"src":"5240:12:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5691,"name":"address","nodeType":"ElementaryTypeName","src":"5240:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5694,"mutability":"mutable","name":"to","nameLocation":"5270:2:30","nodeType":"VariableDeclaration","scope":5713,"src":"5262:10:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5693,"name":"address","nodeType":"ElementaryTypeName","src":"5262:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5696,"mutability":"mutable","name":"amount","nameLocation":"5290:6:30","nodeType":"VariableDeclaration","scope":5713,"src":"5282:14:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5695,"name":"uint256","nodeType":"ElementaryTypeName","src":"5282:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5230:72:30"},"returnParameters":{"id":5703,"nodeType":"ParameterList","parameters":[],"src":"5407:0:30"},"scope":5736,"src":"5201:267:30","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[819],"body":{"id":5721,"nodeType":"Block","src":"5570:2:30","statements":[]},"id":5722,"implemented":true,"kind":"function","modifiers":[{"id":5719,"kind":"modifierInvocation","modifierName":{"id":5718,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":45,"src":"5560:9:30"},"nodeType":"ModifierInvocation","src":"5560:9:30"}],"name":"_authorizeUpgrade","nameLocation":"5483:17:30","nodeType":"FunctionDefinition","overrides":{"id":5717,"nodeType":"OverrideSpecifier","overrides":[],"src":"5551:8:30"},"parameters":{"id":5716,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5715,"mutability":"mutable","name":"newImplementation","nameLocation":"5518:17:30","nodeType":"VariableDeclaration","scope":5722,"src":"5510:25:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5714,"name":"address","nodeType":"ElementaryTypeName","src":"5510:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5500:41:30"},"returnParameters":{"id":5720,"nodeType":"ParameterList","parameters":[],"src":"5570:0:30"},"scope":5736,"src":"5474:98:30","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5734,"nodeType":"Block","src":"5686:41:30","statements":[{"expression":{"arguments":[{"id":5731,"name":"profiles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5340,"src":"5711:8:30","typeDescriptions":{"typeIdentifier":"t_contract$_Profiles_$6234","typeString":"contract Profiles"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Profiles_$6234","typeString":"contract Profiles"}],"id":5730,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5703:7:30","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5729,"name":"address","nodeType":"ElementaryTypeName","src":"5703:7:30","typeDescriptions":{}}},"id":5732,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5703:17:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":5728,"id":5733,"nodeType":"Return","src":"5696:24:30"}]},"functionSelector":"345a903f","id":5735,"implemented":true,"kind":"function","modifiers":[{"id":5725,"kind":"modifierInvocation","modifierName":{"id":5724,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":45,"src":"5658:9:30"},"nodeType":"ModifierInvocation","src":"5658:9:30"}],"name":"getProfileAddress","nameLocation":"5624:17:30","nodeType":"FunctionDefinition","parameters":{"id":5723,"nodeType":"ParameterList","parameters":[],"src":"5641:2:30"},"returnParameters":{"id":5728,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5727,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5735,"src":"5677:7:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5726,"name":"address","nodeType":"ElementaryTypeName","src":"5677:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5676:9:30"},"scope":5736,"src":"5615:112:30","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":5737,"src":"971:4758:30","usedErrors":[5344,5348]}],"src":"32:5698:30"},"id":30},"contracts/Profiles.sol":{"ast":{"absolutePath":"contracts/Profiles.sol","exportedSymbols":{"Address":[5230],"AddressUpgradeable":[2590],"ContextUpgradeable":[2788],"ERC1967Proxy":[4520],"ERC1967Upgrade":[4838],"ERC1967UpgradeUpgradeable":[510],"IBeacon":[4900],"IBeaconUpgradeable":[520],"IERC1822Proxiable":[4483],"IERC1822ProxiableUpgradeable":[141],"IProfiles":[6289],"Initializable":[689],"OwnableUpgradeable":[131],"Profiles":[6234],"Proxy":[4890],"StorageSlot":[5290],"StorageSlotUpgradeable":[2922],"UUPSUpgradeable":[825]},"id":6235,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5738,"literals":["solidity","^","0.8",".7"],"nodeType":"PragmaDirective","src":"33:23:31"},{"absolutePath":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","id":5739,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6235,"sourceUnit":132,"src":"58:75:31","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","id":5740,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6235,"sourceUnit":690,"src":"134:75:31","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol","id":5741,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6235,"sourceUnit":826,"src":"210:77:31","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol","file":"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol","id":5742,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6235,"sourceUnit":4521,"src":"288:64:31","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/interfaces/IProfiles.sol","file":"./interfaces/IProfiles.sol","id":5743,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6235,"sourceUnit":6290,"src":"353:36:31","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":5744,"name":"IProfiles","nodeType":"IdentifierPath","referencedDeclaration":6289,"src":"694:9:31"},"id":5745,"nodeType":"InheritanceSpecifier","src":"694:9:31"},{"baseName":{"id":5746,"name":"Initializable","nodeType":"IdentifierPath","referencedDeclaration":689,"src":"709:13:31"},"id":5747,"nodeType":"InheritanceSpecifier","src":"709:13:31"},{"baseName":{"id":5748,"name":"OwnableUpgradeable","nodeType":"IdentifierPath","referencedDeclaration":131,"src":"728:18:31"},"id":5749,"nodeType":"InheritanceSpecifier","src":"728:18:31"},{"baseName":{"id":5750,"name":"UUPSUpgradeable","nodeType":"IdentifierPath","referencedDeclaration":825,"src":"752:15:31"},"id":5751,"nodeType":"InheritanceSpecifier","src":"752:15:31"}],"canonicalName":"Profiles","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":6234,"linearizedBaseContracts":[6234,825,510,141,131,2788,689,6289],"name":"Profiles","nameLocation":"678:8:31","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":5754,"mutability":"mutable","name":"_contractValue","nameLocation":"868:14:31","nodeType":"VariableDeclaration","scope":6234,"src":"852:34:31","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5752,"name":"uint256","nodeType":"ElementaryTypeName","src":"852:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30","id":5753,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"885:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"visibility":"private"},{"constant":false,"id":5756,"mutability":"mutable","name":"_iPkdrOrgAddresses","nameLocation":"908:18:31","nodeType":"VariableDeclaration","scope":6234,"src":"892:34:31","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5755,"name":"address","nodeType":"ElementaryTypeName","src":"892:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"constant":false,"id":5759,"mutability":"mutable","name":"_userAddresses","nameLocation":"950:14:31","nodeType":"VariableDeclaration","scope":6234,"src":"932:32:31","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[]"},"typeName":{"baseType":{"id":5757,"name":"address","nodeType":"ElementaryTypeName","src":"932:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5758,"nodeType":"ArrayTypeName","src":"932:9:31","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"private"},{"constant":false,"id":5767,"mutability":"immutable","name":"_multiSig","nameLocation":"996:9:31","nodeType":"VariableDeclaration","scope":6234,"src":"970:85:31","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5760,"name":"bytes32","nodeType":"ElementaryTypeName","src":"970:7:31","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"arguments":[{"hexValue":"415050524f564544","id":5764,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1043:10:31","typeDescriptions":{"typeIdentifier":"t_stringliteral_e321069d1ac41cdfb1421ffa231cd2dc5e3a334703a998a5f84566b6fbf3f7bd","typeString":"literal_string \"APPROVED\""},"value":"APPROVED"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_e321069d1ac41cdfb1421ffa231cd2dc5e3a334703a998a5f84566b6fbf3f7bd","typeString":"literal_string \"APPROVED\""}],"expression":{"id":5762,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1026:3:31","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":5763,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"1026:16:31","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":5765,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1026:28:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":5761,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1016:9:31","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":5766,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1016:39:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"id":5775,"mutability":"immutable","name":"_revokeMultiSig","nameLocation":"1087:15:31","nodeType":"VariableDeclaration","scope":6234,"src":"1061:87:31","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5768,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1061:7:31","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"arguments":[{"hexValue":"4e554c4c","id":5772,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1140:6:31","typeDescriptions":{"typeIdentifier":"t_stringliteral_bb4e1f8434f661d4c52cce6e51dba6eb9c909f0b452eb22968b55416ecb18fb5","typeString":"literal_string \"NULL\""},"value":"NULL"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_bb4e1f8434f661d4c52cce6e51dba6eb9c909f0b452eb22968b55416ecb18fb5","typeString":"literal_string \"NULL\""}],"expression":{"id":5770,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1123:3:31","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":5771,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"1123:16:31","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":5773,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1123:24:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":5769,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1113:9:31","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":5774,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1113:35:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"id":5780,"mutability":"mutable","name":"users","nameLocation":"1232:5:31","nodeType":"VariableDeclaration","scope":6234,"src":"1199:38:31","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_User_$6247_storage_$","typeString":"mapping(address => struct IProfiles.User)"},"typeName":{"id":5779,"keyType":{"id":5776,"name":"address","nodeType":"ElementaryTypeName","src":"1207:7:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1199:24:31","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_User_$6247_storage_$","typeString":"mapping(address => struct IProfiles.User)"},"valueType":{"id":5778,"nodeType":"UserDefinedTypeName","pathNode":{"id":5777,"name":"User","nodeType":"IdentifierPath","referencedDeclaration":6247,"src":"1218:4:31"},"referencedDeclaration":6247,"src":"1218:4:31","typeDescriptions":{"typeIdentifier":"t_struct$_User_$6247_storage_ptr","typeString":"struct IProfiles.User"}}},"visibility":"private"},{"id":5782,"name":"USER_EXISTS_AND_VERIFIED","nameLocation":"1263:24:31","nodeType":"ErrorDefinition","parameters":{"id":5781,"nodeType":"ParameterList","parameters":[],"src":"1287:2:31"},"src":"1257:33:31"},{"id":5784,"name":"USER_NOT_EXISTS","nameLocation":"1301:15:31","nodeType":"ErrorDefinition","parameters":{"id":5783,"nodeType":"ParameterList","parameters":[],"src":"1316:2:31"},"src":"1295:24:31"},{"id":5786,"name":"USER_STATUS_NOT_REVOKED","nameLocation":"1330:23:31","nodeType":"ErrorDefinition","parameters":{"id":5785,"nodeType":"ParameterList","parameters":[],"src":"1353:2:31"},"src":"1324:32:31"},{"id":5788,"name":"USER_STATUS_ALREADY_REVOKED","nameLocation":"1367:27:31","nodeType":"ErrorDefinition","parameters":{"id":5787,"nodeType":"ParameterList","parameters":[],"src":"1394:2:31"},"src":"1361:36:31"},{"anonymous":false,"id":5792,"name":"PROFILE_CREATED","nameLocation":"1423:15:31","nodeType":"EventDefinition","parameters":{"id":5791,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5790,"indexed":true,"mutability":"mutable","name":"user","nameLocation":"1455:4:31","nodeType":"VariableDeclaration","scope":5792,"src":"1439:20:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5789,"name":"address","nodeType":"ElementaryTypeName","src":"1439:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1438:22:31"},"src":"1417:44:31"},{"anonymous":false,"id":5796,"name":"PROFILE_REVOKED","nameLocation":"1472:15:31","nodeType":"EventDefinition","parameters":{"id":5795,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5794,"indexed":false,"mutability":"mutable","name":"user","nameLocation":"1496:4:31","nodeType":"VariableDeclaration","scope":5796,"src":"1488:12:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5793,"name":"address","nodeType":"ElementaryTypeName","src":"1488:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1487:14:31"},"src":"1466:36:31"},{"anonymous":false,"id":5800,"name":"PROFILE_RETAINED","nameLocation":"1513:16:31","nodeType":"EventDefinition","parameters":{"id":5799,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5798,"indexed":false,"mutability":"mutable","name":"user","nameLocation":"1538:4:31","nodeType":"VariableDeclaration","scope":5800,"src":"1530:12:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5797,"name":"address","nodeType":"ElementaryTypeName","src":"1530:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1529:14:31"},"src":"1507:37:31"},{"anonymous":false,"id":5804,"name":"AMOUNT_RECEIVED_THROUGH_FALLBACK","nameLocation":"1555:32:31","nodeType":"EventDefinition","parameters":{"id":5803,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5802,"indexed":false,"mutability":"mutable","name":"fallbackAmount","nameLocation":"1596:14:31","nodeType":"VariableDeclaration","scope":5804,"src":"1588:22:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5801,"name":"uint256","nodeType":"ElementaryTypeName","src":"1588:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1587:24:31"},"src":"1549:63:31"},{"anonymous":false,"id":5808,"name":"AMOUNT_RECEIVED_THROUGH_RECEIVE","nameLocation":"1623:31:31","nodeType":"EventDefinition","parameters":{"id":5807,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5806,"indexed":false,"mutability":"mutable","name":"receiveAmount","nameLocation":"1663:13:31","nodeType":"VariableDeclaration","scope":5808,"src":"1655:21:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5805,"name":"uint256","nodeType":"ElementaryTypeName","src":"1655:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1654:23:31"},"src":"1617:61:31"},{"anonymous":false,"id":5812,"name":"MULTISIG_RETAINED","nameLocation":"1689:17:31","nodeType":"EventDefinition","parameters":{"id":5811,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5810,"indexed":false,"mutability":"mutable","name":"user","nameLocation":"1715:4:31","nodeType":"VariableDeclaration","scope":5812,"src":"1707:12:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5809,"name":"address","nodeType":"ElementaryTypeName","src":"1707:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1706:14:31"},"src":"1683:38:31"},{"anonymous":false,"id":5816,"name":"MULTISIG_REVOKED","nameLocation":"1732:16:31","nodeType":"EventDefinition","parameters":{"id":5815,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5814,"indexed":false,"mutability":"mutable","name":"user","nameLocation":"1757:4:31","nodeType":"VariableDeclaration","scope":5816,"src":"1749:12:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5813,"name":"address","nodeType":"ElementaryTypeName","src":"1749:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1748:14:31"},"src":"1726:37:31"},{"anonymous":false,"id":5820,"name":"ZK_VERIFICATION_REVOKED","nameLocation":"1774:23:31","nodeType":"EventDefinition","parameters":{"id":5819,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5818,"indexed":false,"mutability":"mutable","name":"_user","nameLocation":"1806:5:31","nodeType":"VariableDeclaration","scope":5820,"src":"1798:13:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5817,"name":"address","nodeType":"ElementaryTypeName","src":"1798:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1797:15:31"},"src":"1768:45:31"},{"anonymous":false,"id":5824,"name":"ZK_VERIFICATION_RETAINED","nameLocation":"1824:24:31","nodeType":"EventDefinition","parameters":{"id":5823,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5822,"indexed":false,"mutability":"mutable","name":"_user","nameLocation":"1857:5:31","nodeType":"VariableDeclaration","scope":5824,"src":"1849:13:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5821,"name":"address","nodeType":"ElementaryTypeName","src":"1849:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1848:15:31"},"src":"1818:46:31"},{"body":{"id":5838,"nodeType":"Block","src":"1966:124:31","statements":[{"condition":{"expression":{"baseExpression":{"id":5828,"name":"users","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5780,"src":"1980:5:31","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_User_$6247_storage_$","typeString":"mapping(address => struct IProfiles.User storage ref)"}},"id":5830,"indexExpression":{"id":5829,"name":"_user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5826,"src":"1986:5:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1980:12:31","typeDescriptions":{"typeIdentifier":"t_struct$_User_$6247_storage","typeString":"struct IProfiles.User storage ref"}},"id":5831,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"verificationStatus_I","nodeType":"MemberAccess","referencedDeclaration":6242,"src":"1980:33:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5836,"nodeType":"IfStatement","src":"1976:97:31","trueBody":{"id":5835,"nodeType":"Block","src":"2015:58:31","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5832,"name":"USER_EXISTS_AND_VERIFIED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5782,"src":"2036:24:31","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":5833,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2036:26:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5834,"nodeType":"RevertStatement","src":"2029:33:31"}]}},{"id":5837,"nodeType":"PlaceholderStatement","src":"2082:1:31"}]},"id":5839,"name":"userExists","nameLocation":"1940:10:31","nodeType":"ModifierDefinition","parameters":{"id":5827,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5826,"mutability":"mutable","name":"_user","nameLocation":"1959:5:31","nodeType":"VariableDeclaration","scope":5839,"src":"1951:13:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5825,"name":"address","nodeType":"ElementaryTypeName","src":"1951:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1950:15:31"},"src":"1931:159:31","virtual":false,"visibility":"internal"},{"body":{"id":5854,"nodeType":"Block","src":"2134:116:31","statements":[{"condition":{"id":5847,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2148:34:31","subExpression":{"expression":{"baseExpression":{"id":5843,"name":"users","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5780,"src":"2149:5:31","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_User_$6247_storage_$","typeString":"mapping(address => struct IProfiles.User storage ref)"}},"id":5845,"indexExpression":{"id":5844,"name":"_user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5841,"src":"2155:5:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2149:12:31","typeDescriptions":{"typeIdentifier":"t_struct$_User_$6247_storage","typeString":"struct IProfiles.User storage ref"}},"id":5846,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"verificationStatus_I","nodeType":"MemberAccess","referencedDeclaration":6242,"src":"2149:33:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5852,"nodeType":"IfStatement","src":"2144:89:31","trueBody":{"id":5851,"nodeType":"Block","src":"2184:49:31","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5848,"name":"USER_NOT_EXISTS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5784,"src":"2205:15:31","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":5849,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2205:17:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5850,"nodeType":"RevertStatement","src":"2198:24:31"}]}},{"id":5853,"nodeType":"PlaceholderStatement","src":"2242:1:31"}]},"id":5855,"name":"userNotExists","nameLocation":"2105:13:31","nodeType":"ModifierDefinition","parameters":{"id":5842,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5841,"mutability":"mutable","name":"_user","nameLocation":"2127:5:31","nodeType":"VariableDeclaration","scope":5855,"src":"2119:13:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5840,"name":"address","nodeType":"ElementaryTypeName","src":"2119:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2118:15:31"},"src":"2096:154:31","virtual":false,"visibility":"internal"},{"body":{"id":5870,"nodeType":"Block","src":"2299:119:31","statements":[{"condition":{"id":5863,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2313:29:31","subExpression":{"expression":{"baseExpression":{"id":5859,"name":"users","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5780,"src":"2314:5:31","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_User_$6247_storage_$","typeString":"mapping(address => struct IProfiles.User storage ref)"}},"id":5861,"indexExpression":{"id":5860,"name":"_user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5857,"src":"2320:5:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2314:12:31","typeDescriptions":{"typeIdentifier":"t_struct$_User_$6247_storage","typeString":"struct IProfiles.User storage ref"}},"id":5862,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"isStatusRevoked","nodeType":"MemberAccess","referencedDeclaration":6246,"src":"2314:28:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5868,"nodeType":"IfStatement","src":"2309:92:31","trueBody":{"id":5867,"nodeType":"Block","src":"2344:57:31","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5864,"name":"USER_STATUS_NOT_REVOKED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5786,"src":"2365:23:31","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":5865,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2365:25:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5866,"nodeType":"RevertStatement","src":"2358:32:31"}]}},{"id":5869,"nodeType":"PlaceholderStatement","src":"2410:1:31"}]},"id":5871,"name":"isStatusNotRevoked","nameLocation":"2265:18:31","nodeType":"ModifierDefinition","parameters":{"id":5858,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5857,"mutability":"mutable","name":"_user","nameLocation":"2292:5:31","nodeType":"VariableDeclaration","scope":5871,"src":"2284:13:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5856,"name":"address","nodeType":"ElementaryTypeName","src":"2284:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2283:15:31"},"src":"2256:162:31","virtual":false,"visibility":"internal"},{"body":{"id":5885,"nodeType":"Block","src":"2464:122:31","statements":[{"condition":{"expression":{"baseExpression":{"id":5875,"name":"users","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5780,"src":"2478:5:31","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_User_$6247_storage_$","typeString":"mapping(address => struct IProfiles.User storage ref)"}},"id":5877,"indexExpression":{"id":5876,"name":"_user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5873,"src":"2484:5:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2478:12:31","typeDescriptions":{"typeIdentifier":"t_struct$_User_$6247_storage","typeString":"struct IProfiles.User storage ref"}},"id":5878,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"isStatusRevoked","nodeType":"MemberAccess","referencedDeclaration":6246,"src":"2478:28:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5883,"nodeType":"IfStatement","src":"2474:95:31","trueBody":{"id":5882,"nodeType":"Block","src":"2508:61:31","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5879,"name":"USER_STATUS_ALREADY_REVOKED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5788,"src":"2529:27:31","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":5880,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2529:29:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5881,"nodeType":"RevertStatement","src":"2522:36:31"}]}},{"id":5884,"nodeType":"PlaceholderStatement","src":"2578:1:31"}]},"id":5886,"name":"isStatusRevoked","nameLocation":"2433:15:31","nodeType":"ModifierDefinition","parameters":{"id":5874,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5873,"mutability":"mutable","name":"_user","nameLocation":"2457:5:31","nodeType":"VariableDeclaration","scope":5886,"src":"2449:13:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5872,"name":"address","nodeType":"ElementaryTypeName","src":"2449:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2448:15:31"},"src":"2424:162:31","virtual":false,"visibility":"internal"},{"body":{"id":5899,"nodeType":"Block","src":"2722:101:31","statements":[{"expression":{"id":5892,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5889,"name":"_contractValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5754,"src":"2732:14:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"expression":{"id":5890,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2750:3:31","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","src":"2750:9:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2732:27:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5893,"nodeType":"ExpressionStatement","src":"2732:27:31"},{"eventCall":{"arguments":[{"expression":{"id":5895,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2806:3:31","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5896,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","src":"2806:9:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5894,"name":"AMOUNT_RECEIVED_THROUGH_RECEIVE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5808,"src":"2774:31:31","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":5897,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2774:42:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5898,"nodeType":"EmitStatement","src":"2769:47:31"}]},"id":5900,"implemented":true,"kind":"receive","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":5887,"nodeType":"ParameterList","parameters":[],"src":"2702:2:31"},"returnParameters":{"id":5888,"nodeType":"ParameterList","parameters":[],"src":"2722:0:31"},"scope":6234,"src":"2695:128:31","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":5913,"nodeType":"Block","src":"2873:102:31","statements":[{"expression":{"id":5906,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5903,"name":"_contractValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5754,"src":"2883:14:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"expression":{"id":5904,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2901:3:31","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5905,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","src":"2901:9:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2883:27:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5907,"nodeType":"ExpressionStatement","src":"2883:27:31"},{"eventCall":{"arguments":[{"expression":{"id":5909,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2958:3:31","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5910,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","src":"2958:9:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5908,"name":"AMOUNT_RECEIVED_THROUGH_FALLBACK","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5804,"src":"2925:32:31","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":5911,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2925:43:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5912,"nodeType":"EmitStatement","src":"2920:48:31"}]},"id":5914,"implemented":true,"kind":"fallback","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":5901,"nodeType":"ParameterList","parameters":[],"src":"2853:2:31"},"returnParameters":{"id":5902,"nodeType":"ParameterList","parameters":[],"src":"2873:0:31"},"scope":6234,"src":"2845:130:31","stateMutability":"payable","virtual":false,"visibility":"external"},{"baseFunctions":[6252],"body":{"id":5946,"nodeType":"Block","src":"3142:147:31","statements":[{"expression":{"id":5934,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5924,"name":"users","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5780,"src":"3152:5:31","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_User_$6247_storage_$","typeString":"mapping(address => struct IProfiles.User storage ref)"}},"id":5926,"indexExpression":{"id":5925,"name":"_user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5916,"src":"3158:5:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3152:12:31","typeDescriptions":{"typeIdentifier":"t_struct$_User_$6247_storage","typeString":"struct IProfiles.User storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5928,"name":"_user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5916,"src":"3172:5:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5929,"name":"_multiSig","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5767,"src":"3179:9:31","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"hexValue":"74727565","id":5930,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3190:4:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"hexValue":"66616c7365","id":5931,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3196:5:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"66616c7365","id":5932,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3203:5:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":5927,"name":"User","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6247,"src":"3167:4:31","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_User_$6247_storage_ptr_$","typeString":"type(struct IProfiles.User storage pointer)"}},"id":5933,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3167:42:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_User_$6247_memory_ptr","typeString":"struct IProfiles.User memory"}},"src":"3152:57:31","typeDescriptions":{"typeIdentifier":"t_struct$_User_$6247_storage","typeString":"struct IProfiles.User storage ref"}},"id":5935,"nodeType":"ExpressionStatement","src":"3152:57:31"},{"expression":{"arguments":[{"id":5939,"name":"_user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5916,"src":"3239:5:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":5936,"name":"_userAddresses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5759,"src":"3219:14:31","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":5938,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"push","nodeType":"MemberAccess","src":"3219:19:31","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_address_$dyn_storage_ptr_$_t_address_$returns$__$bound_to$_t_array$_t_address_$dyn_storage_ptr_$","typeString":"function (address[] storage pointer,address)"}},"id":5940,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3219:26:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5941,"nodeType":"ExpressionStatement","src":"3219:26:31"},{"eventCall":{"arguments":[{"id":5943,"name":"_user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5916,"src":"3276:5:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5942,"name":"PROFILE_CREATED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5792,"src":"3260:15:31","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":5944,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3260:22:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5945,"nodeType":"EmitStatement","src":"3255:27:31"}]},"functionSelector":"f536c520","id":5947,"implemented":true,"kind":"function","modifiers":[{"id":5919,"kind":"modifierInvocation","modifierName":{"id":5918,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":45,"src":"3114:9:31"},"nodeType":"ModifierInvocation","src":"3114:9:31"},{"arguments":[{"id":5921,"name":"_user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5916,"src":"3135:5:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":5922,"kind":"modifierInvocation","modifierName":{"id":5920,"name":"userExists","nodeType":"IdentifierPath","referencedDeclaration":5839,"src":"3124:10:31"},"nodeType":"ModifierInvocation","src":"3124:17:31"}],"name":"createProfile","nameLocation":"3076:13:31","nodeType":"FunctionDefinition","parameters":{"id":5917,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5916,"mutability":"mutable","name":"_user","nameLocation":"3098:5:31","nodeType":"VariableDeclaration","scope":5947,"src":"3090:13:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5915,"name":"address","nodeType":"ElementaryTypeName","src":"3090:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3089:15:31"},"returnParameters":{"id":5923,"nodeType":"ParameterList","parameters":[],"src":"3142:0:31"},"scope":6234,"src":"3067:222:31","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[6257],"body":{"id":5971,"nodeType":"Block","src":"3455:92:31","statements":[{"expression":{"id":5965,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":5960,"name":"users","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5780,"src":"3465:5:31","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_User_$6247_storage_$","typeString":"mapping(address => struct IProfiles.User storage ref)"}},"id":5962,"indexExpression":{"id":5961,"name":"_user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5949,"src":"3471:5:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3465:12:31","typeDescriptions":{"typeIdentifier":"t_struct$_User_$6247_storage","typeString":"struct IProfiles.User storage ref"}},"id":5963,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"isStatusRevoked","nodeType":"MemberAccess","referencedDeclaration":6246,"src":"3465:28:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":5964,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3496:5:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"3465:36:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5966,"nodeType":"ExpressionStatement","src":"3465:36:31"},{"eventCall":{"arguments":[{"id":5968,"name":"_user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5949,"src":"3534:5:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5967,"name":"PROFILE_RETAINED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5800,"src":"3517:16:31","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":5969,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3517:23:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5970,"nodeType":"EmitStatement","src":"3512:28:31"}]},"functionSelector":"391a5bf0","id":5972,"implemented":true,"kind":"function","modifiers":[{"id":5952,"kind":"modifierInvocation","modifierName":{"id":5951,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":45,"src":"3398:9:31"},"nodeType":"ModifierInvocation","src":"3398:9:31"},{"arguments":[{"id":5954,"name":"_user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5949,"src":"3422:5:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":5955,"kind":"modifierInvocation","modifierName":{"id":5953,"name":"userNotExists","nodeType":"IdentifierPath","referencedDeclaration":5855,"src":"3408:13:31"},"nodeType":"ModifierInvocation","src":"3408:20:31"},{"arguments":[{"id":5957,"name":"_user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5949,"src":"3448:5:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":5958,"kind":"modifierInvocation","modifierName":{"id":5956,"name":"isStatusNotRevoked","nodeType":"IdentifierPath","referencedDeclaration":5871,"src":"3429:18:31"},"nodeType":"ModifierInvocation","src":"3429:25:31"}],"name":"retainVerification","nameLocation":"3341:18:31","nodeType":"FunctionDefinition","parameters":{"id":5950,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5949,"mutability":"mutable","name":"_user","nameLocation":"3377:5:31","nodeType":"VariableDeclaration","scope":5972,"src":"3369:13:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5948,"name":"address","nodeType":"ElementaryTypeName","src":"3369:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3359:29:31"},"returnParameters":{"id":5959,"nodeType":"ParameterList","parameters":[],"src":"3455:0:31"},"scope":6234,"src":"3332:215:31","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[6262],"body":{"id":5996,"nodeType":"Block","src":"3721:90:31","statements":[{"expression":{"id":5990,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":5985,"name":"users","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5780,"src":"3731:5:31","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_User_$6247_storage_$","typeString":"mapping(address => struct IProfiles.User storage ref)"}},"id":5987,"indexExpression":{"id":5986,"name":"_user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5974,"src":"3737:5:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3731:12:31","typeDescriptions":{"typeIdentifier":"t_struct$_User_$6247_storage","typeString":"struct IProfiles.User storage ref"}},"id":5988,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"isStatusRevoked","nodeType":"MemberAccess","referencedDeclaration":6246,"src":"3731:28:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":5989,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3762:4:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"3731:35:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5991,"nodeType":"ExpressionStatement","src":"3731:35:31"},{"eventCall":{"arguments":[{"id":5993,"name":"_user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5974,"src":"3798:5:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5992,"name":"PROFILE_REVOKED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5796,"src":"3782:15:31","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":5994,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3782:22:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5995,"nodeType":"EmitStatement","src":"3777:27:31"}]},"functionSelector":"87d55ff3","id":5997,"implemented":true,"kind":"function","modifiers":[{"id":5977,"kind":"modifierInvocation","modifierName":{"id":5976,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":45,"src":"3667:9:31"},"nodeType":"ModifierInvocation","src":"3667:9:31"},{"arguments":[{"id":5979,"name":"_user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5974,"src":"3691:5:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":5980,"kind":"modifierInvocation","modifierName":{"id":5978,"name":"userNotExists","nodeType":"IdentifierPath","referencedDeclaration":5855,"src":"3677:13:31"},"nodeType":"ModifierInvocation","src":"3677:20:31"},{"arguments":[{"id":5982,"name":"_user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5974,"src":"3714:5:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":5983,"kind":"modifierInvocation","modifierName":{"id":5981,"name":"isStatusRevoked","nodeType":"IdentifierPath","referencedDeclaration":5886,"src":"3698:15:31"},"nodeType":"ModifierInvocation","src":"3698:22:31"}],"name":"revokeVerifiedUser","nameLocation":"3610:18:31","nodeType":"FunctionDefinition","parameters":{"id":5975,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5974,"mutability":"mutable","name":"_user","nameLocation":"3646:5:31","nodeType":"VariableDeclaration","scope":5997,"src":"3638:13:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5973,"name":"address","nodeType":"ElementaryTypeName","src":"3638:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3628:29:31"},"returnParameters":{"id":5984,"nodeType":"ParameterList","parameters":[],"src":"3721:0:31"},"scope":6234,"src":"3601:210:31","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":6024,"nodeType":"Block","src":"3916:180:31","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":6013,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":6008,"name":"users","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5780,"src":"3947:5:31","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_User_$6247_storage_$","typeString":"mapping(address => struct IProfiles.User storage ref)"}},"id":6010,"indexExpression":{"id":6009,"name":"_user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5999,"src":"3953:5:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3947:12:31","typeDescriptions":{"typeIdentifier":"t_struct$_User_$6247_storage","typeString":"struct IProfiles.User storage ref"}},"id":6011,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"multiSig","nodeType":"MemberAccess","referencedDeclaration":6240,"src":"3947:21:31","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":6012,"name":"_revokeMultiSig","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5775,"src":"3972:15:31","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3947:40:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d554c54495f5349474e415455524520414c52454144592052455441494e454420","id":6014,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4001:35:31","typeDescriptions":{"typeIdentifier":"t_stringliteral_2ec99e6d611129d5d446401a53002d56de11cd1961b140eb64e5ce86a4c14361","typeString":"literal_string \"MULTI_SIGNATURE ALREADY RETAINED \""},"value":"MULTI_SIGNATURE ALREADY RETAINED "}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2ec99e6d611129d5d446401a53002d56de11cd1961b140eb64e5ce86a4c14361","typeString":"literal_string \"MULTI_SIGNATURE ALREADY RETAINED \""}],"id":6007,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3926:7:31","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6015,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3926:120:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6016,"nodeType":"ExpressionStatement","src":"3926:120:31"},{"expression":{"id":6022,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":6017,"name":"users","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5780,"src":"4056:5:31","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_User_$6247_storage_$","typeString":"mapping(address => struct IProfiles.User storage ref)"}},"id":6019,"indexExpression":{"id":6018,"name":"_user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5999,"src":"4062:5:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4056:12:31","typeDescriptions":{"typeIdentifier":"t_struct$_User_$6247_storage","typeString":"struct IProfiles.User storage ref"}},"id":6020,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"multiSig","nodeType":"MemberAccess","referencedDeclaration":6240,"src":"4056:21:31","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6021,"name":"_multiSig","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5767,"src":"4080:9:31","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4056:33:31","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":6023,"nodeType":"ExpressionStatement","src":"4056:33:31"}]},"functionSelector":"cde55353","id":6025,"implemented":true,"kind":"function","modifiers":[{"id":6002,"kind":"modifierInvocation","modifierName":{"id":6001,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":45,"src":"3885:9:31"},"nodeType":"ModifierInvocation","src":"3885:9:31"},{"arguments":[{"id":6004,"name":"_user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5999,"src":"3909:5:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":6005,"kind":"modifierInvocation","modifierName":{"id":6003,"name":"userNotExists","nodeType":"IdentifierPath","referencedDeclaration":5855,"src":"3895:13:31"},"nodeType":"ModifierInvocation","src":"3895:20:31"}],"name":"retainMultiSignature","nameLocation":"3826:20:31","nodeType":"FunctionDefinition","parameters":{"id":6000,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5999,"mutability":"mutable","name":"_user","nameLocation":"3864:5:31","nodeType":"VariableDeclaration","scope":6025,"src":"3856:13:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5998,"name":"address","nodeType":"ElementaryTypeName","src":"3856:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3846:29:31"},"returnParameters":{"id":6006,"nodeType":"ParameterList","parameters":[],"src":"3916:0:31"},"scope":6234,"src":"3817:279:31","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":6056,"nodeType":"Block","src":"4201:217:31","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":6041,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":6036,"name":"users","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5780,"src":"4232:5:31","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_User_$6247_storage_$","typeString":"mapping(address => struct IProfiles.User storage ref)"}},"id":6038,"indexExpression":{"id":6037,"name":"_user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6027,"src":"4238:5:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4232:12:31","typeDescriptions":{"typeIdentifier":"t_struct$_User_$6247_storage","typeString":"struct IProfiles.User storage ref"}},"id":6039,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"multiSig","nodeType":"MemberAccess","referencedDeclaration":6240,"src":"4232:21:31","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":6040,"name":"_multiSig","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5767,"src":"4257:9:31","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4232:34:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d554c54495f5349474e415455524520414c5245414459205245564f4b454420","id":6042,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4280:34:31","typeDescriptions":{"typeIdentifier":"t_stringliteral_dc07914abe0b3d10797b2cb887fa8b14cfc1681b47ac3540e1f0ebac6c5c8771","typeString":"literal_string \"MULTI_SIGNATURE ALREADY REVOKED \""},"value":"MULTI_SIGNATURE ALREADY REVOKED "}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_dc07914abe0b3d10797b2cb887fa8b14cfc1681b47ac3540e1f0ebac6c5c8771","typeString":"literal_string \"MULTI_SIGNATURE ALREADY REVOKED \""}],"id":6035,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4211:7:31","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6043,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4211:113:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6044,"nodeType":"ExpressionStatement","src":"4211:113:31"},{"expression":{"id":6050,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":6045,"name":"users","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5780,"src":"4334:5:31","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_User_$6247_storage_$","typeString":"mapping(address => struct IProfiles.User storage ref)"}},"id":6047,"indexExpression":{"id":6046,"name":"_user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6027,"src":"4340:5:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4334:12:31","typeDescriptions":{"typeIdentifier":"t_struct$_User_$6247_storage","typeString":"struct IProfiles.User storage ref"}},"id":6048,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"multiSig","nodeType":"MemberAccess","referencedDeclaration":6240,"src":"4334:21:31","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6049,"name":"_revokeMultiSig","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5775,"src":"4358:15:31","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4334:39:31","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":6051,"nodeType":"ExpressionStatement","src":"4334:39:31"},{"eventCall":{"arguments":[{"id":6053,"name":"_user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6027,"src":"4405:5:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6052,"name":"MULTISIG_REVOKED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5816,"src":"4388:16:31","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":6054,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4388:23:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6055,"nodeType":"EmitStatement","src":"4383:28:31"}]},"functionSelector":"acfb7980","id":6057,"implemented":true,"kind":"function","modifiers":[{"id":6030,"kind":"modifierInvocation","modifierName":{"id":6029,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":45,"src":"4170:9:31"},"nodeType":"ModifierInvocation","src":"4170:9:31"},{"arguments":[{"id":6032,"name":"_user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6027,"src":"4194:5:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":6033,"kind":"modifierInvocation","modifierName":{"id":6031,"name":"userNotExists","nodeType":"IdentifierPath","referencedDeclaration":5855,"src":"4180:13:31"},"nodeType":"ModifierInvocation","src":"4180:20:31"}],"name":"revokeMultiSignature","nameLocation":"4111:20:31","nodeType":"FunctionDefinition","parameters":{"id":6028,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6027,"mutability":"mutable","name":"_user","nameLocation":"4149:5:31","nodeType":"VariableDeclaration","scope":6057,"src":"4141:13:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6026,"name":"address","nodeType":"ElementaryTypeName","src":"4141:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4131:29:31"},"returnParameters":{"id":6034,"nodeType":"ParameterList","parameters":[],"src":"4201:0:31"},"scope":6234,"src":"4102:316:31","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":6086,"nodeType":"Block","src":"4523:227:31","statements":[{"expression":{"arguments":[{"expression":{"baseExpression":{"id":6068,"name":"users","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5780,"src":"4554:5:31","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_User_$6247_storage_$","typeString":"mapping(address => struct IProfiles.User storage ref)"}},"id":6070,"indexExpression":{"id":6069,"name":"_user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6059,"src":"4560:5:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4554:12:31","typeDescriptions":{"typeIdentifier":"t_struct$_User_$6247_storage","typeString":"struct IProfiles.User storage ref"}},"id":6071,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"verificationStatus_II","nodeType":"MemberAccess","referencedDeclaration":6244,"src":"4554:34:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5a4b5f564552494649434154494f4e20414c5245414459205245564f4b454420","id":6072,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4602:34:31","typeDescriptions":{"typeIdentifier":"t_stringliteral_08d0c5f0cc66c73f518001e6f234dffe5541b83b4743ef2eec0db170576be85f","typeString":"literal_string \"ZK_VERIFICATION ALREADY REVOKED \""},"value":"ZK_VERIFICATION ALREADY REVOKED "}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_08d0c5f0cc66c73f518001e6f234dffe5541b83b4743ef2eec0db170576be85f","typeString":"literal_string \"ZK_VERIFICATION ALREADY REVOKED \""}],"id":6067,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4533:7:31","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6073,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4533:113:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6074,"nodeType":"ExpressionStatement","src":"4533:113:31"},{"expression":{"id":6080,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":6075,"name":"users","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5780,"src":"4656:5:31","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_User_$6247_storage_$","typeString":"mapping(address => struct IProfiles.User storage ref)"}},"id":6077,"indexExpression":{"id":6076,"name":"_user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6059,"src":"4662:5:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4656:12:31","typeDescriptions":{"typeIdentifier":"t_struct$_User_$6247_storage","typeString":"struct IProfiles.User storage ref"}},"id":6078,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"verificationStatus_II","nodeType":"MemberAccess","referencedDeclaration":6244,"src":"4656:34:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":6079,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4693:5:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"4656:42:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6081,"nodeType":"ExpressionStatement","src":"4656:42:31"},{"eventCall":{"arguments":[{"id":6083,"name":"_user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6059,"src":"4737:5:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6082,"name":"ZK_VERIFICATION_REVOKED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5820,"src":"4713:23:31","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":6084,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4713:30:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6085,"nodeType":"EmitStatement","src":"4708:35:31"}]},"functionSelector":"54ef5c52","id":6087,"implemented":true,"kind":"function","modifiers":[{"id":6062,"kind":"modifierInvocation","modifierName":{"id":6061,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":45,"src":"4492:9:31"},"nodeType":"ModifierInvocation","src":"4492:9:31"},{"arguments":[{"id":6064,"name":"_user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6059,"src":"4516:5:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":6065,"kind":"modifierInvocation","modifierName":{"id":6063,"name":"userNotExists","nodeType":"IdentifierPath","referencedDeclaration":5855,"src":"4502:13:31"},"nodeType":"ModifierInvocation","src":"4502:20:31"}],"name":"revokeZkVerification","nameLocation":"4433:20:31","nodeType":"FunctionDefinition","parameters":{"id":6060,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6059,"mutability":"mutable","name":"_user","nameLocation":"4471:5:31","nodeType":"VariableDeclaration","scope":6087,"src":"4463:13:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6058,"name":"address","nodeType":"ElementaryTypeName","src":"4463:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4453:29:31"},"returnParameters":{"id":6066,"nodeType":"ParameterList","parameters":[],"src":"4523:0:31"},"scope":6234,"src":"4424:326:31","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":6117,"nodeType":"Block","src":"4855:228:31","statements":[{"expression":{"arguments":[{"id":6102,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4886:35:31","subExpression":{"expression":{"baseExpression":{"id":6098,"name":"users","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5780,"src":"4887:5:31","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_User_$6247_storage_$","typeString":"mapping(address => struct IProfiles.User storage ref)"}},"id":6100,"indexExpression":{"id":6099,"name":"_user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6089,"src":"4893:5:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4887:12:31","typeDescriptions":{"typeIdentifier":"t_struct$_User_$6247_storage","typeString":"struct IProfiles.User storage ref"}},"id":6101,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"verificationStatus_II","nodeType":"MemberAccess","referencedDeclaration":6244,"src":"4887:34:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5a4b5f564552494649434154494f4e20414c52454144592052455441494e4544","id":6103,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4935:34:31","typeDescriptions":{"typeIdentifier":"t_stringliteral_6e8e6a900089259539cd5a4ffb1559532588f15e739713ca236a69dd15dad28d","typeString":"literal_string \"ZK_VERIFICATION ALREADY RETAINED\""},"value":"ZK_VERIFICATION ALREADY RETAINED"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6e8e6a900089259539cd5a4ffb1559532588f15e739713ca236a69dd15dad28d","typeString":"literal_string \"ZK_VERIFICATION ALREADY RETAINED\""}],"id":6097,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4865:7:31","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6104,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4865:114:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6105,"nodeType":"ExpressionStatement","src":"4865:114:31"},{"expression":{"id":6111,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":6106,"name":"users","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5780,"src":"4989:5:31","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_User_$6247_storage_$","typeString":"mapping(address => struct IProfiles.User storage ref)"}},"id":6108,"indexExpression":{"id":6107,"name":"_user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6089,"src":"4995:5:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4989:12:31","typeDescriptions":{"typeIdentifier":"t_struct$_User_$6247_storage","typeString":"struct IProfiles.User storage ref"}},"id":6109,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"verificationStatus_II","nodeType":"MemberAccess","referencedDeclaration":6244,"src":"4989:34:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":6110,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5026:4:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"4989:41:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6112,"nodeType":"ExpressionStatement","src":"4989:41:31"},{"eventCall":{"arguments":[{"id":6114,"name":"_user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6089,"src":"5070:5:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6113,"name":"ZK_VERIFICATION_RETAINED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5824,"src":"5045:24:31","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":6115,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5045:31:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6116,"nodeType":"EmitStatement","src":"5040:36:31"}]},"functionSelector":"b2b35eb4","id":6118,"implemented":true,"kind":"function","modifiers":[{"id":6092,"kind":"modifierInvocation","modifierName":{"id":6091,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":45,"src":"4824:9:31"},"nodeType":"ModifierInvocation","src":"4824:9:31"},{"arguments":[{"id":6094,"name":"_user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6089,"src":"4848:5:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":6095,"kind":"modifierInvocation","modifierName":{"id":6093,"name":"userNotExists","nodeType":"IdentifierPath","referencedDeclaration":5855,"src":"4834:13:31"},"nodeType":"ModifierInvocation","src":"4834:20:31"}],"name":"retainZkVerification","nameLocation":"4765:20:31","nodeType":"FunctionDefinition","parameters":{"id":6090,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6089,"mutability":"mutable","name":"_user","nameLocation":"4803:5:31","nodeType":"VariableDeclaration","scope":6118,"src":"4795:13:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6088,"name":"address","nodeType":"ElementaryTypeName","src":"4795:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4785:29:31"},"returnParameters":{"id":6096,"nodeType":"ParameterList","parameters":[],"src":"4855:0:31"},"scope":6234,"src":"4756:327:31","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":6129,"nodeType":"Block","src":"5145:67:31","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":6123,"name":"__Ownable_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":26,"src":"5155:14:31","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":6124,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5155:16:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6125,"nodeType":"ExpressionStatement","src":"5155:16:31"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":6126,"name":"__UUPSUpgradeable_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":707,"src":"5181:22:31","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":6127,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5181:24:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6128,"nodeType":"ExpressionStatement","src":"5181:24:31"}]},"functionSelector":"8129fc1c","id":6130,"implemented":true,"kind":"function","modifiers":[{"id":6121,"kind":"modifierInvocation","modifierName":{"id":6120,"name":"initializer","nodeType":"IdentifierPath","referencedDeclaration":591,"src":"5133:11:31"},"nodeType":"ModifierInvocation","src":"5133:11:31"}],"name":"initialize","nameLocation":"5113:10:31","nodeType":"FunctionDefinition","parameters":{"id":6119,"nodeType":"ParameterList","parameters":[],"src":"5123:2:31"},"returnParameters":{"id":6122,"nodeType":"ParameterList","parameters":[],"src":"5145:0:31"},"scope":6234,"src":"5104:108:31","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[819],"body":{"id":6138,"nodeType":"Block","src":"5331:2:31","statements":[]},"id":6139,"implemented":true,"kind":"function","modifiers":[{"id":6136,"kind":"modifierInvocation","modifierName":{"id":6135,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":45,"src":"5321:9:31"},"nodeType":"ModifierInvocation","src":"5321:9:31"}],"name":"_authorizeUpgrade","nameLocation":"5244:17:31","nodeType":"FunctionDefinition","overrides":{"id":6134,"nodeType":"OverrideSpecifier","overrides":[],"src":"5312:8:31"},"parameters":{"id":6133,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6132,"mutability":"mutable","name":"newImplementation","nameLocation":"5279:17:31","nodeType":"VariableDeclaration","scope":6139,"src":"5271:25:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6131,"name":"address","nodeType":"ElementaryTypeName","src":"5271:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5261:41:31"},"returnParameters":{"id":6137,"nodeType":"ParameterList","parameters":[],"src":"5331:0:31"},"scope":6234,"src":"5235:98:31","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":6146,"nodeType":"Block","src":"5414:38:31","statements":[{"expression":{"id":6144,"name":"_contractValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5754,"src":"5431:14:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":6143,"id":6145,"nodeType":"Return","src":"5424:21:31"}]},"id":6147,"implemented":true,"kind":"function","modifiers":[],"name":"_getContractValue","nameLocation":"5363:17:31","nodeType":"FunctionDefinition","parameters":{"id":6140,"nodeType":"ParameterList","parameters":[],"src":"5380:2:31"},"returnParameters":{"id":6143,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6142,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6147,"src":"5405:7:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6141,"name":"uint256","nodeType":"ElementaryTypeName","src":"5405:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5404:9:31"},"scope":6234,"src":"5354:98:31","stateMutability":"view","virtual":false,"visibility":"private"},{"baseFunctions":[6274],"body":{"id":6157,"nodeType":"Block","src":"5548:31:31","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":6154,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":54,"src":"5565:5:31","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":6155,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5565:7:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":6153,"id":6156,"nodeType":"Return","src":"5558:14:31"}]},"functionSelector":"b2e6b912","id":6158,"implemented":true,"kind":"function","modifiers":[{"id":6150,"kind":"modifierInvocation","modifierName":{"id":6149,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":45,"src":"5520:9:31"},"nodeType":"ModifierInvocation","src":"5520:9:31"}],"name":"getAdminAddress","nameLocation":"5488:15:31","nodeType":"FunctionDefinition","parameters":{"id":6148,"nodeType":"ParameterList","parameters":[],"src":"5503:2:31"},"returnParameters":{"id":6153,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6152,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6158,"src":"5539:7:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6151,"name":"address","nodeType":"ElementaryTypeName","src":"5539:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5538:9:31"},"scope":6234,"src":"5479:100:31","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[6282],"body":{"id":6173,"nodeType":"Block","src":"5688:36:31","statements":[{"expression":{"baseExpression":{"id":6169,"name":"users","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5780,"src":"5705:5:31","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_User_$6247_storage_$","typeString":"mapping(address => struct IProfiles.User storage ref)"}},"id":6171,"indexExpression":{"id":6170,"name":"_user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6160,"src":"5711:5:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5705:12:31","typeDescriptions":{"typeIdentifier":"t_struct$_User_$6247_storage","typeString":"struct IProfiles.User storage ref"}},"functionReturnParameters":6168,"id":6172,"nodeType":"Return","src":"5698:19:31"}]},"functionSelector":"6f77926b","id":6174,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":6163,"name":"_user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6160,"src":"5659:5:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":6164,"kind":"modifierInvocation","modifierName":{"id":6162,"name":"userNotExists","nodeType":"IdentifierPath","referencedDeclaration":5855,"src":"5645:13:31"},"nodeType":"ModifierInvocation","src":"5645:20:31"}],"name":"getUser","nameLocation":"5594:7:31","nodeType":"FunctionDefinition","parameters":{"id":6161,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6160,"mutability":"mutable","name":"_user","nameLocation":"5619:5:31","nodeType":"VariableDeclaration","scope":6174,"src":"5611:13:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6159,"name":"address","nodeType":"ElementaryTypeName","src":"5611:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5601:29:31"},"returnParameters":{"id":6168,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6167,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6174,"src":"5675:11:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_User_$6247_memory_ptr","typeString":"struct IProfiles.User"},"typeName":{"id":6166,"nodeType":"UserDefinedTypeName","pathNode":{"id":6165,"name":"User","nodeType":"IdentifierPath","referencedDeclaration":6247,"src":"5675:4:31"},"referencedDeclaration":6247,"src":"5675:4:31","typeDescriptions":{"typeIdentifier":"t_struct$_User_$6247_storage_ptr","typeString":"struct IProfiles.User"}},"visibility":"internal"}],"src":"5674:13:31"},"scope":6234,"src":"5585:139:31","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[6288],"body":{"id":6191,"nodeType":"Block","src":"5801:80:31","statements":[{"assignments":[6186],"declarations":[{"constant":false,"id":6186,"mutability":"mutable","name":"_users","nameLocation":"5828:6:31","nodeType":"VariableDeclaration","scope":6191,"src":"5811:23:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":6184,"name":"address","nodeType":"ElementaryTypeName","src":"5811:7:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6185,"nodeType":"ArrayTypeName","src":"5811:9:31","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"id":6188,"initialValue":{"id":6187,"name":"_userAddresses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5759,"src":"5837:14:31","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"nodeType":"VariableDeclarationStatement","src":"5811:40:31"},{"expression":{"id":6189,"name":"_users","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6186,"src":"5868:6:31","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"functionReturnParameters":6181,"id":6190,"nodeType":"Return","src":"5861:13:31"}]},"functionSelector":"00ce8e3e","id":6192,"implemented":true,"kind":"function","modifiers":[{"id":6177,"kind":"modifierInvocation","modifierName":{"id":6176,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":45,"src":"5764:9:31"},"nodeType":"ModifierInvocation","src":"5764:9:31"}],"name":"getUsers","nameLocation":"5739:8:31","nodeType":"FunctionDefinition","parameters":{"id":6175,"nodeType":"ParameterList","parameters":[],"src":"5747:2:31"},"returnParameters":{"id":6181,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6180,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6192,"src":"5783:16:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":6178,"name":"address","nodeType":"ElementaryTypeName","src":"5783:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6179,"nodeType":"ArrayTypeName","src":"5783:9:31","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"5782:18:31"},"scope":6234,"src":"5730:151:31","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[6269],"body":{"id":6216,"nodeType":"Block","src":"6085:158:31","statements":[{"condition":{"expression":{"baseExpression":{"id":6202,"name":"users","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5780,"src":"6099:5:31","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_User_$6247_storage_$","typeString":"mapping(address => struct IProfiles.User storage ref)"}},"id":6204,"indexExpression":{"id":6203,"name":"_user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6194,"src":"6105:5:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6099:12:31","typeDescriptions":{"typeIdentifier":"t_struct$_User_$6247_storage","typeString":"struct IProfiles.User storage ref"}},"id":6205,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"isStatusRevoked","nodeType":"MemberAccess","referencedDeclaration":6246,"src":"6099:28:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":6214,"nodeType":"Block","src":"6172:65:31","statements":[{"expression":{"expression":{"baseExpression":{"id":6209,"name":"users","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5780,"src":"6193:5:31","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_User_$6247_storage_$","typeString":"mapping(address => struct IProfiles.User storage ref)"}},"id":6211,"indexExpression":{"id":6210,"name":"_user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6194,"src":"6199:5:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6193:12:31","typeDescriptions":{"typeIdentifier":"t_struct$_User_$6247_storage","typeString":"struct IProfiles.User storage ref"}},"id":6212,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"verificationStatus_I","nodeType":"MemberAccess","referencedDeclaration":6242,"src":"6193:33:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":6201,"id":6213,"nodeType":"Return","src":"6186:40:31"}]},"id":6215,"nodeType":"IfStatement","src":"6095:142:31","trueBody":{"id":6208,"nodeType":"Block","src":"6129:37:31","statements":[{"expression":{"hexValue":"66616c7365","id":6206,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6150:5:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":6201,"id":6207,"nodeType":"Return","src":"6143:12:31"}]}}]},"functionSelector":"d117fc99","id":6217,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":6197,"name":"_user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6194,"src":"6063:5:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":6198,"kind":"modifierInvocation","modifierName":{"id":6196,"name":"userNotExists","nodeType":"IdentifierPath","referencedDeclaration":5855,"src":"6049:13:31"},"nodeType":"ModifierInvocation","src":"6049:20:31"}],"name":"getVerifiedUser","nameLocation":"5990:15:31","nodeType":"FunctionDefinition","parameters":{"id":6195,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6194,"mutability":"mutable","name":"_user","nameLocation":"6023:5:31","nodeType":"VariableDeclaration","scope":6217,"src":"6015:13:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6193,"name":"address","nodeType":"ElementaryTypeName","src":"6015:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6005:29:31"},"returnParameters":{"id":6201,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6200,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6217,"src":"6079:4:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6199,"name":"bool","nodeType":"ElementaryTypeName","src":"6079:4:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6078:6:31"},"scope":6234,"src":"5981:262:31","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":6232,"nodeType":"Block","src":"6352:45:31","statements":[{"expression":{"expression":{"baseExpression":{"id":6227,"name":"users","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5780,"src":"6369:5:31","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_User_$6247_storage_$","typeString":"mapping(address => struct IProfiles.User storage ref)"}},"id":6229,"indexExpression":{"id":6228,"name":"_user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6219,"src":"6375:5:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6369:12:31","typeDescriptions":{"typeIdentifier":"t_struct$_User_$6247_storage","typeString":"struct IProfiles.User storage ref"}},"id":6230,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"multiSig","nodeType":"MemberAccess","referencedDeclaration":6240,"src":"6369:21:31","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":6226,"id":6231,"nodeType":"Return","src":"6362:28:31"}]},"functionSelector":"1e9f3d5e","id":6233,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":6222,"name":"_user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6219,"src":"6327:5:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":6223,"kind":"modifierInvocation","modifierName":{"id":6221,"name":"userNotExists","nodeType":"IdentifierPath","referencedDeclaration":5855,"src":"6313:13:31"},"nodeType":"ModifierInvocation","src":"6313:20:31"}],"name":"getMultiSig","nameLocation":"6258:11:31","nodeType":"FunctionDefinition","parameters":{"id":6220,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6219,"mutability":"mutable","name":"_user","nameLocation":"6287:5:31","nodeType":"VariableDeclaration","scope":6233,"src":"6279:13:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6218,"name":"address","nodeType":"ElementaryTypeName","src":"6279:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6269:29:31"},"returnParameters":{"id":6226,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6225,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6233,"src":"6343:7:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6224,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6343:7:31","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6342:9:31"},"scope":6234,"src":"6249:148:31","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":6235,"src":"669:5730:31","usedErrors":[5782,5784,5786,5788]}],"src":"33:6367:31"},"id":31},"contracts/interfaces/IProfiles.sol":{"ast":{"absolutePath":"contracts/interfaces/IProfiles.sol","exportedSymbols":{"IProfiles":[6289]},"id":6290,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":6236,"literals":["solidity","^","0.8",".7"],"nodeType":"PragmaDirective","src":"33:23:32"},{"abstract":false,"baseContracts":[],"canonicalName":"IProfiles","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":6289,"linearizedBaseContracts":[6289],"name":"IProfiles","nameLocation":"68:9:32","nodeType":"ContractDefinition","nodes":[{"canonicalName":"IProfiles.User","id":6247,"members":[{"constant":false,"id":6238,"mutability":"mutable","name":"userPubAddress","nameLocation":"114:14:32","nodeType":"VariableDeclaration","scope":6247,"src":"106:22:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6237,"name":"address","nodeType":"ElementaryTypeName","src":"106:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6240,"mutability":"mutable","name":"multiSig","nameLocation":"146:8:32","nodeType":"VariableDeclaration","scope":6247,"src":"138:16:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6239,"name":"bytes32","nodeType":"ElementaryTypeName","src":"138:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":6242,"mutability":"mutable","name":"verificationStatus_I","nameLocation":"169:20:32","nodeType":"VariableDeclaration","scope":6247,"src":"164:25:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6241,"name":"bool","nodeType":"ElementaryTypeName","src":"164:4:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":6244,"mutability":"mutable","name":"verificationStatus_II","nameLocation":"204:21:32","nodeType":"VariableDeclaration","scope":6247,"src":"199:26:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6243,"name":"bool","nodeType":"ElementaryTypeName","src":"199:4:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":6246,"mutability":"mutable","name":"isStatusRevoked","nameLocation":"240:15:32","nodeType":"VariableDeclaration","scope":6247,"src":"235:20:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6245,"name":"bool","nodeType":"ElementaryTypeName","src":"235:4:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"User","nameLocation":"91:4:32","nodeType":"StructDefinition","scope":6289,"src":"84:178:32","visibility":"public"},{"functionSelector":"f536c520","id":6252,"implemented":false,"kind":"function","modifiers":[],"name":"createProfile","nameLocation":"277:13:32","nodeType":"FunctionDefinition","parameters":{"id":6250,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6249,"mutability":"mutable","name":"_user","nameLocation":"299:5:32","nodeType":"VariableDeclaration","scope":6252,"src":"291:13:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6248,"name":"address","nodeType":"ElementaryTypeName","src":"291:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"290:15:32"},"returnParameters":{"id":6251,"nodeType":"ParameterList","parameters":[],"src":"314:0:32"},"scope":6289,"src":"268:47:32","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"391a5bf0","id":6257,"implemented":false,"kind":"function","modifiers":[],"name":"retainVerification","nameLocation":"330:18:32","nodeType":"FunctionDefinition","parameters":{"id":6255,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6254,"mutability":"mutable","name":"_user","nameLocation":"357:5:32","nodeType":"VariableDeclaration","scope":6257,"src":"349:13:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6253,"name":"address","nodeType":"ElementaryTypeName","src":"349:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"348:15:32"},"returnParameters":{"id":6256,"nodeType":"ParameterList","parameters":[],"src":"372:0:32"},"scope":6289,"src":"321:52:32","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"87d55ff3","id":6262,"implemented":false,"kind":"function","modifiers":[],"name":"revokeVerifiedUser","nameLocation":"388:18:32","nodeType":"FunctionDefinition","parameters":{"id":6260,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6259,"mutability":"mutable","name":"_user","nameLocation":"415:5:32","nodeType":"VariableDeclaration","scope":6262,"src":"407:13:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6258,"name":"address","nodeType":"ElementaryTypeName","src":"407:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"406:15:32"},"returnParameters":{"id":6261,"nodeType":"ParameterList","parameters":[],"src":"430:0:32"},"scope":6289,"src":"379:52:32","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"d117fc99","id":6269,"implemented":false,"kind":"function","modifiers":[],"name":"getVerifiedUser","nameLocation":"446:15:32","nodeType":"FunctionDefinition","parameters":{"id":6265,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6264,"mutability":"mutable","name":"_user","nameLocation":"470:5:32","nodeType":"VariableDeclaration","scope":6269,"src":"462:13:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6263,"name":"address","nodeType":"ElementaryTypeName","src":"462:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"461:15:32"},"returnParameters":{"id":6268,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6267,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6269,"src":"500:4:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6266,"name":"bool","nodeType":"ElementaryTypeName","src":"500:4:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"499:6:32"},"scope":6289,"src":"437:69:32","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"b2e6b912","id":6274,"implemented":false,"kind":"function","modifiers":[],"name":"getAdminAddress","nameLocation":"521:15:32","nodeType":"FunctionDefinition","parameters":{"id":6270,"nodeType":"ParameterList","parameters":[],"src":"536:2:32"},"returnParameters":{"id":6273,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6272,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6274,"src":"562:7:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6271,"name":"address","nodeType":"ElementaryTypeName","src":"562:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"561:9:32"},"scope":6289,"src":"512:59:32","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"6f77926b","id":6282,"implemented":false,"kind":"function","modifiers":[],"name":"getUser","nameLocation":"586:7:32","nodeType":"FunctionDefinition","parameters":{"id":6277,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6276,"mutability":"mutable","name":"_user","nameLocation":"602:5:32","nodeType":"VariableDeclaration","scope":6282,"src":"594:13:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6275,"name":"address","nodeType":"ElementaryTypeName","src":"594:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"593:15:32"},"returnParameters":{"id":6281,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6280,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6282,"src":"632:11:32","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_User_$6247_memory_ptr","typeString":"struct IProfiles.User"},"typeName":{"id":6279,"nodeType":"UserDefinedTypeName","pathNode":{"id":6278,"name":"User","nodeType":"IdentifierPath","referencedDeclaration":6247,"src":"632:4:32"},"referencedDeclaration":6247,"src":"632:4:32","typeDescriptions":{"typeIdentifier":"t_struct$_User_$6247_storage_ptr","typeString":"struct IProfiles.User"}},"visibility":"internal"}],"src":"631:13:32"},"scope":6289,"src":"577:68:32","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"00ce8e3e","id":6288,"implemented":false,"kind":"function","modifiers":[],"name":"getUsers","nameLocation":"660:8:32","nodeType":"FunctionDefinition","parameters":{"id":6283,"nodeType":"ParameterList","parameters":[],"src":"668:2:32"},"returnParameters":{"id":6287,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6286,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6288,"src":"694:16:32","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":6284,"name":"address","nodeType":"ElementaryTypeName","src":"694:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6285,"nodeType":"ArrayTypeName","src":"694:9:32","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"693:18:32"},"scope":6289,"src":"651:61:32","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":6290,"src":"58:656:32","usedErrors":[]}],"src":"33:682:32"},"id":32}},"contracts":{"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol":{"OwnableUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":\"OwnableUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":527,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":530,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2787,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":10,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"_owner","offset":0,"slot":"51","type":"t_address"},{"astId":130,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol":{"IERC1822ProxiableUpgradeable":{"abi":[{"inputs":[],"name":"proxiableUUID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified proxy whose upgrades are fully controlled by the current implementation.","kind":"dev","methods":{"proxiableUUID()":{"details":"Returns the storage slot that the proxiable contract assumes is being used to store the implementation address. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"proxiableUUID()":"52d1902d"}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified proxy whose upgrades are fully controlled by the current implementation.\",\"kind\":\"dev\",\"methods\":{\"proxiableUUID()\":{\"details\":\"Returns the storage slot that the proxiable contract assumes is being used to store the implementation address. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":\"IERC1822ProxiableUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol":{"ERC1967UpgradeUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beacon","type":"address"}],"name":"BeaconUpgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"}],"devdoc":{"custom:oz-upgrades-unsafe-allow":"delegatecall","details":"This abstract contract provides getters and event emitting update functions for https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots. _Available since v4.1._","events":{"AdminChanged(address,address)":{"details":"Emitted when the admin account has changed."},"BeaconUpgraded(address)":{"details":"Emitted when the beacon is upgraded."},"Upgraded(address)":{"details":"Emitted when the implementation is upgraded."}},"kind":"dev","methods":{},"stateVariables":{"_ADMIN_SLOT":{"details":"Storage slot with the admin of the contract. This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is validated in the constructor."},"_BEACON_SLOT":{"details":"The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy. This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor."},"_IMPLEMENTATION_SLOT":{"details":"Storage slot with the address of the current implementation. This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is validated in the constructor."},"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"delegatecall\",\"details\":\"This abstract contract provides getters and event emitting update functions for https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots. _Available since v4.1._\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is upgraded.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_ADMIN_SLOT\":{\"details\":\"Storage slot with the admin of the contract. This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is validated in the constructor.\"},\"_BEACON_SLOT\":{\"details\":\"The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy. This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\"},\"_IMPLEMENTATION_SLOT\":{\"details\":\"Storage slot with the address of the current implementation. This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is validated in the constructor.\"},\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":\"ERC1967UpgradeUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":527,"contract":"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":530,"contract":"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":509,"contract":"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol":{"IBeaconUpgradeable":{"abi":[{"inputs":[],"name":"implementation","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This is the interface that {BeaconProxy} expects of its beacon.","kind":"dev","methods":{"implementation()":{"details":"Must return an address that can be used as a delegate call target. {BeaconProxy} will check that this address is a contract."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"implementation()":"5c60da1b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This is the interface that {BeaconProxy} expects of its beacon.\",\"kind\":\"dev\",\"methods\":{\"implementation()\":{\"details\":\"Must return an address that can be used as a delegate call target. {BeaconProxy} will check that this address is a contract.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":\"IBeaconUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"Initializable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"custom:oz-upgrades-unsafe-allow":"constructor constructor() {     _disableInitializers(); } ``` ====","details":"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ``` contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\"MyToken\", \"MTK\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\"MyToken\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{},"stateVariables":{"_initialized":{"custom:oz-retyped-from":"bool","details":"Indicates that the contract has been initialized."},"_initializing":{"details":"Indicates that the contract is in the process of being initialized."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor constructor() {     _disableInitializers(); } ``` ====\",\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ``` contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\\\"MyToken\\\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_initialized\":{\"custom:oz-retyped-from\":\"bool\",\"details\":\"Indicates that the contract has been initialized.\"},\"_initializing\":{\"details\":\"Indicates that the contract is in the process of being initialized.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":527,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":530,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"}],"types":{"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol":{"UUPSUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beacon","type":"address"}],"name":"BeaconUpgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"},{"inputs":[],"name":"proxiableUUID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"}],"name":"upgradeTo","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"upgradeToAndCall","outputs":[],"stateMutability":"payable","type":"function"}],"devdoc":{"details":"An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy. A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing `UUPSUpgradeable` with a custom implementation of upgrades. The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism. _Available since v4.1._","kind":"dev","methods":{"proxiableUUID()":{"details":"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."},"upgradeTo(address)":{"details":"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."},"upgradeToAndCall(address,bytes)":{"details":"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"__self":{"custom:oz-upgrades-unsafe-allow":"state-variable-immutable state-variable-assignment"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"proxiableUUID()":"52d1902d","upgradeTo(address)":"3659cfe6","upgradeToAndCall(address,bytes)":"4f1ef286"}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy. A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing `UUPSUpgradeable` with a custom implementation of upgrades. The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism. _Available since v4.1._\",\"kind\":\"dev\",\"methods\":{\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"},\"__self\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable state-variable-assignment\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":\"UUPSUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7967d130887c4b40666cd88f8744691d4527039a1b2a38aa0de41481ef646778\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":527,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":530,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":509,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":824,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable","label":"__gap","offset":0,"slot":"51","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol":{"PausableUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.","events":{"Paused(address)":{"details":"Emitted when the pause is triggered by `account`."},"Unpaused(address)":{"details":"Emitted when the pause is lifted by `account`."}},"kind":"dev","methods":{"paused()":{"details":"Returns true if the contract is paused, and false otherwise."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"paused()":"5c975abb"}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.\",\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":\"PausableUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":527,"contract":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":530,"contract":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2787,"contract":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":846,"contract":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable","label":"_paused","offset":0,"slot":"51","type":"t_bool"},{"astId":951,"contract":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"}],"types":{"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol":{"ERC20Upgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.","kind":"dev","methods":{"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b50611263806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461016857806370a082311461019857806395d89b41146101c8578063a457c2d7146101e6578063a9059cbb14610216578063dd62ed3e14610246576100a9565b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100fc57806323b872dd1461011a578063313ce5671461014a575b600080fd5b6100b6610276565b6040516100c39190610b1d565b60405180910390f35b6100e660048036038101906100e19190610bd8565b610308565b6040516100f39190610c33565b60405180910390f35b61010461032b565b6040516101119190610c5d565b60405180910390f35b610134600480360381019061012f9190610c78565b610335565b6040516101419190610c33565b60405180910390f35b610152610364565b60405161015f9190610ce7565b60405180910390f35b610182600480360381019061017d9190610bd8565b61036d565b60405161018f9190610c33565b60405180910390f35b6101b260048036038101906101ad9190610d02565b6103a4565b6040516101bf9190610c5d565b60405180910390f35b6101d06103ed565b6040516101dd9190610b1d565b60405180910390f35b61020060048036038101906101fb9190610bd8565b61047f565b60405161020d9190610c33565b60405180910390f35b610230600480360381019061022b9190610bd8565b6104f6565b60405161023d9190610c33565b60405180910390f35b610260600480360381019061025b9190610d2f565b610519565b60405161026d9190610c5d565b60405180910390f35b60606036805461028590610d9e565b80601f01602080910402602001604051908101604052809291908181526020018280546102b190610d9e565b80156102fe5780601f106102d3576101008083540402835291602001916102fe565b820191906000526020600020905b8154815290600101906020018083116102e157829003601f168201915b5050505050905090565b6000806103136105a0565b90506103208185856105a8565b600191505092915050565b6000603554905090565b6000806103406105a0565b905061034d858285610773565b6103588585856107ff565b60019150509392505050565b60006012905090565b6000806103786105a0565b905061039981858561038a8589610519565b6103949190610dff565b6105a8565b600191505092915050565b6000603360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060603780546103fc90610d9e565b80601f016020809104026020016040519081016040528092919081815260200182805461042890610d9e565b80156104755780601f1061044a57610100808354040283529160200191610475565b820191906000526020600020905b81548152906001019060200180831161045857829003601f168201915b5050505050905090565b60008061048a6105a0565b905060006104988286610519565b9050838110156104dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d490610ec7565b60405180910390fd5b6104ea82868684036105a8565b60019250505092915050565b6000806105016105a0565b905061050e8185856107ff565b600191505092915050565b6000603460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610618576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060f90610f59565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610688576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067f90610feb565b60405180910390fd5b80603460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516107669190610c5d565b60405180910390a3505050565b600061077f8484610519565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146107f957818110156107eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e290611057565b60405180910390fd5b6107f884848484036105a8565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561086f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610866906110e9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156108df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d69061117b565b60405180910390fd5b6108ea838383610a7a565b6000603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610971576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109689061120d565b60405180910390fd5b818103603360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610a619190610c5d565b60405180910390a3610a74848484610a7f565b50505050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610abe578082015181840152602081019050610aa3565b83811115610acd576000848401525b50505050565b6000601f19601f8301169050919050565b6000610aef82610a84565b610af98185610a8f565b9350610b09818560208601610aa0565b610b1281610ad3565b840191505092915050565b60006020820190508181036000830152610b378184610ae4565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b6f82610b44565b9050919050565b610b7f81610b64565b8114610b8a57600080fd5b50565b600081359050610b9c81610b76565b92915050565b6000819050919050565b610bb581610ba2565b8114610bc057600080fd5b50565b600081359050610bd281610bac565b92915050565b60008060408385031215610bef57610bee610b3f565b5b6000610bfd85828601610b8d565b9250506020610c0e85828601610bc3565b9150509250929050565b60008115159050919050565b610c2d81610c18565b82525050565b6000602082019050610c486000830184610c24565b92915050565b610c5781610ba2565b82525050565b6000602082019050610c726000830184610c4e565b92915050565b600080600060608486031215610c9157610c90610b3f565b5b6000610c9f86828701610b8d565b9350506020610cb086828701610b8d565b9250506040610cc186828701610bc3565b9150509250925092565b600060ff82169050919050565b610ce181610ccb565b82525050565b6000602082019050610cfc6000830184610cd8565b92915050565b600060208284031215610d1857610d17610b3f565b5b6000610d2684828501610b8d565b91505092915050565b60008060408385031215610d4657610d45610b3f565b5b6000610d5485828601610b8d565b9250506020610d6585828601610b8d565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610db657607f821691505b60208210811415610dca57610dc9610d6f565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610e0a82610ba2565b9150610e1583610ba2565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610e4a57610e49610dd0565b5b828201905092915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000610eb1602583610a8f565b9150610ebc82610e55565b604082019050919050565b60006020820190508181036000830152610ee081610ea4565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000610f43602483610a8f565b9150610f4e82610ee7565b604082019050919050565b60006020820190508181036000830152610f7281610f36565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000610fd5602283610a8f565b9150610fe082610f79565b604082019050919050565b6000602082019050818103600083015261100481610fc8565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b6000611041601d83610a8f565b915061104c8261100b565b602082019050919050565b6000602082019050818103600083015261107081611034565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b60006110d3602583610a8f565b91506110de82611077565b604082019050919050565b60006020820190508181036000830152611102816110c6565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000611165602383610a8f565b915061117082611109565b604082019050919050565b6000602082019050818103600083015261119481611158565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b60006111f7602683610a8f565b91506112028261119b565b604082019050919050565b60006020820190508181036000830152611226816111ea565b905091905056fea264697066735822122023f12491ad85e6054ce323b388824d15c0ef9ec7eba850a2c49075af21fce61664736f6c63430008090033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1263 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x168 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x198 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1C8 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x1E6 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x216 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x246 JUMPI PUSH2 0xA9 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xFC JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x11A JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x14A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x276 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0xB1D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xE6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE1 SWAP2 SWAP1 PUSH2 0xBD8 JUMP JUMPDEST PUSH2 0x308 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF3 SWAP2 SWAP1 PUSH2 0xC33 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x104 PUSH2 0x32B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x111 SWAP2 SWAP1 PUSH2 0xC5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x134 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x12F SWAP2 SWAP1 PUSH2 0xC78 JUMP JUMPDEST PUSH2 0x335 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x141 SWAP2 SWAP1 PUSH2 0xC33 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x152 PUSH2 0x364 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x15F SWAP2 SWAP1 PUSH2 0xCE7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x182 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x17D SWAP2 SWAP1 PUSH2 0xBD8 JUMP JUMPDEST PUSH2 0x36D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x18F SWAP2 SWAP1 PUSH2 0xC33 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1B2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1AD SWAP2 SWAP1 PUSH2 0xD02 JUMP JUMPDEST PUSH2 0x3A4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1BF SWAP2 SWAP1 PUSH2 0xC5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D0 PUSH2 0x3ED JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1DD SWAP2 SWAP1 PUSH2 0xB1D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x200 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1FB SWAP2 SWAP1 PUSH2 0xBD8 JUMP JUMPDEST PUSH2 0x47F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x20D SWAP2 SWAP1 PUSH2 0xC33 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x230 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x22B SWAP2 SWAP1 PUSH2 0xBD8 JUMP JUMPDEST PUSH2 0x4F6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x23D SWAP2 SWAP1 PUSH2 0xC33 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x260 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x25B SWAP2 SWAP1 PUSH2 0xD2F JUMP JUMPDEST PUSH2 0x519 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x26D SWAP2 SWAP1 PUSH2 0xC5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 PUSH1 0x36 DUP1 SLOAD PUSH2 0x285 SWAP1 PUSH2 0xD9E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2B1 SWAP1 PUSH2 0xD9E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2FE JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2D3 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2FE JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2E1 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x313 PUSH2 0x5A0 JUMP JUMPDEST SWAP1 POP PUSH2 0x320 DUP2 DUP6 DUP6 PUSH2 0x5A8 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x35 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x340 PUSH2 0x5A0 JUMP JUMPDEST SWAP1 POP PUSH2 0x34D DUP6 DUP3 DUP6 PUSH2 0x773 JUMP JUMPDEST PUSH2 0x358 DUP6 DUP6 DUP6 PUSH2 0x7FF JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x378 PUSH2 0x5A0 JUMP JUMPDEST SWAP1 POP PUSH2 0x399 DUP2 DUP6 DUP6 PUSH2 0x38A DUP6 DUP10 PUSH2 0x519 JUMP JUMPDEST PUSH2 0x394 SWAP2 SWAP1 PUSH2 0xDFF JUMP JUMPDEST PUSH2 0x5A8 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x37 DUP1 SLOAD PUSH2 0x3FC SWAP1 PUSH2 0xD9E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x428 SWAP1 PUSH2 0xD9E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x475 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x44A JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x475 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x458 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x48A PUSH2 0x5A0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x498 DUP3 DUP7 PUSH2 0x519 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x4DD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4D4 SWAP1 PUSH2 0xEC7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x4EA DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x5A8 JUMP JUMPDEST PUSH1 0x1 SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x501 PUSH2 0x5A0 JUMP JUMPDEST SWAP1 POP PUSH2 0x50E DUP2 DUP6 DUP6 PUSH2 0x7FF JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x34 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x618 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x60F SWAP1 PUSH2 0xF59 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x688 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x67F SWAP1 PUSH2 0xFEB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x34 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP4 PUSH1 0x40 MLOAD PUSH2 0x766 SWAP2 SWAP1 PUSH2 0xC5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x77F DUP5 DUP5 PUSH2 0x519 JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ PUSH2 0x7F9 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x7EB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7E2 SWAP1 PUSH2 0x1057 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x7F8 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x5A8 JUMP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x86F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x866 SWAP1 PUSH2 0x10E9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x8DF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D6 SWAP1 PUSH2 0x117B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x8EA DUP4 DUP4 DUP4 PUSH2 0xA7A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x971 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x968 SWAP1 PUSH2 0x120D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH1 0x33 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x33 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0xA61 SWAP2 SWAP1 PUSH2 0xC5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0xA74 DUP5 DUP5 DUP5 PUSH2 0xA7F JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xABE JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xAA3 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xACD JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAEF DUP3 PUSH2 0xA84 JUMP JUMPDEST PUSH2 0xAF9 DUP2 DUP6 PUSH2 0xA8F JUMP JUMPDEST SWAP4 POP PUSH2 0xB09 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0xAA0 JUMP JUMPDEST PUSH2 0xB12 DUP2 PUSH2 0xAD3 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xB37 DUP2 DUP5 PUSH2 0xAE4 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB6F DUP3 PUSH2 0xB44 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xB7F DUP2 PUSH2 0xB64 JUMP JUMPDEST DUP2 EQ PUSH2 0xB8A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xB9C DUP2 PUSH2 0xB76 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xBB5 DUP2 PUSH2 0xBA2 JUMP JUMPDEST DUP2 EQ PUSH2 0xBC0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xBD2 DUP2 PUSH2 0xBAC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xBEF JUMPI PUSH2 0xBEE PUSH2 0xB3F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xBFD DUP6 DUP3 DUP7 ADD PUSH2 0xB8D JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xC0E DUP6 DUP3 DUP7 ADD PUSH2 0xBC3 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xC2D DUP2 PUSH2 0xC18 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xC48 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xC24 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xC57 DUP2 PUSH2 0xBA2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xC72 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xC4E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xC91 JUMPI PUSH2 0xC90 PUSH2 0xB3F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xC9F DUP7 DUP3 DUP8 ADD PUSH2 0xB8D JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xCB0 DUP7 DUP3 DUP8 ADD PUSH2 0xB8D JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xCC1 DUP7 DUP3 DUP8 ADD PUSH2 0xBC3 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xCE1 DUP2 PUSH2 0xCCB JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xCFC PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xCD8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD18 JUMPI PUSH2 0xD17 PUSH2 0xB3F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xD26 DUP5 DUP3 DUP6 ADD PUSH2 0xB8D JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xD46 JUMPI PUSH2 0xD45 PUSH2 0xB3F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xD54 DUP6 DUP3 DUP7 ADD PUSH2 0xB8D JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xD65 DUP6 DUP3 DUP7 ADD PUSH2 0xB8D JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0xDB6 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0xDCA JUMPI PUSH2 0xDC9 PUSH2 0xD6F JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xE0A DUP3 PUSH2 0xBA2 JUMP JUMPDEST SWAP2 POP PUSH2 0xE15 DUP4 PUSH2 0xBA2 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0xE4A JUMPI PUSH2 0xE49 PUSH2 0xDD0 JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x207A65726F000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEB1 PUSH1 0x25 DUP4 PUSH2 0xA8F JUMP JUMPDEST SWAP2 POP PUSH2 0xEBC DUP3 PUSH2 0xE55 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xEE0 DUP2 PUSH2 0xEA4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF43 PUSH1 0x24 DUP4 PUSH2 0xA8F JUMP JUMPDEST SWAP2 POP PUSH2 0xF4E DUP3 PUSH2 0xEE7 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xF72 DUP2 PUSH2 0xF36 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7373000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFD5 PUSH1 0x22 DUP4 PUSH2 0xA8F JUMP JUMPDEST SWAP2 POP PUSH2 0xFE0 DUP3 PUSH2 0xF79 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1004 DUP2 PUSH2 0xFC8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1041 PUSH1 0x1D DUP4 PUSH2 0xA8F JUMP JUMPDEST SWAP2 POP PUSH2 0x104C DUP3 PUSH2 0x100B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1070 DUP2 PUSH2 0x1034 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10D3 PUSH1 0x25 DUP4 PUSH2 0xA8F JUMP JUMPDEST SWAP2 POP PUSH2 0x10DE DUP3 PUSH2 0x1077 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1102 DUP2 PUSH2 0x10C6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6573730000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1165 PUSH1 0x23 DUP4 PUSH2 0xA8F JUMP JUMPDEST SWAP2 POP PUSH2 0x1170 DUP3 PUSH2 0x1109 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1194 DUP2 PUSH2 0x1158 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x616C616E63650000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11F7 PUSH1 0x26 DUP4 PUSH2 0xA8F JUMP JUMPDEST SWAP2 POP PUSH2 0x1202 DUP3 PUSH2 0x119B JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1226 DUP2 PUSH2 0x11EA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x23 CALL 0x24 SWAP2 0xAD DUP6 0xE6 SDIV 0x4C 0xE3 0x23 0xB3 DUP9 DUP3 0x4D ISZERO 0xC0 0xEF SWAP15 0xC7 0xEB 0xA8 POP LOG2 0xC4 SWAP1 PUSH22 0xAF21FCE61664736F6C63430008090033000000000000 ","sourceMap":"1480:12159:7:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_afterTokenTransfer_1558":{"entryPoint":2687,"id":1558,"parameterSlots":3,"returnSlots":0},"@_approve_1493":{"entryPoint":1448,"id":1493,"parameterSlots":3,"returnSlots":0},"@_beforeTokenTransfer_1547":{"entryPoint":2682,"id":1547,"parameterSlots":3,"returnSlots":0},"@_msgSender_2773":{"entryPoint":1440,"id":2773,"parameterSlots":0,"returnSlots":1},"@_spendAllowance_1536":{"entryPoint":1907,"id":1536,"parameterSlots":3,"returnSlots":0},"@_transfer_1319":{"entryPoint":2047,"id":1319,"parameterSlots":3,"returnSlots":0},"@allowance_1114":{"entryPoint":1305,"id":1114,"parameterSlots":2,"returnSlots":1},"@approve_1139":{"entryPoint":776,"id":1139,"parameterSlots":2,"returnSlots":1},"@balanceOf_1071":{"entryPoint":932,"id":1071,"parameterSlots":1,"returnSlots":1},"@decimals_1047":{"entryPoint":868,"id":1047,"parameterSlots":0,"returnSlots":1},"@decreaseAllowance_1242":{"entryPoint":1151,"id":1242,"parameterSlots":2,"returnSlots":1},"@increaseAllowance_1201":{"entryPoint":877,"id":1201,"parameterSlots":2,"returnSlots":1},"@name_1027":{"entryPoint":630,"id":1027,"parameterSlots":0,"returnSlots":1},"@symbol_1037":{"entryPoint":1005,"id":1037,"parameterSlots":0,"returnSlots":1},"@totalSupply_1057":{"entryPoint":811,"id":1057,"parameterSlots":0,"returnSlots":1},"@transferFrom_1172":{"entryPoint":821,"id":1172,"parameterSlots":3,"returnSlots":1},"@transfer_1096":{"entryPoint":1270,"id":1096,"parameterSlots":2,"returnSlots":1},"abi_decode_t_address":{"entryPoint":2957,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":3011,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":3330,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":3375,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":3192,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":3032,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":3108,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":2788,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack":{"entryPoint":4440,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack":{"entryPoint":4040,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack":{"entryPoint":4148,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack":{"entryPoint":4586,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack":{"entryPoint":4294,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack":{"entryPoint":3894,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack":{"entryPoint":3748,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":3150,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint8_to_t_uint8_fromStack":{"entryPoint":3288,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":3123,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":2845,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4475,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4075,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4183,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4621,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4329,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":3929,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":3783,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":3165,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed":{"entryPoint":3303,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":2692,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":2703,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":3583,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":2916,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":3096,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":2884,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":2978,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint8":{"entryPoint":3275,"id":null,"parameterSlots":1,"returnSlots":1},"copy_memory_to_memory":{"entryPoint":2720,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":3486,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":3536,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x22":{"entryPoint":3439,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":2879,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":2771,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f":{"entryPoint":4361,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029":{"entryPoint":3961,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe":{"entryPoint":4107,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6":{"entryPoint":4507,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea":{"entryPoint":4215,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208":{"entryPoint":3815,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8":{"entryPoint":3669,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":2934,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":2988,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:13861:33","statements":[{"body":{"nodeType":"YulBlock","src":"66:40:33","statements":[{"nodeType":"YulAssignment","src":"77:22:33","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"93:5:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"87:5:33"},"nodeType":"YulFunctionCall","src":"87:12:33"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"77:6:33"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"49:5:33","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"59:6:33","type":""}],"src":"7:99:33"},{"body":{"nodeType":"YulBlock","src":"208:73:33","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"225:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"230:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"218:6:33"},"nodeType":"YulFunctionCall","src":"218:19:33"},"nodeType":"YulExpressionStatement","src":"218:19:33"},{"nodeType":"YulAssignment","src":"246:29:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"265:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"270:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"261:3:33"},"nodeType":"YulFunctionCall","src":"261:14:33"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"246:11:33"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"180:3:33","type":""},{"name":"length","nodeType":"YulTypedName","src":"185:6:33","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"196:11:33","type":""}],"src":"112:169:33"},{"body":{"nodeType":"YulBlock","src":"336:258:33","statements":[{"nodeType":"YulVariableDeclaration","src":"346:10:33","value":{"kind":"number","nodeType":"YulLiteral","src":"355:1:33","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"350:1:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"415:63:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"440:3:33"},{"name":"i","nodeType":"YulIdentifier","src":"445:1:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"436:3:33"},"nodeType":"YulFunctionCall","src":"436:11:33"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"459:3:33"},{"name":"i","nodeType":"YulIdentifier","src":"464:1:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"455:3:33"},"nodeType":"YulFunctionCall","src":"455:11:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"449:5:33"},"nodeType":"YulFunctionCall","src":"449:18:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"429:6:33"},"nodeType":"YulFunctionCall","src":"429:39:33"},"nodeType":"YulExpressionStatement","src":"429:39:33"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"376:1:33"},{"name":"length","nodeType":"YulIdentifier","src":"379:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"373:2:33"},"nodeType":"YulFunctionCall","src":"373:13:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"387:19:33","statements":[{"nodeType":"YulAssignment","src":"389:15:33","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"398:1:33"},{"kind":"number","nodeType":"YulLiteral","src":"401:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"394:3:33"},"nodeType":"YulFunctionCall","src":"394:10:33"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"389:1:33"}]}]},"pre":{"nodeType":"YulBlock","src":"369:3:33","statements":[]},"src":"365:113:33"},{"body":{"nodeType":"YulBlock","src":"512:76:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"562:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"567:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"558:3:33"},"nodeType":"YulFunctionCall","src":"558:16:33"},{"kind":"number","nodeType":"YulLiteral","src":"576:1:33","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"551:6:33"},"nodeType":"YulFunctionCall","src":"551:27:33"},"nodeType":"YulExpressionStatement","src":"551:27:33"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"493:1:33"},{"name":"length","nodeType":"YulIdentifier","src":"496:6:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"490:2:33"},"nodeType":"YulFunctionCall","src":"490:13:33"},"nodeType":"YulIf","src":"487:101:33"}]},"name":"copy_memory_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"318:3:33","type":""},{"name":"dst","nodeType":"YulTypedName","src":"323:3:33","type":""},{"name":"length","nodeType":"YulTypedName","src":"328:6:33","type":""}],"src":"287:307:33"},{"body":{"nodeType":"YulBlock","src":"648:54:33","statements":[{"nodeType":"YulAssignment","src":"658:38:33","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"676:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"683:2:33","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"672:3:33"},"nodeType":"YulFunctionCall","src":"672:14:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"692:2:33","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"688:3:33"},"nodeType":"YulFunctionCall","src":"688:7:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"668:3:33"},"nodeType":"YulFunctionCall","src":"668:28:33"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"658:6:33"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"631:5:33","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"641:6:33","type":""}],"src":"600:102:33"},{"body":{"nodeType":"YulBlock","src":"800:272:33","statements":[{"nodeType":"YulVariableDeclaration","src":"810:53:33","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"857:5:33"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"824:32:33"},"nodeType":"YulFunctionCall","src":"824:39:33"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"814:6:33","type":""}]},{"nodeType":"YulAssignment","src":"872:78:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"938:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"943:6:33"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"879:58:33"},"nodeType":"YulFunctionCall","src":"879:71:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"872:3:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"985:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"992:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"981:3:33"},"nodeType":"YulFunctionCall","src":"981:16:33"},{"name":"pos","nodeType":"YulIdentifier","src":"999:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"1004:6:33"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"959:21:33"},"nodeType":"YulFunctionCall","src":"959:52:33"},"nodeType":"YulExpressionStatement","src":"959:52:33"},{"nodeType":"YulAssignment","src":"1020:46:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1031:3:33"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1058:6:33"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"1036:21:33"},"nodeType":"YulFunctionCall","src":"1036:29:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1027:3:33"},"nodeType":"YulFunctionCall","src":"1027:39:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"1020:3:33"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"781:5:33","type":""},{"name":"pos","nodeType":"YulTypedName","src":"788:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"796:3:33","type":""}],"src":"708:364:33"},{"body":{"nodeType":"YulBlock","src":"1196:195:33","statements":[{"nodeType":"YulAssignment","src":"1206:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1218:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"1229:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1214:3:33"},"nodeType":"YulFunctionCall","src":"1214:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1206:4:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1253:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"1264:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1249:3:33"},"nodeType":"YulFunctionCall","src":"1249:17:33"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"1272:4:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"1278:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1268:3:33"},"nodeType":"YulFunctionCall","src":"1268:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1242:6:33"},"nodeType":"YulFunctionCall","src":"1242:47:33"},"nodeType":"YulExpressionStatement","src":"1242:47:33"},{"nodeType":"YulAssignment","src":"1298:86:33","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1370:6:33"},{"name":"tail","nodeType":"YulIdentifier","src":"1379:4:33"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"1306:63:33"},"nodeType":"YulFunctionCall","src":"1306:78:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1298:4:33"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1168:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1180:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1191:4:33","type":""}],"src":"1078:313:33"},{"body":{"nodeType":"YulBlock","src":"1437:35:33","statements":[{"nodeType":"YulAssignment","src":"1447:19:33","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1463:2:33","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1457:5:33"},"nodeType":"YulFunctionCall","src":"1457:9:33"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1447:6:33"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1430:6:33","type":""}],"src":"1397:75:33"},{"body":{"nodeType":"YulBlock","src":"1567:28:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1584:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1587:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1577:6:33"},"nodeType":"YulFunctionCall","src":"1577:12:33"},"nodeType":"YulExpressionStatement","src":"1577:12:33"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"1478:117:33"},{"body":{"nodeType":"YulBlock","src":"1690:28:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1707:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1710:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1700:6:33"},"nodeType":"YulFunctionCall","src":"1700:12:33"},"nodeType":"YulExpressionStatement","src":"1700:12:33"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"1601:117:33"},{"body":{"nodeType":"YulBlock","src":"1769:81:33","statements":[{"nodeType":"YulAssignment","src":"1779:65:33","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1794:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"1801:42:33","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1790:3:33"},"nodeType":"YulFunctionCall","src":"1790:54:33"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1779:7:33"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1751:5:33","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1761:7:33","type":""}],"src":"1724:126:33"},{"body":{"nodeType":"YulBlock","src":"1901:51:33","statements":[{"nodeType":"YulAssignment","src":"1911:35:33","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1940:5:33"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"1922:17:33"},"nodeType":"YulFunctionCall","src":"1922:24:33"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1911:7:33"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1883:5:33","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1893:7:33","type":""}],"src":"1856:96:33"},{"body":{"nodeType":"YulBlock","src":"2001:79:33","statements":[{"body":{"nodeType":"YulBlock","src":"2058:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2067:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2070:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2060:6:33"},"nodeType":"YulFunctionCall","src":"2060:12:33"},"nodeType":"YulExpressionStatement","src":"2060:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2024:5:33"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2049:5:33"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"2031:17:33"},"nodeType":"YulFunctionCall","src":"2031:24:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2021:2:33"},"nodeType":"YulFunctionCall","src":"2021:35:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2014:6:33"},"nodeType":"YulFunctionCall","src":"2014:43:33"},"nodeType":"YulIf","src":"2011:63:33"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1994:5:33","type":""}],"src":"1958:122:33"},{"body":{"nodeType":"YulBlock","src":"2138:87:33","statements":[{"nodeType":"YulAssignment","src":"2148:29:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2170:6:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2157:12:33"},"nodeType":"YulFunctionCall","src":"2157:20:33"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2148:5:33"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2213:5:33"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"2186:26:33"},"nodeType":"YulFunctionCall","src":"2186:33:33"},"nodeType":"YulExpressionStatement","src":"2186:33:33"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2116:6:33","type":""},{"name":"end","nodeType":"YulTypedName","src":"2124:3:33","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2132:5:33","type":""}],"src":"2086:139:33"},{"body":{"nodeType":"YulBlock","src":"2276:32:33","statements":[{"nodeType":"YulAssignment","src":"2286:16:33","value":{"name":"value","nodeType":"YulIdentifier","src":"2297:5:33"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2286:7:33"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2258:5:33","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2268:7:33","type":""}],"src":"2231:77:33"},{"body":{"nodeType":"YulBlock","src":"2357:79:33","statements":[{"body":{"nodeType":"YulBlock","src":"2414:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2423:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2426:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2416:6:33"},"nodeType":"YulFunctionCall","src":"2416:12:33"},"nodeType":"YulExpressionStatement","src":"2416:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2380:5:33"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2405:5:33"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"2387:17:33"},"nodeType":"YulFunctionCall","src":"2387:24:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2377:2:33"},"nodeType":"YulFunctionCall","src":"2377:35:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2370:6:33"},"nodeType":"YulFunctionCall","src":"2370:43:33"},"nodeType":"YulIf","src":"2367:63:33"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2350:5:33","type":""}],"src":"2314:122:33"},{"body":{"nodeType":"YulBlock","src":"2494:87:33","statements":[{"nodeType":"YulAssignment","src":"2504:29:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2526:6:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2513:12:33"},"nodeType":"YulFunctionCall","src":"2513:20:33"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2504:5:33"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2569:5:33"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"2542:26:33"},"nodeType":"YulFunctionCall","src":"2542:33:33"},"nodeType":"YulExpressionStatement","src":"2542:33:33"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2472:6:33","type":""},{"name":"end","nodeType":"YulTypedName","src":"2480:3:33","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2488:5:33","type":""}],"src":"2442:139:33"},{"body":{"nodeType":"YulBlock","src":"2670:391:33","statements":[{"body":{"nodeType":"YulBlock","src":"2716:83:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"2718:77:33"},"nodeType":"YulFunctionCall","src":"2718:79:33"},"nodeType":"YulExpressionStatement","src":"2718:79:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2691:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"2700:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2687:3:33"},"nodeType":"YulFunctionCall","src":"2687:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"2712:2:33","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2683:3:33"},"nodeType":"YulFunctionCall","src":"2683:32:33"},"nodeType":"YulIf","src":"2680:119:33"},{"nodeType":"YulBlock","src":"2809:117:33","statements":[{"nodeType":"YulVariableDeclaration","src":"2824:15:33","value":{"kind":"number","nodeType":"YulLiteral","src":"2838:1:33","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2828:6:33","type":""}]},{"nodeType":"YulAssignment","src":"2853:63:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2888:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"2899:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2884:3:33"},"nodeType":"YulFunctionCall","src":"2884:22:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2908:7:33"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"2863:20:33"},"nodeType":"YulFunctionCall","src":"2863:53:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2853:6:33"}]}]},{"nodeType":"YulBlock","src":"2936:118:33","statements":[{"nodeType":"YulVariableDeclaration","src":"2951:16:33","value":{"kind":"number","nodeType":"YulLiteral","src":"2965:2:33","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2955:6:33","type":""}]},{"nodeType":"YulAssignment","src":"2981:63:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3016:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"3027:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3012:3:33"},"nodeType":"YulFunctionCall","src":"3012:22:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3036:7:33"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"2991:20:33"},"nodeType":"YulFunctionCall","src":"2991:53:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2981:6:33"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2632:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2643:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2655:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2663:6:33","type":""}],"src":"2587:474:33"},{"body":{"nodeType":"YulBlock","src":"3109:48:33","statements":[{"nodeType":"YulAssignment","src":"3119:32:33","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3144:5:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3137:6:33"},"nodeType":"YulFunctionCall","src":"3137:13:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3130:6:33"},"nodeType":"YulFunctionCall","src":"3130:21:33"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3119:7:33"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3091:5:33","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3101:7:33","type":""}],"src":"3067:90:33"},{"body":{"nodeType":"YulBlock","src":"3222:50:33","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3239:3:33"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3259:5:33"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"3244:14:33"},"nodeType":"YulFunctionCall","src":"3244:21:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3232:6:33"},"nodeType":"YulFunctionCall","src":"3232:34:33"},"nodeType":"YulExpressionStatement","src":"3232:34:33"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3210:5:33","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3217:3:33","type":""}],"src":"3163:109:33"},{"body":{"nodeType":"YulBlock","src":"3370:118:33","statements":[{"nodeType":"YulAssignment","src":"3380:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3392:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"3403:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3388:3:33"},"nodeType":"YulFunctionCall","src":"3388:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3380:4:33"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3454:6:33"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3467:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"3478:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3463:3:33"},"nodeType":"YulFunctionCall","src":"3463:17:33"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"3416:37:33"},"nodeType":"YulFunctionCall","src":"3416:65:33"},"nodeType":"YulExpressionStatement","src":"3416:65:33"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3342:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3354:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3365:4:33","type":""}],"src":"3278:210:33"},{"body":{"nodeType":"YulBlock","src":"3559:53:33","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3576:3:33"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3599:5:33"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"3581:17:33"},"nodeType":"YulFunctionCall","src":"3581:24:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3569:6:33"},"nodeType":"YulFunctionCall","src":"3569:37:33"},"nodeType":"YulExpressionStatement","src":"3569:37:33"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3547:5:33","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3554:3:33","type":""}],"src":"3494:118:33"},{"body":{"nodeType":"YulBlock","src":"3716:124:33","statements":[{"nodeType":"YulAssignment","src":"3726:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3738:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"3749:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3734:3:33"},"nodeType":"YulFunctionCall","src":"3734:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3726:4:33"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3806:6:33"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3819:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"3830:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3815:3:33"},"nodeType":"YulFunctionCall","src":"3815:17:33"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"3762:43:33"},"nodeType":"YulFunctionCall","src":"3762:71:33"},"nodeType":"YulExpressionStatement","src":"3762:71:33"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3688:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3700:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3711:4:33","type":""}],"src":"3618:222:33"},{"body":{"nodeType":"YulBlock","src":"3946:519:33","statements":[{"body":{"nodeType":"YulBlock","src":"3992:83:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3994:77:33"},"nodeType":"YulFunctionCall","src":"3994:79:33"},"nodeType":"YulExpressionStatement","src":"3994:79:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3967:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"3976:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3963:3:33"},"nodeType":"YulFunctionCall","src":"3963:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"3988:2:33","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3959:3:33"},"nodeType":"YulFunctionCall","src":"3959:32:33"},"nodeType":"YulIf","src":"3956:119:33"},{"nodeType":"YulBlock","src":"4085:117:33","statements":[{"nodeType":"YulVariableDeclaration","src":"4100:15:33","value":{"kind":"number","nodeType":"YulLiteral","src":"4114:1:33","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4104:6:33","type":""}]},{"nodeType":"YulAssignment","src":"4129:63:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4164:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"4175:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4160:3:33"},"nodeType":"YulFunctionCall","src":"4160:22:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4184:7:33"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4139:20:33"},"nodeType":"YulFunctionCall","src":"4139:53:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4129:6:33"}]}]},{"nodeType":"YulBlock","src":"4212:118:33","statements":[{"nodeType":"YulVariableDeclaration","src":"4227:16:33","value":{"kind":"number","nodeType":"YulLiteral","src":"4241:2:33","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4231:6:33","type":""}]},{"nodeType":"YulAssignment","src":"4257:63:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4292:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"4303:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4288:3:33"},"nodeType":"YulFunctionCall","src":"4288:22:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4312:7:33"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4267:20:33"},"nodeType":"YulFunctionCall","src":"4267:53:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4257:6:33"}]}]},{"nodeType":"YulBlock","src":"4340:118:33","statements":[{"nodeType":"YulVariableDeclaration","src":"4355:16:33","value":{"kind":"number","nodeType":"YulLiteral","src":"4369:2:33","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4359:6:33","type":""}]},{"nodeType":"YulAssignment","src":"4385:63:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4420:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"4431:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4416:3:33"},"nodeType":"YulFunctionCall","src":"4416:22:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4440:7:33"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"4395:20:33"},"nodeType":"YulFunctionCall","src":"4395:53:33"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"4385:6:33"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3900:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3911:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3923:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3931:6:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3939:6:33","type":""}],"src":"3846:619:33"},{"body":{"nodeType":"YulBlock","src":"4514:43:33","statements":[{"nodeType":"YulAssignment","src":"4524:27:33","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4539:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"4546:4:33","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4535:3:33"},"nodeType":"YulFunctionCall","src":"4535:16:33"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"4524:7:33"}]}]},"name":"cleanup_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4496:5:33","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"4506:7:33","type":""}],"src":"4471:86:33"},{"body":{"nodeType":"YulBlock","src":"4624:51:33","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4641:3:33"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4662:5:33"}],"functionName":{"name":"cleanup_t_uint8","nodeType":"YulIdentifier","src":"4646:15:33"},"nodeType":"YulFunctionCall","src":"4646:22:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4634:6:33"},"nodeType":"YulFunctionCall","src":"4634:35:33"},"nodeType":"YulExpressionStatement","src":"4634:35:33"}]},"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4612:5:33","type":""},{"name":"pos","nodeType":"YulTypedName","src":"4619:3:33","type":""}],"src":"4563:112:33"},{"body":{"nodeType":"YulBlock","src":"4775:120:33","statements":[{"nodeType":"YulAssignment","src":"4785:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4797:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"4808:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4793:3:33"},"nodeType":"YulFunctionCall","src":"4793:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4785:4:33"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4861:6:33"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4874:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"4885:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4870:3:33"},"nodeType":"YulFunctionCall","src":"4870:17:33"}],"functionName":{"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"4821:39:33"},"nodeType":"YulFunctionCall","src":"4821:67:33"},"nodeType":"YulExpressionStatement","src":"4821:67:33"}]},"name":"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4747:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4759:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4770:4:33","type":""}],"src":"4681:214:33"},{"body":{"nodeType":"YulBlock","src":"4967:263:33","statements":[{"body":{"nodeType":"YulBlock","src":"5013:83:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5015:77:33"},"nodeType":"YulFunctionCall","src":"5015:79:33"},"nodeType":"YulExpressionStatement","src":"5015:79:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4988:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"4997:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4984:3:33"},"nodeType":"YulFunctionCall","src":"4984:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"5009:2:33","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4980:3:33"},"nodeType":"YulFunctionCall","src":"4980:32:33"},"nodeType":"YulIf","src":"4977:119:33"},{"nodeType":"YulBlock","src":"5106:117:33","statements":[{"nodeType":"YulVariableDeclaration","src":"5121:15:33","value":{"kind":"number","nodeType":"YulLiteral","src":"5135:1:33","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5125:6:33","type":""}]},{"nodeType":"YulAssignment","src":"5150:63:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5185:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"5196:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5181:3:33"},"nodeType":"YulFunctionCall","src":"5181:22:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5205:7:33"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5160:20:33"},"nodeType":"YulFunctionCall","src":"5160:53:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5150:6:33"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4937:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4948:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4960:6:33","type":""}],"src":"4901:329:33"},{"body":{"nodeType":"YulBlock","src":"5319:391:33","statements":[{"body":{"nodeType":"YulBlock","src":"5365:83:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5367:77:33"},"nodeType":"YulFunctionCall","src":"5367:79:33"},"nodeType":"YulExpressionStatement","src":"5367:79:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5340:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"5349:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5336:3:33"},"nodeType":"YulFunctionCall","src":"5336:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"5361:2:33","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5332:3:33"},"nodeType":"YulFunctionCall","src":"5332:32:33"},"nodeType":"YulIf","src":"5329:119:33"},{"nodeType":"YulBlock","src":"5458:117:33","statements":[{"nodeType":"YulVariableDeclaration","src":"5473:15:33","value":{"kind":"number","nodeType":"YulLiteral","src":"5487:1:33","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5477:6:33","type":""}]},{"nodeType":"YulAssignment","src":"5502:63:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5537:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"5548:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5533:3:33"},"nodeType":"YulFunctionCall","src":"5533:22:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5557:7:33"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5512:20:33"},"nodeType":"YulFunctionCall","src":"5512:53:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5502:6:33"}]}]},{"nodeType":"YulBlock","src":"5585:118:33","statements":[{"nodeType":"YulVariableDeclaration","src":"5600:16:33","value":{"kind":"number","nodeType":"YulLiteral","src":"5614:2:33","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5604:6:33","type":""}]},{"nodeType":"YulAssignment","src":"5630:63:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5665:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"5676:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5661:3:33"},"nodeType":"YulFunctionCall","src":"5661:22:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5685:7:33"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5640:20:33"},"nodeType":"YulFunctionCall","src":"5640:53:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5630:6:33"}]}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5281:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5292:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5304:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5312:6:33","type":""}],"src":"5236:474:33"},{"body":{"nodeType":"YulBlock","src":"5744:152:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5761:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5764:77:33","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5754:6:33"},"nodeType":"YulFunctionCall","src":"5754:88:33"},"nodeType":"YulExpressionStatement","src":"5754:88:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5858:1:33","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5861:4:33","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5851:6:33"},"nodeType":"YulFunctionCall","src":"5851:15:33"},"nodeType":"YulExpressionStatement","src":"5851:15:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5882:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5885:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5875:6:33"},"nodeType":"YulFunctionCall","src":"5875:15:33"},"nodeType":"YulExpressionStatement","src":"5875:15:33"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"5716:180:33"},{"body":{"nodeType":"YulBlock","src":"5953:269:33","statements":[{"nodeType":"YulAssignment","src":"5963:22:33","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"5977:4:33"},{"kind":"number","nodeType":"YulLiteral","src":"5983:1:33","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"5973:3:33"},"nodeType":"YulFunctionCall","src":"5973:12:33"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"5963:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"5994:38:33","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"6024:4:33"},{"kind":"number","nodeType":"YulLiteral","src":"6030:1:33","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6020:3:33"},"nodeType":"YulFunctionCall","src":"6020:12:33"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"5998:18:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"6071:51:33","statements":[{"nodeType":"YulAssignment","src":"6085:27:33","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6099:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"6107:4:33","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6095:3:33"},"nodeType":"YulFunctionCall","src":"6095:17:33"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"6085:6:33"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"6051:18:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6044:6:33"},"nodeType":"YulFunctionCall","src":"6044:26:33"},"nodeType":"YulIf","src":"6041:81:33"},{"body":{"nodeType":"YulBlock","src":"6174:42:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"6188:16:33"},"nodeType":"YulFunctionCall","src":"6188:18:33"},"nodeType":"YulExpressionStatement","src":"6188:18:33"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"6138:18:33"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6161:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"6169:2:33","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6158:2:33"},"nodeType":"YulFunctionCall","src":"6158:14:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"6135:2:33"},"nodeType":"YulFunctionCall","src":"6135:38:33"},"nodeType":"YulIf","src":"6132:84:33"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"5937:4:33","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"5946:6:33","type":""}],"src":"5902:320:33"},{"body":{"nodeType":"YulBlock","src":"6256:152:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6273:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6276:77:33","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6266:6:33"},"nodeType":"YulFunctionCall","src":"6266:88:33"},"nodeType":"YulExpressionStatement","src":"6266:88:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6370:1:33","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"6373:4:33","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6363:6:33"},"nodeType":"YulFunctionCall","src":"6363:15:33"},"nodeType":"YulExpressionStatement","src":"6363:15:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6394:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6397:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6387:6:33"},"nodeType":"YulFunctionCall","src":"6387:15:33"},"nodeType":"YulExpressionStatement","src":"6387:15:33"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"6228:180:33"},{"body":{"nodeType":"YulBlock","src":"6458:261:33","statements":[{"nodeType":"YulAssignment","src":"6468:25:33","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"6491:1:33"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"6473:17:33"},"nodeType":"YulFunctionCall","src":"6473:20:33"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"6468:1:33"}]},{"nodeType":"YulAssignment","src":"6502:25:33","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"6525:1:33"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"6507:17:33"},"nodeType":"YulFunctionCall","src":"6507:20:33"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"6502:1:33"}]},{"body":{"nodeType":"YulBlock","src":"6665:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"6667:16:33"},"nodeType":"YulFunctionCall","src":"6667:18:33"},"nodeType":"YulExpressionStatement","src":"6667:18:33"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"6586:1:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6593:66:33","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"},{"name":"y","nodeType":"YulIdentifier","src":"6661:1:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6589:3:33"},"nodeType":"YulFunctionCall","src":"6589:74:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6583:2:33"},"nodeType":"YulFunctionCall","src":"6583:81:33"},"nodeType":"YulIf","src":"6580:107:33"},{"nodeType":"YulAssignment","src":"6697:16:33","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"6708:1:33"},{"name":"y","nodeType":"YulIdentifier","src":"6711:1:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6704:3:33"},"nodeType":"YulFunctionCall","src":"6704:9:33"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"6697:3:33"}]}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"6445:1:33","type":""},{"name":"y","nodeType":"YulTypedName","src":"6448:1:33","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"6454:3:33","type":""}],"src":"6414:305:33"},{"body":{"nodeType":"YulBlock","src":"6831:118:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"6853:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"6861:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6849:3:33"},"nodeType":"YulFunctionCall","src":"6849:14:33"},{"hexValue":"45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77","kind":"string","nodeType":"YulLiteral","src":"6865:34:33","type":"","value":"ERC20: decreased allowance below"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6842:6:33"},"nodeType":"YulFunctionCall","src":"6842:58:33"},"nodeType":"YulExpressionStatement","src":"6842:58:33"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"6921:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"6929:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6917:3:33"},"nodeType":"YulFunctionCall","src":"6917:15:33"},{"hexValue":"207a65726f","kind":"string","nodeType":"YulLiteral","src":"6934:7:33","type":"","value":" zero"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6910:6:33"},"nodeType":"YulFunctionCall","src":"6910:32:33"},"nodeType":"YulExpressionStatement","src":"6910:32:33"}]},"name":"store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"6823:6:33","type":""}],"src":"6725:224:33"},{"body":{"nodeType":"YulBlock","src":"7101:220:33","statements":[{"nodeType":"YulAssignment","src":"7111:74:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7177:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"7182:2:33","type":"","value":"37"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"7118:58:33"},"nodeType":"YulFunctionCall","src":"7118:67:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7111:3:33"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7283:3:33"}],"functionName":{"name":"store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8","nodeType":"YulIdentifier","src":"7194:88:33"},"nodeType":"YulFunctionCall","src":"7194:93:33"},"nodeType":"YulExpressionStatement","src":"7194:93:33"},{"nodeType":"YulAssignment","src":"7296:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7307:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"7312:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7303:3:33"},"nodeType":"YulFunctionCall","src":"7303:12:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"7296:3:33"}]}]},"name":"abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"7089:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7097:3:33","type":""}],"src":"6955:366:33"},{"body":{"nodeType":"YulBlock","src":"7498:248:33","statements":[{"nodeType":"YulAssignment","src":"7508:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7520:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"7531:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7516:3:33"},"nodeType":"YulFunctionCall","src":"7516:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7508:4:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7555:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"7566:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7551:3:33"},"nodeType":"YulFunctionCall","src":"7551:17:33"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"7574:4:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"7580:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7570:3:33"},"nodeType":"YulFunctionCall","src":"7570:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7544:6:33"},"nodeType":"YulFunctionCall","src":"7544:47:33"},"nodeType":"YulExpressionStatement","src":"7544:47:33"},{"nodeType":"YulAssignment","src":"7600:139:33","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"7734:4:33"}],"functionName":{"name":"abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"7608:124:33"},"nodeType":"YulFunctionCall","src":"7608:131:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7600:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7478:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7493:4:33","type":""}],"src":"7327:419:33"},{"body":{"nodeType":"YulBlock","src":"7858:117:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7880:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"7888:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7876:3:33"},"nodeType":"YulFunctionCall","src":"7876:14:33"},{"hexValue":"45524332303a20617070726f76652066726f6d20746865207a65726f20616464","kind":"string","nodeType":"YulLiteral","src":"7892:34:33","type":"","value":"ERC20: approve from the zero add"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7869:6:33"},"nodeType":"YulFunctionCall","src":"7869:58:33"},"nodeType":"YulExpressionStatement","src":"7869:58:33"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7948:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"7956:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7944:3:33"},"nodeType":"YulFunctionCall","src":"7944:15:33"},{"hexValue":"72657373","kind":"string","nodeType":"YulLiteral","src":"7961:6:33","type":"","value":"ress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7937:6:33"},"nodeType":"YulFunctionCall","src":"7937:31:33"},"nodeType":"YulExpressionStatement","src":"7937:31:33"}]},"name":"store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"7850:6:33","type":""}],"src":"7752:223:33"},{"body":{"nodeType":"YulBlock","src":"8127:220:33","statements":[{"nodeType":"YulAssignment","src":"8137:74:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8203:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"8208:2:33","type":"","value":"36"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"8144:58:33"},"nodeType":"YulFunctionCall","src":"8144:67:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"8137:3:33"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8309:3:33"}],"functionName":{"name":"store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208","nodeType":"YulIdentifier","src":"8220:88:33"},"nodeType":"YulFunctionCall","src":"8220:93:33"},"nodeType":"YulExpressionStatement","src":"8220:93:33"},{"nodeType":"YulAssignment","src":"8322:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8333:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"8338:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8329:3:33"},"nodeType":"YulFunctionCall","src":"8329:12:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"8322:3:33"}]}]},"name":"abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"8115:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"8123:3:33","type":""}],"src":"7981:366:33"},{"body":{"nodeType":"YulBlock","src":"8524:248:33","statements":[{"nodeType":"YulAssignment","src":"8534:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8546:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"8557:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8542:3:33"},"nodeType":"YulFunctionCall","src":"8542:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8534:4:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8581:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"8592:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8577:3:33"},"nodeType":"YulFunctionCall","src":"8577:17:33"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"8600:4:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"8606:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8596:3:33"},"nodeType":"YulFunctionCall","src":"8596:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8570:6:33"},"nodeType":"YulFunctionCall","src":"8570:47:33"},"nodeType":"YulExpressionStatement","src":"8570:47:33"},{"nodeType":"YulAssignment","src":"8626:139:33","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"8760:4:33"}],"functionName":{"name":"abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"8634:124:33"},"nodeType":"YulFunctionCall","src":"8634:131:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8626:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8504:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8519:4:33","type":""}],"src":"8353:419:33"},{"body":{"nodeType":"YulBlock","src":"8884:115:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"8906:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"8914:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8902:3:33"},"nodeType":"YulFunctionCall","src":"8902:14:33"},{"hexValue":"45524332303a20617070726f766520746f20746865207a65726f206164647265","kind":"string","nodeType":"YulLiteral","src":"8918:34:33","type":"","value":"ERC20: approve to the zero addre"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8895:6:33"},"nodeType":"YulFunctionCall","src":"8895:58:33"},"nodeType":"YulExpressionStatement","src":"8895:58:33"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"8974:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"8982:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8970:3:33"},"nodeType":"YulFunctionCall","src":"8970:15:33"},{"hexValue":"7373","kind":"string","nodeType":"YulLiteral","src":"8987:4:33","type":"","value":"ss"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8963:6:33"},"nodeType":"YulFunctionCall","src":"8963:29:33"},"nodeType":"YulExpressionStatement","src":"8963:29:33"}]},"name":"store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"8876:6:33","type":""}],"src":"8778:221:33"},{"body":{"nodeType":"YulBlock","src":"9151:220:33","statements":[{"nodeType":"YulAssignment","src":"9161:74:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9227:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"9232:2:33","type":"","value":"34"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9168:58:33"},"nodeType":"YulFunctionCall","src":"9168:67:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"9161:3:33"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9333:3:33"}],"functionName":{"name":"store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029","nodeType":"YulIdentifier","src":"9244:88:33"},"nodeType":"YulFunctionCall","src":"9244:93:33"},"nodeType":"YulExpressionStatement","src":"9244:93:33"},{"nodeType":"YulAssignment","src":"9346:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9357:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"9362:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9353:3:33"},"nodeType":"YulFunctionCall","src":"9353:12:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"9346:3:33"}]}]},"name":"abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"9139:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"9147:3:33","type":""}],"src":"9005:366:33"},{"body":{"nodeType":"YulBlock","src":"9548:248:33","statements":[{"nodeType":"YulAssignment","src":"9558:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9570:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"9581:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9566:3:33"},"nodeType":"YulFunctionCall","src":"9566:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9558:4:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9605:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"9616:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9601:3:33"},"nodeType":"YulFunctionCall","src":"9601:17:33"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"9624:4:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"9630:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9620:3:33"},"nodeType":"YulFunctionCall","src":"9620:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9594:6:33"},"nodeType":"YulFunctionCall","src":"9594:47:33"},"nodeType":"YulExpressionStatement","src":"9594:47:33"},{"nodeType":"YulAssignment","src":"9650:139:33","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"9784:4:33"}],"functionName":{"name":"abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9658:124:33"},"nodeType":"YulFunctionCall","src":"9658:131:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9650:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9528:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9543:4:33","type":""}],"src":"9377:419:33"},{"body":{"nodeType":"YulBlock","src":"9908:73:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"9930:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"9938:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9926:3:33"},"nodeType":"YulFunctionCall","src":"9926:14:33"},{"hexValue":"45524332303a20696e73756666696369656e7420616c6c6f77616e6365","kind":"string","nodeType":"YulLiteral","src":"9942:31:33","type":"","value":"ERC20: insufficient allowance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9919:6:33"},"nodeType":"YulFunctionCall","src":"9919:55:33"},"nodeType":"YulExpressionStatement","src":"9919:55:33"}]},"name":"store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"9900:6:33","type":""}],"src":"9802:179:33"},{"body":{"nodeType":"YulBlock","src":"10133:220:33","statements":[{"nodeType":"YulAssignment","src":"10143:74:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10209:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"10214:2:33","type":"","value":"29"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"10150:58:33"},"nodeType":"YulFunctionCall","src":"10150:67:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"10143:3:33"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10315:3:33"}],"functionName":{"name":"store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe","nodeType":"YulIdentifier","src":"10226:88:33"},"nodeType":"YulFunctionCall","src":"10226:93:33"},"nodeType":"YulExpressionStatement","src":"10226:93:33"},{"nodeType":"YulAssignment","src":"10328:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10339:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"10344:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10335:3:33"},"nodeType":"YulFunctionCall","src":"10335:12:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"10328:3:33"}]}]},"name":"abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"10121:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"10129:3:33","type":""}],"src":"9987:366:33"},{"body":{"nodeType":"YulBlock","src":"10530:248:33","statements":[{"nodeType":"YulAssignment","src":"10540:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10552:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"10563:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10548:3:33"},"nodeType":"YulFunctionCall","src":"10548:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10540:4:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10587:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"10598:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10583:3:33"},"nodeType":"YulFunctionCall","src":"10583:17:33"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"10606:4:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"10612:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10602:3:33"},"nodeType":"YulFunctionCall","src":"10602:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10576:6:33"},"nodeType":"YulFunctionCall","src":"10576:47:33"},"nodeType":"YulExpressionStatement","src":"10576:47:33"},{"nodeType":"YulAssignment","src":"10632:139:33","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"10766:4:33"}],"functionName":{"name":"abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"10640:124:33"},"nodeType":"YulFunctionCall","src":"10640:131:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10632:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10510:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10525:4:33","type":""}],"src":"10359:419:33"},{"body":{"nodeType":"YulBlock","src":"10890:118:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"10912:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"10920:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10908:3:33"},"nodeType":"YulFunctionCall","src":"10908:14:33"},{"hexValue":"45524332303a207472616e736665722066726f6d20746865207a65726f206164","kind":"string","nodeType":"YulLiteral","src":"10924:34:33","type":"","value":"ERC20: transfer from the zero ad"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10901:6:33"},"nodeType":"YulFunctionCall","src":"10901:58:33"},"nodeType":"YulExpressionStatement","src":"10901:58:33"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"10980:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"10988:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10976:3:33"},"nodeType":"YulFunctionCall","src":"10976:15:33"},{"hexValue":"6472657373","kind":"string","nodeType":"YulLiteral","src":"10993:7:33","type":"","value":"dress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10969:6:33"},"nodeType":"YulFunctionCall","src":"10969:32:33"},"nodeType":"YulExpressionStatement","src":"10969:32:33"}]},"name":"store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"10882:6:33","type":""}],"src":"10784:224:33"},{"body":{"nodeType":"YulBlock","src":"11160:220:33","statements":[{"nodeType":"YulAssignment","src":"11170:74:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11236:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"11241:2:33","type":"","value":"37"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11177:58:33"},"nodeType":"YulFunctionCall","src":"11177:67:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"11170:3:33"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11342:3:33"}],"functionName":{"name":"store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea","nodeType":"YulIdentifier","src":"11253:88:33"},"nodeType":"YulFunctionCall","src":"11253:93:33"},"nodeType":"YulExpressionStatement","src":"11253:93:33"},{"nodeType":"YulAssignment","src":"11355:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11366:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"11371:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11362:3:33"},"nodeType":"YulFunctionCall","src":"11362:12:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"11355:3:33"}]}]},"name":"abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"11148:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"11156:3:33","type":""}],"src":"11014:366:33"},{"body":{"nodeType":"YulBlock","src":"11557:248:33","statements":[{"nodeType":"YulAssignment","src":"11567:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11579:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"11590:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11575:3:33"},"nodeType":"YulFunctionCall","src":"11575:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11567:4:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11614:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"11625:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11610:3:33"},"nodeType":"YulFunctionCall","src":"11610:17:33"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"11633:4:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"11639:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11629:3:33"},"nodeType":"YulFunctionCall","src":"11629:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11603:6:33"},"nodeType":"YulFunctionCall","src":"11603:47:33"},"nodeType":"YulExpressionStatement","src":"11603:47:33"},{"nodeType":"YulAssignment","src":"11659:139:33","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"11793:4:33"}],"functionName":{"name":"abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11667:124:33"},"nodeType":"YulFunctionCall","src":"11667:131:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11659:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11537:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11552:4:33","type":""}],"src":"11386:419:33"},{"body":{"nodeType":"YulBlock","src":"11917:116:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"11939:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"11947:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11935:3:33"},"nodeType":"YulFunctionCall","src":"11935:14:33"},{"hexValue":"45524332303a207472616e7366657220746f20746865207a65726f2061646472","kind":"string","nodeType":"YulLiteral","src":"11951:34:33","type":"","value":"ERC20: transfer to the zero addr"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11928:6:33"},"nodeType":"YulFunctionCall","src":"11928:58:33"},"nodeType":"YulExpressionStatement","src":"11928:58:33"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"12007:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"12015:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12003:3:33"},"nodeType":"YulFunctionCall","src":"12003:15:33"},{"hexValue":"657373","kind":"string","nodeType":"YulLiteral","src":"12020:5:33","type":"","value":"ess"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11996:6:33"},"nodeType":"YulFunctionCall","src":"11996:30:33"},"nodeType":"YulExpressionStatement","src":"11996:30:33"}]},"name":"store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"11909:6:33","type":""}],"src":"11811:222:33"},{"body":{"nodeType":"YulBlock","src":"12185:220:33","statements":[{"nodeType":"YulAssignment","src":"12195:74:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12261:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"12266:2:33","type":"","value":"35"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12202:58:33"},"nodeType":"YulFunctionCall","src":"12202:67:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"12195:3:33"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12367:3:33"}],"functionName":{"name":"store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f","nodeType":"YulIdentifier","src":"12278:88:33"},"nodeType":"YulFunctionCall","src":"12278:93:33"},"nodeType":"YulExpressionStatement","src":"12278:93:33"},{"nodeType":"YulAssignment","src":"12380:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12391:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"12396:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12387:3:33"},"nodeType":"YulFunctionCall","src":"12387:12:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"12380:3:33"}]}]},"name":"abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"12173:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"12181:3:33","type":""}],"src":"12039:366:33"},{"body":{"nodeType":"YulBlock","src":"12582:248:33","statements":[{"nodeType":"YulAssignment","src":"12592:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12604:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"12615:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12600:3:33"},"nodeType":"YulFunctionCall","src":"12600:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12592:4:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12639:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"12650:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12635:3:33"},"nodeType":"YulFunctionCall","src":"12635:17:33"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12658:4:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"12664:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12654:3:33"},"nodeType":"YulFunctionCall","src":"12654:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12628:6:33"},"nodeType":"YulFunctionCall","src":"12628:47:33"},"nodeType":"YulExpressionStatement","src":"12628:47:33"},{"nodeType":"YulAssignment","src":"12684:139:33","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12818:4:33"}],"functionName":{"name":"abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12692:124:33"},"nodeType":"YulFunctionCall","src":"12692:131:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12684:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12562:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12577:4:33","type":""}],"src":"12411:419:33"},{"body":{"nodeType":"YulBlock","src":"12942:119:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"12964:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"12972:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12960:3:33"},"nodeType":"YulFunctionCall","src":"12960:14:33"},{"hexValue":"45524332303a207472616e7366657220616d6f756e7420657863656564732062","kind":"string","nodeType":"YulLiteral","src":"12976:34:33","type":"","value":"ERC20: transfer amount exceeds b"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12953:6:33"},"nodeType":"YulFunctionCall","src":"12953:58:33"},"nodeType":"YulExpressionStatement","src":"12953:58:33"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"13032:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"13040:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13028:3:33"},"nodeType":"YulFunctionCall","src":"13028:15:33"},{"hexValue":"616c616e6365","kind":"string","nodeType":"YulLiteral","src":"13045:8:33","type":"","value":"alance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13021:6:33"},"nodeType":"YulFunctionCall","src":"13021:33:33"},"nodeType":"YulExpressionStatement","src":"13021:33:33"}]},"name":"store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"12934:6:33","type":""}],"src":"12836:225:33"},{"body":{"nodeType":"YulBlock","src":"13213:220:33","statements":[{"nodeType":"YulAssignment","src":"13223:74:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13289:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"13294:2:33","type":"","value":"38"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13230:58:33"},"nodeType":"YulFunctionCall","src":"13230:67:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"13223:3:33"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13395:3:33"}],"functionName":{"name":"store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6","nodeType":"YulIdentifier","src":"13306:88:33"},"nodeType":"YulFunctionCall","src":"13306:93:33"},"nodeType":"YulExpressionStatement","src":"13306:93:33"},{"nodeType":"YulAssignment","src":"13408:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13419:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"13424:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13415:3:33"},"nodeType":"YulFunctionCall","src":"13415:12:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"13408:3:33"}]}]},"name":"abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"13201:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"13209:3:33","type":""}],"src":"13067:366:33"},{"body":{"nodeType":"YulBlock","src":"13610:248:33","statements":[{"nodeType":"YulAssignment","src":"13620:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13632:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"13643:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13628:3:33"},"nodeType":"YulFunctionCall","src":"13628:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13620:4:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13667:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"13678:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13663:3:33"},"nodeType":"YulFunctionCall","src":"13663:17:33"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13686:4:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"13692:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13682:3:33"},"nodeType":"YulFunctionCall","src":"13682:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13656:6:33"},"nodeType":"YulFunctionCall","src":"13656:47:33"},"nodeType":"YulExpressionStatement","src":"13656:47:33"},{"nodeType":"YulAssignment","src":"13712:139:33","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13846:4:33"}],"functionName":{"name":"abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13720:124:33"},"nodeType":"YulFunctionCall","src":"13720:131:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13712:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13590:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13605:4:33","type":""}],"src":"13439:419:33"}]},"contents":"{\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function abi_encode_t_uint8_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint8_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x > (maxValue - y)\n        if gt(x, sub(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, y)) { panic_error_0x11() }\n\n        sum := add(x, y)\n    }\n\n    function store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: decreased allowance below\")\n\n        mstore(add(memPtr, 32), \" zero\")\n\n    }\n\n    function abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)\n        store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: approve from the zero add\")\n\n        mstore(add(memPtr, 32), \"ress\")\n\n    }\n\n    function abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 36)\n        store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: approve to the zero addre\")\n\n        mstore(add(memPtr, 32), \"ss\")\n\n    }\n\n    function abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 34)\n        store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: insufficient allowance\")\n\n    }\n\n    function abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 29)\n        store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: transfer from the zero ad\")\n\n        mstore(add(memPtr, 32), \"dress\")\n\n    }\n\n    function abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)\n        store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: transfer to the zero addr\")\n\n        mstore(add(memPtr, 32), \"ess\")\n\n    }\n\n    function abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 35)\n        store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: transfer amount exceeds b\")\n\n        mstore(add(memPtr, 32), \"alance\")\n\n    }\n\n    function abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n}\n","id":33,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461016857806370a082311461019857806395d89b41146101c8578063a457c2d7146101e6578063a9059cbb14610216578063dd62ed3e14610246576100a9565b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100fc57806323b872dd1461011a578063313ce5671461014a575b600080fd5b6100b6610276565b6040516100c39190610b1d565b60405180910390f35b6100e660048036038101906100e19190610bd8565b610308565b6040516100f39190610c33565b60405180910390f35b61010461032b565b6040516101119190610c5d565b60405180910390f35b610134600480360381019061012f9190610c78565b610335565b6040516101419190610c33565b60405180910390f35b610152610364565b60405161015f9190610ce7565b60405180910390f35b610182600480360381019061017d9190610bd8565b61036d565b60405161018f9190610c33565b60405180910390f35b6101b260048036038101906101ad9190610d02565b6103a4565b6040516101bf9190610c5d565b60405180910390f35b6101d06103ed565b6040516101dd9190610b1d565b60405180910390f35b61020060048036038101906101fb9190610bd8565b61047f565b60405161020d9190610c33565b60405180910390f35b610230600480360381019061022b9190610bd8565b6104f6565b60405161023d9190610c33565b60405180910390f35b610260600480360381019061025b9190610d2f565b610519565b60405161026d9190610c5d565b60405180910390f35b60606036805461028590610d9e565b80601f01602080910402602001604051908101604052809291908181526020018280546102b190610d9e565b80156102fe5780601f106102d3576101008083540402835291602001916102fe565b820191906000526020600020905b8154815290600101906020018083116102e157829003601f168201915b5050505050905090565b6000806103136105a0565b90506103208185856105a8565b600191505092915050565b6000603554905090565b6000806103406105a0565b905061034d858285610773565b6103588585856107ff565b60019150509392505050565b60006012905090565b6000806103786105a0565b905061039981858561038a8589610519565b6103949190610dff565b6105a8565b600191505092915050565b6000603360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060603780546103fc90610d9e565b80601f016020809104026020016040519081016040528092919081815260200182805461042890610d9e565b80156104755780601f1061044a57610100808354040283529160200191610475565b820191906000526020600020905b81548152906001019060200180831161045857829003601f168201915b5050505050905090565b60008061048a6105a0565b905060006104988286610519565b9050838110156104dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d490610ec7565b60405180910390fd5b6104ea82868684036105a8565b60019250505092915050565b6000806105016105a0565b905061050e8185856107ff565b600191505092915050565b6000603460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610618576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060f90610f59565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610688576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067f90610feb565b60405180910390fd5b80603460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516107669190610c5d565b60405180910390a3505050565b600061077f8484610519565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146107f957818110156107eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e290611057565b60405180910390fd5b6107f884848484036105a8565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561086f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610866906110e9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156108df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d69061117b565b60405180910390fd5b6108ea838383610a7a565b6000603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610971576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109689061120d565b60405180910390fd5b818103603360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610a619190610c5d565b60405180910390a3610a74848484610a7f565b50505050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610abe578082015181840152602081019050610aa3565b83811115610acd576000848401525b50505050565b6000601f19601f8301169050919050565b6000610aef82610a84565b610af98185610a8f565b9350610b09818560208601610aa0565b610b1281610ad3565b840191505092915050565b60006020820190508181036000830152610b378184610ae4565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b6f82610b44565b9050919050565b610b7f81610b64565b8114610b8a57600080fd5b50565b600081359050610b9c81610b76565b92915050565b6000819050919050565b610bb581610ba2565b8114610bc057600080fd5b50565b600081359050610bd281610bac565b92915050565b60008060408385031215610bef57610bee610b3f565b5b6000610bfd85828601610b8d565b9250506020610c0e85828601610bc3565b9150509250929050565b60008115159050919050565b610c2d81610c18565b82525050565b6000602082019050610c486000830184610c24565b92915050565b610c5781610ba2565b82525050565b6000602082019050610c726000830184610c4e565b92915050565b600080600060608486031215610c9157610c90610b3f565b5b6000610c9f86828701610b8d565b9350506020610cb086828701610b8d565b9250506040610cc186828701610bc3565b9150509250925092565b600060ff82169050919050565b610ce181610ccb565b82525050565b6000602082019050610cfc6000830184610cd8565b92915050565b600060208284031215610d1857610d17610b3f565b5b6000610d2684828501610b8d565b91505092915050565b60008060408385031215610d4657610d45610b3f565b5b6000610d5485828601610b8d565b9250506020610d6585828601610b8d565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610db657607f821691505b60208210811415610dca57610dc9610d6f565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610e0a82610ba2565b9150610e1583610ba2565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610e4a57610e49610dd0565b5b828201905092915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000610eb1602583610a8f565b9150610ebc82610e55565b604082019050919050565b60006020820190508181036000830152610ee081610ea4565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000610f43602483610a8f565b9150610f4e82610ee7565b604082019050919050565b60006020820190508181036000830152610f7281610f36565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000610fd5602283610a8f565b9150610fe082610f79565b604082019050919050565b6000602082019050818103600083015261100481610fc8565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b6000611041601d83610a8f565b915061104c8261100b565b602082019050919050565b6000602082019050818103600083015261107081611034565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b60006110d3602583610a8f565b91506110de82611077565b604082019050919050565b60006020820190508181036000830152611102816110c6565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000611165602383610a8f565b915061117082611109565b604082019050919050565b6000602082019050818103600083015261119481611158565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b60006111f7602683610a8f565b91506112028261119b565b604082019050919050565b60006020820190508181036000830152611226816111ea565b905091905056fea264697066735822122023f12491ad85e6054ce323b388824d15c0ef9ec7eba850a2c49075af21fce61664736f6c63430008090033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x168 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x198 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1C8 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x1E6 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x216 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x246 JUMPI PUSH2 0xA9 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xFC JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x11A JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x14A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x276 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0xB1D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xE6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE1 SWAP2 SWAP1 PUSH2 0xBD8 JUMP JUMPDEST PUSH2 0x308 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF3 SWAP2 SWAP1 PUSH2 0xC33 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x104 PUSH2 0x32B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x111 SWAP2 SWAP1 PUSH2 0xC5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x134 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x12F SWAP2 SWAP1 PUSH2 0xC78 JUMP JUMPDEST PUSH2 0x335 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x141 SWAP2 SWAP1 PUSH2 0xC33 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x152 PUSH2 0x364 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x15F SWAP2 SWAP1 PUSH2 0xCE7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x182 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x17D SWAP2 SWAP1 PUSH2 0xBD8 JUMP JUMPDEST PUSH2 0x36D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x18F SWAP2 SWAP1 PUSH2 0xC33 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1B2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1AD SWAP2 SWAP1 PUSH2 0xD02 JUMP JUMPDEST PUSH2 0x3A4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1BF SWAP2 SWAP1 PUSH2 0xC5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D0 PUSH2 0x3ED JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1DD SWAP2 SWAP1 PUSH2 0xB1D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x200 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1FB SWAP2 SWAP1 PUSH2 0xBD8 JUMP JUMPDEST PUSH2 0x47F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x20D SWAP2 SWAP1 PUSH2 0xC33 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x230 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x22B SWAP2 SWAP1 PUSH2 0xBD8 JUMP JUMPDEST PUSH2 0x4F6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x23D SWAP2 SWAP1 PUSH2 0xC33 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x260 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x25B SWAP2 SWAP1 PUSH2 0xD2F JUMP JUMPDEST PUSH2 0x519 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x26D SWAP2 SWAP1 PUSH2 0xC5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 PUSH1 0x36 DUP1 SLOAD PUSH2 0x285 SWAP1 PUSH2 0xD9E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2B1 SWAP1 PUSH2 0xD9E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2FE JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2D3 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2FE JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2E1 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x313 PUSH2 0x5A0 JUMP JUMPDEST SWAP1 POP PUSH2 0x320 DUP2 DUP6 DUP6 PUSH2 0x5A8 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x35 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x340 PUSH2 0x5A0 JUMP JUMPDEST SWAP1 POP PUSH2 0x34D DUP6 DUP3 DUP6 PUSH2 0x773 JUMP JUMPDEST PUSH2 0x358 DUP6 DUP6 DUP6 PUSH2 0x7FF JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x378 PUSH2 0x5A0 JUMP JUMPDEST SWAP1 POP PUSH2 0x399 DUP2 DUP6 DUP6 PUSH2 0x38A DUP6 DUP10 PUSH2 0x519 JUMP JUMPDEST PUSH2 0x394 SWAP2 SWAP1 PUSH2 0xDFF JUMP JUMPDEST PUSH2 0x5A8 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x37 DUP1 SLOAD PUSH2 0x3FC SWAP1 PUSH2 0xD9E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x428 SWAP1 PUSH2 0xD9E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x475 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x44A JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x475 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x458 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x48A PUSH2 0x5A0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x498 DUP3 DUP7 PUSH2 0x519 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x4DD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4D4 SWAP1 PUSH2 0xEC7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x4EA DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x5A8 JUMP JUMPDEST PUSH1 0x1 SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x501 PUSH2 0x5A0 JUMP JUMPDEST SWAP1 POP PUSH2 0x50E DUP2 DUP6 DUP6 PUSH2 0x7FF JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x34 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x618 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x60F SWAP1 PUSH2 0xF59 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x688 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x67F SWAP1 PUSH2 0xFEB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x34 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP4 PUSH1 0x40 MLOAD PUSH2 0x766 SWAP2 SWAP1 PUSH2 0xC5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x77F DUP5 DUP5 PUSH2 0x519 JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ PUSH2 0x7F9 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x7EB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7E2 SWAP1 PUSH2 0x1057 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x7F8 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x5A8 JUMP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x86F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x866 SWAP1 PUSH2 0x10E9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x8DF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D6 SWAP1 PUSH2 0x117B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x8EA DUP4 DUP4 DUP4 PUSH2 0xA7A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x971 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x968 SWAP1 PUSH2 0x120D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH1 0x33 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x33 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0xA61 SWAP2 SWAP1 PUSH2 0xC5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0xA74 DUP5 DUP5 DUP5 PUSH2 0xA7F JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xABE JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xAA3 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xACD JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAEF DUP3 PUSH2 0xA84 JUMP JUMPDEST PUSH2 0xAF9 DUP2 DUP6 PUSH2 0xA8F JUMP JUMPDEST SWAP4 POP PUSH2 0xB09 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0xAA0 JUMP JUMPDEST PUSH2 0xB12 DUP2 PUSH2 0xAD3 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xB37 DUP2 DUP5 PUSH2 0xAE4 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB6F DUP3 PUSH2 0xB44 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xB7F DUP2 PUSH2 0xB64 JUMP JUMPDEST DUP2 EQ PUSH2 0xB8A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xB9C DUP2 PUSH2 0xB76 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xBB5 DUP2 PUSH2 0xBA2 JUMP JUMPDEST DUP2 EQ PUSH2 0xBC0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xBD2 DUP2 PUSH2 0xBAC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xBEF JUMPI PUSH2 0xBEE PUSH2 0xB3F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xBFD DUP6 DUP3 DUP7 ADD PUSH2 0xB8D JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xC0E DUP6 DUP3 DUP7 ADD PUSH2 0xBC3 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xC2D DUP2 PUSH2 0xC18 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xC48 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xC24 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xC57 DUP2 PUSH2 0xBA2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xC72 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xC4E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xC91 JUMPI PUSH2 0xC90 PUSH2 0xB3F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xC9F DUP7 DUP3 DUP8 ADD PUSH2 0xB8D JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xCB0 DUP7 DUP3 DUP8 ADD PUSH2 0xB8D JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xCC1 DUP7 DUP3 DUP8 ADD PUSH2 0xBC3 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xCE1 DUP2 PUSH2 0xCCB JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xCFC PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xCD8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD18 JUMPI PUSH2 0xD17 PUSH2 0xB3F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xD26 DUP5 DUP3 DUP6 ADD PUSH2 0xB8D JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xD46 JUMPI PUSH2 0xD45 PUSH2 0xB3F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xD54 DUP6 DUP3 DUP7 ADD PUSH2 0xB8D JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xD65 DUP6 DUP3 DUP7 ADD PUSH2 0xB8D JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0xDB6 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0xDCA JUMPI PUSH2 0xDC9 PUSH2 0xD6F JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xE0A DUP3 PUSH2 0xBA2 JUMP JUMPDEST SWAP2 POP PUSH2 0xE15 DUP4 PUSH2 0xBA2 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0xE4A JUMPI PUSH2 0xE49 PUSH2 0xDD0 JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x207A65726F000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEB1 PUSH1 0x25 DUP4 PUSH2 0xA8F JUMP JUMPDEST SWAP2 POP PUSH2 0xEBC DUP3 PUSH2 0xE55 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xEE0 DUP2 PUSH2 0xEA4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF43 PUSH1 0x24 DUP4 PUSH2 0xA8F JUMP JUMPDEST SWAP2 POP PUSH2 0xF4E DUP3 PUSH2 0xEE7 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xF72 DUP2 PUSH2 0xF36 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7373000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFD5 PUSH1 0x22 DUP4 PUSH2 0xA8F JUMP JUMPDEST SWAP2 POP PUSH2 0xFE0 DUP3 PUSH2 0xF79 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1004 DUP2 PUSH2 0xFC8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1041 PUSH1 0x1D DUP4 PUSH2 0xA8F JUMP JUMPDEST SWAP2 POP PUSH2 0x104C DUP3 PUSH2 0x100B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1070 DUP2 PUSH2 0x1034 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10D3 PUSH1 0x25 DUP4 PUSH2 0xA8F JUMP JUMPDEST SWAP2 POP PUSH2 0x10DE DUP3 PUSH2 0x1077 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1102 DUP2 PUSH2 0x10C6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6573730000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1165 PUSH1 0x23 DUP4 PUSH2 0xA8F JUMP JUMPDEST SWAP2 POP PUSH2 0x1170 DUP3 PUSH2 0x1109 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1194 DUP2 PUSH2 0x1158 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x616C616E63650000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11F7 PUSH1 0x26 DUP4 PUSH2 0xA8F JUMP JUMPDEST SWAP2 POP PUSH2 0x1202 DUP3 PUSH2 0x119B JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1226 DUP2 PUSH2 0x11EA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x23 CALL 0x24 SWAP2 0xAD DUP6 0xE6 SDIV 0x4C 0xE3 0x23 0xB3 DUP9 DUP3 0x4D ISZERO 0xC0 0xEF SWAP15 0xC7 0xEB 0xA8 POP LOG2 0xC4 SWAP1 PUSH22 0xAF21FCE61664736F6C63430008090033000000000000 ","sourceMap":"1480:12159:7:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2491:98;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4768:197;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3579:106;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5527:286;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3428:91;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6208:234;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3743:125;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2702:102;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6929:427;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4064:189;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4311:149;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2491:98;2545:13;2577:5;2570:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2491:98;:::o;4768:197::-;4851:4;4867:13;4883:12;:10;:12::i;:::-;4867:28;;4905:32;4914:5;4921:7;4930:6;4905:8;:32::i;:::-;4954:4;4947:11;;;4768:197;;;;:::o;3579:106::-;3640:7;3666:12;;3659:19;;3579:106;:::o;5527:286::-;5654:4;5670:15;5688:12;:10;:12::i;:::-;5670:30;;5710:38;5726:4;5732:7;5741:6;5710:15;:38::i;:::-;5758:27;5768:4;5774:2;5778:6;5758:9;:27::i;:::-;5802:4;5795:11;;;5527:286;;;;;:::o;3428:91::-;3486:5;3510:2;3503:9;;3428:91;:::o;6208:234::-;6296:4;6312:13;6328:12;:10;:12::i;:::-;6312:28;;6350:64;6359:5;6366:7;6403:10;6375:25;6385:5;6392:7;6375:9;:25::i;:::-;:38;;;;:::i;:::-;6350:8;:64::i;:::-;6431:4;6424:11;;;6208:234;;;;:::o;3743:125::-;3817:7;3843:9;:18;3853:7;3843:18;;;;;;;;;;;;;;;;3836:25;;3743:125;;;:::o;2702:102::-;2758:13;2790:7;2783:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2702:102;:::o;6929:427::-;7022:4;7038:13;7054:12;:10;:12::i;:::-;7038:28;;7076:24;7103:25;7113:5;7120:7;7103:9;:25::i;:::-;7076:52;;7166:15;7146:16;:35;;7138:85;;;;;;;;;;;;:::i;:::-;;;;;;;;;7257:60;7266:5;7273:7;7301:15;7282:16;:34;7257:8;:60::i;:::-;7345:4;7338:11;;;;6929:427;;;;:::o;4064:189::-;4143:4;4159:13;4175:12;:10;:12::i;:::-;4159:28;;4197;4207:5;4214:2;4218:6;4197:9;:28::i;:::-;4242:4;4235:11;;;4064:189;;;;:::o;4311:149::-;4400:7;4426:11;:18;4438:5;4426:18;;;;;;;;;;;;;;;:27;4445:7;4426:27;;;;;;;;;;;;;;;;4419:34;;4311:149;;;;:::o;850:96:16:-;903:7;929:10;922:17;;850:96;:::o;10841:370:7:-;10989:1;10972:19;;:5;:19;;;;10964:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;11069:1;11050:21;;:7;:21;;;;11042:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;11151:6;11121:11;:18;11133:5;11121:18;;;;;;;;;;;;;;;:27;11140:7;11121:27;;;;;;;;;;;;;;;:36;;;;11188:7;11172:32;;11181:5;11172:32;;;11197:6;11172:32;;;;;;:::i;:::-;;;;;;;;10841:370;;;:::o;11492:441::-;11622:24;11649:25;11659:5;11666:7;11649:9;:25::i;:::-;11622:52;;11708:17;11688:16;:37;11684:243;;11769:6;11749:16;:26;;11741:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;11851:51;11860:5;11867:7;11895:6;11876:16;:25;11851:8;:51::i;:::-;11684:243;11612:321;11492:441;;;:::o;7810:818::-;7952:1;7936:18;;:4;:18;;;;7928:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;8028:1;8014:16;;:2;:16;;;;8006:64;;;;;;;;;;;;:::i;:::-;;;;;;;;;8081:38;8102:4;8108:2;8112:6;8081:20;:38::i;:::-;8130:19;8152:9;:15;8162:4;8152:15;;;;;;;;;;;;;;;;8130:37;;8200:6;8185:11;:21;;8177:72;;;;;;;;;;;;:::i;:::-;;;;;;;;;8315:6;8301:11;:20;8283:9;:15;8293:4;8283:15;;;;;;;;;;;;;;;:38;;;;8515:6;8498:9;:13;8508:2;8498:13;;;;;;;;;;;;;;;;:23;;;;;;;;;;;8562:2;8547:26;;8556:4;8547:26;;;8566:6;8547:26;;;;;;:::i;:::-;;;;;;;;8584:37;8604:4;8610:2;8614:6;8584:19;:37::i;:::-;7918:710;7810:818;;;:::o;12517:121::-;;;;:::o;13226:120::-;;;;:::o;7:99:33:-;59:6;93:5;87:12;77:22;;7:99;;;:::o;112:169::-;196:11;230:6;225:3;218:19;270:4;265:3;261:14;246:29;;112:169;;;;:::o;287:307::-;355:1;365:113;379:6;376:1;373:13;365:113;;;464:1;459:3;455:11;449:18;445:1;440:3;436:11;429:39;401:2;398:1;394:10;389:15;;365:113;;;496:6;493:1;490:13;487:101;;;576:1;567:6;562:3;558:16;551:27;487:101;336:258;287:307;;;:::o;600:102::-;641:6;692:2;688:7;683:2;676:5;672:14;668:28;658:38;;600:102;;;:::o;708:364::-;796:3;824:39;857:5;824:39;:::i;:::-;879:71;943:6;938:3;879:71;:::i;:::-;872:78;;959:52;1004:6;999:3;992:4;985:5;981:16;959:52;:::i;:::-;1036:29;1058:6;1036:29;:::i;:::-;1031:3;1027:39;1020:46;;800:272;708:364;;;;:::o;1078:313::-;1191:4;1229:2;1218:9;1214:18;1206:26;;1278:9;1272:4;1268:20;1264:1;1253:9;1249:17;1242:47;1306:78;1379:4;1370:6;1306:78;:::i;:::-;1298:86;;1078:313;;;;:::o;1478:117::-;1587:1;1584;1577:12;1724:126;1761:7;1801:42;1794:5;1790:54;1779:65;;1724:126;;;:::o;1856:96::-;1893:7;1922:24;1940:5;1922:24;:::i;:::-;1911:35;;1856:96;;;:::o;1958:122::-;2031:24;2049:5;2031:24;:::i;:::-;2024:5;2021:35;2011:63;;2070:1;2067;2060:12;2011:63;1958:122;:::o;2086:139::-;2132:5;2170:6;2157:20;2148:29;;2186:33;2213:5;2186:33;:::i;:::-;2086:139;;;;:::o;2231:77::-;2268:7;2297:5;2286:16;;2231:77;;;:::o;2314:122::-;2387:24;2405:5;2387:24;:::i;:::-;2380:5;2377:35;2367:63;;2426:1;2423;2416:12;2367:63;2314:122;:::o;2442:139::-;2488:5;2526:6;2513:20;2504:29;;2542:33;2569:5;2542:33;:::i;:::-;2442:139;;;;:::o;2587:474::-;2655:6;2663;2712:2;2700:9;2691:7;2687:23;2683:32;2680:119;;;2718:79;;:::i;:::-;2680:119;2838:1;2863:53;2908:7;2899:6;2888:9;2884:22;2863:53;:::i;:::-;2853:63;;2809:117;2965:2;2991:53;3036:7;3027:6;3016:9;3012:22;2991:53;:::i;:::-;2981:63;;2936:118;2587:474;;;;;:::o;3067:90::-;3101:7;3144:5;3137:13;3130:21;3119:32;;3067:90;;;:::o;3163:109::-;3244:21;3259:5;3244:21;:::i;:::-;3239:3;3232:34;3163:109;;:::o;3278:210::-;3365:4;3403:2;3392:9;3388:18;3380:26;;3416:65;3478:1;3467:9;3463:17;3454:6;3416:65;:::i;:::-;3278:210;;;;:::o;3494:118::-;3581:24;3599:5;3581:24;:::i;:::-;3576:3;3569:37;3494:118;;:::o;3618:222::-;3711:4;3749:2;3738:9;3734:18;3726:26;;3762:71;3830:1;3819:9;3815:17;3806:6;3762:71;:::i;:::-;3618:222;;;;:::o;3846:619::-;3923:6;3931;3939;3988:2;3976:9;3967:7;3963:23;3959:32;3956:119;;;3994:79;;:::i;:::-;3956:119;4114:1;4139:53;4184:7;4175:6;4164:9;4160:22;4139:53;:::i;:::-;4129:63;;4085:117;4241:2;4267:53;4312:7;4303:6;4292:9;4288:22;4267:53;:::i;:::-;4257:63;;4212:118;4369:2;4395:53;4440:7;4431:6;4420:9;4416:22;4395:53;:::i;:::-;4385:63;;4340:118;3846:619;;;;;:::o;4471:86::-;4506:7;4546:4;4539:5;4535:16;4524:27;;4471:86;;;:::o;4563:112::-;4646:22;4662:5;4646:22;:::i;:::-;4641:3;4634:35;4563:112;;:::o;4681:214::-;4770:4;4808:2;4797:9;4793:18;4785:26;;4821:67;4885:1;4874:9;4870:17;4861:6;4821:67;:::i;:::-;4681:214;;;;:::o;4901:329::-;4960:6;5009:2;4997:9;4988:7;4984:23;4980:32;4977:119;;;5015:79;;:::i;:::-;4977:119;5135:1;5160:53;5205:7;5196:6;5185:9;5181:22;5160:53;:::i;:::-;5150:63;;5106:117;4901:329;;;;:::o;5236:474::-;5304:6;5312;5361:2;5349:9;5340:7;5336:23;5332:32;5329:119;;;5367:79;;:::i;:::-;5329:119;5487:1;5512:53;5557:7;5548:6;5537:9;5533:22;5512:53;:::i;:::-;5502:63;;5458:117;5614:2;5640:53;5685:7;5676:6;5665:9;5661:22;5640:53;:::i;:::-;5630:63;;5585:118;5236:474;;;;;:::o;5716:180::-;5764:77;5761:1;5754:88;5861:4;5858:1;5851:15;5885:4;5882:1;5875:15;5902:320;5946:6;5983:1;5977:4;5973:12;5963:22;;6030:1;6024:4;6020:12;6051:18;6041:81;;6107:4;6099:6;6095:17;6085:27;;6041:81;6169:2;6161:6;6158:14;6138:18;6135:38;6132:84;;;6188:18;;:::i;:::-;6132:84;5953:269;5902:320;;;:::o;6228:180::-;6276:77;6273:1;6266:88;6373:4;6370:1;6363:15;6397:4;6394:1;6387:15;6414:305;6454:3;6473:20;6491:1;6473:20;:::i;:::-;6468:25;;6507:20;6525:1;6507:20;:::i;:::-;6502:25;;6661:1;6593:66;6589:74;6586:1;6583:81;6580:107;;;6667:18;;:::i;:::-;6580:107;6711:1;6708;6704:9;6697:16;;6414:305;;;;:::o;6725:224::-;6865:34;6861:1;6853:6;6849:14;6842:58;6934:7;6929:2;6921:6;6917:15;6910:32;6725:224;:::o;6955:366::-;7097:3;7118:67;7182:2;7177:3;7118:67;:::i;:::-;7111:74;;7194:93;7283:3;7194:93;:::i;:::-;7312:2;7307:3;7303:12;7296:19;;6955:366;;;:::o;7327:419::-;7493:4;7531:2;7520:9;7516:18;7508:26;;7580:9;7574:4;7570:20;7566:1;7555:9;7551:17;7544:47;7608:131;7734:4;7608:131;:::i;:::-;7600:139;;7327:419;;;:::o;7752:223::-;7892:34;7888:1;7880:6;7876:14;7869:58;7961:6;7956:2;7948:6;7944:15;7937:31;7752:223;:::o;7981:366::-;8123:3;8144:67;8208:2;8203:3;8144:67;:::i;:::-;8137:74;;8220:93;8309:3;8220:93;:::i;:::-;8338:2;8333:3;8329:12;8322:19;;7981:366;;;:::o;8353:419::-;8519:4;8557:2;8546:9;8542:18;8534:26;;8606:9;8600:4;8596:20;8592:1;8581:9;8577:17;8570:47;8634:131;8760:4;8634:131;:::i;:::-;8626:139;;8353:419;;;:::o;8778:221::-;8918:34;8914:1;8906:6;8902:14;8895:58;8987:4;8982:2;8974:6;8970:15;8963:29;8778:221;:::o;9005:366::-;9147:3;9168:67;9232:2;9227:3;9168:67;:::i;:::-;9161:74;;9244:93;9333:3;9244:93;:::i;:::-;9362:2;9357:3;9353:12;9346:19;;9005:366;;;:::o;9377:419::-;9543:4;9581:2;9570:9;9566:18;9558:26;;9630:9;9624:4;9620:20;9616:1;9605:9;9601:17;9594:47;9658:131;9784:4;9658:131;:::i;:::-;9650:139;;9377:419;;;:::o;9802:179::-;9942:31;9938:1;9930:6;9926:14;9919:55;9802:179;:::o;9987:366::-;10129:3;10150:67;10214:2;10209:3;10150:67;:::i;:::-;10143:74;;10226:93;10315:3;10226:93;:::i;:::-;10344:2;10339:3;10335:12;10328:19;;9987:366;;;:::o;10359:419::-;10525:4;10563:2;10552:9;10548:18;10540:26;;10612:9;10606:4;10602:20;10598:1;10587:9;10583:17;10576:47;10640:131;10766:4;10640:131;:::i;:::-;10632:139;;10359:419;;;:::o;10784:224::-;10924:34;10920:1;10912:6;10908:14;10901:58;10993:7;10988:2;10980:6;10976:15;10969:32;10784:224;:::o;11014:366::-;11156:3;11177:67;11241:2;11236:3;11177:67;:::i;:::-;11170:74;;11253:93;11342:3;11253:93;:::i;:::-;11371:2;11366:3;11362:12;11355:19;;11014:366;;;:::o;11386:419::-;11552:4;11590:2;11579:9;11575:18;11567:26;;11639:9;11633:4;11629:20;11625:1;11614:9;11610:17;11603:47;11667:131;11793:4;11667:131;:::i;:::-;11659:139;;11386:419;;;:::o;11811:222::-;11951:34;11947:1;11939:6;11935:14;11928:58;12020:5;12015:2;12007:6;12003:15;11996:30;11811:222;:::o;12039:366::-;12181:3;12202:67;12266:2;12261:3;12202:67;:::i;:::-;12195:74;;12278:93;12367:3;12278:93;:::i;:::-;12396:2;12391:3;12387:12;12380:19;;12039:366;;;:::o;12411:419::-;12577:4;12615:2;12604:9;12600:18;12592:26;;12664:9;12658:4;12654:20;12650:1;12639:9;12635:17;12628:47;12692:131;12818:4;12692:131;:::i;:::-;12684:139;;12411:419;;;:::o;12836:225::-;12976:34;12972:1;12964:6;12960:14;12953:58;13045:8;13040:2;13032:6;13028:15;13021:33;12836:225;:::o;13067:366::-;13209:3;13230:67;13294:2;13289:3;13230:67;:::i;:::-;13223:74;;13306:93;13395:3;13306:93;:::i;:::-;13424:2;13419:3;13415:12;13408:19;;13067:366;;;:::o;13439:419::-;13605:4;13643:2;13632:9;13628:18;13620:26;;13692:9;13686:4;13682:20;13678:1;13667:9;13663:17;13656:47;13720:131;13846:4;13720:131;:::i;:::-;13712:139;;13439:419;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"941400","executionCost":"981","totalCost":"942381"},"external":{"allowance(address,address)":"infinite","approve(address,uint256)":"infinite","balanceOf(address)":"2863","decimals()":"432","decreaseAllowance(address,uint256)":"infinite","increaseAllowance(address,uint256)":"infinite","name()":"infinite","symbol()":"infinite","totalSupply()":"2482","transfer(address,uint256)":"infinite","transferFrom(address,address,uint256)":"infinite"},"internal":{"__ERC20_init(string memory,string memory)":"infinite","__ERC20_init_unchained(string memory,string memory)":"infinite","_afterTokenTransfer(address,address,uint256)":"15","_approve(address,address,uint256)":"infinite","_beforeTokenTransfer(address,address,uint256)":"15","_burn(address,uint256)":"infinite","_mint(address,uint256)":"infinite","_spendAllowance(address,address,uint256)":"infinite","_transfer(address,address,uint256)":"infinite"}},"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","decreaseAllowance(address,uint256)":"a457c2d7","increaseAllowance(address,uint256)":"39509351","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":\"ERC20Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xb1d9e69cf8073efa574b31b1f840e20709139c19bfb27e60b16393d6073f3d42\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":527,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":530,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2787,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":971,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable","label":"_balances","offset":0,"slot":"51","type":"t_mapping(t_address,t_uint256)"},{"astId":977,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable","label":"_allowances","offset":0,"slot":"52","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":979,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable","label":"_totalSupply","offset":0,"slot":"53","type":"t_uint256"},{"astId":981,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable","label":"_name","offset":0,"slot":"54","type":"t_string_storage"},{"astId":983,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable","label":"_symbol","offset":0,"slot":"55","type":"t_string_storage"},{"astId":1563,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable","label":"__gap","offset":0,"slot":"56","type":"t_array(t_uint256)45_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)45_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[45]","numberOfBytes":"1440"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol":{"IERC20Upgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 standard as defined in the EIP.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":\"IERC20Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol":{"ERC20BurnableUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"burnFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Extension of {ERC20} that allows token holders to destroy both their own tokens and those that they have an allowance for, in a way that can be recognized off-chain (via event analysis).","kind":"dev","methods":{"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"burn(uint256)":{"details":"Destroys `amount` tokens from the caller. See {ERC20-_burn}."},"burnFrom(address,uint256)":{"details":"Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","burn(uint256)":"42966c68","burnFrom(address,uint256)":"79cc6790","decimals()":"313ce567","decreaseAllowance(address,uint256)":"a457c2d7","increaseAllowance(address,uint256)":"39509351","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Extension of {ERC20} that allows token holders to destroy both their own tokens and those that they have an allowance for, in a way that can be recognized off-chain (via event analysis).\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Destroys `amount` tokens from the caller. See {ERC20-_burn}.\"},\"burnFrom(address,uint256)\":{\"details\":\"Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":\"ERC20BurnableUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xb1d9e69cf8073efa574b31b1f840e20709139c19bfb27e60b16393d6073f3d42\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20BurnableUpgradeable is Initializable, ContextUpgradeable, ERC20Upgradeable {\\n    function __ERC20Burnable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC20Burnable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xea2c6f9d434127bf36b1e3e5ebaaf6d28a64dbaeea560508e570014e905a5ad2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":527,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":530,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2787,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":971,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable","label":"_balances","offset":0,"slot":"51","type":"t_mapping(t_address,t_uint256)"},{"astId":977,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable","label":"_allowances","offset":0,"slot":"52","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":979,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable","label":"_totalSupply","offset":0,"slot":"53","type":"t_uint256"},{"astId":981,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable","label":"_name","offset":0,"slot":"54","type":"t_string_storage"},{"astId":983,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable","label":"_symbol","offset":0,"slot":"55","type":"t_string_storage"},{"astId":1563,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable","label":"__gap","offset":0,"slot":"56","type":"t_array(t_uint256)45_storage"},{"astId":1705,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable","label":"__gap","offset":0,"slot":"101","type":"t_array(t_uint256)50_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)45_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[45]","numberOfBytes":"1440"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol":{"ERC20SnapshotUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"}],"name":"Snapshot","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"snapshotId","type":"uint256"}],"name":"balanceOfAt","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"snapshotId","type":"uint256"}],"name":"totalSupplyAt","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract extends an ERC20 token with a snapshot mechanism. When a snapshot is created, the balances and total supply at the time are recorded for later access. This can be used to safely create mechanisms based on token balances such as trustless dividends or weighted voting. In naive implementations it's possible to perform a \"double spend\" attack by reusing the same balance from different accounts. By using snapshots to calculate dividends or voting power, those attacks no longer apply. It can also be used to create an efficient ERC20 forking mechanism. Snapshots are created by the internal {_snapshot} function, which will emit the {Snapshot} event and return a snapshot id. To get the total supply at the time of a snapshot, call the function {totalSupplyAt} with the snapshot id. To get the balance of an account at the time of a snapshot, call the {balanceOfAt} function with the snapshot id and the account address. NOTE: Snapshot policy can be customized by overriding the {_getCurrentSnapshotId} method. For example, having it return `block.number` will trigger the creation of snapshot at the beginning of each new block. When overriding this function, be careful about the monotonicity of its result. Non-monotonic snapshot ids will break the contract. Implementing snapshots for every block using this method will incur significant gas costs. For a gas-efficient alternative consider {ERC20Votes}. ==== Gas Costs Snapshots are efficient. Snapshot creation is _O(1)_. Retrieval of balances or total supply from a snapshot is _O(log n)_ in the number of snapshots that have been created, although _n_ for a specific account will generally be much smaller since identical balances in subsequent snapshots are stored as a single entry. There is a constant overhead for normal ERC20 transfers due to the additional snapshot bookkeeping. This overhead is only significant for the first transfer that immediately follows a snapshot for a particular account. Subsequent transfers will have normal cost until the next snapshot, and so on.","events":{"Snapshot(uint256)":{"details":"Emitted by {_snapshot} when a snapshot identified by `id` is created."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"balanceOfAt(address,uint256)":{"details":"Retrieves the balance of `account` at the time `snapshotId` was created."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"totalSupplyAt(uint256)":{"details":"Retrieves the total supply at the time `snapshotId` was created."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","balanceOfAt(address,uint256)":"4ee2cd7e","decimals()":"313ce567","decreaseAllowance(address,uint256)":"a457c2d7","increaseAllowance(address,uint256)":"39509351","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","totalSupplyAt(uint256)":"981b24d0","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Snapshot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"snapshotId\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotId\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract extends an ERC20 token with a snapshot mechanism. When a snapshot is created, the balances and total supply at the time are recorded for later access. This can be used to safely create mechanisms based on token balances such as trustless dividends or weighted voting. In naive implementations it's possible to perform a \\\"double spend\\\" attack by reusing the same balance from different accounts. By using snapshots to calculate dividends or voting power, those attacks no longer apply. It can also be used to create an efficient ERC20 forking mechanism. Snapshots are created by the internal {_snapshot} function, which will emit the {Snapshot} event and return a snapshot id. To get the total supply at the time of a snapshot, call the function {totalSupplyAt} with the snapshot id. To get the balance of an account at the time of a snapshot, call the {balanceOfAt} function with the snapshot id and the account address. NOTE: Snapshot policy can be customized by overriding the {_getCurrentSnapshotId} method. For example, having it return `block.number` will trigger the creation of snapshot at the beginning of each new block. When overriding this function, be careful about the monotonicity of its result. Non-monotonic snapshot ids will break the contract. Implementing snapshots for every block using this method will incur significant gas costs. For a gas-efficient alternative consider {ERC20Votes}. ==== Gas Costs Snapshots are efficient. Snapshot creation is _O(1)_. Retrieval of balances or total supply from a snapshot is _O(log n)_ in the number of snapshots that have been created, although _n_ for a specific account will generally be much smaller since identical balances in subsequent snapshots are stored as a single entry. There is a constant overhead for normal ERC20 transfers due to the additional snapshot bookkeeping. This overhead is only significant for the first transfer that immediately follows a snapshot for a particular account. Subsequent transfers will have normal cost until the next snapshot, and so on.\",\"events\":{\"Snapshot(uint256)\":{\"details\":\"Emitted by {_snapshot} when a snapshot identified by `id` is created.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"balanceOfAt(address,uint256)\":{\"details\":\"Retrieves the balance of `account` at the time `snapshotId` was created.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"totalSupplyAt(uint256)\":{\"details\":\"Retrieves the total supply at the time `snapshotId` was created.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":\"ERC20SnapshotUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xb1d9e69cf8073efa574b31b1f840e20709139c19bfb27e60b16393d6073f3d42\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/extensions/ERC20Snapshot.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/ArraysUpgradeable.sol\\\";\\nimport \\\"../../../utils/CountersUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This contract extends an ERC20 token with a snapshot mechanism. When a snapshot is created, the balances and\\n * total supply at the time are recorded for later access.\\n *\\n * This can be used to safely create mechanisms based on token balances such as trustless dividends or weighted voting.\\n * In naive implementations it's possible to perform a \\\"double spend\\\" attack by reusing the same balance from different\\n * accounts. By using snapshots to calculate dividends or voting power, those attacks no longer apply. It can also be\\n * used to create an efficient ERC20 forking mechanism.\\n *\\n * Snapshots are created by the internal {_snapshot} function, which will emit the {Snapshot} event and return a\\n * snapshot id. To get the total supply at the time of a snapshot, call the function {totalSupplyAt} with the snapshot\\n * id. To get the balance of an account at the time of a snapshot, call the {balanceOfAt} function with the snapshot id\\n * and the account address.\\n *\\n * NOTE: Snapshot policy can be customized by overriding the {_getCurrentSnapshotId} method. For example, having it\\n * return `block.number` will trigger the creation of snapshot at the beginning of each new block. When overriding this\\n * function, be careful about the monotonicity of its result. Non-monotonic snapshot ids will break the contract.\\n *\\n * Implementing snapshots for every block using this method will incur significant gas costs. For a gas-efficient\\n * alternative consider {ERC20Votes}.\\n *\\n * ==== Gas Costs\\n *\\n * Snapshots are efficient. Snapshot creation is _O(1)_. Retrieval of balances or total supply from a snapshot is _O(log\\n * n)_ in the number of snapshots that have been created, although _n_ for a specific account will generally be much\\n * smaller since identical balances in subsequent snapshots are stored as a single entry.\\n *\\n * There is a constant overhead for normal ERC20 transfers due to the additional snapshot bookkeeping. This overhead is\\n * only significant for the first transfer that immediately follows a snapshot for a particular account. Subsequent\\n * transfers will have normal cost until the next snapshot, and so on.\\n */\\n\\nabstract contract ERC20SnapshotUpgradeable is Initializable, ERC20Upgradeable {\\n    function __ERC20Snapshot_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC20Snapshot_init_unchained() internal onlyInitializing {\\n    }\\n    // Inspired by Jordi Baylina's MiniMeToken to record historical balances:\\n    // https://github.com/Giveth/minime/blob/ea04d950eea153a04c51fa510b068b9dded390cb/contracts/MiniMeToken.sol\\n\\n    using ArraysUpgradeable for uint256[];\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    // Snapshotted values have arrays of ids and the value corresponding to that id. These could be an array of a\\n    // Snapshot struct, but that would impede usage of functions that work on an array.\\n    struct Snapshots {\\n        uint256[] ids;\\n        uint256[] values;\\n    }\\n\\n    mapping(address => Snapshots) private _accountBalanceSnapshots;\\n    Snapshots private _totalSupplySnapshots;\\n\\n    // Snapshot ids increase monotonically, with the first value being 1. An id of 0 is invalid.\\n    CountersUpgradeable.Counter private _currentSnapshotId;\\n\\n    /**\\n     * @dev Emitted by {_snapshot} when a snapshot identified by `id` is created.\\n     */\\n    event Snapshot(uint256 id);\\n\\n    /**\\n     * @dev Creates a new snapshot and returns its snapshot id.\\n     *\\n     * Emits a {Snapshot} event that contains the same id.\\n     *\\n     * {_snapshot} is `internal` and you have to decide how to expose it externally. Its usage may be restricted to a\\n     * set of accounts, for example using {AccessControl}, or it may be open to the public.\\n     *\\n     * [WARNING]\\n     * ====\\n     * While an open way of calling {_snapshot} is required for certain trust minimization mechanisms such as forking,\\n     * you must consider that it can potentially be used by attackers in two ways.\\n     *\\n     * First, it can be used to increase the cost of retrieval of values from snapshots, although it will grow\\n     * logarithmically thus rendering this attack ineffective in the long term. Second, it can be used to target\\n     * specific accounts and increase the cost of ERC20 transfers for them, in the ways specified in the Gas Costs\\n     * section above.\\n     *\\n     * We haven't measured the actual numbers; if this is something you're interested in please reach out to us.\\n     * ====\\n     */\\n    function _snapshot() internal virtual returns (uint256) {\\n        _currentSnapshotId.increment();\\n\\n        uint256 currentId = _getCurrentSnapshotId();\\n        emit Snapshot(currentId);\\n        return currentId;\\n    }\\n\\n    /**\\n     * @dev Get the current snapshotId\\n     */\\n    function _getCurrentSnapshotId() internal view virtual returns (uint256) {\\n        return _currentSnapshotId.current();\\n    }\\n\\n    /**\\n     * @dev Retrieves the balance of `account` at the time `snapshotId` was created.\\n     */\\n    function balanceOfAt(address account, uint256 snapshotId) public view virtual returns (uint256) {\\n        (bool snapshotted, uint256 value) = _valueAt(snapshotId, _accountBalanceSnapshots[account]);\\n\\n        return snapshotted ? value : balanceOf(account);\\n    }\\n\\n    /**\\n     * @dev Retrieves the total supply at the time `snapshotId` was created.\\n     */\\n    function totalSupplyAt(uint256 snapshotId) public view virtual returns (uint256) {\\n        (bool snapshotted, uint256 value) = _valueAt(snapshotId, _totalSupplySnapshots);\\n\\n        return snapshotted ? value : totalSupply();\\n    }\\n\\n    // Update balance and/or total supply snapshots before the values are modified. This is implemented\\n    // in the _beforeTokenTransfer hook, which is executed for _mint, _burn, and _transfer operations.\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, amount);\\n\\n        if (from == address(0)) {\\n            // mint\\n            _updateAccountSnapshot(to);\\n            _updateTotalSupplySnapshot();\\n        } else if (to == address(0)) {\\n            // burn\\n            _updateAccountSnapshot(from);\\n            _updateTotalSupplySnapshot();\\n        } else {\\n            // transfer\\n            _updateAccountSnapshot(from);\\n            _updateAccountSnapshot(to);\\n        }\\n    }\\n\\n    function _valueAt(uint256 snapshotId, Snapshots storage snapshots) private view returns (bool, uint256) {\\n        require(snapshotId > 0, \\\"ERC20Snapshot: id is 0\\\");\\n        require(snapshotId <= _getCurrentSnapshotId(), \\\"ERC20Snapshot: nonexistent id\\\");\\n\\n        // When a valid snapshot is queried, there are three possibilities:\\n        //  a) The queried value was not modified after the snapshot was taken. Therefore, a snapshot entry was never\\n        //  created for this id, and all stored snapshot ids are smaller than the requested one. The value that corresponds\\n        //  to this id is the current one.\\n        //  b) The queried value was modified after the snapshot was taken. Therefore, there will be an entry with the\\n        //  requested id, and its value is the one to return.\\n        //  c) More snapshots were created after the requested one, and the queried value was later modified. There will be\\n        //  no entry for the requested id: the value that corresponds to it is that of the smallest snapshot id that is\\n        //  larger than the requested one.\\n        //\\n        // In summary, we need to find an element in an array, returning the index of the smallest value that is larger if\\n        // it is not found, unless said value doesn't exist (e.g. when all values are smaller). Arrays.findUpperBound does\\n        // exactly this.\\n\\n        uint256 index = snapshots.ids.findUpperBound(snapshotId);\\n\\n        if (index == snapshots.ids.length) {\\n            return (false, 0);\\n        } else {\\n            return (true, snapshots.values[index]);\\n        }\\n    }\\n\\n    function _updateAccountSnapshot(address account) private {\\n        _updateSnapshot(_accountBalanceSnapshots[account], balanceOf(account));\\n    }\\n\\n    function _updateTotalSupplySnapshot() private {\\n        _updateSnapshot(_totalSupplySnapshots, totalSupply());\\n    }\\n\\n    function _updateSnapshot(Snapshots storage snapshots, uint256 currentValue) private {\\n        uint256 currentId = _getCurrentSnapshotId();\\n        if (_lastSnapshotId(snapshots.ids) < currentId) {\\n            snapshots.ids.push(currentId);\\n            snapshots.values.push(currentValue);\\n        }\\n    }\\n\\n    function _lastSnapshotId(uint256[] storage ids) private view returns (uint256) {\\n        if (ids.length == 0) {\\n            return 0;\\n        } else {\\n            return ids[ids.length - 1];\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[46] private __gap;\\n}\\n\",\"keccak256\":\"0x42da8099f59958af496f6c8f0d9c1ce0a929151e02f877e4be23aca4cc440cbe\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ArraysUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Arrays.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./StorageSlotUpgradeable.sol\\\";\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to array types.\\n */\\nlibrary ArraysUpgradeable {\\n    using StorageSlotUpgradeable for bytes32;\\n\\n    /**\\n     * @dev Searches a sorted `array` and returns the first index that contains\\n     * a value greater or equal to `element`. If no such index exists (i.e. all\\n     * values in the array are strictly less than `element`), the array length is\\n     * returned. Time complexity O(log n).\\n     *\\n     * `array` is expected to be sorted in ascending order, and to contain no\\n     * repeated elements.\\n     */\\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        if (array.length == 0) {\\n            return 0;\\n        }\\n\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        while (low < high) {\\n            uint256 mid = MathUpgradeable.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds down (it does integer division with truncation).\\n            if (unsafeAccess(array, mid).value > element) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\\n        if (low > 0 && unsafeAccess(array, low - 1).value == element) {\\n            return low - 1;\\n        } else {\\n            return low;\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(address[] storage arr, uint256 pos) internal pure returns (StorageSlotUpgradeable.AddressSlot storage) {\\n        bytes32 slot;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getAddressSlot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(bytes32[] storage arr, uint256 pos) internal pure returns (StorageSlotUpgradeable.Bytes32Slot storage) {\\n        bytes32 slot;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getBytes32Slot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(uint256[] storage arr, uint256 pos) internal pure returns (StorageSlotUpgradeable.Uint256Slot storage) {\\n        bytes32 slot;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getUint256Slot();\\n    }\\n}\\n\",\"keccak256\":\"0xc3821e9d41b2b19b612238b308dcc8f4ab46afcd0f6b3bd174e89789bbf59e26\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":527,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:ERC20SnapshotUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":530,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:ERC20SnapshotUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2787,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:ERC20SnapshotUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":971,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:ERC20SnapshotUpgradeable","label":"_balances","offset":0,"slot":"51","type":"t_mapping(t_address,t_uint256)"},{"astId":977,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:ERC20SnapshotUpgradeable","label":"_allowances","offset":0,"slot":"52","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":979,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:ERC20SnapshotUpgradeable","label":"_totalSupply","offset":0,"slot":"53","type":"t_uint256"},{"astId":981,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:ERC20SnapshotUpgradeable","label":"_name","offset":0,"slot":"54","type":"t_string_storage"},{"astId":983,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:ERC20SnapshotUpgradeable","label":"_symbol","offset":0,"slot":"55","type":"t_string_storage"},{"astId":1563,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:ERC20SnapshotUpgradeable","label":"__gap","offset":0,"slot":"56","type":"t_array(t_uint256)45_storage"},{"astId":1749,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:ERC20SnapshotUpgradeable","label":"_accountBalanceSnapshots","offset":0,"slot":"101","type":"t_mapping(t_address,t_struct(Snapshots)1744_storage)"},{"astId":1752,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:ERC20SnapshotUpgradeable","label":"_totalSupplySnapshots","offset":0,"slot":"102","type":"t_struct(Snapshots)1744_storage"},{"astId":1755,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:ERC20SnapshotUpgradeable","label":"_currentSnapshotId","offset":0,"slot":"104","type":"t_struct(Counter)2794_storage"},{"astId":2053,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:ERC20SnapshotUpgradeable","label":"__gap","offset":0,"slot":"105","type":"t_array(t_uint256)46_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)45_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[45]","numberOfBytes":"1440"},"t_array(t_uint256)46_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[46]","numberOfBytes":"1472"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_array(t_uint256)dyn_storage":{"base":"t_uint256","encoding":"dynamic_array","label":"uint256[]","numberOfBytes":"32"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_struct(Snapshots)1744_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct ERC20SnapshotUpgradeable.Snapshots)","numberOfBytes":"32","value":"t_struct(Snapshots)1744_storage"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(Counter)2794_storage":{"encoding":"inplace","label":"struct CountersUpgradeable.Counter","members":[{"astId":2793,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:ERC20SnapshotUpgradeable","label":"_value","offset":0,"slot":"0","type":"t_uint256"}],"numberOfBytes":"32"},"t_struct(Snapshots)1744_storage":{"encoding":"inplace","label":"struct ERC20SnapshotUpgradeable.Snapshots","members":[{"astId":1740,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:ERC20SnapshotUpgradeable","label":"ids","offset":0,"slot":"0","type":"t_array(t_uint256)dyn_storage"},{"astId":1743,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:ERC20SnapshotUpgradeable","label":"values","offset":0,"slot":"1","type":"t_array(t_uint256)dyn_storage"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol":{"IERC20MetadataUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._","kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"decimals()":{"details":"Returns the decimals places of the token."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":\"IERC20MetadataUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol":{"ERC20PermitUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"custom:storage-size":"51","details":"Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. _Available since v3.4._","kind":"dev","methods":{"DOMAIN_SEPARATOR()":{"details":"See {IERC20Permit-DOMAIN_SEPARATOR}."},"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"name()":{"details":"Returns the name of the token."},"nonces(address)":{"details":"See {IERC20Permit-nonces}."},"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{"details":"See {IERC20Permit-permit}."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."}},"stateVariables":{"_PERMIT_TYPEHASH_DEPRECATED_SLOT":{"custom:oz-renamed-from":"_PERMIT_TYPEHASH","details":"In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`. However, to ensure consistency with the upgradeable transpiler, we will continue to reserve a slot."},"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DOMAIN_SEPARATOR()":"3644e515","allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","decreaseAllowance(address,uint256)":"a457c2d7","increaseAllowance(address,uint256)":"39509351","name()":"06fdde03","nonces(address)":"7ecebe00","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"d505accf","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"custom:storage-size\":\"51\",\"details\":\"Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. _Available since v3.4._\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"See {IERC20Permit-DOMAIN_SEPARATOR}.\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"See {IERC20Permit-nonces}.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"See {IERC20Permit-permit}.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"stateVariables\":{\"_PERMIT_TYPEHASH_DEPRECATED_SLOT\":{\"custom:oz-renamed-from\":\"_PERMIT_TYPEHASH\",\"details\":\"In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`. However, to ensure consistency with the upgradeable transpiler, we will continue to reserve a slot.\"},\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol\":\"ERC20PermitUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xb1d9e69cf8073efa574b31b1f840e20709139c19bfb27e60b16393d6073f3d42\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/extensions/draft-ERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/EIP712Upgradeable.sol\\\";\\nimport \\\"../../../utils/CountersUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 51\\n */\\nabstract contract ERC20PermitUpgradeable is Initializable, ERC20Upgradeable, IERC20PermitUpgradeable, EIP712Upgradeable {\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    mapping(address => CountersUpgradeable.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private constant _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    /**\\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\\n     * to reserve a slot.\\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    function __ERC20Permit_init(string memory name) internal onlyInitializing {\\n        __EIP712_init_unchained(name, \\\"1\\\");\\n    }\\n\\n    function __ERC20Permit_init_unchained(string memory) internal onlyInitializing {}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSAUpgradeable.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        CountersUpgradeable.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xfe1053f3a6ee4527cde96c8152b8b1dbb98774639a64e819087bc80e618d7f7f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x12f297cafe6e2847ae0378502f155654d0764b532a9873c8afe4350950fa7971\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 52\\n */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x3017aded62c4a2b9707f5f06f92934e592c1c9b6f384b91b51340a6d5f841931\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":527,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":530,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2787,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":971,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable","label":"_balances","offset":0,"slot":"51","type":"t_mapping(t_address,t_uint256)"},{"astId":977,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable","label":"_allowances","offset":0,"slot":"52","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":979,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable","label":"_totalSupply","offset":0,"slot":"53","type":"t_uint256"},{"astId":981,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable","label":"_name","offset":0,"slot":"54","type":"t_string_storage"},{"astId":983,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable","label":"_symbol","offset":0,"slot":"55","type":"t_string_storage"},{"astId":1563,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable","label":"__gap","offset":0,"slot":"56","type":"t_array(t_uint256)45_storage"},{"astId":3467,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable","label":"_HASHED_NAME","offset":0,"slot":"101","type":"t_bytes32"},{"astId":3469,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable","label":"_HASHED_VERSION","offset":0,"slot":"102","type":"t_bytes32"},{"astId":3607,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable","label":"__gap","offset":0,"slot":"103","type":"t_array(t_uint256)50_storage"},{"astId":2105,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable","label":"_nonces","offset":0,"slot":"153","type":"t_mapping(t_address,t_struct(Counter)2794_storage)"},{"astId":2113,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable","label":"_PERMIT_TYPEHASH_DEPRECATED_SLOT","offset":0,"slot":"154","type":"t_bytes32"},{"astId":2269,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable","label":"__gap","offset":0,"slot":"155","type":"t_array(t_uint256)49_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)45_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[45]","numberOfBytes":"1440"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_struct(Counter)2794_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct CountersUpgradeable.Counter)","numberOfBytes":"32","value":"t_struct(Counter)2794_storage"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(Counter)2794_storage":{"encoding":"inplace","label":"struct CountersUpgradeable.Counter","members":[{"astId":2793,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable","label":"_value","offset":0,"slot":"0","type":"t_uint256"}],"numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol":{"IERC20PermitUpgradeable":{"abi":[{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.","kind":"dev","methods":{"DOMAIN_SEPARATOR()":{"details":"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"nonces(address)":{"details":"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."},"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{"details":"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DOMAIN_SEPARATOR()":"3644e515","nonces(address)":"7ecebe00","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"d505accf"}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section].\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":\"IERC20PermitUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"AddressUpgradeable":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220316f89efd248d9d2ababe0ad7a0d32588e280ce30d1c8fa9802cddb861c61cbb64736f6c63430008090033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BALANCE PUSH16 0x89EFD248D9D2ABABE0AD7A0D32588E28 0xC 0xE3 0xD SHR DUP16 0xA9 DUP1 0x2C 0xDD 0xB8 PUSH2 0xC61C 0xBB PUSH5 0x736F6C6343 STOP ADDMOD MULMOD STOP CALLER ","sourceMap":"194:8087:14:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220316f89efd248d9d2ababe0ad7a0d32588e280ce30d1c8fa9802cddb861c61cbb64736f6c63430008090033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BALANCE PUSH16 0x89EFD248D9D2ABABE0AD7A0D32588E28 0xC 0xE3 0xD SHR DUP16 0xA9 DUP1 0x2C 0xDD 0xB8 PUSH2 0xC61C 0xBB PUSH5 0x736F6C6343 STOP ADDMOD MULMOD STOP CALLER ","sourceMap":"194:8087:14:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":\"AddressUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/ArraysUpgradeable.sol":{"ArraysUpgradeable":{"abi":[],"devdoc":{"details":"Collection of functions related to array types.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200628c032fc854cbb9f3cd7450dd3c02ff5a97043da6b705729399ca71c139d5f64736f6c63430008090033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MOD 0x28 0xC0 ORIGIN 0xFC DUP6 0x4C 0xBB SWAP16 EXTCODECOPY 0xD7 GASLIMIT 0xD 0xD3 0xC0 0x2F CREATE2 0xA9 PUSH17 0x43DA6B705729399CA71C139D5F64736F6C PUSH4 0x43000809 STOP CALLER ","sourceMap":"266:3077:15:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200628c032fc854cbb9f3cd7450dd3c02ff5a97043da6b705729399ca71c139d5f64736f6c63430008090033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MOD 0x28 0xC0 ORIGIN 0xFC DUP6 0x4C 0xBB SWAP16 EXTCODECOPY 0xD7 GASLIMIT 0xD 0xD3 0xC0 0x2F CREATE2 0xA9 PUSH17 0x43DA6B705729399CA71C139D5F64736F6C PUSH4 0x43000809 STOP CALLER ","sourceMap":"266:3077:15:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"findUpperBound(uint256[] storage pointer,uint256)":"infinite","unsafeAccess(address[] storage pointer,uint256)":"infinite","unsafeAccess(bytes32[] storage pointer,uint256)":"infinite","unsafeAccess(uint256[] storage pointer,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to array types.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/ArraysUpgradeable.sol\":\"ArraysUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/ArraysUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Arrays.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./StorageSlotUpgradeable.sol\\\";\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to array types.\\n */\\nlibrary ArraysUpgradeable {\\n    using StorageSlotUpgradeable for bytes32;\\n\\n    /**\\n     * @dev Searches a sorted `array` and returns the first index that contains\\n     * a value greater or equal to `element`. If no such index exists (i.e. all\\n     * values in the array are strictly less than `element`), the array length is\\n     * returned. Time complexity O(log n).\\n     *\\n     * `array` is expected to be sorted in ascending order, and to contain no\\n     * repeated elements.\\n     */\\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        if (array.length == 0) {\\n            return 0;\\n        }\\n\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        while (low < high) {\\n            uint256 mid = MathUpgradeable.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds down (it does integer division with truncation).\\n            if (unsafeAccess(array, mid).value > element) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\\n        if (low > 0 && unsafeAccess(array, low - 1).value == element) {\\n            return low - 1;\\n        } else {\\n            return low;\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(address[] storage arr, uint256 pos) internal pure returns (StorageSlotUpgradeable.AddressSlot storage) {\\n        bytes32 slot;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getAddressSlot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(bytes32[] storage arr, uint256 pos) internal pure returns (StorageSlotUpgradeable.Bytes32Slot storage) {\\n        bytes32 slot;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getBytes32Slot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(uint256[] storage arr, uint256 pos) internal pure returns (StorageSlotUpgradeable.Uint256Slot storage) {\\n        bytes32 slot;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getUint256Slot();\\n    }\\n}\\n\",\"keccak256\":\"0xc3821e9d41b2b19b612238b308dcc8f4ab46afcd0f6b3bd174e89789bbf59e26\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ContextUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":527,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":530,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2787,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol":{"CountersUpgradeable":{"abi":[],"devdoc":{"author":"Matt Condon (@shrugs)","details":"Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;`","kind":"dev","methods":{},"title":"Counters","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208660dfd667348338e4968b11f3d7eef9fdc109ce7e149e3dc9f4eb297edd5f6064736f6c63430008090033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP7 PUSH1 0xDF 0xD6 PUSH8 0x348338E4968B11F3 0xD7 0xEE 0xF9 REVERT 0xC1 MULMOD 0xCE PUSH31 0x149E3DC9F4EB297EDD5F6064736F6C63430008090033000000000000000000 ","sourceMap":"424:982:17:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208660dfd667348338e4968b11f3d7eef9fdc109ce7e149e3dc9f4eb297edd5f6064736f6c63430008090033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP7 PUSH1 0xDF 0xD6 PUSH8 0x348338E4968B11F3 0xD7 0xEE 0xF9 REVERT 0xC1 MULMOD 0xCE PUSH31 0x149E3DC9F4EB297EDD5F6064736F6C63430008090033000000000000000000 ","sourceMap":"424:982:17:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"current(struct CountersUpgradeable.Counter storage pointer)":"infinite","decrement(struct CountersUpgradeable.Counter storage pointer)":"infinite","increment(struct CountersUpgradeable.Counter storage pointer)":"infinite","reset(struct CountersUpgradeable.Counter storage pointer)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Matt Condon (@shrugs)\",\"details\":\"Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;`\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Counters\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":\"CountersUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol":{"StorageSlotUpgradeable":{"abi":[],"devdoc":{"details":"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ``` contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ad01b74811354c5dbad04e351be1b5be337f7ffd7e42ee677fb5229589d8772c64736f6c63430008090033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAD ADD 0xB7 BASEFEE GT CALLDATALOAD 0x4C 0x5D 0xBA 0xD0 0x4E CALLDATALOAD SHL 0xE1 0xB5 0xBE CALLER PUSH32 0x7FFD7E42EE677FB5229589D8772C64736F6C6343000809003300000000000000 ","sourceMap":"1279:1402:18:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ad01b74811354c5dbad04e351be1b5be337f7ffd7e42ee677fb5229589d8772c64736f6c63430008090033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAD ADD 0xB7 BASEFEE GT CALLDATALOAD 0x4C 0x5D 0xBA 0xD0 0x4E CALLDATALOAD SHL 0xE1 0xB5 0xBE CALLER PUSH32 0x7FFD7E42EE677FB5229589D8772C64736F6C6343000809003300000000000000 ","sourceMap":"1279:1402:18:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"getAddressSlot(bytes32)":"infinite","getBooleanSlot(bytes32)":"infinite","getBytes32Slot(bytes32)":"infinite","getUint256Slot(bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ``` contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":\"StorageSlotUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol":{"StringsUpgradeable":{"abi":[],"devdoc":{"details":"String operations.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f5a070034239ee54fa3523e37cb7e8b9e2002a52bcbc1db48a6878bdc3da702864736f6c63430008090033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CREATE2 LOG0 PUSH17 0x34239EE54FA3523E37CB7E8B9E2002A52 0xBC 0xBC SAR 0xB4 DUP11 PUSH9 0x78BDC3DA702864736F PUSH13 0x63430008090033000000000000 ","sourceMap":"199:2098:19:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f5a070034239ee54fa3523e37cb7e8b9e2002a52bcbc1db48a6878bdc3da702864736f6c63430008090033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CREATE2 LOG0 PUSH17 0x34239EE54FA3523E37CB7E8B9E2002A52 0xBC 0xBC SAR 0xB4 DUP11 PUSH9 0x78BDC3DA702864736F PUSH13 0x63430008090033000000000000 ","sourceMap":"199:2098:19:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":\"StringsUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol":{"ECDSAUpgradeable":{"abi":[],"devdoc":{"details":"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f550883a00c42b79f202d0b637e75fd620b0edee58c3adb23967da0471ae6c2164736f6c63430008090033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CREATE2 POP DUP9 GASPRICE STOP 0xC4 0x2B PUSH26 0xF202D0B637E75FD620B0EDEE58C3ADB23967DA0471AE6C216473 PUSH16 0x6C634300080900330000000000000000 ","sourceMap":"380:8190:20:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f550883a00c42b79f202d0b637e75fd620b0edee58c3adb23967da0471ae6c2164736f6c63430008090033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CREATE2 POP DUP9 GASPRICE STOP 0xC4 0x2B PUSH26 0xF202D0B637E75FD620B0EDEE58C3ADB23967DA0471AE6C216473 PUSH16 0x6C634300080900330000000000000000 ","sourceMap":"380:8190:20:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_throwError(enum ECDSAUpgradeable.RecoverError)":"infinite","recover(bytes32,bytes memory)":"infinite","recover(bytes32,bytes32,bytes32)":"infinite","recover(bytes32,uint8,bytes32,bytes32)":"infinite","toEthSignedMessageHash(bytes memory)":"infinite","toEthSignedMessageHash(bytes32)":"infinite","toTypedDataHash(bytes32,bytes32)":"infinite","tryRecover(bytes32,bytes memory)":"infinite","tryRecover(bytes32,bytes32,bytes32)":"infinite","tryRecover(bytes32,uint8,bytes32,bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":\"ECDSAUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x12f297cafe6e2847ae0378502f155654d0764b532a9873c8afe4350950fa7971\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol":{"EIP712Upgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"custom:storage-size":"52","details":"https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data. The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible, thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in their contracts using a combination of `abi.encode` and `keccak256`. This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA ({_hashTypedDataV4}). The implementation of the domain separator was designed to be as efficient as possible while still properly updating the chain id to protect against replay attacks on an eventual fork of the chain. NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask]. _Available since v3.4._","kind":"dev","methods":{},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:storage-size\":\"52\",\"details\":\"https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data. The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible, thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in their contracts using a combination of `abi.encode` and `keccak256`. This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA ({_hashTypedDataV4}). The implementation of the domain separator was designed to be as efficient as possible while still properly updating the chain id to protect against replay attacks on an eventual fork of the chain. NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask]. _Available since v3.4._\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":\"EIP712Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x12f297cafe6e2847ae0378502f155654d0764b532a9873c8afe4350950fa7971\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 52\\n */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x3017aded62c4a2b9707f5f06f92934e592c1c9b6f384b91b51340a6d5f841931\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":527,"contract":"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":530,"contract":"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":3467,"contract":"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable","label":"_HASHED_NAME","offset":0,"slot":"1","type":"t_bytes32"},{"astId":3469,"contract":"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable","label":"_HASHED_VERSION","offset":0,"slot":"2","type":"t_bytes32"},{"astId":3607,"contract":"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable","label":"__gap","offset":0,"slot":"3","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol":{"MathUpgradeable":{"abi":[],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220eee2e973d7fc355736d9a46fb010f019ab882eae3645ae06cb3f6278e5009cce64736f6c63430008090033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEE 0xE2 0xE9 PUSH20 0xD7FC355736D9A46FB010F019AB882EAE3645AE06 0xCB EXTCODEHASH PUSH3 0x78E500 SWAP13 0xCE PUSH5 0x736F6C6343 STOP ADDMOD MULMOD STOP CALLER ","sourceMap":"202:12313:22:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220eee2e973d7fc355736d9a46fb010f019ab882eae3645ae06cb3f6278e5009cce64736f6c63430008090033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEE 0xE2 0xE9 PUSH20 0xD7FC355736D9A46FB010F019AB882EAE3645AE06 0xCB EXTCODEHASH PUSH3 0x78E500 SWAP13 0xCE PUSH5 0x736F6C6343 STOP ADDMOD MULMOD STOP CALLER ","sourceMap":"202:12313:22:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum MathUpgradeable.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum MathUpgradeable.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum MathUpgradeable.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum MathUpgradeable.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum MathUpgradeable.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":\"MathUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/interfaces/draft-IERC1822.sol":{"IERC1822Proxiable":{"abi":[{"inputs":[],"name":"proxiableUUID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified proxy whose upgrades are fully controlled by the current implementation.","kind":"dev","methods":{"proxiableUUID()":{"details":"Returns the storage slot that the proxiable contract assumes is being used to store the implementation address. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"proxiableUUID()":"52d1902d"}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified proxy whose upgrades are fully controlled by the current implementation.\",\"kind\":\"dev\",\"methods\":{\"proxiableUUID()\":{\"details\":\"Returns the storage slot that the proxiable contract assumes is being used to store the implementation address. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":\"IERC1822Proxiable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol":{"ERC1967Proxy":{"abi":[{"inputs":[{"internalType":"address","name":"_logic","type":"address"},{"internalType":"bytes","name":"_data","type":"bytes"}],"stateMutability":"payable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beacon","type":"address"}],"name":"BeaconUpgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"},{"stateMutability":"payable","type":"fallback"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"details":"This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an implementation address that can be changed. This address is stored in storage in the location specified by https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the implementation behind the proxy.","kind":"dev","methods":{"constructor":{"details":"Initializes the upgradeable proxy with an initial implementation specified by `_logic`. If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded function call, and allows initializing the storage of the proxy like a Solidity constructor."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_4507":{"entryPoint":null,"id":4507,"parameterSlots":2,"returnSlots":0},"@_revert_5229":{"entryPoint":822,"id":5229,"parameterSlots":2,"returnSlots":0},"@_setImplementation_4576":{"entryPoint":277,"id":4576,"parameterSlots":1,"returnSlots":0},"@_upgradeToAndCall_4621":{"entryPoint":69,"id":4621,"parameterSlots":3,"returnSlots":0},"@_upgradeTo_4591":{"entryPoint":136,"id":4591,"parameterSlots":1,"returnSlots":0},"@functionDelegateCall_5117":{"entryPoint":223,"id":5117,"parameterSlots":2,"returnSlots":1},"@functionDelegateCall_5146":{"entryPoint":491,"id":5146,"parameterSlots":3,"returnSlots":1},"@getAddressSlot_5256":{"entryPoint":672,"id":5256,"parameterSlots":1,"returnSlots":1},"@isContract_4918":{"entryPoint":637,"id":4918,"parameterSlots":1,"returnSlots":1},"@verifyCallResultFromTarget_5185":{"entryPoint":682,"id":5185,"parameterSlots":4,"returnSlots":1},"abi_decode_available_length_t_bytes_memory_ptr_fromMemory":{"entryPoint":1293,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_address_fromMemory":{"entryPoint":1003,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes_memory_ptr_fromMemory":{"entryPoint":1368,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_bytes_memory_ptr_fromMemory":{"entryPoint":1419,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":1712,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":1917,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65_to_t_string_memory_ptr_fromStack":{"entryPoint":1617,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack":{"entryPoint":1833,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":1767,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":1982,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":1656,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":1872,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_memory":{"entryPoint":1154,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":905,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_bytes_memory_ptr":{"entryPoint":1185,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_bytes_memory_ptr":{"entryPoint":1690,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":1906,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":1701,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":1521,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":957,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":925,"id":null,"parameterSlots":1,"returnSlots":1},"copy_memory_to_memory":{"entryPoint":1239,"id":null,"parameterSlots":3,"returnSlots":0},"finalize_allocation":{"entryPoint":1100,"id":null,"parameterSlots":2,"returnSlots":0},"panic_error_0x41":{"entryPoint":1053,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":1026,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":1031,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":920,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":915,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":1036,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65":{"entryPoint":1538,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad":{"entryPoint":1792,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":977,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:7810:33","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:33","statements":[{"nodeType":"YulAssignment","src":"57:19:33","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:33","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:33"},"nodeType":"YulFunctionCall","src":"67:9:33"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:33"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:33","type":""}],"src":"7:75:33"},{"body":{"nodeType":"YulBlock","src":"177:28:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:33"},"nodeType":"YulFunctionCall","src":"187:12:33"},"nodeType":"YulExpressionStatement","src":"187:12:33"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:33"},{"body":{"nodeType":"YulBlock","src":"300:28:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:33"},"nodeType":"YulFunctionCall","src":"310:12:33"},"nodeType":"YulExpressionStatement","src":"310:12:33"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:33"},{"body":{"nodeType":"YulBlock","src":"379:81:33","statements":[{"nodeType":"YulAssignment","src":"389:65:33","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"404:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"411:42:33","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"400:3:33"},"nodeType":"YulFunctionCall","src":"400:54:33"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"389:7:33"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"361:5:33","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"371:7:33","type":""}],"src":"334:126:33"},{"body":{"nodeType":"YulBlock","src":"511:51:33","statements":[{"nodeType":"YulAssignment","src":"521:35:33","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"550:5:33"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"532:17:33"},"nodeType":"YulFunctionCall","src":"532:24:33"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"521:7:33"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"493:5:33","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"503:7:33","type":""}],"src":"466:96:33"},{"body":{"nodeType":"YulBlock","src":"611:79:33","statements":[{"body":{"nodeType":"YulBlock","src":"668:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"677:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"680:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"670:6:33"},"nodeType":"YulFunctionCall","src":"670:12:33"},"nodeType":"YulExpressionStatement","src":"670:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"634:5:33"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"659:5:33"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"641:17:33"},"nodeType":"YulFunctionCall","src":"641:24:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"631:2:33"},"nodeType":"YulFunctionCall","src":"631:35:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"624:6:33"},"nodeType":"YulFunctionCall","src":"624:43:33"},"nodeType":"YulIf","src":"621:63:33"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"604:5:33","type":""}],"src":"568:122:33"},{"body":{"nodeType":"YulBlock","src":"759:80:33","statements":[{"nodeType":"YulAssignment","src":"769:22:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"784:6:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"778:5:33"},"nodeType":"YulFunctionCall","src":"778:13:33"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"769:5:33"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"827:5:33"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"800:26:33"},"nodeType":"YulFunctionCall","src":"800:33:33"},"nodeType":"YulExpressionStatement","src":"800:33:33"}]},"name":"abi_decode_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"737:6:33","type":""},{"name":"end","nodeType":"YulTypedName","src":"745:3:33","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"753:5:33","type":""}],"src":"696:143:33"},{"body":{"nodeType":"YulBlock","src":"934:28:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"951:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"954:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"944:6:33"},"nodeType":"YulFunctionCall","src":"944:12:33"},"nodeType":"YulExpressionStatement","src":"944:12:33"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"845:117:33"},{"body":{"nodeType":"YulBlock","src":"1057:28:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1074:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1077:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1067:6:33"},"nodeType":"YulFunctionCall","src":"1067:12:33"},"nodeType":"YulExpressionStatement","src":"1067:12:33"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulFunctionDefinition","src":"968:117:33"},{"body":{"nodeType":"YulBlock","src":"1139:54:33","statements":[{"nodeType":"YulAssignment","src":"1149:38:33","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1167:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"1174:2:33","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1163:3:33"},"nodeType":"YulFunctionCall","src":"1163:14:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1183:2:33","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1179:3:33"},"nodeType":"YulFunctionCall","src":"1179:7:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1159:3:33"},"nodeType":"YulFunctionCall","src":"1159:28:33"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"1149:6:33"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1122:5:33","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"1132:6:33","type":""}],"src":"1091:102:33"},{"body":{"nodeType":"YulBlock","src":"1227:152:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1244:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1247:77:33","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1237:6:33"},"nodeType":"YulFunctionCall","src":"1237:88:33"},"nodeType":"YulExpressionStatement","src":"1237:88:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1341:1:33","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"1344:4:33","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1334:6:33"},"nodeType":"YulFunctionCall","src":"1334:15:33"},"nodeType":"YulExpressionStatement","src":"1334:15:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1365:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1368:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1358:6:33"},"nodeType":"YulFunctionCall","src":"1358:15:33"},"nodeType":"YulExpressionStatement","src":"1358:15:33"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"1199:180:33"},{"body":{"nodeType":"YulBlock","src":"1428:238:33","statements":[{"nodeType":"YulVariableDeclaration","src":"1438:58:33","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1460:6:33"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"1490:4:33"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"1468:21:33"},"nodeType":"YulFunctionCall","src":"1468:27:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1456:3:33"},"nodeType":"YulFunctionCall","src":"1456:40:33"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"1442:10:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"1607:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1609:16:33"},"nodeType":"YulFunctionCall","src":"1609:18:33"},"nodeType":"YulExpressionStatement","src":"1609:18:33"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1550:10:33"},{"kind":"number","nodeType":"YulLiteral","src":"1562:18:33","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1547:2:33"},"nodeType":"YulFunctionCall","src":"1547:34:33"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1586:10:33"},{"name":"memPtr","nodeType":"YulIdentifier","src":"1598:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1583:2:33"},"nodeType":"YulFunctionCall","src":"1583:22:33"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1544:2:33"},"nodeType":"YulFunctionCall","src":"1544:62:33"},"nodeType":"YulIf","src":"1541:88:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1645:2:33","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1649:10:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1638:6:33"},"nodeType":"YulFunctionCall","src":"1638:22:33"},"nodeType":"YulExpressionStatement","src":"1638:22:33"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"1414:6:33","type":""},{"name":"size","nodeType":"YulTypedName","src":"1422:4:33","type":""}],"src":"1385:281:33"},{"body":{"nodeType":"YulBlock","src":"1713:88:33","statements":[{"nodeType":"YulAssignment","src":"1723:30:33","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"1733:18:33"},"nodeType":"YulFunctionCall","src":"1733:20:33"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1723:6:33"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1782:6:33"},{"name":"size","nodeType":"YulIdentifier","src":"1790:4:33"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"1762:19:33"},"nodeType":"YulFunctionCall","src":"1762:33:33"},"nodeType":"YulExpressionStatement","src":"1762:33:33"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"1697:4:33","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1706:6:33","type":""}],"src":"1672:129:33"},{"body":{"nodeType":"YulBlock","src":"1873:241:33","statements":[{"body":{"nodeType":"YulBlock","src":"1978:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1980:16:33"},"nodeType":"YulFunctionCall","src":"1980:18:33"},"nodeType":"YulExpressionStatement","src":"1980:18:33"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1950:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"1958:18:33","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1947:2:33"},"nodeType":"YulFunctionCall","src":"1947:30:33"},"nodeType":"YulIf","src":"1944:56:33"},{"nodeType":"YulAssignment","src":"2010:37:33","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2040:6:33"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"2018:21:33"},"nodeType":"YulFunctionCall","src":"2018:29:33"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"2010:4:33"}]},{"nodeType":"YulAssignment","src":"2084:23:33","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"2096:4:33"},{"kind":"number","nodeType":"YulLiteral","src":"2102:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2092:3:33"},"nodeType":"YulFunctionCall","src":"2092:15:33"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"2084:4:33"}]}]},"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"1857:6:33","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"1868:4:33","type":""}],"src":"1807:307:33"},{"body":{"nodeType":"YulBlock","src":"2169:258:33","statements":[{"nodeType":"YulVariableDeclaration","src":"2179:10:33","value":{"kind":"number","nodeType":"YulLiteral","src":"2188:1:33","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"2183:1:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"2248:63:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2273:3:33"},{"name":"i","nodeType":"YulIdentifier","src":"2278:1:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2269:3:33"},"nodeType":"YulFunctionCall","src":"2269:11:33"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2292:3:33"},{"name":"i","nodeType":"YulIdentifier","src":"2297:1:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2288:3:33"},"nodeType":"YulFunctionCall","src":"2288:11:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2282:5:33"},"nodeType":"YulFunctionCall","src":"2282:18:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2262:6:33"},"nodeType":"YulFunctionCall","src":"2262:39:33"},"nodeType":"YulExpressionStatement","src":"2262:39:33"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2209:1:33"},{"name":"length","nodeType":"YulIdentifier","src":"2212:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2206:2:33"},"nodeType":"YulFunctionCall","src":"2206:13:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2220:19:33","statements":[{"nodeType":"YulAssignment","src":"2222:15:33","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2231:1:33"},{"kind":"number","nodeType":"YulLiteral","src":"2234:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2227:3:33"},"nodeType":"YulFunctionCall","src":"2227:10:33"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"2222:1:33"}]}]},"pre":{"nodeType":"YulBlock","src":"2202:3:33","statements":[]},"src":"2198:113:33"},{"body":{"nodeType":"YulBlock","src":"2345:76:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2395:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"2400:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2391:3:33"},"nodeType":"YulFunctionCall","src":"2391:16:33"},{"kind":"number","nodeType":"YulLiteral","src":"2409:1:33","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2384:6:33"},"nodeType":"YulFunctionCall","src":"2384:27:33"},"nodeType":"YulExpressionStatement","src":"2384:27:33"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2326:1:33"},{"name":"length","nodeType":"YulIdentifier","src":"2329:6:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2323:2:33"},"nodeType":"YulFunctionCall","src":"2323:13:33"},"nodeType":"YulIf","src":"2320:101:33"}]},"name":"copy_memory_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"2151:3:33","type":""},{"name":"dst","nodeType":"YulTypedName","src":"2156:3:33","type":""},{"name":"length","nodeType":"YulTypedName","src":"2161:6:33","type":""}],"src":"2120:307:33"},{"body":{"nodeType":"YulBlock","src":"2527:325:33","statements":[{"nodeType":"YulAssignment","src":"2537:74:33","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2603:6:33"}],"functionName":{"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"2562:40:33"},"nodeType":"YulFunctionCall","src":"2562:48:33"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"2546:15:33"},"nodeType":"YulFunctionCall","src":"2546:65:33"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"2537:5:33"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"2627:5:33"},{"name":"length","nodeType":"YulIdentifier","src":"2634:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2620:6:33"},"nodeType":"YulFunctionCall","src":"2620:21:33"},"nodeType":"YulExpressionStatement","src":"2620:21:33"},{"nodeType":"YulVariableDeclaration","src":"2650:27:33","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"2665:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"2672:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2661:3:33"},"nodeType":"YulFunctionCall","src":"2661:16:33"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"2654:3:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"2715:83:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"2717:77:33"},"nodeType":"YulFunctionCall","src":"2717:79:33"},"nodeType":"YulExpressionStatement","src":"2717:79:33"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2696:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"2701:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2692:3:33"},"nodeType":"YulFunctionCall","src":"2692:16:33"},{"name":"end","nodeType":"YulIdentifier","src":"2710:3:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2689:2:33"},"nodeType":"YulFunctionCall","src":"2689:25:33"},"nodeType":"YulIf","src":"2686:112:33"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2829:3:33"},{"name":"dst","nodeType":"YulIdentifier","src":"2834:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"2839:6:33"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"2807:21:33"},"nodeType":"YulFunctionCall","src":"2807:39:33"},"nodeType":"YulExpressionStatement","src":"2807:39:33"}]},"name":"abi_decode_available_length_t_bytes_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"2500:3:33","type":""},{"name":"length","nodeType":"YulTypedName","src":"2505:6:33","type":""},{"name":"end","nodeType":"YulTypedName","src":"2513:3:33","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"2521:5:33","type":""}],"src":"2433:419:33"},{"body":{"nodeType":"YulBlock","src":"2943:281:33","statements":[{"body":{"nodeType":"YulBlock","src":"2992:83:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"2994:77:33"},"nodeType":"YulFunctionCall","src":"2994:79:33"},"nodeType":"YulExpressionStatement","src":"2994:79:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2971:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"2979:4:33","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2967:3:33"},"nodeType":"YulFunctionCall","src":"2967:17:33"},{"name":"end","nodeType":"YulIdentifier","src":"2986:3:33"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2963:3:33"},"nodeType":"YulFunctionCall","src":"2963:27:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2956:6:33"},"nodeType":"YulFunctionCall","src":"2956:35:33"},"nodeType":"YulIf","src":"2953:122:33"},{"nodeType":"YulVariableDeclaration","src":"3084:27:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3104:6:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3098:5:33"},"nodeType":"YulFunctionCall","src":"3098:13:33"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"3088:6:33","type":""}]},{"nodeType":"YulAssignment","src":"3120:98:33","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3191:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"3199:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3187:3:33"},"nodeType":"YulFunctionCall","src":"3187:17:33"},{"name":"length","nodeType":"YulIdentifier","src":"3206:6:33"},{"name":"end","nodeType":"YulIdentifier","src":"3214:3:33"}],"functionName":{"name":"abi_decode_available_length_t_bytes_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"3129:57:33"},"nodeType":"YulFunctionCall","src":"3129:89:33"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"3120:5:33"}]}]},"name":"abi_decode_t_bytes_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2921:6:33","type":""},{"name":"end","nodeType":"YulTypedName","src":"2929:3:33","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"2937:5:33","type":""}],"src":"2871:353:33"},{"body":{"nodeType":"YulBlock","src":"3333:575:33","statements":[{"body":{"nodeType":"YulBlock","src":"3379:83:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3381:77:33"},"nodeType":"YulFunctionCall","src":"3381:79:33"},"nodeType":"YulExpressionStatement","src":"3381:79:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3354:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"3363:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3350:3:33"},"nodeType":"YulFunctionCall","src":"3350:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"3375:2:33","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3346:3:33"},"nodeType":"YulFunctionCall","src":"3346:32:33"},"nodeType":"YulIf","src":"3343:119:33"},{"nodeType":"YulBlock","src":"3472:128:33","statements":[{"nodeType":"YulVariableDeclaration","src":"3487:15:33","value":{"kind":"number","nodeType":"YulLiteral","src":"3501:1:33","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3491:6:33","type":""}]},{"nodeType":"YulAssignment","src":"3516:74:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3562:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"3573:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3558:3:33"},"nodeType":"YulFunctionCall","src":"3558:22:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3582:7:33"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"3526:31:33"},"nodeType":"YulFunctionCall","src":"3526:64:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3516:6:33"}]}]},{"nodeType":"YulBlock","src":"3610:291:33","statements":[{"nodeType":"YulVariableDeclaration","src":"3625:39:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3649:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"3660:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3645:3:33"},"nodeType":"YulFunctionCall","src":"3645:18:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3639:5:33"},"nodeType":"YulFunctionCall","src":"3639:25:33"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3629:6:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"3711:83:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"3713:77:33"},"nodeType":"YulFunctionCall","src":"3713:79:33"},"nodeType":"YulExpressionStatement","src":"3713:79:33"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3683:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"3691:18:33","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3680:2:33"},"nodeType":"YulFunctionCall","src":"3680:30:33"},"nodeType":"YulIf","src":"3677:117:33"},{"nodeType":"YulAssignment","src":"3808:83:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3863:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"3874:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3859:3:33"},"nodeType":"YulFunctionCall","src":"3859:22:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3883:7:33"}],"functionName":{"name":"abi_decode_t_bytes_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"3818:40:33"},"nodeType":"YulFunctionCall","src":"3818:73:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3808:6:33"}]}]}]},"name":"abi_decode_tuple_t_addresst_bytes_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3295:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3306:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3318:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3326:6:33","type":""}],"src":"3230:678:33"},{"body":{"nodeType":"YulBlock","src":"4010:73:33","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4027:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"4032:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4020:6:33"},"nodeType":"YulFunctionCall","src":"4020:19:33"},"nodeType":"YulExpressionStatement","src":"4020:19:33"},{"nodeType":"YulAssignment","src":"4048:29:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4067:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"4072:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4063:3:33"},"nodeType":"YulFunctionCall","src":"4063:14:33"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"4048:11:33"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"3982:3:33","type":""},{"name":"length","nodeType":"YulTypedName","src":"3987:6:33","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"3998:11:33","type":""}],"src":"3914:169:33"},{"body":{"nodeType":"YulBlock","src":"4195:126:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4217:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"4225:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4213:3:33"},"nodeType":"YulFunctionCall","src":"4213:14:33"},{"hexValue":"455243313936373a206e657720696d706c656d656e746174696f6e206973206e","kind":"string","nodeType":"YulLiteral","src":"4229:34:33","type":"","value":"ERC1967: new implementation is n"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4206:6:33"},"nodeType":"YulFunctionCall","src":"4206:58:33"},"nodeType":"YulExpressionStatement","src":"4206:58:33"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4285:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"4293:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4281:3:33"},"nodeType":"YulFunctionCall","src":"4281:15:33"},{"hexValue":"6f74206120636f6e7472616374","kind":"string","nodeType":"YulLiteral","src":"4298:15:33","type":"","value":"ot a contract"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4274:6:33"},"nodeType":"YulFunctionCall","src":"4274:40:33"},"nodeType":"YulExpressionStatement","src":"4274:40:33"}]},"name":"store_literal_in_memory_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"4187:6:33","type":""}],"src":"4089:232:33"},{"body":{"nodeType":"YulBlock","src":"4473:220:33","statements":[{"nodeType":"YulAssignment","src":"4483:74:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4549:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"4554:2:33","type":"","value":"45"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"4490:58:33"},"nodeType":"YulFunctionCall","src":"4490:67:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"4483:3:33"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4655:3:33"}],"functionName":{"name":"store_literal_in_memory_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65","nodeType":"YulIdentifier","src":"4566:88:33"},"nodeType":"YulFunctionCall","src":"4566:93:33"},"nodeType":"YulExpressionStatement","src":"4566:93:33"},{"nodeType":"YulAssignment","src":"4668:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4679:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"4684:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4675:3:33"},"nodeType":"YulFunctionCall","src":"4675:12:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"4668:3:33"}]}]},"name":"abi_encode_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"4461:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"4469:3:33","type":""}],"src":"4327:366:33"},{"body":{"nodeType":"YulBlock","src":"4870:248:33","statements":[{"nodeType":"YulAssignment","src":"4880:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4892:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"4903:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4888:3:33"},"nodeType":"YulFunctionCall","src":"4888:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4880:4:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4927:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"4938:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4923:3:33"},"nodeType":"YulFunctionCall","src":"4923:17:33"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"4946:4:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"4952:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4942:3:33"},"nodeType":"YulFunctionCall","src":"4942:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4916:6:33"},"nodeType":"YulFunctionCall","src":"4916:47:33"},"nodeType":"YulExpressionStatement","src":"4916:47:33"},{"nodeType":"YulAssignment","src":"4972:139:33","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"5106:4:33"}],"functionName":{"name":"abi_encode_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"4980:124:33"},"nodeType":"YulFunctionCall","src":"4980:131:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4972:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4850:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4865:4:33","type":""}],"src":"4699:419:33"},{"body":{"nodeType":"YulBlock","src":"5182:40:33","statements":[{"nodeType":"YulAssignment","src":"5193:22:33","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5209:5:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5203:5:33"},"nodeType":"YulFunctionCall","src":"5203:12:33"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"5193:6:33"}]}]},"name":"array_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5165:5:33","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"5175:6:33","type":""}],"src":"5124:98:33"},{"body":{"nodeType":"YulBlock","src":"5341:34:33","statements":[{"nodeType":"YulAssignment","src":"5351:18:33","value":{"name":"pos","nodeType":"YulIdentifier","src":"5366:3:33"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"5351:11:33"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"5313:3:33","type":""},{"name":"length","nodeType":"YulTypedName","src":"5318:6:33","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"5329:11:33","type":""}],"src":"5228:147:33"},{"body":{"nodeType":"YulBlock","src":"5489:265:33","statements":[{"nodeType":"YulVariableDeclaration","src":"5499:52:33","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5545:5:33"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"5513:31:33"},"nodeType":"YulFunctionCall","src":"5513:38:33"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"5503:6:33","type":""}]},{"nodeType":"YulAssignment","src":"5560:95:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5643:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"5648:6:33"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"5567:75:33"},"nodeType":"YulFunctionCall","src":"5567:88:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"5560:3:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5690:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"5697:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5686:3:33"},"nodeType":"YulFunctionCall","src":"5686:16:33"},{"name":"pos","nodeType":"YulIdentifier","src":"5704:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"5709:6:33"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"5664:21:33"},"nodeType":"YulFunctionCall","src":"5664:52:33"},"nodeType":"YulExpressionStatement","src":"5664:52:33"},{"nodeType":"YulAssignment","src":"5725:23:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5736:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"5741:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5732:3:33"},"nodeType":"YulFunctionCall","src":"5732:16:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"5725:3:33"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5470:5:33","type":""},{"name":"pos","nodeType":"YulTypedName","src":"5477:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"5485:3:33","type":""}],"src":"5381:373:33"},{"body":{"nodeType":"YulBlock","src":"5894:137:33","statements":[{"nodeType":"YulAssignment","src":"5905:100:33","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5992:6:33"},{"name":"pos","nodeType":"YulIdentifier","src":"6001:3:33"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"5912:79:33"},"nodeType":"YulFunctionCall","src":"5912:93:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"5905:3:33"}]},{"nodeType":"YulAssignment","src":"6015:10:33","value":{"name":"pos","nodeType":"YulIdentifier","src":"6022:3:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"6015:3:33"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"5873:3:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5879:6:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"5890:3:33","type":""}],"src":"5760:271:33"},{"body":{"nodeType":"YulBlock","src":"6143:73:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"6165:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"6173:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6161:3:33"},"nodeType":"YulFunctionCall","src":"6161:14:33"},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","kind":"string","nodeType":"YulLiteral","src":"6177:31:33","type":"","value":"Address: call to non-contract"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6154:6:33"},"nodeType":"YulFunctionCall","src":"6154:55:33"},"nodeType":"YulExpressionStatement","src":"6154:55:33"}]},"name":"store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"6135:6:33","type":""}],"src":"6037:179:33"},{"body":{"nodeType":"YulBlock","src":"6368:220:33","statements":[{"nodeType":"YulAssignment","src":"6378:74:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6444:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"6449:2:33","type":"","value":"29"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"6385:58:33"},"nodeType":"YulFunctionCall","src":"6385:67:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"6378:3:33"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6550:3:33"}],"functionName":{"name":"store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","nodeType":"YulIdentifier","src":"6461:88:33"},"nodeType":"YulFunctionCall","src":"6461:93:33"},"nodeType":"YulExpressionStatement","src":"6461:93:33"},{"nodeType":"YulAssignment","src":"6563:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6574:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"6579:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6570:3:33"},"nodeType":"YulFunctionCall","src":"6570:12:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"6563:3:33"}]}]},"name":"abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"6356:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"6364:3:33","type":""}],"src":"6222:366:33"},{"body":{"nodeType":"YulBlock","src":"6765:248:33","statements":[{"nodeType":"YulAssignment","src":"6775:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6787:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"6798:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6783:3:33"},"nodeType":"YulFunctionCall","src":"6783:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6775:4:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6822:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"6833:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6818:3:33"},"nodeType":"YulFunctionCall","src":"6818:17:33"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"6841:4:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"6847:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6837:3:33"},"nodeType":"YulFunctionCall","src":"6837:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6811:6:33"},"nodeType":"YulFunctionCall","src":"6811:47:33"},"nodeType":"YulExpressionStatement","src":"6811:47:33"},{"nodeType":"YulAssignment","src":"6867:139:33","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"7001:4:33"}],"functionName":{"name":"abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"6875:124:33"},"nodeType":"YulFunctionCall","src":"6875:131:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6867:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6745:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6760:4:33","type":""}],"src":"6594:419:33"},{"body":{"nodeType":"YulBlock","src":"7078:40:33","statements":[{"nodeType":"YulAssignment","src":"7089:22:33","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7105:5:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7099:5:33"},"nodeType":"YulFunctionCall","src":"7099:12:33"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"7089:6:33"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7061:5:33","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"7071:6:33","type":""}],"src":"7019:99:33"},{"body":{"nodeType":"YulBlock","src":"7216:272:33","statements":[{"nodeType":"YulVariableDeclaration","src":"7226:53:33","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7273:5:33"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"7240:32:33"},"nodeType":"YulFunctionCall","src":"7240:39:33"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"7230:6:33","type":""}]},{"nodeType":"YulAssignment","src":"7288:78:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7354:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"7359:6:33"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"7295:58:33"},"nodeType":"YulFunctionCall","src":"7295:71:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7288:3:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7401:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"7408:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7397:3:33"},"nodeType":"YulFunctionCall","src":"7397:16:33"},{"name":"pos","nodeType":"YulIdentifier","src":"7415:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"7420:6:33"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"7375:21:33"},"nodeType":"YulFunctionCall","src":"7375:52:33"},"nodeType":"YulExpressionStatement","src":"7375:52:33"},{"nodeType":"YulAssignment","src":"7436:46:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7447:3:33"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"7474:6:33"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"7452:21:33"},"nodeType":"YulFunctionCall","src":"7452:29:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7443:3:33"},"nodeType":"YulFunctionCall","src":"7443:39:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"7436:3:33"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7197:5:33","type":""},{"name":"pos","nodeType":"YulTypedName","src":"7204:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7212:3:33","type":""}],"src":"7124:364:33"},{"body":{"nodeType":"YulBlock","src":"7612:195:33","statements":[{"nodeType":"YulAssignment","src":"7622:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7634:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"7645:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7630:3:33"},"nodeType":"YulFunctionCall","src":"7630:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7622:4:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7669:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"7680:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7665:3:33"},"nodeType":"YulFunctionCall","src":"7665:17:33"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"7688:4:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"7694:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7684:3:33"},"nodeType":"YulFunctionCall","src":"7684:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7658:6:33"},"nodeType":"YulFunctionCall","src":"7658:47:33"},"nodeType":"YulExpressionStatement","src":"7658:47:33"},{"nodeType":"YulAssignment","src":"7714:86:33","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7786:6:33"},{"name":"tail","nodeType":"YulIdentifier","src":"7795:4:33"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"7722:63:33"},"nodeType":"YulFunctionCall","src":"7722:78:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7714:4:33"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7584:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7596:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7607:4:33","type":""}],"src":"7494:313:33"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_bytes_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function abi_decode_available_length_t_bytes_memory_ptr_fromMemory(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_memory_to_memory(src, dst, length)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_memory_ptr_fromMemory(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := mload(offset)\n        array := abi_decode_available_length_t_bytes_memory_ptr_fromMemory(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_addresst_bytes_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := mload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_bytes_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC1967: new implementation is n\")\n\n        mstore(add(memPtr, 32), \"ot a contract\")\n\n    }\n\n    function abi_encode_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 45)\n        store_literal_in_memory_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value0) -> end {\n\n        pos := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        end := pos\n    }\n\n    function store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad(memPtr) {\n\n        mstore(add(memPtr, 0), \"Address: call to non-contract\")\n\n    }\n\n    function abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 29)\n        store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n}\n","id":33,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"608060405260405162000c6638038062000c6683398181016040528101906200002991906200058b565b6200003d828260006200004560201b60201c565b5050620007e2565b62000056836200008860201b60201c565b600082511180620000645750805b156200008357620000818383620000df60201b620000371760201c565b505b505050565b62000099816200011560201b60201c565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b60606200010d838360405180606001604052806027815260200162000c3f60279139620001eb60201b60201c565b905092915050565b6200012b816200027d60201b620000641760201c565b6200016d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001649062000678565b60405180910390fd5b80620001a77f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b620002a060201b620000871760201c565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60606000808573ffffffffffffffffffffffffffffffffffffffff1685604051620002179190620006e7565b600060405180830381855af49150503d806000811462000254576040519150601f19603f3d011682016040523d82523d6000602084013e62000259565b606091505b50915091506200027286838387620002aa60201b60201c565b925050509392505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000819050919050565b606083156200031b576000835114156200031257620002cf856200027d60201b60201c565b62000311576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003089062000750565b60405180910390fd5b5b8290506200032e565b6200032d83836200033660201b60201c565b5b949350505050565b6000825111156200034a5781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003809190620007be565b60405180910390fd5b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620003ca826200039d565b9050919050565b620003dc81620003bd565b8114620003e857600080fd5b50565b600081519050620003fc81620003d1565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b62000457826200040c565b810181811067ffffffffffffffff821117156200047957620004786200041d565b5b80604052505050565b60006200048e62000389565b90506200049c82826200044c565b919050565b600067ffffffffffffffff821115620004bf57620004be6200041d565b5b620004ca826200040c565b9050602081019050919050565b60005b83811015620004f7578082015181840152602081019050620004da565b8381111562000507576000848401525b50505050565b6000620005246200051e84620004a1565b62000482565b90508281526020810184848401111562000543576200054262000407565b5b62000550848285620004d7565b509392505050565b600082601f83011262000570576200056f62000402565b5b8151620005828482602086016200050d565b91505092915050565b60008060408385031215620005a557620005a462000393565b5b6000620005b585828601620003eb565b925050602083015167ffffffffffffffff811115620005d957620005d862000398565b5b620005e78582860162000558565b9150509250929050565b600082825260208201905092915050565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b600062000660602d83620005f1565b91506200066d8262000602565b604082019050919050565b60006020820190508181036000830152620006938162000651565b9050919050565b600081519050919050565b600081905092915050565b6000620006bd826200069a565b620006c98185620006a5565b9350620006db818560208601620004d7565b80840191505092915050565b6000620006f58284620006b0565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b600062000738601d83620005f1565b9150620007458262000700565b602082019050919050565b600060208201905081810360008301526200076b8162000729565b9050919050565b600081519050919050565b60006200078a8262000772565b620007968185620005f1565b9350620007a8818560208601620004d7565b620007b3816200040c565b840191505092915050565b60006020820190508181036000830152620007da81846200077d565b905092915050565b61044d80620007f26000396000f3fe6080604052366100135761001161001d565b005b61001b61001d565b005b610025610091565b610035610030610093565b6100a2565b565b606061005c83836040518060600160405280602781526020016103f1602791396100c8565b905092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000819050919050565b565b600061009d61014e565b905090565b3660008037600080366000845af43d6000803e80600081146100c3573d6000f35b3d6000fd5b60606000808573ffffffffffffffffffffffffffffffffffffffff16856040516100f291906102e5565b600060405180830381855af49150503d806000811461012d576040519150601f19603f3d011682016040523d82523d6000602084013e610132565b606091505b5091509150610143868383876101a5565b925050509392505050565b600061017c7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b610087565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060831561020857600083511415610200576101c085610064565b6101ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101f690610359565b60405180910390fd5b5b829050610213565b610212838361021b565b5b949350505050565b60008251111561022e5781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026291906103ce565b60405180910390fd5b600081519050919050565b600081905092915050565b60005b8381101561029f578082015181840152602081019050610284565b838111156102ae576000848401525b50505050565b60006102bf8261026b565b6102c98185610276565b93506102d9818560208601610281565b80840191505092915050565b60006102f182846102b4565b915081905092915050565b600082825260208201905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000610343601d836102fc565b915061034e8261030d565b602082019050919050565b6000602082019050818103600083015261037281610336565b9050919050565b600081519050919050565b6000601f19601f8301169050919050565b60006103a082610379565b6103aa81856102fc565b93506103ba818560208601610281565b6103c381610384565b840191505092915050565b600060208201905081810360008301526103e88184610395565b90509291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212201a2d2a5d2e8dd48653fe90087730584b1370f6eb220af3217f3a69b4a773d8fc64736f6c63430008090033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH3 0xC66 CODESIZE SUB DUP1 PUSH3 0xC66 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x29 SWAP2 SWAP1 PUSH3 0x58B JUMP JUMPDEST PUSH3 0x3D DUP3 DUP3 PUSH1 0x0 PUSH3 0x45 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST POP POP PUSH3 0x7E2 JUMP JUMPDEST PUSH3 0x56 DUP4 PUSH3 0x88 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT DUP1 PUSH3 0x64 JUMPI POP DUP1 JUMPDEST ISZERO PUSH3 0x83 JUMPI PUSH3 0x81 DUP4 DUP4 PUSH3 0xDF PUSH1 0x20 SHL PUSH3 0x37 OR PUSH1 0x20 SHR JUMP JUMPDEST POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH3 0x99 DUP2 PUSH3 0x115 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x60 PUSH3 0x10D DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0xC3F PUSH1 0x27 SWAP2 CODECOPY PUSH3 0x1EB PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH3 0x12B DUP2 PUSH3 0x27D PUSH1 0x20 SHL PUSH3 0x64 OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x16D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x164 SWAP1 PUSH3 0x678 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH3 0x1A7 PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH1 0x0 SHL PUSH3 0x2A0 PUSH1 0x20 SHL PUSH3 0x87 OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH1 0x40 MLOAD PUSH3 0x217 SWAP2 SWAP1 PUSH3 0x6E7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH3 0x254 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH3 0x259 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH3 0x272 DUP7 DUP4 DUP4 DUP8 PUSH3 0x2AA PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH3 0x31B JUMPI PUSH1 0x0 DUP4 MLOAD EQ ISZERO PUSH3 0x312 JUMPI PUSH3 0x2CF DUP6 PUSH3 0x27D PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x311 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x308 SWAP1 PUSH3 0x750 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST DUP3 SWAP1 POP PUSH3 0x32E JUMP JUMPDEST PUSH3 0x32D DUP4 DUP4 PUSH3 0x336 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT ISZERO PUSH3 0x34A JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x380 SWAP2 SWAP1 PUSH3 0x7BE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x3CA DUP3 PUSH3 0x39D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x3DC DUP2 PUSH3 0x3BD JUMP JUMPDEST DUP2 EQ PUSH3 0x3E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x3FC DUP2 PUSH3 0x3D1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH3 0x457 DUP3 PUSH3 0x40C JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH3 0x479 JUMPI PUSH3 0x478 PUSH3 0x41D JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x48E PUSH3 0x389 JUMP JUMPDEST SWAP1 POP PUSH3 0x49C DUP3 DUP3 PUSH3 0x44C JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH3 0x4BF JUMPI PUSH3 0x4BE PUSH3 0x41D JUMP JUMPDEST JUMPDEST PUSH3 0x4CA DUP3 PUSH3 0x40C JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x4F7 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x4DA JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH3 0x507 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x524 PUSH3 0x51E DUP5 PUSH3 0x4A1 JUMP JUMPDEST PUSH3 0x482 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH3 0x543 JUMPI PUSH3 0x542 PUSH3 0x407 JUMP JUMPDEST JUMPDEST PUSH3 0x550 DUP5 DUP3 DUP6 PUSH3 0x4D7 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x570 JUMPI PUSH3 0x56F PUSH3 0x402 JUMP JUMPDEST JUMPDEST DUP2 MLOAD PUSH3 0x582 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH3 0x50D JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x5A5 JUMPI PUSH3 0x5A4 PUSH3 0x393 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x5B5 DUP6 DUP3 DUP7 ADD PUSH3 0x3EB JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x5D9 JUMPI PUSH3 0x5D8 PUSH3 0x398 JUMP JUMPDEST JUMPDEST PUSH3 0x5E7 DUP6 DUP3 DUP7 ADD PUSH3 0x558 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F74206120636F6E747261637400000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x660 PUSH1 0x2D DUP4 PUSH3 0x5F1 JUMP JUMPDEST SWAP2 POP PUSH3 0x66D DUP3 PUSH3 0x602 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x693 DUP2 PUSH3 0x651 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x6BD DUP3 PUSH3 0x69A JUMP JUMPDEST PUSH3 0x6C9 DUP2 DUP6 PUSH3 0x6A5 JUMP JUMPDEST SWAP4 POP PUSH3 0x6DB DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH3 0x4D7 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x6F5 DUP3 DUP5 PUSH3 0x6B0 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x738 PUSH1 0x1D DUP4 PUSH3 0x5F1 JUMP JUMPDEST SWAP2 POP PUSH3 0x745 DUP3 PUSH3 0x700 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x76B DUP2 PUSH3 0x729 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x78A DUP3 PUSH3 0x772 JUMP JUMPDEST PUSH3 0x796 DUP2 DUP6 PUSH3 0x5F1 JUMP JUMPDEST SWAP4 POP PUSH3 0x7A8 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH3 0x4D7 JUMP JUMPDEST PUSH3 0x7B3 DUP2 PUSH3 0x40C JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x7DA DUP2 DUP5 PUSH3 0x77D JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x44D DUP1 PUSH3 0x7F2 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLDATASIZE PUSH2 0x13 JUMPI PUSH2 0x11 PUSH2 0x1D JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1B PUSH2 0x1D JUMP JUMPDEST STOP JUMPDEST PUSH2 0x25 PUSH2 0x91 JUMP JUMPDEST PUSH2 0x35 PUSH2 0x30 PUSH2 0x93 JUMP JUMPDEST PUSH2 0xA2 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x60 PUSH2 0x5C DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3F1 PUSH1 0x27 SWAP2 CODECOPY PUSH2 0xC8 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9D PUSH2 0x14E JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 DUP1 CALLDATACOPY PUSH1 0x0 DUP1 CALLDATASIZE PUSH1 0x0 DUP5 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xC3 JUMPI RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH1 0x40 MLOAD PUSH2 0xF2 SWAP2 SWAP1 PUSH2 0x2E5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x12D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x132 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x143 DUP7 DUP4 DUP4 DUP8 PUSH2 0x1A5 JUMP JUMPDEST SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17C PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH1 0x0 SHL PUSH2 0x87 JUMP JUMPDEST PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x208 JUMPI PUSH1 0x0 DUP4 MLOAD EQ ISZERO PUSH2 0x200 JUMPI PUSH2 0x1C0 DUP6 PUSH2 0x64 JUMP JUMPDEST PUSH2 0x1FF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F6 SWAP1 PUSH2 0x359 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST DUP3 SWAP1 POP PUSH2 0x213 JUMP JUMPDEST PUSH2 0x212 DUP4 DUP4 PUSH2 0x21B JUMP JUMPDEST JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT ISZERO PUSH2 0x22E JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x262 SWAP2 SWAP1 PUSH2 0x3CE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x29F JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x284 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x2AE JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2BF DUP3 PUSH2 0x26B JUMP JUMPDEST PUSH2 0x2C9 DUP2 DUP6 PUSH2 0x276 JUMP JUMPDEST SWAP4 POP PUSH2 0x2D9 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x281 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F1 DUP3 DUP5 PUSH2 0x2B4 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x343 PUSH1 0x1D DUP4 PUSH2 0x2FC JUMP JUMPDEST SWAP2 POP PUSH2 0x34E DUP3 PUSH2 0x30D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x372 DUP2 PUSH2 0x336 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3A0 DUP3 PUSH2 0x379 JUMP JUMPDEST PUSH2 0x3AA DUP2 DUP6 PUSH2 0x2FC JUMP JUMPDEST SWAP4 POP PUSH2 0x3BA DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x281 JUMP JUMPDEST PUSH2 0x3C3 DUP2 PUSH2 0x384 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3E8 DUP2 DUP5 PUSH2 0x395 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP INVALID COINBASE PUSH5 0x6472657373 GASPRICE KECCAK256 PUSH13 0x6F772D6C6576656C2064656C65 PUSH8 0x6174652063616C6C KECCAK256 PUSH7 0x61696C6564A264 PUSH10 0x706673582212201A2D2A 0x5D 0x2E DUP14 0xD4 DUP7 MSTORE8 INVALID SWAP1 ADDMOD PUSH24 0x30584B1370F6EB220AF3217F3A69B4A773D8FC64736F6C63 NUMBER STOP ADDMOD MULMOD STOP CALLER COINBASE PUSH5 0x6472657373 GASPRICE KECCAK256 PUSH13 0x6F772D6C6576656C2064656C65 PUSH8 0x6174652063616C6C KECCAK256 PUSH7 0x61696C65640000 ","sourceMap":"567:723:24:-:0;;;958:112;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1024:39;1042:6;1050:5;1057;1024:17;;;:39;;:::i;:::-;958:112;;567:723;;2183:295:25;2321:29;2332:17;2321:10;;;:29;;:::i;:::-;2378:1;2364:4;:11;:15;:28;;;;2383:9;2364:28;2360:112;;;2408:53;2437:17;2456:4;2408:28;;;;;:53;;:::i;:::-;;2360:112;2183:295;;;:::o;1897:152::-;1963:37;1982:17;1963:18;;;:37;;:::i;:::-;2024:17;2015:27;;;;;;;;;;;;1897:152;:::o;6469:198:28:-;6552:12;6583:77;6604:6;6612:4;6583:77;;;;;;;;;;;;;;;;;:20;;;:77;;:::i;:::-;6576:84;;6469:198;;;;:::o;1532:259:25:-;1613:37;1632:17;1613:18;;;;;:37;;:::i;:::-;1605:95;;;;;;;;;;;;:::i;:::-;;;;;;;;;1767:17;1710:48;1030:66;1737:20;;1710:26;;;;;:48;;:::i;:::-;:54;;;:74;;;;;;;;;;;;;;;;;;1532:259;:::o;6853:325:28:-;6994:12;7019;7033:23;7060:6;:19;;7080:4;7060:25;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7018:67;;;;7102:69;7129:6;7137:7;7146:10;7158:12;7102:26;;;:69;;:::i;:::-;7095:76;;;;6853:325;;;;;:::o;1175:320::-;1235:4;1487:1;1465:7;:19;;;:23;1458:30;;1175:320;;;:::o;1614:190:29:-;1675:21;1784:4;1774:14;;1614:190;;;:::o;7466:628:28:-;7646:12;7674:7;7670:418;;;7722:1;7701:10;:17;:22;7697:286;;;7916:18;7927:6;7916:10;;;:18;;:::i;:::-;7908:60;;;;;;;;;;;;:::i;:::-;;;;;;;;;7697:286;8003:10;7996:17;;;;7670:418;8044:33;8052:10;8064:12;8044:7;;;:33;;:::i;:::-;7466:628;;;;;;;:::o;8616:540::-;8795:1;8775:10;:17;:21;8771:379;;;9003:10;8997:17;9059:15;9046:10;9042:2;9038:19;9031:44;8771:379;9126:12;9119:20;;;;;;;;;;;:::i;:::-;;;;;;;;7:75:33;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:143::-;753:5;784:6;778:13;769:22;;800:33;827:5;800:33;:::i;:::-;696:143;;;;:::o;845:117::-;954:1;951;944:12;968:117;1077:1;1074;1067:12;1091:102;1132:6;1183:2;1179:7;1174:2;1167:5;1163:14;1159:28;1149:38;;1091:102;;;:::o;1199:180::-;1247:77;1244:1;1237:88;1344:4;1341:1;1334:15;1368:4;1365:1;1358:15;1385:281;1468:27;1490:4;1468:27;:::i;:::-;1460:6;1456:40;1598:6;1586:10;1583:22;1562:18;1550:10;1547:34;1544:62;1541:88;;;1609:18;;:::i;:::-;1541:88;1649:10;1645:2;1638:22;1428:238;1385:281;;:::o;1672:129::-;1706:6;1733:20;;:::i;:::-;1723:30;;1762:33;1790:4;1782:6;1762:33;:::i;:::-;1672:129;;;:::o;1807:307::-;1868:4;1958:18;1950:6;1947:30;1944:56;;;1980:18;;:::i;:::-;1944:56;2018:29;2040:6;2018:29;:::i;:::-;2010:37;;2102:4;2096;2092:15;2084:23;;1807:307;;;:::o;2120:::-;2188:1;2198:113;2212:6;2209:1;2206:13;2198:113;;;2297:1;2292:3;2288:11;2282:18;2278:1;2273:3;2269:11;2262:39;2234:2;2231:1;2227:10;2222:15;;2198:113;;;2329:6;2326:1;2323:13;2320:101;;;2409:1;2400:6;2395:3;2391:16;2384:27;2320:101;2169:258;2120:307;;;:::o;2433:419::-;2521:5;2546:65;2562:48;2603:6;2562:48;:::i;:::-;2546:65;:::i;:::-;2537:74;;2634:6;2627:5;2620:21;2672:4;2665:5;2661:16;2710:3;2701:6;2696:3;2692:16;2689:25;2686:112;;;2717:79;;:::i;:::-;2686:112;2807:39;2839:6;2834:3;2829;2807:39;:::i;:::-;2527:325;2433:419;;;;;:::o;2871:353::-;2937:5;2986:3;2979:4;2971:6;2967:17;2963:27;2953:122;;2994:79;;:::i;:::-;2953:122;3104:6;3098:13;3129:89;3214:3;3206:6;3199:4;3191:6;3187:17;3129:89;:::i;:::-;3120:98;;2943:281;2871:353;;;;:::o;3230:678::-;3318:6;3326;3375:2;3363:9;3354:7;3350:23;3346:32;3343:119;;;3381:79;;:::i;:::-;3343:119;3501:1;3526:64;3582:7;3573:6;3562:9;3558:22;3526:64;:::i;:::-;3516:74;;3472:128;3660:2;3649:9;3645:18;3639:25;3691:18;3683:6;3680:30;3677:117;;;3713:79;;:::i;:::-;3677:117;3818:73;3883:7;3874:6;3863:9;3859:22;3818:73;:::i;:::-;3808:83;;3610:291;3230:678;;;;;:::o;3914:169::-;3998:11;4032:6;4027:3;4020:19;4072:4;4067:3;4063:14;4048:29;;3914:169;;;;:::o;4089:232::-;4229:34;4225:1;4217:6;4213:14;4206:58;4298:15;4293:2;4285:6;4281:15;4274:40;4089:232;:::o;4327:366::-;4469:3;4490:67;4554:2;4549:3;4490:67;:::i;:::-;4483:74;;4566:93;4655:3;4566:93;:::i;:::-;4684:2;4679:3;4675:12;4668:19;;4327:366;;;:::o;4699:419::-;4865:4;4903:2;4892:9;4888:18;4880:26;;4952:9;4946:4;4942:20;4938:1;4927:9;4923:17;4916:47;4980:131;5106:4;4980:131;:::i;:::-;4972:139;;4699:419;;;:::o;5124:98::-;5175:6;5209:5;5203:12;5193:22;;5124:98;;;:::o;5228:147::-;5329:11;5366:3;5351:18;;5228:147;;;;:::o;5381:373::-;5485:3;5513:38;5545:5;5513:38;:::i;:::-;5567:88;5648:6;5643:3;5567:88;:::i;:::-;5560:95;;5664:52;5709:6;5704:3;5697:4;5690:5;5686:16;5664:52;:::i;:::-;5741:6;5736:3;5732:16;5725:23;;5489:265;5381:373;;;;:::o;5760:271::-;5890:3;5912:93;6001:3;5992:6;5912:93;:::i;:::-;5905:100;;6022:3;6015:10;;5760:271;;;;:::o;6037:179::-;6177:31;6173:1;6165:6;6161:14;6154:55;6037:179;:::o;6222:366::-;6364:3;6385:67;6449:2;6444:3;6385:67;:::i;:::-;6378:74;;6461:93;6550:3;6461:93;:::i;:::-;6579:2;6574:3;6570:12;6563:19;;6222:366;;;:::o;6594:419::-;6760:4;6798:2;6787:9;6783:18;6775:26;;6847:9;6841:4;6837:20;6833:1;6822:9;6818:17;6811:47;6875:131;7001:4;6875:131;:::i;:::-;6867:139;;6594:419;;;:::o;7019:99::-;7071:6;7105:5;7099:12;7089:22;;7019:99;;;:::o;7124:364::-;7212:3;7240:39;7273:5;7240:39;:::i;:::-;7295:71;7359:6;7354:3;7295:71;:::i;:::-;7288:78;;7375:52;7420:6;7415:3;7408:4;7401:5;7397:16;7375:52;:::i;:::-;7452:29;7474:6;7452:29;:::i;:::-;7447:3;7443:39;7436:46;;7216:272;7124:364;;;;:::o;7494:313::-;7607:4;7645:2;7634:9;7630:18;7622:26;;7694:9;7688:4;7684:20;7680:1;7669:9;7665:17;7658:47;7722:78;7795:4;7786:6;7722:78;:::i;:::-;7714:86;;7494:313;;;;:::o;567:723:24:-;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_4876":{"entryPoint":null,"id":4876,"parameterSlots":0,"returnSlots":0},"@_4884":{"entryPoint":null,"id":4884,"parameterSlots":0,"returnSlots":0},"@_beforeFallback_4889":{"entryPoint":145,"id":4889,"parameterSlots":0,"returnSlots":0},"@_delegate_4849":{"entryPoint":162,"id":4849,"parameterSlots":1,"returnSlots":0},"@_fallback_4868":{"entryPoint":29,"id":4868,"parameterSlots":0,"returnSlots":0},"@_getImplementation_4552":{"entryPoint":334,"id":4552,"parameterSlots":0,"returnSlots":1},"@_implementation_4519":{"entryPoint":147,"id":4519,"parameterSlots":0,"returnSlots":1},"@_revert_5229":{"entryPoint":539,"id":5229,"parameterSlots":2,"returnSlots":0},"@functionDelegateCall_5117":{"entryPoint":55,"id":5117,"parameterSlots":2,"returnSlots":1},"@functionDelegateCall_5146":{"entryPoint":200,"id":5146,"parameterSlots":3,"returnSlots":1},"@getAddressSlot_5256":{"entryPoint":135,"id":5256,"parameterSlots":1,"returnSlots":1},"@isContract_4918":{"entryPoint":100,"id":4918,"parameterSlots":1,"returnSlots":1},"@verifyCallResultFromTarget_5185":{"entryPoint":421,"id":5185,"parameterSlots":4,"returnSlots":1},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":692,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":917,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack":{"entryPoint":822,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":741,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":974,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":857,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_bytes_memory_ptr":{"entryPoint":619,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":889,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":630,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":764,"id":null,"parameterSlots":2,"returnSlots":1},"copy_memory_to_memory":{"entryPoint":641,"id":null,"parameterSlots":3,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":900,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad":{"entryPoint":781,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:3289:33","statements":[{"body":{"nodeType":"YulBlock","src":"65:40:33","statements":[{"nodeType":"YulAssignment","src":"76:22:33","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"92:5:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"86:5:33"},"nodeType":"YulFunctionCall","src":"86:12:33"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"76:6:33"}]}]},"name":"array_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"48:5:33","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"58:6:33","type":""}],"src":"7:98:33"},{"body":{"nodeType":"YulBlock","src":"224:34:33","statements":[{"nodeType":"YulAssignment","src":"234:18:33","value":{"name":"pos","nodeType":"YulIdentifier","src":"249:3:33"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"234:11:33"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"196:3:33","type":""},{"name":"length","nodeType":"YulTypedName","src":"201:6:33","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"212:11:33","type":""}],"src":"111:147:33"},{"body":{"nodeType":"YulBlock","src":"313:258:33","statements":[{"nodeType":"YulVariableDeclaration","src":"323:10:33","value":{"kind":"number","nodeType":"YulLiteral","src":"332:1:33","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"327:1:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"392:63:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"417:3:33"},{"name":"i","nodeType":"YulIdentifier","src":"422:1:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"413:3:33"},"nodeType":"YulFunctionCall","src":"413:11:33"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"436:3:33"},{"name":"i","nodeType":"YulIdentifier","src":"441:1:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"432:3:33"},"nodeType":"YulFunctionCall","src":"432:11:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"426:5:33"},"nodeType":"YulFunctionCall","src":"426:18:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"406:6:33"},"nodeType":"YulFunctionCall","src":"406:39:33"},"nodeType":"YulExpressionStatement","src":"406:39:33"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"353:1:33"},{"name":"length","nodeType":"YulIdentifier","src":"356:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"350:2:33"},"nodeType":"YulFunctionCall","src":"350:13:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"364:19:33","statements":[{"nodeType":"YulAssignment","src":"366:15:33","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"375:1:33"},{"kind":"number","nodeType":"YulLiteral","src":"378:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"371:3:33"},"nodeType":"YulFunctionCall","src":"371:10:33"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"366:1:33"}]}]},"pre":{"nodeType":"YulBlock","src":"346:3:33","statements":[]},"src":"342:113:33"},{"body":{"nodeType":"YulBlock","src":"489:76:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"539:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"544:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"535:3:33"},"nodeType":"YulFunctionCall","src":"535:16:33"},{"kind":"number","nodeType":"YulLiteral","src":"553:1:33","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"528:6:33"},"nodeType":"YulFunctionCall","src":"528:27:33"},"nodeType":"YulExpressionStatement","src":"528:27:33"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"470:1:33"},{"name":"length","nodeType":"YulIdentifier","src":"473:6:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"467:2:33"},"nodeType":"YulFunctionCall","src":"467:13:33"},"nodeType":"YulIf","src":"464:101:33"}]},"name":"copy_memory_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"295:3:33","type":""},{"name":"dst","nodeType":"YulTypedName","src":"300:3:33","type":""},{"name":"length","nodeType":"YulTypedName","src":"305:6:33","type":""}],"src":"264:307:33"},{"body":{"nodeType":"YulBlock","src":"685:265:33","statements":[{"nodeType":"YulVariableDeclaration","src":"695:52:33","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"741:5:33"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"709:31:33"},"nodeType":"YulFunctionCall","src":"709:38:33"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"699:6:33","type":""}]},{"nodeType":"YulAssignment","src":"756:95:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"839:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"844:6:33"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"763:75:33"},"nodeType":"YulFunctionCall","src":"763:88:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"756:3:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"886:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"893:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"882:3:33"},"nodeType":"YulFunctionCall","src":"882:16:33"},{"name":"pos","nodeType":"YulIdentifier","src":"900:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"905:6:33"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"860:21:33"},"nodeType":"YulFunctionCall","src":"860:52:33"},"nodeType":"YulExpressionStatement","src":"860:52:33"},{"nodeType":"YulAssignment","src":"921:23:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"932:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"937:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"928:3:33"},"nodeType":"YulFunctionCall","src":"928:16:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"921:3:33"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"666:5:33","type":""},{"name":"pos","nodeType":"YulTypedName","src":"673:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"681:3:33","type":""}],"src":"577:373:33"},{"body":{"nodeType":"YulBlock","src":"1090:137:33","statements":[{"nodeType":"YulAssignment","src":"1101:100:33","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1188:6:33"},{"name":"pos","nodeType":"YulIdentifier","src":"1197:3:33"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"1108:79:33"},"nodeType":"YulFunctionCall","src":"1108:93:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"1101:3:33"}]},{"nodeType":"YulAssignment","src":"1211:10:33","value":{"name":"pos","nodeType":"YulIdentifier","src":"1218:3:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"1211:3:33"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"1069:3:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1075:6:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"1086:3:33","type":""}],"src":"956:271:33"},{"body":{"nodeType":"YulBlock","src":"1329:73:33","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1346:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"1351:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1339:6:33"},"nodeType":"YulFunctionCall","src":"1339:19:33"},"nodeType":"YulExpressionStatement","src":"1339:19:33"},{"nodeType":"YulAssignment","src":"1367:29:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1386:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"1391:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1382:3:33"},"nodeType":"YulFunctionCall","src":"1382:14:33"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"1367:11:33"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"1301:3:33","type":""},{"name":"length","nodeType":"YulTypedName","src":"1306:6:33","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"1317:11:33","type":""}],"src":"1233:169:33"},{"body":{"nodeType":"YulBlock","src":"1514:73:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1536:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"1544:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1532:3:33"},"nodeType":"YulFunctionCall","src":"1532:14:33"},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","kind":"string","nodeType":"YulLiteral","src":"1548:31:33","type":"","value":"Address: call to non-contract"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1525:6:33"},"nodeType":"YulFunctionCall","src":"1525:55:33"},"nodeType":"YulExpressionStatement","src":"1525:55:33"}]},"name":"store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"1506:6:33","type":""}],"src":"1408:179:33"},{"body":{"nodeType":"YulBlock","src":"1739:220:33","statements":[{"nodeType":"YulAssignment","src":"1749:74:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1815:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"1820:2:33","type":"","value":"29"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"1756:58:33"},"nodeType":"YulFunctionCall","src":"1756:67:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"1749:3:33"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1921:3:33"}],"functionName":{"name":"store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","nodeType":"YulIdentifier","src":"1832:88:33"},"nodeType":"YulFunctionCall","src":"1832:93:33"},"nodeType":"YulExpressionStatement","src":"1832:93:33"},{"nodeType":"YulAssignment","src":"1934:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1945:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"1950:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1941:3:33"},"nodeType":"YulFunctionCall","src":"1941:12:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"1934:3:33"}]}]},"name":"abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"1727:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"1735:3:33","type":""}],"src":"1593:366:33"},{"body":{"nodeType":"YulBlock","src":"2136:248:33","statements":[{"nodeType":"YulAssignment","src":"2146:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2158:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"2169:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2154:3:33"},"nodeType":"YulFunctionCall","src":"2154:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2146:4:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2193:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"2204:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2189:3:33"},"nodeType":"YulFunctionCall","src":"2189:17:33"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"2212:4:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"2218:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2208:3:33"},"nodeType":"YulFunctionCall","src":"2208:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2182:6:33"},"nodeType":"YulFunctionCall","src":"2182:47:33"},"nodeType":"YulExpressionStatement","src":"2182:47:33"},{"nodeType":"YulAssignment","src":"2238:139:33","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"2372:4:33"}],"functionName":{"name":"abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"2246:124:33"},"nodeType":"YulFunctionCall","src":"2246:131:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2238:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2116:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2131:4:33","type":""}],"src":"1965:419:33"},{"body":{"nodeType":"YulBlock","src":"2449:40:33","statements":[{"nodeType":"YulAssignment","src":"2460:22:33","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2476:5:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2470:5:33"},"nodeType":"YulFunctionCall","src":"2470:12:33"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"2460:6:33"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2432:5:33","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"2442:6:33","type":""}],"src":"2390:99:33"},{"body":{"nodeType":"YulBlock","src":"2543:54:33","statements":[{"nodeType":"YulAssignment","src":"2553:38:33","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2571:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"2578:2:33","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2567:3:33"},"nodeType":"YulFunctionCall","src":"2567:14:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2587:2:33","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2583:3:33"},"nodeType":"YulFunctionCall","src":"2583:7:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2563:3:33"},"nodeType":"YulFunctionCall","src":"2563:28:33"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"2553:6:33"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2526:5:33","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"2536:6:33","type":""}],"src":"2495:102:33"},{"body":{"nodeType":"YulBlock","src":"2695:272:33","statements":[{"nodeType":"YulVariableDeclaration","src":"2705:53:33","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2752:5:33"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"2719:32:33"},"nodeType":"YulFunctionCall","src":"2719:39:33"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"2709:6:33","type":""}]},{"nodeType":"YulAssignment","src":"2767:78:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2833:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"2838:6:33"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"2774:58:33"},"nodeType":"YulFunctionCall","src":"2774:71:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"2767:3:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2880:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"2887:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2876:3:33"},"nodeType":"YulFunctionCall","src":"2876:16:33"},{"name":"pos","nodeType":"YulIdentifier","src":"2894:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"2899:6:33"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"2854:21:33"},"nodeType":"YulFunctionCall","src":"2854:52:33"},"nodeType":"YulExpressionStatement","src":"2854:52:33"},{"nodeType":"YulAssignment","src":"2915:46:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2926:3:33"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2953:6:33"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"2931:21:33"},"nodeType":"YulFunctionCall","src":"2931:29:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2922:3:33"},"nodeType":"YulFunctionCall","src":"2922:39:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"2915:3:33"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2676:5:33","type":""},{"name":"pos","nodeType":"YulTypedName","src":"2683:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"2691:3:33","type":""}],"src":"2603:364:33"},{"body":{"nodeType":"YulBlock","src":"3091:195:33","statements":[{"nodeType":"YulAssignment","src":"3101:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3113:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"3124:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3109:3:33"},"nodeType":"YulFunctionCall","src":"3109:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3101:4:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3148:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"3159:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3144:3:33"},"nodeType":"YulFunctionCall","src":"3144:17:33"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"3167:4:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"3173:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3163:3:33"},"nodeType":"YulFunctionCall","src":"3163:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3137:6:33"},"nodeType":"YulFunctionCall","src":"3137:47:33"},"nodeType":"YulExpressionStatement","src":"3137:47:33"},{"nodeType":"YulAssignment","src":"3193:86:33","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3265:6:33"},{"name":"tail","nodeType":"YulIdentifier","src":"3274:4:33"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"3201:63:33"},"nodeType":"YulFunctionCall","src":"3201:78:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3193:4:33"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3063:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3075:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3086:4:33","type":""}],"src":"2973:313:33"}]},"contents":"{\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value0) -> end {\n\n        pos := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        end := pos\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad(memPtr) {\n\n        mstore(add(memPtr, 0), \"Address: call to non-contract\")\n\n    }\n\n    function abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 29)\n        store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n}\n","id":33,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"6080604052366100135761001161001d565b005b61001b61001d565b005b610025610091565b610035610030610093565b6100a2565b565b606061005c83836040518060600160405280602781526020016103f1602791396100c8565b905092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000819050919050565b565b600061009d61014e565b905090565b3660008037600080366000845af43d6000803e80600081146100c3573d6000f35b3d6000fd5b60606000808573ffffffffffffffffffffffffffffffffffffffff16856040516100f291906102e5565b600060405180830381855af49150503d806000811461012d576040519150601f19603f3d011682016040523d82523d6000602084013e610132565b606091505b5091509150610143868383876101a5565b925050509392505050565b600061017c7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b610087565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060831561020857600083511415610200576101c085610064565b6101ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101f690610359565b60405180910390fd5b5b829050610213565b610212838361021b565b5b949350505050565b60008251111561022e5781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026291906103ce565b60405180910390fd5b600081519050919050565b600081905092915050565b60005b8381101561029f578082015181840152602081019050610284565b838111156102ae576000848401525b50505050565b60006102bf8261026b565b6102c98185610276565b93506102d9818560208601610281565b80840191505092915050565b60006102f182846102b4565b915081905092915050565b600082825260208201905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000610343601d836102fc565b915061034e8261030d565b602082019050919050565b6000602082019050818103600083015261037281610336565b9050919050565b600081519050919050565b6000601f19601f8301169050919050565b60006103a082610379565b6103aa81856102fc565b93506103ba818560208601610281565b6103c381610384565b840191505092915050565b600060208201905081810360008301526103e88184610395565b90509291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212201a2d2a5d2e8dd48653fe90087730584b1370f6eb220af3217f3a69b4a773d8fc64736f6c63430008090033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLDATASIZE PUSH2 0x13 JUMPI PUSH2 0x11 PUSH2 0x1D JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1B PUSH2 0x1D JUMP JUMPDEST STOP JUMPDEST PUSH2 0x25 PUSH2 0x91 JUMP JUMPDEST PUSH2 0x35 PUSH2 0x30 PUSH2 0x93 JUMP JUMPDEST PUSH2 0xA2 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x60 PUSH2 0x5C DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3F1 PUSH1 0x27 SWAP2 CODECOPY PUSH2 0xC8 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9D PUSH2 0x14E JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 DUP1 CALLDATACOPY PUSH1 0x0 DUP1 CALLDATASIZE PUSH1 0x0 DUP5 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xC3 JUMPI RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH1 0x40 MLOAD PUSH2 0xF2 SWAP2 SWAP1 PUSH2 0x2E5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x12D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x132 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x143 DUP7 DUP4 DUP4 DUP8 PUSH2 0x1A5 JUMP JUMPDEST SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17C PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH1 0x0 SHL PUSH2 0x87 JUMP JUMPDEST PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x208 JUMPI PUSH1 0x0 DUP4 MLOAD EQ ISZERO PUSH2 0x200 JUMPI PUSH2 0x1C0 DUP6 PUSH2 0x64 JUMP JUMPDEST PUSH2 0x1FF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F6 SWAP1 PUSH2 0x359 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST DUP3 SWAP1 POP PUSH2 0x213 JUMP JUMPDEST PUSH2 0x212 DUP4 DUP4 PUSH2 0x21B JUMP JUMPDEST JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT ISZERO PUSH2 0x22E JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x262 SWAP2 SWAP1 PUSH2 0x3CE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x29F JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x284 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x2AE JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2BF DUP3 PUSH2 0x26B JUMP JUMPDEST PUSH2 0x2C9 DUP2 DUP6 PUSH2 0x276 JUMP JUMPDEST SWAP4 POP PUSH2 0x2D9 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x281 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F1 DUP3 DUP5 PUSH2 0x2B4 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x343 PUSH1 0x1D DUP4 PUSH2 0x2FC JUMP JUMPDEST SWAP2 POP PUSH2 0x34E DUP3 PUSH2 0x30D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x372 DUP2 PUSH2 0x336 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3A0 DUP3 PUSH2 0x379 JUMP JUMPDEST PUSH2 0x3AA DUP2 DUP6 PUSH2 0x2FC JUMP JUMPDEST SWAP4 POP PUSH2 0x3BA DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x281 JUMP JUMPDEST PUSH2 0x3C3 DUP2 PUSH2 0x384 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3E8 DUP2 DUP5 PUSH2 0x395 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP INVALID COINBASE PUSH5 0x6472657373 GASPRICE KECCAK256 PUSH13 0x6F772D6C6576656C2064656C65 PUSH8 0x6174652063616C6C KECCAK256 PUSH7 0x61696C6564A264 PUSH10 0x706673582212201A2D2A 0x5D 0x2E DUP14 0xD4 DUP7 MSTORE8 INVALID SWAP1 ADDMOD PUSH24 0x30584B1370F6EB220AF3217F3A69B4A773D8FC64736F6C63 NUMBER STOP ADDMOD MULMOD STOP CALLER ","sourceMap":"567:723:24:-:0;;;;;;2898:11:26;:9;:11::i;:::-;567:723:24;;2675:11:26;:9;:11::i;:::-;567:723:24;2322:110:26;2370:17;:15;:17::i;:::-;2397:28;2407:17;:15;:17::i;:::-;2397:9;:28::i;:::-;2322:110::o;6469:198:28:-;6552:12;6583:77;6604:6;6612:4;6583:77;;;;;;;;;;;;;;;;;:20;:77::i;:::-;6576:84;;6469:198;;;;:::o;1175:320::-;1235:4;1487:1;1465:7;:19;;;:23;1458:30;;1175:320;;;:::o;1614:190:29:-;1675:21;1784:4;1774:14;;1614:190;;;:::o;3198:46:26:-;:::o;1148:140:24:-;1215:12;1246:35;:33;:35::i;:::-;1239:42;;1148:140;:::o;948:895:26:-;1286:14;1283:1;1280;1267:34;1500:1;1497;1481:14;1478:1;1462:14;1455:5;1442:60;1576:16;1573:1;1570;1555:38;1614:6;1686:1;1681:66;;;;1796:16;1793:1;1786:27;1681:66;1716:16;1713:1;1706:27;6853:325:28;6994:12;7019;7033:23;7060:6;:19;;7080:4;7060:25;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7018:67;;;;7102:69;7129:6;7137:7;7146:10;7158:12;7102:26;:69::i;:::-;7095:76;;;;6853:325;;;;;:::o;1301:140:25:-;1354:7;1380:48;1030:66;1407:20;;1380:26;:48::i;:::-;:54;;;;;;;;;;;;1373:61;;1301:140;:::o;7466:628:28:-;7646:12;7674:7;7670:418;;;7722:1;7701:10;:17;:22;7697:286;;;7916:18;7927:6;7916:10;:18::i;:::-;7908:60;;;;;;;;;;;;:::i;:::-;;;;;;;;;7697:286;8003:10;7996:17;;;;7670:418;8044:33;8052:10;8064:12;8044:7;:33::i;:::-;7466:628;;;;;;;:::o;8616:540::-;8795:1;8775:10;:17;:21;8771:379;;;9003:10;8997:17;9059:15;9046:10;9042:2;9038:19;9031:44;8771:379;9126:12;9119:20;;;;;;;;;;;:::i;:::-;;;;;;;;7:98:33;58:6;92:5;86:12;76:22;;7:98;;;:::o;111:147::-;212:11;249:3;234:18;;111:147;;;;:::o;264:307::-;332:1;342:113;356:6;353:1;350:13;342:113;;;441:1;436:3;432:11;426:18;422:1;417:3;413:11;406:39;378:2;375:1;371:10;366:15;;342:113;;;473:6;470:1;467:13;464:101;;;553:1;544:6;539:3;535:16;528:27;464:101;313:258;264:307;;;:::o;577:373::-;681:3;709:38;741:5;709:38;:::i;:::-;763:88;844:6;839:3;763:88;:::i;:::-;756:95;;860:52;905:6;900:3;893:4;886:5;882:16;860:52;:::i;:::-;937:6;932:3;928:16;921:23;;685:265;577:373;;;;:::o;956:271::-;1086:3;1108:93;1197:3;1188:6;1108:93;:::i;:::-;1101:100;;1218:3;1211:10;;956:271;;;;:::o;1233:169::-;1317:11;1351:6;1346:3;1339:19;1391:4;1386:3;1382:14;1367:29;;1233:169;;;;:::o;1408:179::-;1548:31;1544:1;1536:6;1532:14;1525:55;1408:179;:::o;1593:366::-;1735:3;1756:67;1820:2;1815:3;1756:67;:::i;:::-;1749:74;;1832:93;1921:3;1832:93;:::i;:::-;1950:2;1945:3;1941:12;1934:19;;1593:366;;;:::o;1965:419::-;2131:4;2169:2;2158:9;2154:18;2146:26;;2218:9;2212:4;2208:20;2204:1;2193:9;2189:17;2182:47;2246:131;2372:4;2246:131;:::i;:::-;2238:139;;1965:419;;;:::o;2390:99::-;2442:6;2476:5;2470:12;2460:22;;2390:99;;;:::o;2495:102::-;2536:6;2587:2;2583:7;2578:2;2571:5;2567:14;2563:28;2553:38;;2495:102;;;:::o;2603:364::-;2691:3;2719:39;2752:5;2719:39;:::i;:::-;2774:71;2838:6;2833:3;2774:71;:::i;:::-;2767:78;;2854:52;2899:6;2894:3;2887:4;2880:5;2876:16;2854:52;:::i;:::-;2931:29;2953:6;2931:29;:::i;:::-;2926:3;2922:39;2915:46;;2695:272;2603:364;;;;:::o;2973:313::-;3086:4;3124:2;3113:9;3109:18;3101:26;;3173:9;3167:4;3163:20;3159:1;3148:9;3144:17;3137:47;3201:78;3274:4;3265:6;3201:78;:::i;:::-;3193:86;;2973:313;;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"220200","executionCost":"infinite","totalCost":"infinite"},"external":{"":"infinite"},"internal":{"_implementation()":"2249"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_logic\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an implementation address that can be changed. This address is stored in storage in the location specified by https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the implementation behind the proxy.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the upgradeable proxy with an initial implementation specified by `_logic`. If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded function call, and allows initializing the storage of the proxy like a Solidity constructor.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":\"ERC1967Proxy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xa2b22da3032e50b55f95ec1d13336102d675f341167aa76db571ef7f8bb7975d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol":{"ERC1967Upgrade":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beacon","type":"address"}],"name":"BeaconUpgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"}],"devdoc":{"custom:oz-upgrades-unsafe-allow":"delegatecall","details":"This abstract contract provides getters and event emitting update functions for https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots. _Available since v4.1._","events":{"AdminChanged(address,address)":{"details":"Emitted when the admin account has changed."},"BeaconUpgraded(address)":{"details":"Emitted when the beacon is upgraded."},"Upgraded(address)":{"details":"Emitted when the implementation is upgraded."}},"kind":"dev","methods":{},"stateVariables":{"_ADMIN_SLOT":{"details":"Storage slot with the admin of the contract. This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is validated in the constructor."},"_BEACON_SLOT":{"details":"The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy. This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor."},"_IMPLEMENTATION_SLOT":{"details":"Storage slot with the address of the current implementation. This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is validated in the constructor."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"delegatecall\",\"details\":\"This abstract contract provides getters and event emitting update functions for https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots. _Available since v4.1._\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is upgraded.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_ADMIN_SLOT\":{\"details\":\"Storage slot with the admin of the contract. This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is validated in the constructor.\"},\"_BEACON_SLOT\":{\"details\":\"The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy. This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\"},\"_IMPLEMENTATION_SLOT\":{\"details\":\"Storage slot with the address of the current implementation. This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is validated in the constructor.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":\"ERC1967Upgrade\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/proxy/Proxy.sol":{"Proxy":{"abi":[{"stateMutability":"payable","type":"fallback"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"details":"This abstract contract provides a fallback function that delegates all calls to another contract using the EVM instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to be specified by overriding the virtual {_implementation} function. Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a different contract through the {_delegate} function. The success and return data of the delegated call will be returned back to the caller of the proxy.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"This abstract contract provides a fallback function that delegates all calls to another contract using the EVM instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to be specified by overriding the virtual {_implementation} function. Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a different contract through the {_delegate} function. The success and return data of the delegated call will be returned back to the caller of the proxy.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/proxy/Proxy.sol\":\"Proxy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/proxy/beacon/IBeacon.sol":{"IBeacon":{"abi":[{"inputs":[],"name":"implementation","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This is the interface that {BeaconProxy} expects of its beacon.","kind":"dev","methods":{"implementation()":{"details":"Must return an address that can be used as a delegate call target. {BeaconProxy} will check that this address is a contract."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"implementation()":"5c60da1b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This is the interface that {BeaconProxy} expects of its beacon.\",\"kind\":\"dev\",\"methods\":{\"implementation()\":{\"details\":\"Must return an address that can be used as a delegate call target. {BeaconProxy} will check that this address is a contract.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":\"IBeacon\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Address.sol":{"Address":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220cf6c811b73f45a5c9bd3d3e7d7fac4cc7e3bd32a2bff7c419b6826bb1cb7ac0664736f6c63430008090033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCF PUSH13 0x811B73F45A5C9BD3D3E7D7FAC4 0xCC PUSH31 0x3BD32A2BFF7C419B6826BB1CB7AC0664736F6C634300080900330000000000 ","sourceMap":"194:8964:28:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220cf6c811b73f45a5c9bd3d3e7d7fac4cc7e3bd32a2bff7c419b6826bb1cb7ac0664736f6c63430008090033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCF PUSH13 0x811B73F45A5C9BD3D3E7D7FAC4 0xCC PUSH31 0x3BD32A2BFF7C419B6826BB1CB7AC0664736F6C634300080900330000000000 ","sourceMap":"194:8964:28:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/StorageSlot.sol":{"StorageSlot":{"abi":[],"devdoc":{"details":"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ``` contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d865275001638b12f67b21c3dfd0c3ec838856bac3c1eecbabf0b559770abca864736f6c63430008090033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD8 PUSH6 0x275001638B12 0xF6 PUSH28 0x21C3DFD0C3EC838856BAC3C1EECBABF0B559770ABCA864736F6C6343 STOP ADDMOD MULMOD STOP CALLER ","sourceMap":"1279:1391:29:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d865275001638b12f67b21c3dfd0c3ec838856bac3c1eecbabf0b559770abca864736f6c63430008090033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD8 PUSH6 0x275001638B12 0xF6 PUSH28 0x21C3DFD0C3EC838856BAC3C1EECBABF0B559770ABCA864736F6C6343 STOP ADDMOD MULMOD STOP CALLER ","sourceMap":"1279:1391:29:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"getAddressSlot(bytes32)":"infinite","getBooleanSlot(bytes32)":"infinite","getBytes32Slot(bytes32)":"infinite","getUint256Slot(bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ``` contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":\"StorageSlot\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/PKDR.sol":{"PKDR":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"MULTISIG_REQUIRED","type":"error"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"USER_NOT_VERIFIED","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"fallbackAmount","type":"uint256"}],"name":"AMOUNT_RECEIVED_THROUGH_FALLBACK","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"receiveAmount","type":"uint256"}],"name":"AMOUNT_RECEIVED_THROUGH_RECEIVE","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beacon","type":"address"}],"name":"BeaconUpgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"}],"name":"Snapshot","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"","type":"address"}],"name":"TRANSFER_REQUIRED_MULTI_SIGNATURE","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"","type":"address"}],"name":"TRANSFER_REQUIRED_VERIFICATION_I","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"},{"stateMutability":"payable","type":"fallback"},{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"snapshotId","type":"uint256"}],"name":"balanceOfAt","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"burnFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getProfileAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"mintTo","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"proxiableUUID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable","name":"_profiles","type":"address"}],"name":"setProfileAddress","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"snapshotId","type":"uint256"}],"name":"totalSupplyAt","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"}],"name":"upgradeTo","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"upgradeToAndCall","outputs":[],"stateMutability":"payable","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"custom:security-contact":"zohaib10092001@gmail.com","kind":"dev","methods":{"DOMAIN_SEPARATOR()":{"details":"See {IERC20Permit-DOMAIN_SEPARATOR}."},"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"balanceOfAt(address,uint256)":{"details":"Retrieves the balance of `account` at the time `snapshotId` was created."},"burn(uint256)":{"details":"Destroys `amount` tokens from the caller. See {ERC20-_burn}."},"burnFrom(address,uint256)":{"details":"Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`."},"constructor":{"custom:oz-upgrades-unsafe-allow":"constructor"},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"name()":{"details":"Returns the name of the token."},"nonces(address)":{"details":"See {IERC20Permit-nonces}."},"owner()":{"details":"Returns the address of the current owner."},"paused()":{"details":"Returns true if the contract is paused, and false otherwise."},"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{"details":"See {IERC20Permit-permit}."},"proxiableUUID()":{"details":"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"totalSupplyAt(uint256)":{"details":"Retrieves the total supply at the time `snapshotId` was created."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."},"upgradeTo(address)":{"details":"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."},"upgradeToAndCall(address,bytes)":{"details":"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_5402":{"entryPoint":null,"id":5402,"parameterSlots":0,"returnSlots":0},"@_disableInitializers_670":{"entryPoint":187,"id":670,"parameterSlots":0,"returnSlots":0},"abi_encode_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a_to_t_string_memory_ptr_fromStack":{"entryPoint":699,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_bb4e1f8434f661d4c52cce6e51dba6eb9c909f0b452eb22968b55416ecb18fb5_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":541,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_e321069d1ac41cdfb1421ffa231cd2dc5e3a334703a998a5f84566b6fbf3f7bd_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":438,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint8_to_t_uint8_fromStack":{"entryPoint":785,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_packed_t_stringliteral_bb4e1f8434f661d4c52cce6e51dba6eb9c909f0b452eb22968b55416ecb18fb5__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":580,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_e321069d1ac41cdfb1421ffa231cd2dc5e3a334703a998a5f84566b6fbf3f7bd__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":477,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":738,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed":{"entryPoint":802,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":603,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":386,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_uint8":{"entryPoint":772,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a":{"entryPoint":620,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_bb4e1f8434f661d4c52cce6e51dba6eb9c909f0b452eb22968b55416ecb18fb5":{"entryPoint":500,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_e321069d1ac41cdfb1421ffa231cd2dc5e3a334703a998a5f84566b6fbf3f7bd":{"entryPoint":397,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:3702:33","statements":[{"body":{"nodeType":"YulBlock","src":"121:34:33","statements":[{"nodeType":"YulAssignment","src":"131:18:33","value":{"name":"pos","nodeType":"YulIdentifier","src":"146:3:33"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"131:11:33"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"93:3:33","type":""},{"name":"length","nodeType":"YulTypedName","src":"98:6:33","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"109:11:33","type":""}],"src":"7:148:33"},{"body":{"nodeType":"YulBlock","src":"267:52:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"289:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"297:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"285:3:33"},"nodeType":"YulFunctionCall","src":"285:14:33"},{"hexValue":"415050524f564544","kind":"string","nodeType":"YulLiteral","src":"301:10:33","type":"","value":"APPROVED"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"278:6:33"},"nodeType":"YulFunctionCall","src":"278:34:33"},"nodeType":"YulExpressionStatement","src":"278:34:33"}]},"name":"store_literal_in_memory_e321069d1ac41cdfb1421ffa231cd2dc5e3a334703a998a5f84566b6fbf3f7bd","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"259:6:33","type":""}],"src":"161:158:33"},{"body":{"nodeType":"YulBlock","src":"489:236:33","statements":[{"nodeType":"YulAssignment","src":"499:91:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"583:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"588:1:33","type":"","value":"8"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"506:76:33"},"nodeType":"YulFunctionCall","src":"506:84:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"499:3:33"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"688:3:33"}],"functionName":{"name":"store_literal_in_memory_e321069d1ac41cdfb1421ffa231cd2dc5e3a334703a998a5f84566b6fbf3f7bd","nodeType":"YulIdentifier","src":"599:88:33"},"nodeType":"YulFunctionCall","src":"599:93:33"},"nodeType":"YulExpressionStatement","src":"599:93:33"},{"nodeType":"YulAssignment","src":"701:18:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"712:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"717:1:33","type":"","value":"8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"708:3:33"},"nodeType":"YulFunctionCall","src":"708:11:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"701:3:33"}]}]},"name":"abi_encode_t_stringliteral_e321069d1ac41cdfb1421ffa231cd2dc5e3a334703a998a5f84566b6fbf3f7bd_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"477:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"485:3:33","type":""}],"src":"325:400:33"},{"body":{"nodeType":"YulBlock","src":"920:192:33","statements":[{"nodeType":"YulAssignment","src":"931:155:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1082:3:33"}],"functionName":{"name":"abi_encode_t_stringliteral_e321069d1ac41cdfb1421ffa231cd2dc5e3a334703a998a5f84566b6fbf3f7bd_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"938:142:33"},"nodeType":"YulFunctionCall","src":"938:148:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"931:3:33"}]},{"nodeType":"YulAssignment","src":"1096:10:33","value":{"name":"pos","nodeType":"YulIdentifier","src":"1103:3:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"1096:3:33"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_e321069d1ac41cdfb1421ffa231cd2dc5e3a334703a998a5f84566b6fbf3f7bd__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"907:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"916:3:33","type":""}],"src":"731:381:33"},{"body":{"nodeType":"YulBlock","src":"1224:48:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1246:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"1254:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1242:3:33"},"nodeType":"YulFunctionCall","src":"1242:14:33"},{"hexValue":"4e554c4c","kind":"string","nodeType":"YulLiteral","src":"1258:6:33","type":"","value":"NULL"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1235:6:33"},"nodeType":"YulFunctionCall","src":"1235:30:33"},"nodeType":"YulExpressionStatement","src":"1235:30:33"}]},"name":"store_literal_in_memory_bb4e1f8434f661d4c52cce6e51dba6eb9c909f0b452eb22968b55416ecb18fb5","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"1216:6:33","type":""}],"src":"1118:154:33"},{"body":{"nodeType":"YulBlock","src":"1442:236:33","statements":[{"nodeType":"YulAssignment","src":"1452:91:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1536:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"1541:1:33","type":"","value":"4"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"1459:76:33"},"nodeType":"YulFunctionCall","src":"1459:84:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"1452:3:33"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1641:3:33"}],"functionName":{"name":"store_literal_in_memory_bb4e1f8434f661d4c52cce6e51dba6eb9c909f0b452eb22968b55416ecb18fb5","nodeType":"YulIdentifier","src":"1552:88:33"},"nodeType":"YulFunctionCall","src":"1552:93:33"},"nodeType":"YulExpressionStatement","src":"1552:93:33"},{"nodeType":"YulAssignment","src":"1654:18:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1665:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"1670:1:33","type":"","value":"4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1661:3:33"},"nodeType":"YulFunctionCall","src":"1661:11:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"1654:3:33"}]}]},"name":"abi_encode_t_stringliteral_bb4e1f8434f661d4c52cce6e51dba6eb9c909f0b452eb22968b55416ecb18fb5_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"1430:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"1438:3:33","type":""}],"src":"1278:400:33"},{"body":{"nodeType":"YulBlock","src":"1873:192:33","statements":[{"nodeType":"YulAssignment","src":"1884:155:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2035:3:33"}],"functionName":{"name":"abi_encode_t_stringliteral_bb4e1f8434f661d4c52cce6e51dba6eb9c909f0b452eb22968b55416ecb18fb5_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"1891:142:33"},"nodeType":"YulFunctionCall","src":"1891:148:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"1884:3:33"}]},{"nodeType":"YulAssignment","src":"2049:10:33","value":{"name":"pos","nodeType":"YulIdentifier","src":"2056:3:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"2049:3:33"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_bb4e1f8434f661d4c52cce6e51dba6eb9c909f0b452eb22968b55416ecb18fb5__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"1860:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"1869:3:33","type":""}],"src":"1684:381:33"},{"body":{"nodeType":"YulBlock","src":"2167:73:33","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2184:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"2189:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2177:6:33"},"nodeType":"YulFunctionCall","src":"2177:19:33"},"nodeType":"YulExpressionStatement","src":"2177:19:33"},{"nodeType":"YulAssignment","src":"2205:29:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2224:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"2229:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2220:3:33"},"nodeType":"YulFunctionCall","src":"2220:14:33"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"2205:11:33"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"2139:3:33","type":""},{"name":"length","nodeType":"YulTypedName","src":"2144:6:33","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"2155:11:33","type":""}],"src":"2071:169:33"},{"body":{"nodeType":"YulBlock","src":"2352:120:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2374:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"2382:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2370:3:33"},"nodeType":"YulFunctionCall","src":"2370:14:33"},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320696e697469","kind":"string","nodeType":"YulLiteral","src":"2386:34:33","type":"","value":"Initializable: contract is initi"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2363:6:33"},"nodeType":"YulFunctionCall","src":"2363:58:33"},"nodeType":"YulExpressionStatement","src":"2363:58:33"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2442:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"2450:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2438:3:33"},"nodeType":"YulFunctionCall","src":"2438:15:33"},{"hexValue":"616c697a696e67","kind":"string","nodeType":"YulLiteral","src":"2455:9:33","type":"","value":"alizing"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2431:6:33"},"nodeType":"YulFunctionCall","src":"2431:34:33"},"nodeType":"YulExpressionStatement","src":"2431:34:33"}]},"name":"store_literal_in_memory_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"2344:6:33","type":""}],"src":"2246:226:33"},{"body":{"nodeType":"YulBlock","src":"2624:220:33","statements":[{"nodeType":"YulAssignment","src":"2634:74:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2700:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"2705:2:33","type":"","value":"39"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"2641:58:33"},"nodeType":"YulFunctionCall","src":"2641:67:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"2634:3:33"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2806:3:33"}],"functionName":{"name":"store_literal_in_memory_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","nodeType":"YulIdentifier","src":"2717:88:33"},"nodeType":"YulFunctionCall","src":"2717:93:33"},"nodeType":"YulExpressionStatement","src":"2717:93:33"},{"nodeType":"YulAssignment","src":"2819:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2830:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"2835:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2826:3:33"},"nodeType":"YulFunctionCall","src":"2826:12:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"2819:3:33"}]}]},"name":"abi_encode_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"2612:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"2620:3:33","type":""}],"src":"2478:366:33"},{"body":{"nodeType":"YulBlock","src":"3021:248:33","statements":[{"nodeType":"YulAssignment","src":"3031:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3043:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"3054:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3039:3:33"},"nodeType":"YulFunctionCall","src":"3039:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3031:4:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3078:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"3089:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3074:3:33"},"nodeType":"YulFunctionCall","src":"3074:17:33"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"3097:4:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"3103:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3093:3:33"},"nodeType":"YulFunctionCall","src":"3093:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3067:6:33"},"nodeType":"YulFunctionCall","src":"3067:47:33"},"nodeType":"YulExpressionStatement","src":"3067:47:33"},{"nodeType":"YulAssignment","src":"3123:139:33","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"3257:4:33"}],"functionName":{"name":"abi_encode_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"3131:124:33"},"nodeType":"YulFunctionCall","src":"3131:131:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3123:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3001:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3016:4:33","type":""}],"src":"2850:419:33"},{"body":{"nodeType":"YulBlock","src":"3318:43:33","statements":[{"nodeType":"YulAssignment","src":"3328:27:33","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3343:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"3350:4:33","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3339:3:33"},"nodeType":"YulFunctionCall","src":"3339:16:33"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3328:7:33"}]}]},"name":"cleanup_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3300:5:33","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3310:7:33","type":""}],"src":"3275:86:33"},{"body":{"nodeType":"YulBlock","src":"3428:51:33","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3445:3:33"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3466:5:33"}],"functionName":{"name":"cleanup_t_uint8","nodeType":"YulIdentifier","src":"3450:15:33"},"nodeType":"YulFunctionCall","src":"3450:22:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3438:6:33"},"nodeType":"YulFunctionCall","src":"3438:35:33"},"nodeType":"YulExpressionStatement","src":"3438:35:33"}]},"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3416:5:33","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3423:3:33","type":""}],"src":"3367:112:33"},{"body":{"nodeType":"YulBlock","src":"3579:120:33","statements":[{"nodeType":"YulAssignment","src":"3589:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3601:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"3612:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3597:3:33"},"nodeType":"YulFunctionCall","src":"3597:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3589:4:33"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3665:6:33"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3678:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"3689:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3674:3:33"},"nodeType":"YulFunctionCall","src":"3674:17:33"}],"functionName":{"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"3625:39:33"},"nodeType":"YulFunctionCall","src":"3625:67:33"},"nodeType":"YulExpressionStatement","src":"3625:67:33"}]},"name":"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3551:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3563:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3574:4:33","type":""}],"src":"3485:214:33"}]},"contents":"{\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function store_literal_in_memory_e321069d1ac41cdfb1421ffa231cd2dc5e3a334703a998a5f84566b6fbf3f7bd(memPtr) {\n\n        mstore(add(memPtr, 0), \"APPROVED\")\n\n    }\n\n    function abi_encode_t_stringliteral_e321069d1ac41cdfb1421ffa231cd2dc5e3a334703a998a5f84566b6fbf3f7bd_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 8)\n        store_literal_in_memory_e321069d1ac41cdfb1421ffa231cd2dc5e3a334703a998a5f84566b6fbf3f7bd(pos)\n        end := add(pos, 8)\n    }\n\n    function abi_encode_tuple_packed_t_stringliteral_e321069d1ac41cdfb1421ffa231cd2dc5e3a334703a998a5f84566b6fbf3f7bd__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos ) -> end {\n\n        pos := abi_encode_t_stringliteral_e321069d1ac41cdfb1421ffa231cd2dc5e3a334703a998a5f84566b6fbf3f7bd_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        end := pos\n    }\n\n    function store_literal_in_memory_bb4e1f8434f661d4c52cce6e51dba6eb9c909f0b452eb22968b55416ecb18fb5(memPtr) {\n\n        mstore(add(memPtr, 0), \"NULL\")\n\n    }\n\n    function abi_encode_t_stringliteral_bb4e1f8434f661d4c52cce6e51dba6eb9c909f0b452eb22968b55416ecb18fb5_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 4)\n        store_literal_in_memory_bb4e1f8434f661d4c52cce6e51dba6eb9c909f0b452eb22968b55416ecb18fb5(pos)\n        end := add(pos, 4)\n    }\n\n    function abi_encode_tuple_packed_t_stringliteral_bb4e1f8434f661d4c52cce6e51dba6eb9c909f0b452eb22968b55416ecb18fb5__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos ) -> end {\n\n        pos := abi_encode_t_stringliteral_bb4e1f8434f661d4c52cce6e51dba6eb9c909f0b452eb22968b55416ecb18fb5_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        end := pos\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a(memPtr) {\n\n        mstore(add(memPtr, 0), \"Initializable: contract is initi\")\n\n        mstore(add(memPtr, 32), \"alizing\")\n\n    }\n\n    function abi_encode_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 39)\n        store_literal_in_memory_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function abi_encode_t_uint8_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint8_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n}\n","id":33,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60e06040523073ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff1681525060006101f8556040516020016200004e90620001dd565b6040516020818303038152906040528051906020012060a0908152506040516020016200007b9062000244565b6040516020818303038152906040528051906020012060c090815250348015620000a457600080fd5b50620000b5620000bb60201b60201c565b6200033f565b600060019054906101000a900460ff16156200010e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200010590620002e2565b60405180910390fd5b60ff801660008054906101000a900460ff1660ff161015620001805760ff6000806101000a81548160ff021916908360ff1602179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860ff60405162000177919062000322565b60405180910390a15b565b600081905092915050565b7f415050524f564544000000000000000000000000000000000000000000000000600082015250565b6000620001c560088362000182565b9150620001d2826200018d565b600882019050919050565b6000620001ea82620001b6565b9150819050919050565b7f4e554c4c00000000000000000000000000000000000000000000000000000000600082015250565b60006200022c60048362000182565b91506200023982620001f4565b600482019050919050565b600062000251826200021d565b9150819050919050565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320696e69746960008201527f616c697a696e6700000000000000000000000000000000000000000000000000602082015250565b6000620002ca6027836200025b565b9150620002d7826200026c565b604082019050919050565b60006020820190508181036000830152620002fd81620002bb565b9050919050565b600060ff82169050919050565b6200031c8162000304565b82525050565b600060208201905062000339600083018462000311565b92915050565b60805160a05160c0516151c2620003996000396000818161091d015261098b0152600081816113be0152611428015260008181610a5b01528181610aea01528181610cb501528181610d440152610df401526151c26000f3fe6080604052600436106101c65760003560e01c806359e78460116100f75780638da5cb5b11610095578063a9059cbb11610064578063a9059cbb146106f3578063d505accf14610730578063dd62ed3e14610759578063f2fde38b146107965761021e565b80638da5cb5b1461062357806395d89b411461064e578063981b24d014610679578063a457c2d7146106b65761021e565b8063715018a6116100d1578063715018a61461058f57806379cc6790146105a65780637ecebe00146105cf5780638129fc1c1461060c5761021e565b806359e78460146104fe5780635c975abb1461052757806370a08231146105525761021e565b80633659cfe611610164578063449a52f81161013e578063449a52f8146104515780634ee2cd7e1461047a5780634f1ef286146104b757806352d1902d146104d35761021e565b80633659cfe6146103c257806339509351146103eb57806342966c68146104285761021e565b806323b872dd116101a057806323b872dd14610304578063313ce56714610341578063345a903f1461036c5780633644e515146103975761021e565b806306fdde0314610271578063095ea7b31461029c57806318160ddd146102d95761021e565b3661021e57346101f860008282546101de9190613488565b925050819055507f42100f075a78c1dac886a43652b5c7c76cca3718758e13e7b726063cd20fe02c3460405161021491906134ed565b60405180910390a1005b346101f860008282546102319190613488565b925050819055507f6cb8a67804b99a2876f9d2f903120d1607df4c6bb33315433f4f5b9284ba15883460405161026791906134ed565b60405180910390a1005b34801561027d57600080fd5b506102866107bf565b60405161029391906135a1565b60405180910390f35b3480156102a857600080fd5b506102c360048036038101906102be9190613661565b610851565b6040516102d091906136bc565b60405180910390f35b3480156102e557600080fd5b506102ee610874565b6040516102fb91906134ed565b60405180910390f35b34801561031057600080fd5b5061032b600480360381019061032691906136d7565b61087e565b60405161033891906136bc565b60405180910390f35b34801561034d57600080fd5b50610356610a0e565b6040516103639190613746565b60405180910390f35b34801561037857600080fd5b50610381610a17565b60405161038e9190613770565b60405180910390f35b3480156103a357600080fd5b506103ac610a4a565b6040516103b991906137a4565b60405180910390f35b3480156103ce57600080fd5b506103e960048036038101906103e491906137bf565b610a59565b005b3480156103f757600080fd5b50610412600480360381019061040d9190613661565b610be2565b60405161041f91906136bc565b60405180910390f35b34801561043457600080fd5b5061044f600480360381019061044a91906137ec565b610c19565b005b34801561045d57600080fd5b5061047860048036038101906104739190613661565b610c2d565b005b34801561048657600080fd5b506104a1600480360381019061049c9190613661565b610c43565b6040516104ae91906134ed565b60405180910390f35b6104d160048036038101906104cc919061394e565b610cb3565b005b3480156104df57600080fd5b506104e8610df0565b6040516104f591906137a4565b60405180910390f35b34801561050a57600080fd5b50610525600480360381019061052091906139e8565b610ea9565b005b34801561053357600080fd5b5061053c610ef6565b60405161054991906136bc565b60405180910390f35b34801561055e57600080fd5b50610579600480360381019061057491906137bf565b610f0d565b60405161058691906134ed565b60405180910390f35b34801561059b57600080fd5b506105a4610f56565b005b3480156105b257600080fd5b506105cd60048036038101906105c89190613661565b610f6a565b005b3480156105db57600080fd5b506105f660048036038101906105f191906137bf565b610f80565b60405161060391906134ed565b60405180910390f35b34801561061857600080fd5b50610621610fd1565b005b34801561062f57600080fd5b506106386111e1565b6040516106459190613770565b60405180910390f35b34801561065a57600080fd5b506106636111f0565b60405161067091906135a1565b60405180910390f35b34801561068557600080fd5b506106a0600480360381019061069b91906137ec565b611282565b6040516106ad91906134ed565b60405180910390f35b3480156106c257600080fd5b506106dd60048036038101906106d89190613661565b6112b3565b6040516106ea91906136bc565b60405180910390f35b3480156106ff57600080fd5b5061071a60048036038101906107159190613661565b61132a565b60405161072791906136bc565b60405180910390f35b34801561073c57600080fd5b5061075760048036038101906107529190613a6d565b6114a2565b005b34801561076557600080fd5b50610780600480360381019061077b9190613b0f565b6115e4565b60405161078d91906134ed565b60405180910390f35b3480156107a257600080fd5b506107bd60048036038101906107b891906137bf565b61166b565b005b6060603680546107ce90613b7e565b80601f01602080910402602001604051908101604052809291908181526020018280546107fa90613b7e565b80156108475780601f1061081c57610100808354040283529160200191610847565b820191906000526020600020905b81548152906001019060200180831161082a57829003601f168201915b5050505050905090565b60008061085c6116ef565b90506108698185856116f7565b600191505092915050565b6000603554905090565b60006108886118c2565b8361089281611940565b6108d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c890613bfc565b60405180910390fd5b836108db81611940565b61091a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091190613bfc565b60405180910390fd5b857f0000000000000000000000000000000000000000000000000000000000000000610945826119fa565b141561098857806040517f80b9ec4500000000000000000000000000000000000000000000000000000000815260040161097f9190613770565b60405180910390fd5b857f00000000000000000000000000000000000000000000000000000000000000006109b3826119fa565b14156109f657806040517f80b9ec450000000000000000000000000000000000000000000000000000000081526004016109ed9190613770565b60405180910390fd5b610a01888888611aaf565b9450505050509392505050565b60006012905090565b6000610a216118c2565b6101f960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000610a54611ade565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161415610ae8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610adf90613c8e565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610b27611b1e565b73ffffffffffffffffffffffffffffffffffffffff1614610b7d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7490613d20565b60405180910390fd5b610b8681611b75565b610bdf81600067ffffffffffffffff811115610ba557610ba4613823565b5b6040519080825280601f01601f191660200182016040528015610bd75781602001600182028036833780820191505090505b506000611b80565b50565b600080610bed6116ef565b9050610c0e818585610bff85896115e4565b610c099190613488565b6116f7565b600191505092915050565b610c216118c2565b610c2a81611cfd565b50565b610c356118c2565b610c3f8282611d11565b5050565b6000806000610c9084609760008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611d27565b9150915081610ca757610ca285610f0d565b610ca9565b805b9250505092915050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161415610d42576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3990613c8e565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610d81611b1e565b73ffffffffffffffffffffffffffffffffffffffff1614610dd7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dce90613d20565b60405180910390fd5b610de082611b75565b610dec82826001611b80565b5050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614610e80576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7790613db2565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b905090565b610eb16118c2565b806101f960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600060fb60009054906101000a900460ff16905090565b6000603360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610f5e6118c2565b610f686000611e1d565b565b610f726118c2565b610f7c8282611ee3565b5050565b6000610fca61016160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611f03565b9050919050565b60008060019054906101000a900460ff161590508080156110025750600160008054906101000a900460ff1660ff16105b8061102f575061101130611f11565b15801561102e5750600160008054906101000a900460ff1660ff16145b5b61106e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161106590613e44565b60405180910390fd5b60016000806101000a81548160ff021916908360ff16021790555080156110ab576001600060016101000a81548160ff0219169083151502179055505b61111f6040518060400160405280600481526020017f504b4452000000000000000000000000000000000000000000000000000000008152506040518060400160405280600481526020017f504b445200000000000000000000000000000000000000000000000000000000815250611f34565b611127611f91565b61112f611fe2565b611137612033565b61113f61208c565b61117d6040518060400160405280600481526020017f504b4452000000000000000000000000000000000000000000000000000000008152506120e5565b611185612176565b80156111de5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516111d59190613ea9565b60405180910390a15b50565b60006111eb6121c7565b905090565b6060603780546111ff90613b7e565b80601f016020809104026020016040519081016040528092919081815260200182805461122b90613b7e565b80156112785780601f1061124d57610100808354040283529160200191611278565b820191906000526020600020905b81548152906001019060200180831161125b57829003601f168201915b5050505050905090565b6000806000611292846098611d27565b91509150816112a8576112a3610874565b6112aa565b805b92505050919050565b6000806112be6116ef565b905060006112cc82866115e4565b905083811015611311576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161130890613f36565b60405180910390fd5b61131e82868684036116f7565b60019250505092915050565b600061133533611940565b611374576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161136b90613fc8565b60405180910390fd5b61137d83611940565b6113bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113b39061405a565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006113e6336119fa565b14611426576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141d906140ec565b60405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000611450846119fa565b14611490576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114879061417e565b60405180910390fd5b61149a83836121f1565b905092915050565b834211156114e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114dc906141ea565b60405180910390fd5b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98888886115148c612214565b8960405160200161152a9695949392919061420a565b604051602081830303815290604052805190602001209050600061154d82612273565b9050600061155d8287878761228d565b90508973ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146115cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115c4906142b7565b60405180910390fd5b6115d88a8a8a6116f7565b50505050505050505050565b6000603460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6116736118c2565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156116e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116da90614349565b60405180910390fd5b6116ec81611e1d565b50565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611767576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161175e906143db565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156117d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117ce9061446d565b60405180910390fd5b80603460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516118b591906134ed565b60405180910390a3505050565b6118ca6116ef565b73ffffffffffffffffffffffffffffffffffffffff166118e86111e1565b73ffffffffffffffffffffffffffffffffffffffff161461193e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611935906144d9565b60405180910390fd5b565b6000806101f960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d117fc99846040518263ffffffff1660e01b815260040161199f9190613770565b60206040518083038186803b1580156119b757600080fd5b505afa1580156119cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ef9190614525565b905080915050919050565b60006101f960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631e9f3d5e836040518263ffffffff1660e01b8152600401611a589190613770565b60206040518083038186803b158015611a7057600080fd5b505afa158015611a84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aa89190614567565b9050919050565b600080611aba6116ef565b9050611ac78582856122b8565b611ad2858585612344565b60019150509392505050565b6000611b197f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f611b0c6125bf565b611b146125ca565b6125d5565b905090565b6000611b4c7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b61260f565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b611b7d6118c2565b50565b611bac7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd914360001b612619565b60000160009054906101000a900460ff1615611bd057611bcb83612623565b611cf8565b8273ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611c1657600080fd5b505afa925050508015611c4757506040513d601f19601f82011682018060405250810190611c449190614567565b60015b611c86576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c7d90614606565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b8114611ceb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ce290614698565b60405180910390fd5b50611cf78383836126dc565b5b505050565b611d0e611d086116ef565b82612708565b50565b611d196118c2565b611d2382826128d8565b5050565b60008060008411611d6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d6490614704565b60405180910390fd5b611d75612a30565b841115611db7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dae90614770565b60405180910390fd5b6000611dcf8585600001612a4190919063ffffffff16565b90508360000180549050811415611ded576000809250925050611e16565b6001846001018281548110611e0557611e04614790565b5b906000526020600020015492509250505b9250929050565b600060c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160c960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b611ef582611eef6116ef565b836122b8565b611eff8282612708565b5050565b600081600001549050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16611f83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f7a90614831565b60405180910390fd5b611f8d8282612afb565b5050565b600060019054906101000a900460ff16611fe0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fd790614831565b60405180910390fd5b565b600060019054906101000a900460ff16612031576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161202890614831565b60405180910390fd5b565b600060019054906101000a900460ff16612082576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161207990614831565b60405180910390fd5b61208a612b7c565b565b600060019054906101000a900460ff166120db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120d290614831565b60405180910390fd5b6120e3612bdd565b565b600060019054906101000a900460ff16612134576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161212b90614831565b60405180910390fd5b612173816040518060400160405280600181526020017f3100000000000000000000000000000000000000000000000000000000000000815250612c49565b50565b600060019054906101000a900460ff166121c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121bc90614831565b60405180910390fd5b565b600060c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000806121fc6116ef565b9050612209818585612344565b600191505092915050565b60008061016160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905061226281611f03565b915061226d81612cc6565b50919050565b6000612286612280611ade565b83612cdc565b9050919050565b600080600061229e87878787612d0f565b915091506122ab81612df2565b8192505050949350505050565b60006122c484846115e4565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461233e5781811015612330576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123279061489d565b60405180910390fd5b61233d84848484036116f7565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156123b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123ab9061492f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612424576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161241b906149c1565b60405180910390fd5b61242f838383612f60565b6000603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156124b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124ad90614a53565b60405180910390fd5b818103603360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516125a691906134ed565b60405180910390a36125b9848484612f78565b50505050565b600061012d54905090565b600061012e54905090565b600083838346306040516020016125f0959493929190614a73565b6040516020818303038152906040528051906020012090509392505050565b6000819050919050565b6000819050919050565b61262c81611f11565b61266b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161266290614b38565b60405180910390fd5b806126987f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b61260f565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6126e583612f7d565b6000825111806126f25750805b15612703576127018383612fcc565b505b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612778576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161276f90614bca565b60405180910390fd5b61278482600083612f60565b6000603360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561280b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161280290614c5c565b60405180910390fd5b818103603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081603560008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516128bf91906134ed565b60405180910390a36128d383600084612f78565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612948576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161293f90614cc8565b60405180910390fd5b61295460008383612f60565b80603560008282546129669190613488565b9250508190555080603360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051612a1891906134ed565b60405180910390a3612a2c60008383612f78565b5050565b6000612a3c609a611f03565b905090565b60008083805490501415612a585760009050612af5565b600080848054905090505b80821015612aac576000612a7783836130b0565b905084612a8487836130d6565b600001541115612a9657809150612aa6565b600181612aa39190613488565b92505b50612a63565b600082118015612ad4575083612ace86600185612ac99190614ce8565b6130d6565b60000154145b15612aef57600182612ae69190614ce8565b92505050612af5565b81925050505b92915050565b600060019054906101000a900460ff16612b4a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b4190614831565b60405180910390fd5b8160369080519060200190612b609291906133ac565b508060379080519060200190612b779291906133ac565b505050565b600060019054906101000a900460ff16612bcb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bc290614831565b60405180910390fd5b612bdb612bd66116ef565b611e1d565b565b600060019054906101000a900460ff16612c2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c2390614831565b60405180910390fd5b600060fb60006101000a81548160ff021916908315150217905550565b600060019054906101000a900460ff16612c98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c8f90614831565b60405180910390fd5b6000828051906020012090506000828051906020012090508161012d819055508061012e8190555050505050565b6001816000016000828254019250508190555050565b60008282604051602001612cf1929190614d94565b60405160208183030381529060405280519060200120905092915050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c1115612d4a576000600391509150612de9565b600060018787878760405160008152602001604052604051612d6f9493929190614dcb565b6020604051602081039080840390855afa158015612d91573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612de057600060019250925050612de9565b80600092509250505b94509492505050565b60006004811115612e0657612e05614e10565b5b816004811115612e1957612e18614e10565b5b1415612e2457612f5d565b60016004811115612e3857612e37614e10565b5b816004811115612e4b57612e4a614e10565b5b1415612e8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e8390614e8b565b60405180910390fd5b60026004811115612ea057612e9f614e10565b5b816004811115612eb357612eb2614e10565b5b1415612ef4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612eeb90614ef7565b60405180910390fd5b60036004811115612f0857612f07614e10565b5b816004811115612f1b57612f1a614e10565b5b1415612f5c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f5390614f89565b60405180910390fd5b5b50565b612f686130f8565b612f73838383613142565b505050565b505050565b612f8681612623565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b6060612fd783611f11565b613016576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161300d9061501b565b60405180910390fd5b6000808473ffffffffffffffffffffffffffffffffffffffff168460405161303e9190615082565b600060405180830381855af49150503d8060008114613079576040519150601f19603f3d011682016040523d82523d6000602084013e61307e565b606091505b50915091506130a68282604051806060016040528060278152602001615166602791396131fc565b9250505092915050565b600060028284186130c191906150c8565b8284166130ce9190613488565b905092915050565b600080836000528260206000200190506130ef8161321e565b91505092915050565b613100610ef6565b15613140576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161313790615145565b60405180910390fd5b565b61314d838383613228565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156131985761318b8261322d565b613193613280565b6131f7565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156131e3576131d68361322d565b6131de613280565b6131f6565b6131ec8361322d565b6131f58261322d565b5b5b505050565b6060831561320c57829050613217565b6132168383613294565b5b9392505050565b6000819050919050565b505050565b61327d609760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061327883610f0d565b6132e4565b50565b613292609861328d610874565b6132e4565b565b6000825111156132a75781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132db91906135a1565b60405180910390fd5b60006132ee612a30565b9050806132fd8460000161335f565b101561335a5782600001819080600181540180825580915050600190039060005260206000200160009091909190915055826001018290806001815401808255809150506001900390600052602060002001600090919091909150555b505050565b6000808280549050141561337657600090506133a7565b81600183805490506133889190614ce8565b8154811061339957613398614790565b5b906000526020600020015490505b919050565b8280546133b890613b7e565b90600052602060002090601f0160209004810192826133da5760008555613421565b82601f106133f357805160ff1916838001178555613421565b82800160010185558215613421579182015b82811115613420578251825591602001919060010190613405565b5b50905061342e9190613432565b5090565b5b8082111561344b576000816000905550600101613433565b5090565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006134938261344f565b915061349e8361344f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156134d3576134d2613459565b5b828201905092915050565b6134e78161344f565b82525050565b600060208201905061350260008301846134de565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613542578082015181840152602081019050613527565b83811115613551576000848401525b50505050565b6000601f19601f8301169050919050565b600061357382613508565b61357d8185613513565b935061358d818560208601613524565b61359681613557565b840191505092915050565b600060208201905081810360008301526135bb8184613568565b905092915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613602826135d7565b9050919050565b613612816135f7565b811461361d57600080fd5b50565b60008135905061362f81613609565b92915050565b61363e8161344f565b811461364957600080fd5b50565b60008135905061365b81613635565b92915050565b60008060408385031215613678576136776135cd565b5b600061368685828601613620565b92505060206136978582860161364c565b9150509250929050565b60008115159050919050565b6136b6816136a1565b82525050565b60006020820190506136d160008301846136ad565b92915050565b6000806000606084860312156136f0576136ef6135cd565b5b60006136fe86828701613620565b935050602061370f86828701613620565b92505060406137208682870161364c565b9150509250925092565b600060ff82169050919050565b6137408161372a565b82525050565b600060208201905061375b6000830184613737565b92915050565b61376a816135f7565b82525050565b60006020820190506137856000830184613761565b92915050565b6000819050919050565b61379e8161378b565b82525050565b60006020820190506137b96000830184613795565b92915050565b6000602082840312156137d5576137d46135cd565b5b60006137e384828501613620565b91505092915050565b600060208284031215613802576138016135cd565b5b60006138108482850161364c565b91505092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61385b82613557565b810181811067ffffffffffffffff8211171561387a57613879613823565b5b80604052505050565b600061388d6135c3565b90506138998282613852565b919050565b600067ffffffffffffffff8211156138b9576138b8613823565b5b6138c282613557565b9050602081019050919050565b82818337600083830152505050565b60006138f16138ec8461389e565b613883565b90508281526020810184848401111561390d5761390c61381e565b5b6139188482856138cf565b509392505050565b600082601f83011261393557613934613819565b5b81356139458482602086016138de565b91505092915050565b60008060408385031215613965576139646135cd565b5b600061397385828601613620565b925050602083013567ffffffffffffffff811115613994576139936135d2565b5b6139a085828601613920565b9150509250929050565b60006139b5826135d7565b9050919050565b6139c5816139aa565b81146139d057600080fd5b50565b6000813590506139e2816139bc565b92915050565b6000602082840312156139fe576139fd6135cd565b5b6000613a0c848285016139d3565b91505092915050565b613a1e8161372a565b8114613a2957600080fd5b50565b600081359050613a3b81613a15565b92915050565b613a4a8161378b565b8114613a5557600080fd5b50565b600081359050613a6781613a41565b92915050565b600080600080600080600060e0888a031215613a8c57613a8b6135cd565b5b6000613a9a8a828b01613620565b9750506020613aab8a828b01613620565b9650506040613abc8a828b0161364c565b9550506060613acd8a828b0161364c565b9450506080613ade8a828b01613a2c565b93505060a0613aef8a828b01613a58565b92505060c0613b008a828b01613a58565b91505092959891949750929550565b60008060408385031215613b2657613b256135cd565b5b6000613b3485828601613620565b9250506020613b4585828601613620565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680613b9657607f821691505b60208210811415613baa57613ba9613b4f565b5b50919050565b7f555345525f4e4f545f5645524946494544000000000000000000000000000000600082015250565b6000613be6601183613513565b9150613bf182613bb0565b602082019050919050565b60006020820190508181036000830152613c1581613bd9565b9050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f64656c656761746563616c6c0000000000000000000000000000000000000000602082015250565b6000613c78602c83613513565b9150613c8382613c1c565b604082019050919050565b60006020820190508181036000830152613ca781613c6b565b9050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f6163746976652070726f78790000000000000000000000000000000000000000602082015250565b6000613d0a602c83613513565b9150613d1582613cae565b604082019050919050565b60006020820190508181036000830152613d3981613cfd565b9050919050565b7f555550535570677261646561626c653a206d757374206e6f742062652063616c60008201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000602082015250565b6000613d9c603883613513565b9150613da782613d40565b604082019050919050565b60006020820190508181036000830152613dcb81613d8f565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000613e2e602e83613513565b9150613e3982613dd2565b604082019050919050565b60006020820190508181036000830152613e5d81613e21565b9050919050565b6000819050919050565b6000819050919050565b6000613e93613e8e613e8984613e64565b613e6e565b61372a565b9050919050565b613ea381613e78565b82525050565b6000602082019050613ebe6000830184613e9a565b92915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000613f20602583613513565b9150613f2b82613ec4565b604082019050919050565b60006020820190508181036000830152613f4f81613f13565b9050919050565b7f66726f6d3a205452414e534645525f52455155495245445f564552494649434160008201527f54494f4e5f490000000000000000000000000000000000000000000000000000602082015250565b6000613fb2602683613513565b9150613fbd82613f56565b604082019050919050565b60006020820190508181036000830152613fe181613fa5565b9050919050565b7f746f203a205452414e534645525f52455155495245445f56455249464943415460008201527f494f4e5f49000000000000000000000000000000000000000000000000000000602082015250565b6000614044602583613513565b915061404f82613fe8565b604082019050919050565b6000602082019050818103600083015261407381614037565b9050919050565b7f66726f6d3a205452414e534645525f52455155495245445f4d554c54495f534960008201527f474e415455524500000000000000000000000000000000000000000000000000602082015250565b60006140d6602783613513565b91506140e18261407a565b604082019050919050565b60006020820190508181036000830152614105816140c9565b9050919050565b7f746f3a205452414e534645525f52455155495245445f4d554c54495f5349474e60008201527f4154555245000000000000000000000000000000000000000000000000000000602082015250565b6000614168602583613513565b91506141738261410c565b604082019050919050565b600060208201905081810360008301526141978161415b565b9050919050565b7f45524332305065726d69743a206578706972656420646561646c696e65000000600082015250565b60006141d4601d83613513565b91506141df8261419e565b602082019050919050565b60006020820190508181036000830152614203816141c7565b9050919050565b600060c08201905061421f6000830189613795565b61422c6020830188613761565b6142396040830187613761565b61424660608301866134de565b61425360808301856134de565b61426060a08301846134de565b979650505050505050565b7f45524332305065726d69743a20696e76616c6964207369676e61747572650000600082015250565b60006142a1601e83613513565b91506142ac8261426b565b602082019050919050565b600060208201905081810360008301526142d081614294565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000614333602683613513565b915061433e826142d7565b604082019050919050565b6000602082019050818103600083015261436281614326565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006143c5602483613513565b91506143d082614369565b604082019050919050565b600060208201905081810360008301526143f4816143b8565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000614457602283613513565b9150614462826143fb565b604082019050919050565b600060208201905081810360008301526144868161444a565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006144c3602083613513565b91506144ce8261448d565b602082019050919050565b600060208201905081810360008301526144f2816144b6565b9050919050565b614502816136a1565b811461450d57600080fd5b50565b60008151905061451f816144f9565b92915050565b60006020828403121561453b5761453a6135cd565b5b600061454984828501614510565b91505092915050565b60008151905061456181613a41565b92915050565b60006020828403121561457d5761457c6135cd565b5b600061458b84828501614552565b91505092915050565b7f45524331393637557067726164653a206e657720696d706c656d656e7461746960008201527f6f6e206973206e6f742055555053000000000000000000000000000000000000602082015250565b60006145f0602e83613513565b91506145fb82614594565b604082019050919050565b6000602082019050818103600083015261461f816145e3565b9050919050565b7f45524331393637557067726164653a20756e737570706f727465642070726f7860008201527f6961626c65555549440000000000000000000000000000000000000000000000602082015250565b6000614682602983613513565b915061468d82614626565b604082019050919050565b600060208201905081810360008301526146b181614675565b9050919050565b7f4552433230536e617073686f743a206964206973203000000000000000000000600082015250565b60006146ee601683613513565b91506146f9826146b8565b602082019050919050565b6000602082019050818103600083015261471d816146e1565b9050919050565b7f4552433230536e617073686f743a206e6f6e6578697374656e74206964000000600082015250565b600061475a601d83613513565b915061476582614724565b602082019050919050565b600060208201905081810360008301526147898161474d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b600061481b602b83613513565b9150614826826147bf565b604082019050919050565b6000602082019050818103600083015261484a8161480e565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b6000614887601d83613513565b915061489282614851565b602082019050919050565b600060208201905081810360008301526148b68161487a565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000614919602583613513565b9150614924826148bd565b604082019050919050565b600060208201905081810360008301526149488161490c565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b60006149ab602383613513565b91506149b68261494f565b604082019050919050565b600060208201905081810360008301526149da8161499e565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b6000614a3d602683613513565b9150614a48826149e1565b604082019050919050565b60006020820190508181036000830152614a6c81614a30565b9050919050565b600060a082019050614a886000830188613795565b614a956020830187613795565b614aa26040830186613795565b614aaf60608301856134de565b614abc6080830184613761565b9695505050505050565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b6000614b22602d83613513565b9150614b2d82614ac6565b604082019050919050565b60006020820190508181036000830152614b5181614b15565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000614bb4602183613513565b9150614bbf82614b58565b604082019050919050565b60006020820190508181036000830152614be381614ba7565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b6000614c46602283613513565b9150614c5182614bea565b604082019050919050565b60006020820190508181036000830152614c7581614c39565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6000614cb2601f83613513565b9150614cbd82614c7c565b602082019050919050565b60006020820190508181036000830152614ce181614ca5565b9050919050565b6000614cf38261344f565b9150614cfe8361344f565b925082821015614d1157614d10613459565b5b828203905092915050565b600081905092915050565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b6000614d5d600283614d1c565b9150614d6882614d27565b600282019050919050565b6000819050919050565b614d8e614d898261378b565b614d73565b82525050565b6000614d9f82614d50565b9150614dab8285614d7d565b602082019150614dbb8284614d7d565b6020820191508190509392505050565b6000608082019050614de06000830187613795565b614ded6020830186613737565b614dfa6040830185613795565b614e076060830184613795565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b6000614e75601883613513565b9150614e8082614e3f565b602082019050919050565b60006020820190508181036000830152614ea481614e68565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b6000614ee1601f83613513565b9150614eec82614eab565b602082019050919050565b60006020820190508181036000830152614f1081614ed4565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000614f73602283613513565b9150614f7e82614f17565b604082019050919050565b60006020820190508181036000830152614fa281614f66565b9050919050565b7f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60008201527f6e74726163740000000000000000000000000000000000000000000000000000602082015250565b6000615005602683613513565b915061501082614fa9565b604082019050919050565b6000602082019050818103600083015261503481614ff8565b9050919050565b600081519050919050565b600081905092915050565b600061505c8261503b565b6150668185615046565b9350615076818560208601613524565b80840191505092915050565b600061508e8284615051565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006150d38261344f565b91506150de8361344f565b9250826150ee576150ed615099565b5b828204905092915050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b600061512f601083613513565b915061513a826150f9565b602082019050919050565b6000602082019050818103600083015261515e81615122565b905091905056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212202088324724610c0bd6b9103a2779f50cd9631e49bf8aea6313043161256161b064736f6c63430008090033","opcodes":"PUSH1 0xE0 PUSH1 0x40 MSTORE ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x80 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP PUSH1 0x0 PUSH2 0x1F8 SSTORE PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH3 0x4E SWAP1 PUSH3 0x1DD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0xA0 SWAP1 DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH3 0x7B SWAP1 PUSH3 0x244 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0xC0 SWAP1 DUP2 MSTORE POP CALLVALUE DUP1 ISZERO PUSH3 0xA4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0xB5 PUSH3 0xBB PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x33F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH3 0x10E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x105 SWAP1 PUSH3 0x2E2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xFF DUP1 AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND LT ISZERO PUSH3 0x180 JUMPI PUSH1 0xFF PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0xFF PUSH1 0x40 MLOAD PUSH3 0x177 SWAP2 SWAP1 PUSH3 0x322 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x415050524F564544000000000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x1C5 PUSH1 0x8 DUP4 PUSH3 0x182 JUMP JUMPDEST SWAP2 POP PUSH3 0x1D2 DUP3 PUSH3 0x18D JUMP JUMPDEST PUSH1 0x8 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x1EA DUP3 PUSH3 0x1B6 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E554C4C00000000000000000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x22C PUSH1 0x4 DUP4 PUSH3 0x182 JUMP JUMPDEST SWAP2 POP PUSH3 0x239 DUP3 PUSH3 0x1F4 JUMP JUMPDEST PUSH1 0x4 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x251 DUP3 PUSH3 0x21D JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320696E697469 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x616C697A696E6700000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x2CA PUSH1 0x27 DUP4 PUSH3 0x25B JUMP JUMPDEST SWAP2 POP PUSH3 0x2D7 DUP3 PUSH3 0x26C JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x2FD DUP2 PUSH3 0x2BB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x31C DUP2 PUSH3 0x304 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH3 0x339 PUSH1 0x0 DUP4 ADD DUP5 PUSH3 0x311 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH2 0x51C2 PUSH3 0x399 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x91D ADD MSTORE PUSH2 0x98B ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x13BE ADD MSTORE PUSH2 0x1428 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0xA5B ADD MSTORE DUP2 DUP2 PUSH2 0xAEA ADD MSTORE DUP2 DUP2 PUSH2 0xCB5 ADD MSTORE DUP2 DUP2 PUSH2 0xD44 ADD MSTORE PUSH2 0xDF4 ADD MSTORE PUSH2 0x51C2 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1C6 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x59E78460 GT PUSH2 0xF7 JUMPI DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xA9059CBB GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x6F3 JUMPI DUP1 PUSH4 0xD505ACCF EQ PUSH2 0x730 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x759 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x796 JUMPI PUSH2 0x21E JUMP JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x623 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x64E JUMPI DUP1 PUSH4 0x981B24D0 EQ PUSH2 0x679 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x6B6 JUMPI PUSH2 0x21E JUMP JUMPDEST DUP1 PUSH4 0x715018A6 GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x58F JUMPI DUP1 PUSH4 0x79CC6790 EQ PUSH2 0x5A6 JUMPI DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x5CF JUMPI DUP1 PUSH4 0x8129FC1C EQ PUSH2 0x60C JUMPI PUSH2 0x21E JUMP JUMPDEST DUP1 PUSH4 0x59E78460 EQ PUSH2 0x4FE JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x527 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x552 JUMPI PUSH2 0x21E JUMP JUMPDEST DUP1 PUSH4 0x3659CFE6 GT PUSH2 0x164 JUMPI DUP1 PUSH4 0x449A52F8 GT PUSH2 0x13E JUMPI DUP1 PUSH4 0x449A52F8 EQ PUSH2 0x451 JUMPI DUP1 PUSH4 0x4EE2CD7E EQ PUSH2 0x47A JUMPI DUP1 PUSH4 0x4F1EF286 EQ PUSH2 0x4B7 JUMPI DUP1 PUSH4 0x52D1902D EQ PUSH2 0x4D3 JUMPI PUSH2 0x21E JUMP JUMPDEST DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0x3C2 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x3EB JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x428 JUMPI PUSH2 0x21E JUMP JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0x1A0 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x304 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x341 JUMPI DUP1 PUSH4 0x345A903F EQ PUSH2 0x36C JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0x397 JUMPI PUSH2 0x21E JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x271 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x29C JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x2D9 JUMPI PUSH2 0x21E JUMP JUMPDEST CALLDATASIZE PUSH2 0x21E JUMPI CALLVALUE PUSH2 0x1F8 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1DE SWAP2 SWAP1 PUSH2 0x3488 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH32 0x42100F075A78C1DAC886A43652B5C7C76CCA3718758E13E7B726063CD20FE02C CALLVALUE PUSH1 0x40 MLOAD PUSH2 0x214 SWAP2 SWAP1 PUSH2 0x34ED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 STOP JUMPDEST CALLVALUE PUSH2 0x1F8 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x231 SWAP2 SWAP1 PUSH2 0x3488 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH32 0x6CB8A67804B99A2876F9D2F903120D1607DF4C6BB33315433F4F5B9284BA1588 CALLVALUE PUSH1 0x40 MLOAD PUSH2 0x267 SWAP2 SWAP1 PUSH2 0x34ED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x27D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x286 PUSH2 0x7BF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x293 SWAP2 SWAP1 PUSH2 0x35A1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2C3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2BE SWAP2 SWAP1 PUSH2 0x3661 JUMP JUMPDEST PUSH2 0x851 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2D0 SWAP2 SWAP1 PUSH2 0x36BC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EE PUSH2 0x874 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2FB SWAP2 SWAP1 PUSH2 0x34ED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x310 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x32B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x326 SWAP2 SWAP1 PUSH2 0x36D7 JUMP JUMPDEST PUSH2 0x87E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x338 SWAP2 SWAP1 PUSH2 0x36BC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x34D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x356 PUSH2 0xA0E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x363 SWAP2 SWAP1 PUSH2 0x3746 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x378 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x381 PUSH2 0xA17 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x38E SWAP2 SWAP1 PUSH2 0x3770 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3AC PUSH2 0xA4A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3B9 SWAP2 SWAP1 PUSH2 0x37A4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3E9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3E4 SWAP2 SWAP1 PUSH2 0x37BF JUMP JUMPDEST PUSH2 0xA59 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x412 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x40D SWAP2 SWAP1 PUSH2 0x3661 JUMP JUMPDEST PUSH2 0xBE2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x41F SWAP2 SWAP1 PUSH2 0x36BC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x434 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x44F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x44A SWAP2 SWAP1 PUSH2 0x37EC JUMP JUMPDEST PUSH2 0xC19 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x45D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x478 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x473 SWAP2 SWAP1 PUSH2 0x3661 JUMP JUMPDEST PUSH2 0xC2D JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x486 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4A1 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x49C SWAP2 SWAP1 PUSH2 0x3661 JUMP JUMPDEST PUSH2 0xC43 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4AE SWAP2 SWAP1 PUSH2 0x34ED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4D1 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4CC SWAP2 SWAP1 PUSH2 0x394E JUMP JUMPDEST PUSH2 0xCB3 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4E8 PUSH2 0xDF0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4F5 SWAP2 SWAP1 PUSH2 0x37A4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x50A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x525 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x520 SWAP2 SWAP1 PUSH2 0x39E8 JUMP JUMPDEST PUSH2 0xEA9 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x533 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x53C PUSH2 0xEF6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x549 SWAP2 SWAP1 PUSH2 0x36BC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x55E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x579 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x574 SWAP2 SWAP1 PUSH2 0x37BF JUMP JUMPDEST PUSH2 0xF0D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x586 SWAP2 SWAP1 PUSH2 0x34ED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x59B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5A4 PUSH2 0xF56 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5CD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5C8 SWAP2 SWAP1 PUSH2 0x3661 JUMP JUMPDEST PUSH2 0xF6A JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5F6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5F1 SWAP2 SWAP1 PUSH2 0x37BF JUMP JUMPDEST PUSH2 0xF80 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x603 SWAP2 SWAP1 PUSH2 0x34ED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x618 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x621 PUSH2 0xFD1 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x62F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x638 PUSH2 0x11E1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x645 SWAP2 SWAP1 PUSH2 0x3770 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x65A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x663 PUSH2 0x11F0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x670 SWAP2 SWAP1 PUSH2 0x35A1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x685 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6A0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x69B SWAP2 SWAP1 PUSH2 0x37EC JUMP JUMPDEST PUSH2 0x1282 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x6AD SWAP2 SWAP1 PUSH2 0x34ED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6DD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x6D8 SWAP2 SWAP1 PUSH2 0x3661 JUMP JUMPDEST PUSH2 0x12B3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x6EA SWAP2 SWAP1 PUSH2 0x36BC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x71A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x715 SWAP2 SWAP1 PUSH2 0x3661 JUMP JUMPDEST PUSH2 0x132A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x727 SWAP2 SWAP1 PUSH2 0x36BC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x73C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x757 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x752 SWAP2 SWAP1 PUSH2 0x3A6D JUMP JUMPDEST PUSH2 0x14A2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x765 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x780 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x77B SWAP2 SWAP1 PUSH2 0x3B0F JUMP JUMPDEST PUSH2 0x15E4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x78D SWAP2 SWAP1 PUSH2 0x34ED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7BD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x7B8 SWAP2 SWAP1 PUSH2 0x37BF JUMP JUMPDEST PUSH2 0x166B JUMP JUMPDEST STOP JUMPDEST PUSH1 0x60 PUSH1 0x36 DUP1 SLOAD PUSH2 0x7CE SWAP1 PUSH2 0x3B7E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x7FA SWAP1 PUSH2 0x3B7E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x847 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x81C JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x847 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x82A JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x85C PUSH2 0x16EF JUMP JUMPDEST SWAP1 POP PUSH2 0x869 DUP2 DUP6 DUP6 PUSH2 0x16F7 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x35 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x888 PUSH2 0x18C2 JUMP JUMPDEST DUP4 PUSH2 0x892 DUP2 PUSH2 0x1940 JUMP JUMPDEST PUSH2 0x8D1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8C8 SWAP1 PUSH2 0x3BFC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP4 PUSH2 0x8DB DUP2 PUSH2 0x1940 JUMP JUMPDEST PUSH2 0x91A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x911 SWAP1 PUSH2 0x3BFC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP6 PUSH32 0x0 PUSH2 0x945 DUP3 PUSH2 0x19FA JUMP JUMPDEST EQ ISZERO PUSH2 0x988 JUMPI DUP1 PUSH1 0x40 MLOAD PUSH32 0x80B9EC4500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x97F SWAP2 SWAP1 PUSH2 0x3770 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP6 PUSH32 0x0 PUSH2 0x9B3 DUP3 PUSH2 0x19FA JUMP JUMPDEST EQ ISZERO PUSH2 0x9F6 JUMPI DUP1 PUSH1 0x40 MLOAD PUSH32 0x80B9EC4500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9ED SWAP2 SWAP1 PUSH2 0x3770 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xA01 DUP9 DUP9 DUP9 PUSH2 0x1AAF JUMP JUMPDEST SWAP5 POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA21 PUSH2 0x18C2 JUMP JUMPDEST PUSH2 0x1F9 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA54 PUSH2 0x1ADE JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xAE8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xADF SWAP1 PUSH2 0x3C8E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB27 PUSH2 0x1B1E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xB7D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB74 SWAP1 PUSH2 0x3D20 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xB86 DUP2 PUSH2 0x1B75 JUMP JUMPDEST PUSH2 0xBDF DUP2 PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xBA5 JUMPI PUSH2 0xBA4 PUSH2 0x3823 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xBD7 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP PUSH1 0x0 PUSH2 0x1B80 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xBED PUSH2 0x16EF JUMP JUMPDEST SWAP1 POP PUSH2 0xC0E DUP2 DUP6 DUP6 PUSH2 0xBFF DUP6 DUP10 PUSH2 0x15E4 JUMP JUMPDEST PUSH2 0xC09 SWAP2 SWAP1 PUSH2 0x3488 JUMP JUMPDEST PUSH2 0x16F7 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xC21 PUSH2 0x18C2 JUMP JUMPDEST PUSH2 0xC2A DUP2 PUSH2 0x1CFD JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0xC35 PUSH2 0x18C2 JUMP JUMPDEST PUSH2 0xC3F DUP3 DUP3 PUSH2 0x1D11 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xC90 DUP5 PUSH1 0x97 PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x1D27 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH2 0xCA7 JUMPI PUSH2 0xCA2 DUP6 PUSH2 0xF0D JUMP JUMPDEST PUSH2 0xCA9 JUMP JUMPDEST DUP1 JUMPDEST SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xD42 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD39 SWAP1 PUSH2 0x3C8E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xD81 PUSH2 0x1B1E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xDD7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDCE SWAP1 PUSH2 0x3D20 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xDE0 DUP3 PUSH2 0x1B75 JUMP JUMPDEST PUSH2 0xDEC DUP3 DUP3 PUSH1 0x1 PUSH2 0x1B80 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xE80 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE77 SWAP1 PUSH2 0x3DB2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH1 0x0 SHL SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xEB1 PUSH2 0x18C2 JUMP JUMPDEST DUP1 PUSH2 0x1F9 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFB PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xF5E PUSH2 0x18C2 JUMP JUMPDEST PUSH2 0xF68 PUSH1 0x0 PUSH2 0x1E1D JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xF72 PUSH2 0x18C2 JUMP JUMPDEST PUSH2 0xF7C DUP3 DUP3 PUSH2 0x1EE3 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFCA PUSH2 0x161 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x1F03 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 POP DUP1 DUP1 ISZERO PUSH2 0x1002 JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND LT JUMPDEST DUP1 PUSH2 0x102F JUMPI POP PUSH2 0x1011 ADDRESS PUSH2 0x1F11 JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0x102E JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND EQ JUMPDEST JUMPDEST PUSH2 0x106E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1065 SWAP1 PUSH2 0x3E44 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0x10AB JUMPI PUSH1 0x1 PUSH1 0x0 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH2 0x111F PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x504B445200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x504B445200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH2 0x1F34 JUMP JUMPDEST PUSH2 0x1127 PUSH2 0x1F91 JUMP JUMPDEST PUSH2 0x112F PUSH2 0x1FE2 JUMP JUMPDEST PUSH2 0x1137 PUSH2 0x2033 JUMP JUMPDEST PUSH2 0x113F PUSH2 0x208C JUMP JUMPDEST PUSH2 0x117D PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x504B445200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH2 0x20E5 JUMP JUMPDEST PUSH2 0x1185 PUSH2 0x2176 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x11DE JUMPI PUSH1 0x0 DUP1 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0x1 PUSH1 0x40 MLOAD PUSH2 0x11D5 SWAP2 SWAP1 PUSH2 0x3EA9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11EB PUSH2 0x21C7 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x37 DUP1 SLOAD PUSH2 0x11FF SWAP1 PUSH2 0x3B7E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x122B SWAP1 PUSH2 0x3B7E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1278 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x124D JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1278 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x125B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1292 DUP5 PUSH1 0x98 PUSH2 0x1D27 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH2 0x12A8 JUMPI PUSH2 0x12A3 PUSH2 0x874 JUMP JUMPDEST PUSH2 0x12AA JUMP JUMPDEST DUP1 JUMPDEST SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x12BE PUSH2 0x16EF JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x12CC DUP3 DUP7 PUSH2 0x15E4 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x1311 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1308 SWAP1 PUSH2 0x3F36 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x131E DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x16F7 JUMP JUMPDEST PUSH1 0x1 SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1335 CALLER PUSH2 0x1940 JUMP JUMPDEST PUSH2 0x1374 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x136B SWAP1 PUSH2 0x3FC8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x137D DUP4 PUSH2 0x1940 JUMP JUMPDEST PUSH2 0x13BC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13B3 SWAP1 PUSH2 0x405A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x0 PUSH2 0x13E6 CALLER PUSH2 0x19FA JUMP JUMPDEST EQ PUSH2 0x1426 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x141D SWAP1 PUSH2 0x40EC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x0 PUSH2 0x1450 DUP5 PUSH2 0x19FA JUMP JUMPDEST EQ PUSH2 0x1490 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1487 SWAP1 PUSH2 0x417E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x149A DUP4 DUP4 PUSH2 0x21F1 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP4 TIMESTAMP GT ISZERO PUSH2 0x14E5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14DC SWAP1 PUSH2 0x41EA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0x6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9 DUP9 DUP9 DUP9 PUSH2 0x1514 DUP13 PUSH2 0x2214 JUMP JUMPDEST DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x152A SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x420A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 PUSH2 0x154D DUP3 PUSH2 0x2273 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x155D DUP3 DUP8 DUP8 DUP8 PUSH2 0x228D JUMP JUMPDEST SWAP1 POP DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x15CD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x15C4 SWAP1 PUSH2 0x42B7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x15D8 DUP11 DUP11 DUP11 PUSH2 0x16F7 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x34 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1673 PUSH2 0x18C2 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x16E3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x16DA SWAP1 PUSH2 0x4349 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x16EC DUP2 PUSH2 0x1E1D JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x1767 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x175E SWAP1 PUSH2 0x43DB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x17D7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x17CE SWAP1 PUSH2 0x446D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x34 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP4 PUSH1 0x40 MLOAD PUSH2 0x18B5 SWAP2 SWAP1 PUSH2 0x34ED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x18CA PUSH2 0x16EF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x18E8 PUSH2 0x11E1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x193E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1935 SWAP1 PUSH2 0x44D9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1F9 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD117FC99 DUP5 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x199F SWAP2 SWAP1 PUSH2 0x3770 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x19B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x19CB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x19EF SWAP2 SWAP1 PUSH2 0x4525 JUMP JUMPDEST SWAP1 POP DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F9 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1E9F3D5E DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A58 SWAP2 SWAP1 PUSH2 0x3770 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1A70 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1A84 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1AA8 SWAP2 SWAP1 PUSH2 0x4567 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1ABA PUSH2 0x16EF JUMP JUMPDEST SWAP1 POP PUSH2 0x1AC7 DUP6 DUP3 DUP6 PUSH2 0x22B8 JUMP JUMPDEST PUSH2 0x1AD2 DUP6 DUP6 DUP6 PUSH2 0x2344 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B19 PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH2 0x1B0C PUSH2 0x25BF JUMP JUMPDEST PUSH2 0x1B14 PUSH2 0x25CA JUMP JUMPDEST PUSH2 0x25D5 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B4C PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH1 0x0 SHL PUSH2 0x260F JUMP JUMPDEST PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x1B7D PUSH2 0x18C2 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x1BAC PUSH32 0x4910FDFA16FED3260ED0E7147F7CC6DA11A60208B5B9406D12A635614FFD9143 PUSH1 0x0 SHL PUSH2 0x2619 JUMP JUMPDEST PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x1BD0 JUMPI PUSH2 0x1BCB DUP4 PUSH2 0x2623 JUMP JUMPDEST PUSH2 0x1CF8 JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x52D1902D PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1C16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1C47 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1C44 SWAP2 SWAP1 PUSH2 0x4567 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1C86 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C7D SWAP1 PUSH2 0x4606 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH1 0x0 SHL DUP2 EQ PUSH2 0x1CEB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1CE2 SWAP1 PUSH2 0x4698 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH2 0x1CF7 DUP4 DUP4 DUP4 PUSH2 0x26DC JUMP JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x1D0E PUSH2 0x1D08 PUSH2 0x16EF JUMP JUMPDEST DUP3 PUSH2 0x2708 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x1D19 PUSH2 0x18C2 JUMP JUMPDEST PUSH2 0x1D23 DUP3 DUP3 PUSH2 0x28D8 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP5 GT PUSH2 0x1D6D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D64 SWAP1 PUSH2 0x4704 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1D75 PUSH2 0x2A30 JUMP JUMPDEST DUP5 GT ISZERO PUSH2 0x1DB7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1DAE SWAP1 PUSH2 0x4770 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1DCF DUP6 DUP6 PUSH1 0x0 ADD PUSH2 0x2A41 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP4 PUSH1 0x0 ADD DUP1 SLOAD SWAP1 POP DUP2 EQ ISZERO PUSH2 0x1DED JUMPI PUSH1 0x0 DUP1 SWAP3 POP SWAP3 POP POP PUSH2 0x1E16 JUMP JUMPDEST PUSH1 0x1 DUP5 PUSH1 0x1 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x1E05 JUMPI PUSH2 0x1E04 PUSH2 0x4790 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP3 POP SWAP3 POP POP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC9 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0xC9 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x1EF5 DUP3 PUSH2 0x1EEF PUSH2 0x16EF JUMP JUMPDEST DUP4 PUSH2 0x22B8 JUMP JUMPDEST PUSH2 0x1EFF DUP3 DUP3 PUSH2 0x2708 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1F83 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F7A SWAP1 PUSH2 0x4831 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1F8D DUP3 DUP3 PUSH2 0x2AFB JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1FE0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1FD7 SWAP1 PUSH2 0x4831 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2031 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2028 SWAP1 PUSH2 0x4831 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2082 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2079 SWAP1 PUSH2 0x4831 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x208A PUSH2 0x2B7C JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x20DB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x20D2 SWAP1 PUSH2 0x4831 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x20E3 PUSH2 0x2BDD JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2134 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x212B SWAP1 PUSH2 0x4831 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2173 DUP2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x3100000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH2 0x2C49 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x21C5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x21BC SWAP1 PUSH2 0x4831 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC9 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x21FC PUSH2 0x16EF JUMP JUMPDEST SWAP1 POP PUSH2 0x2209 DUP2 DUP6 DUP6 PUSH2 0x2344 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x161 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH2 0x2262 DUP2 PUSH2 0x1F03 JUMP JUMPDEST SWAP2 POP PUSH2 0x226D DUP2 PUSH2 0x2CC6 JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2286 PUSH2 0x2280 PUSH2 0x1ADE JUMP JUMPDEST DUP4 PUSH2 0x2CDC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x229E DUP8 DUP8 DUP8 DUP8 PUSH2 0x2D0F JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x22AB DUP2 PUSH2 0x2DF2 JUMP JUMPDEST DUP2 SWAP3 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x22C4 DUP5 DUP5 PUSH2 0x15E4 JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ PUSH2 0x233E JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x2330 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2327 SWAP1 PUSH2 0x489D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x233D DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x16F7 JUMP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x23B4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x23AB SWAP1 PUSH2 0x492F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x2424 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x241B SWAP1 PUSH2 0x49C1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x242F DUP4 DUP4 DUP4 PUSH2 0x2F60 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x24B6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x24AD SWAP1 PUSH2 0x4A53 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH1 0x33 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x33 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x25A6 SWAP2 SWAP1 PUSH2 0x34ED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x25B9 DUP5 DUP5 DUP5 PUSH2 0x2F78 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12D SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12E SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP4 DUP4 CHAINID ADDRESS PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x25F0 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4A73 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x262C DUP2 PUSH2 0x1F11 JUMP JUMPDEST PUSH2 0x266B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2662 SWAP1 PUSH2 0x4B38 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH2 0x2698 PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH1 0x0 SHL PUSH2 0x260F JUMP JUMPDEST PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH2 0x26E5 DUP4 PUSH2 0x2F7D JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT DUP1 PUSH2 0x26F2 JUMPI POP DUP1 JUMPDEST ISZERO PUSH2 0x2703 JUMPI PUSH2 0x2701 DUP4 DUP4 PUSH2 0x2FCC JUMP JUMPDEST POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x2778 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x276F SWAP1 PUSH2 0x4BCA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2784 DUP3 PUSH1 0x0 DUP4 PUSH2 0x2F60 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x280B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2802 SWAP1 PUSH2 0x4C5C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH1 0x33 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x35 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x28BF SWAP2 SWAP1 PUSH2 0x34ED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x28D3 DUP4 PUSH1 0x0 DUP5 PUSH2 0x2F78 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x2948 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x293F SWAP1 PUSH2 0x4CC8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2954 PUSH1 0x0 DUP4 DUP4 PUSH2 0x2F60 JUMP JUMPDEST DUP1 PUSH1 0x35 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x2966 SWAP2 SWAP1 PUSH2 0x3488 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x33 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0x2A18 SWAP2 SWAP1 PUSH2 0x34ED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x2A2C PUSH1 0x0 DUP4 DUP4 PUSH2 0x2F78 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A3C PUSH1 0x9A PUSH2 0x1F03 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 DUP1 SLOAD SWAP1 POP EQ ISZERO PUSH2 0x2A58 JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0x2AF5 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 DUP1 SLOAD SWAP1 POP SWAP1 POP JUMPDEST DUP1 DUP3 LT ISZERO PUSH2 0x2AAC JUMPI PUSH1 0x0 PUSH2 0x2A77 DUP4 DUP4 PUSH2 0x30B0 JUMP JUMPDEST SWAP1 POP DUP5 PUSH2 0x2A84 DUP8 DUP4 PUSH2 0x30D6 JUMP JUMPDEST PUSH1 0x0 ADD SLOAD GT ISZERO PUSH2 0x2A96 JUMPI DUP1 SWAP2 POP PUSH2 0x2AA6 JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH2 0x2AA3 SWAP2 SWAP1 PUSH2 0x3488 JUMP JUMPDEST SWAP3 POP JUMPDEST POP PUSH2 0x2A63 JUMP JUMPDEST PUSH1 0x0 DUP3 GT DUP1 ISZERO PUSH2 0x2AD4 JUMPI POP DUP4 PUSH2 0x2ACE DUP7 PUSH1 0x1 DUP6 PUSH2 0x2AC9 SWAP2 SWAP1 PUSH2 0x4CE8 JUMP JUMPDEST PUSH2 0x30D6 JUMP JUMPDEST PUSH1 0x0 ADD SLOAD EQ JUMPDEST ISZERO PUSH2 0x2AEF JUMPI PUSH1 0x1 DUP3 PUSH2 0x2AE6 SWAP2 SWAP1 PUSH2 0x4CE8 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x2AF5 JUMP JUMPDEST DUP2 SWAP3 POP POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2B4A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B41 SWAP1 PUSH2 0x4831 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x36 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x2B60 SWAP3 SWAP2 SWAP1 PUSH2 0x33AC JUMP JUMPDEST POP DUP1 PUSH1 0x37 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x2B77 SWAP3 SWAP2 SWAP1 PUSH2 0x33AC JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2BCB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2BC2 SWAP1 PUSH2 0x4831 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2BDB PUSH2 0x2BD6 PUSH2 0x16EF JUMP JUMPDEST PUSH2 0x1E1D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2C2C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2C23 SWAP1 PUSH2 0x4831 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0xFB PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2C98 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2C8F SWAP1 PUSH2 0x4831 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP DUP2 PUSH2 0x12D DUP2 SWAP1 SSTORE POP DUP1 PUSH2 0x12E DUP2 SWAP1 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2CF1 SWAP3 SWAP2 SWAP1 PUSH2 0x4D94 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP4 PUSH1 0x0 SHR GT ISZERO PUSH2 0x2D4A JUMPI PUSH1 0x0 PUSH1 0x3 SWAP2 POP SWAP2 POP PUSH2 0x2DE9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP8 DUP8 DUP8 DUP8 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x2D6F SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4DCB JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2D91 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x2DE0 JUMPI PUSH1 0x0 PUSH1 0x1 SWAP3 POP SWAP3 POP POP PUSH2 0x2DE9 JUMP JUMPDEST DUP1 PUSH1 0x0 SWAP3 POP SWAP3 POP POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x2E06 JUMPI PUSH2 0x2E05 PUSH2 0x4E10 JUMP JUMPDEST JUMPDEST DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x2E19 JUMPI PUSH2 0x2E18 PUSH2 0x4E10 JUMP JUMPDEST JUMPDEST EQ ISZERO PUSH2 0x2E24 JUMPI PUSH2 0x2F5D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x2E38 JUMPI PUSH2 0x2E37 PUSH2 0x4E10 JUMP JUMPDEST JUMPDEST DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x2E4B JUMPI PUSH2 0x2E4A PUSH2 0x4E10 JUMP JUMPDEST JUMPDEST EQ ISZERO PUSH2 0x2E8C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2E83 SWAP1 PUSH2 0x4E8B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x2EA0 JUMPI PUSH2 0x2E9F PUSH2 0x4E10 JUMP JUMPDEST JUMPDEST DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x2EB3 JUMPI PUSH2 0x2EB2 PUSH2 0x4E10 JUMP JUMPDEST JUMPDEST EQ ISZERO PUSH2 0x2EF4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EEB SWAP1 PUSH2 0x4EF7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x2F08 JUMPI PUSH2 0x2F07 PUSH2 0x4E10 JUMP JUMPDEST JUMPDEST DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x2F1B JUMPI PUSH2 0x2F1A PUSH2 0x4E10 JUMP JUMPDEST JUMPDEST EQ ISZERO PUSH2 0x2F5C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2F53 SWAP1 PUSH2 0x4F89 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH2 0x2F68 PUSH2 0x30F8 JUMP JUMPDEST PUSH2 0x2F73 DUP4 DUP4 DUP4 PUSH2 0x3142 JUMP JUMPDEST POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x2F86 DUP2 PUSH2 0x2623 JUMP JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2FD7 DUP4 PUSH2 0x1F11 JUMP JUMPDEST PUSH2 0x3016 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x300D SWAP1 PUSH2 0x501B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH1 0x40 MLOAD PUSH2 0x303E SWAP2 SWAP1 PUSH2 0x5082 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3079 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x307E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x30A6 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x5166 PUSH1 0x27 SWAP2 CODECOPY PUSH2 0x31FC JUMP JUMPDEST SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DUP5 XOR PUSH2 0x30C1 SWAP2 SWAP1 PUSH2 0x50C8 JUMP JUMPDEST DUP3 DUP5 AND PUSH2 0x30CE SWAP2 SWAP1 PUSH2 0x3488 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x0 MSTORE DUP3 PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SWAP1 POP PUSH2 0x30EF DUP2 PUSH2 0x321E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3100 PUSH2 0xEF6 JUMP JUMPDEST ISZERO PUSH2 0x3140 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3137 SWAP1 PUSH2 0x5145 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH2 0x314D DUP4 DUP4 DUP4 PUSH2 0x3228 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x3198 JUMPI PUSH2 0x318B DUP3 PUSH2 0x322D JUMP JUMPDEST PUSH2 0x3193 PUSH2 0x3280 JUMP JUMPDEST PUSH2 0x31F7 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x31E3 JUMPI PUSH2 0x31D6 DUP4 PUSH2 0x322D JUMP JUMPDEST PUSH2 0x31DE PUSH2 0x3280 JUMP JUMPDEST PUSH2 0x31F6 JUMP JUMPDEST PUSH2 0x31EC DUP4 PUSH2 0x322D JUMP JUMPDEST PUSH2 0x31F5 DUP3 PUSH2 0x322D JUMP JUMPDEST JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x320C JUMPI DUP3 SWAP1 POP PUSH2 0x3217 JUMP JUMPDEST PUSH2 0x3216 DUP4 DUP4 PUSH2 0x3294 JUMP JUMPDEST JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x327D PUSH1 0x97 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x3278 DUP4 PUSH2 0xF0D JUMP JUMPDEST PUSH2 0x32E4 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x3292 PUSH1 0x98 PUSH2 0x328D PUSH2 0x874 JUMP JUMPDEST PUSH2 0x32E4 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT ISZERO PUSH2 0x32A7 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x32DB SWAP2 SWAP1 PUSH2 0x35A1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x32EE PUSH2 0x2A30 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x32FD DUP5 PUSH1 0x0 ADD PUSH2 0x335F JUMP JUMPDEST LT ISZERO PUSH2 0x335A JUMPI DUP3 PUSH1 0x0 ADD DUP2 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP SSTORE DUP3 PUSH1 0x1 ADD DUP3 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP SSTORE JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP1 SLOAD SWAP1 POP EQ ISZERO PUSH2 0x3376 JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0x33A7 JUMP JUMPDEST DUP2 PUSH1 0x1 DUP4 DUP1 SLOAD SWAP1 POP PUSH2 0x3388 SWAP2 SWAP1 PUSH2 0x4CE8 JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0x3399 JUMPI PUSH2 0x3398 PUSH2 0x4790 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x33B8 SWAP1 PUSH2 0x3B7E JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x33DA JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x3421 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x33F3 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x3421 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x3421 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x3420 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x3405 JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH2 0x342E SWAP2 SWAP1 PUSH2 0x3432 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x344B JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH2 0x3433 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3493 DUP3 PUSH2 0x344F JUMP JUMPDEST SWAP2 POP PUSH2 0x349E DUP4 PUSH2 0x344F JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0x34D3 JUMPI PUSH2 0x34D2 PUSH2 0x3459 JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x34E7 DUP2 PUSH2 0x344F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3502 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x34DE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3542 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x3527 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x3551 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3573 DUP3 PUSH2 0x3508 JUMP JUMPDEST PUSH2 0x357D DUP2 DUP6 PUSH2 0x3513 JUMP JUMPDEST SWAP4 POP PUSH2 0x358D DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x3524 JUMP JUMPDEST PUSH2 0x3596 DUP2 PUSH2 0x3557 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x35BB DUP2 DUP5 PUSH2 0x3568 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3602 DUP3 PUSH2 0x35D7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3612 DUP2 PUSH2 0x35F7 JUMP JUMPDEST DUP2 EQ PUSH2 0x361D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x362F DUP2 PUSH2 0x3609 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x363E DUP2 PUSH2 0x344F JUMP JUMPDEST DUP2 EQ PUSH2 0x3649 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x365B DUP2 PUSH2 0x3635 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3678 JUMPI PUSH2 0x3677 PUSH2 0x35CD JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3686 DUP6 DUP3 DUP7 ADD PUSH2 0x3620 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x3697 DUP6 DUP3 DUP7 ADD PUSH2 0x364C JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x36B6 DUP2 PUSH2 0x36A1 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x36D1 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x36AD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x36F0 JUMPI PUSH2 0x36EF PUSH2 0x35CD JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x36FE DUP7 DUP3 DUP8 ADD PUSH2 0x3620 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x370F DUP7 DUP3 DUP8 ADD PUSH2 0x3620 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x3720 DUP7 DUP3 DUP8 ADD PUSH2 0x364C JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3740 DUP2 PUSH2 0x372A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x375B PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3737 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x376A DUP2 PUSH2 0x35F7 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3785 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3761 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x379E DUP2 PUSH2 0x378B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x37B9 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3795 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x37D5 JUMPI PUSH2 0x37D4 PUSH2 0x35CD JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x37E3 DUP5 DUP3 DUP6 ADD PUSH2 0x3620 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3802 JUMPI PUSH2 0x3801 PUSH2 0x35CD JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3810 DUP5 DUP3 DUP6 ADD PUSH2 0x364C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x385B DUP3 PUSH2 0x3557 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x387A JUMPI PUSH2 0x3879 PUSH2 0x3823 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x388D PUSH2 0x35C3 JUMP JUMPDEST SWAP1 POP PUSH2 0x3899 DUP3 DUP3 PUSH2 0x3852 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x38B9 JUMPI PUSH2 0x38B8 PUSH2 0x3823 JUMP JUMPDEST JUMPDEST PUSH2 0x38C2 DUP3 PUSH2 0x3557 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x38F1 PUSH2 0x38EC DUP5 PUSH2 0x389E JUMP JUMPDEST PUSH2 0x3883 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x390D JUMPI PUSH2 0x390C PUSH2 0x381E JUMP JUMPDEST JUMPDEST PUSH2 0x3918 DUP5 DUP3 DUP6 PUSH2 0x38CF JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3935 JUMPI PUSH2 0x3934 PUSH2 0x3819 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x3945 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x38DE JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3965 JUMPI PUSH2 0x3964 PUSH2 0x35CD JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3973 DUP6 DUP3 DUP7 ADD PUSH2 0x3620 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3994 JUMPI PUSH2 0x3993 PUSH2 0x35D2 JUMP JUMPDEST JUMPDEST PUSH2 0x39A0 DUP6 DUP3 DUP7 ADD PUSH2 0x3920 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x39B5 DUP3 PUSH2 0x35D7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x39C5 DUP2 PUSH2 0x39AA JUMP JUMPDEST DUP2 EQ PUSH2 0x39D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x39E2 DUP2 PUSH2 0x39BC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x39FE JUMPI PUSH2 0x39FD PUSH2 0x35CD JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3A0C DUP5 DUP3 DUP6 ADD PUSH2 0x39D3 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3A1E DUP2 PUSH2 0x372A JUMP JUMPDEST DUP2 EQ PUSH2 0x3A29 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3A3B DUP2 PUSH2 0x3A15 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3A4A DUP2 PUSH2 0x378B JUMP JUMPDEST DUP2 EQ PUSH2 0x3A55 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3A67 DUP2 PUSH2 0x3A41 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x3A8C JUMPI PUSH2 0x3A8B PUSH2 0x35CD JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3A9A DUP11 DUP3 DUP12 ADD PUSH2 0x3620 JUMP JUMPDEST SWAP8 POP POP PUSH1 0x20 PUSH2 0x3AAB DUP11 DUP3 DUP12 ADD PUSH2 0x3620 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x40 PUSH2 0x3ABC DUP11 DUP3 DUP12 ADD PUSH2 0x364C JUMP JUMPDEST SWAP6 POP POP PUSH1 0x60 PUSH2 0x3ACD DUP11 DUP3 DUP12 ADD PUSH2 0x364C JUMP JUMPDEST SWAP5 POP POP PUSH1 0x80 PUSH2 0x3ADE DUP11 DUP3 DUP12 ADD PUSH2 0x3A2C JUMP JUMPDEST SWAP4 POP POP PUSH1 0xA0 PUSH2 0x3AEF DUP11 DUP3 DUP12 ADD PUSH2 0x3A58 JUMP JUMPDEST SWAP3 POP POP PUSH1 0xC0 PUSH2 0x3B00 DUP11 DUP3 DUP12 ADD PUSH2 0x3A58 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3B26 JUMPI PUSH2 0x3B25 PUSH2 0x35CD JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3B34 DUP6 DUP3 DUP7 ADD PUSH2 0x3620 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x3B45 DUP6 DUP3 DUP7 ADD PUSH2 0x3620 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x3B96 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x3BAA JUMPI PUSH2 0x3BA9 PUSH2 0x3B4F JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x555345525F4E4F545F5645524946494544000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3BE6 PUSH1 0x11 DUP4 PUSH2 0x3513 JUMP JUMPDEST SWAP2 POP PUSH2 0x3BF1 DUP3 PUSH2 0x3BB0 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3C15 DUP2 PUSH2 0x3BD9 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x64656C656761746563616C6C0000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3C78 PUSH1 0x2C DUP4 PUSH2 0x3513 JUMP JUMPDEST SWAP2 POP PUSH2 0x3C83 DUP3 PUSH2 0x3C1C JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3CA7 DUP2 PUSH2 0x3C6B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6163746976652070726F78790000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3D0A PUSH1 0x2C DUP4 PUSH2 0x3513 JUMP JUMPDEST SWAP2 POP PUSH2 0x3D15 DUP3 PUSH2 0x3CAE JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3D39 DUP2 PUSH2 0x3CFD JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x555550535570677261646561626C653A206D757374206E6F742062652063616C PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6C6564207468726F7567682064656C656761746563616C6C0000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3D9C PUSH1 0x38 DUP4 PUSH2 0x3513 JUMP JUMPDEST SWAP2 POP PUSH2 0x3DA7 DUP3 PUSH2 0x3D40 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3DCB DUP2 PUSH2 0x3D8F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3E2E PUSH1 0x2E DUP4 PUSH2 0x3513 JUMP JUMPDEST SWAP2 POP PUSH2 0x3E39 DUP3 PUSH2 0x3DD2 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3E5D DUP2 PUSH2 0x3E21 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3E93 PUSH2 0x3E8E PUSH2 0x3E89 DUP5 PUSH2 0x3E64 JUMP JUMPDEST PUSH2 0x3E6E JUMP JUMPDEST PUSH2 0x372A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3EA3 DUP2 PUSH2 0x3E78 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3EBE PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3E9A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x207A65726F000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3F20 PUSH1 0x25 DUP4 PUSH2 0x3513 JUMP JUMPDEST SWAP2 POP PUSH2 0x3F2B DUP3 PUSH2 0x3EC4 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3F4F DUP2 PUSH2 0x3F13 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x66726F6D3A205452414E534645525F52455155495245445F5645524946494341 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x54494F4E5F490000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3FB2 PUSH1 0x26 DUP4 PUSH2 0x3513 JUMP JUMPDEST SWAP2 POP PUSH2 0x3FBD DUP3 PUSH2 0x3F56 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3FE1 DUP2 PUSH2 0x3FA5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x746F203A205452414E534645525F52455155495245445F564552494649434154 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x494F4E5F49000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4044 PUSH1 0x25 DUP4 PUSH2 0x3513 JUMP JUMPDEST SWAP2 POP PUSH2 0x404F DUP3 PUSH2 0x3FE8 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4073 DUP2 PUSH2 0x4037 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x66726F6D3A205452414E534645525F52455155495245445F4D554C54495F5349 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x474E415455524500000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x40D6 PUSH1 0x27 DUP4 PUSH2 0x3513 JUMP JUMPDEST SWAP2 POP PUSH2 0x40E1 DUP3 PUSH2 0x407A JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4105 DUP2 PUSH2 0x40C9 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x746F3A205452414E534645525F52455155495245445F4D554C54495F5349474E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x4154555245000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4168 PUSH1 0x25 DUP4 PUSH2 0x3513 JUMP JUMPDEST SWAP2 POP PUSH2 0x4173 DUP3 PUSH2 0x410C JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4197 DUP2 PUSH2 0x415B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332305065726D69743A206578706972656420646561646C696E65000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x41D4 PUSH1 0x1D DUP4 PUSH2 0x3513 JUMP JUMPDEST SWAP2 POP PUSH2 0x41DF DUP3 PUSH2 0x419E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4203 DUP2 PUSH2 0x41C7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC0 DUP3 ADD SWAP1 POP PUSH2 0x421F PUSH1 0x0 DUP4 ADD DUP10 PUSH2 0x3795 JUMP JUMPDEST PUSH2 0x422C PUSH1 0x20 DUP4 ADD DUP9 PUSH2 0x3761 JUMP JUMPDEST PUSH2 0x4239 PUSH1 0x40 DUP4 ADD DUP8 PUSH2 0x3761 JUMP JUMPDEST PUSH2 0x4246 PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x34DE JUMP JUMPDEST PUSH2 0x4253 PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0x34DE JUMP JUMPDEST PUSH2 0x4260 PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0x34DE JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x45524332305065726D69743A20696E76616C6964207369676E61747572650000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x42A1 PUSH1 0x1E DUP4 PUSH2 0x3513 JUMP JUMPDEST SWAP2 POP PUSH2 0x42AC DUP3 PUSH2 0x426B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x42D0 DUP2 PUSH2 0x4294 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4333 PUSH1 0x26 DUP4 PUSH2 0x3513 JUMP JUMPDEST SWAP2 POP PUSH2 0x433E DUP3 PUSH2 0x42D7 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4362 DUP2 PUSH2 0x4326 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x43C5 PUSH1 0x24 DUP4 PUSH2 0x3513 JUMP JUMPDEST SWAP2 POP PUSH2 0x43D0 DUP3 PUSH2 0x4369 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x43F4 DUP2 PUSH2 0x43B8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7373000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4457 PUSH1 0x22 DUP4 PUSH2 0x3513 JUMP JUMPDEST SWAP2 POP PUSH2 0x4462 DUP3 PUSH2 0x43FB JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4486 DUP2 PUSH2 0x444A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x44C3 PUSH1 0x20 DUP4 PUSH2 0x3513 JUMP JUMPDEST SWAP2 POP PUSH2 0x44CE DUP3 PUSH2 0x448D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x44F2 DUP2 PUSH2 0x44B6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x4502 DUP2 PUSH2 0x36A1 JUMP JUMPDEST DUP2 EQ PUSH2 0x450D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x451F DUP2 PUSH2 0x44F9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x453B JUMPI PUSH2 0x453A PUSH2 0x35CD JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x4549 DUP5 DUP3 DUP6 ADD PUSH2 0x4510 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x4561 DUP2 PUSH2 0x3A41 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x457D JUMPI PUSH2 0x457C PUSH2 0x35CD JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x458B DUP5 DUP3 DUP6 ADD PUSH2 0x4552 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x45524331393637557067726164653A206E657720696D706C656D656E74617469 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F6E206973206E6F742055555053000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x45F0 PUSH1 0x2E DUP4 PUSH2 0x3513 JUMP JUMPDEST SWAP2 POP PUSH2 0x45FB DUP3 PUSH2 0x4594 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x461F DUP2 PUSH2 0x45E3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524331393637557067726164653A20756E737570706F727465642070726F78 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6961626C65555549440000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4682 PUSH1 0x29 DUP4 PUSH2 0x3513 JUMP JUMPDEST SWAP2 POP PUSH2 0x468D DUP3 PUSH2 0x4626 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x46B1 DUP2 PUSH2 0x4675 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433230536E617073686F743A206964206973203000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x46EE PUSH1 0x16 DUP4 PUSH2 0x3513 JUMP JUMPDEST SWAP2 POP PUSH2 0x46F9 DUP3 PUSH2 0x46B8 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x471D DUP2 PUSH2 0x46E1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433230536E617073686F743A206E6F6E6578697374656E74206964000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x475A PUSH1 0x1D DUP4 PUSH2 0x3513 JUMP JUMPDEST SWAP2 POP PUSH2 0x4765 DUP3 PUSH2 0x4724 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4789 DUP2 PUSH2 0x474D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x481B PUSH1 0x2B DUP4 PUSH2 0x3513 JUMP JUMPDEST SWAP2 POP PUSH2 0x4826 DUP3 PUSH2 0x47BF JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x484A DUP2 PUSH2 0x480E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4887 PUSH1 0x1D DUP4 PUSH2 0x3513 JUMP JUMPDEST SWAP2 POP PUSH2 0x4892 DUP3 PUSH2 0x4851 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x48B6 DUP2 PUSH2 0x487A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4919 PUSH1 0x25 DUP4 PUSH2 0x3513 JUMP JUMPDEST SWAP2 POP PUSH2 0x4924 DUP3 PUSH2 0x48BD JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4948 DUP2 PUSH2 0x490C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6573730000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x49AB PUSH1 0x23 DUP4 PUSH2 0x3513 JUMP JUMPDEST SWAP2 POP PUSH2 0x49B6 DUP3 PUSH2 0x494F JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x49DA DUP2 PUSH2 0x499E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x616C616E63650000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4A3D PUSH1 0x26 DUP4 PUSH2 0x3513 JUMP JUMPDEST SWAP2 POP PUSH2 0x4A48 DUP3 PUSH2 0x49E1 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4A6C DUP2 PUSH2 0x4A30 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0x4A88 PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0x3795 JUMP JUMPDEST PUSH2 0x4A95 PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x3795 JUMP JUMPDEST PUSH2 0x4AA2 PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x3795 JUMP JUMPDEST PUSH2 0x4AAF PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x34DE JUMP JUMPDEST PUSH2 0x4ABC PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x3761 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F74206120636F6E747261637400000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4B22 PUSH1 0x2D DUP4 PUSH2 0x3513 JUMP JUMPDEST SWAP2 POP PUSH2 0x4B2D DUP3 PUSH2 0x4AC6 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4B51 DUP2 PUSH2 0x4B15 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A206275726E2066726F6D20746865207A65726F20616464726573 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7300000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4BB4 PUSH1 0x21 DUP4 PUSH2 0x3513 JUMP JUMPDEST SWAP2 POP PUSH2 0x4BBF DUP3 PUSH2 0x4B58 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4BE3 DUP2 PUSH2 0x4BA7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A206275726E20616D6F756E7420657863656564732062616C616E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6365000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4C46 PUSH1 0x22 DUP4 PUSH2 0x3513 JUMP JUMPDEST SWAP2 POP PUSH2 0x4C51 DUP3 PUSH2 0x4BEA JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4C75 DUP2 PUSH2 0x4C39 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4CB2 PUSH1 0x1F DUP4 PUSH2 0x3513 JUMP JUMPDEST SWAP2 POP PUSH2 0x4CBD DUP3 PUSH2 0x4C7C JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4CE1 DUP2 PUSH2 0x4CA5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4CF3 DUP3 PUSH2 0x344F JUMP JUMPDEST SWAP2 POP PUSH2 0x4CFE DUP4 PUSH2 0x344F JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 0x4D11 JUMPI PUSH2 0x4D10 PUSH2 0x3459 JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x1901000000000000000000000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4D5D PUSH1 0x2 DUP4 PUSH2 0x4D1C JUMP JUMPDEST SWAP2 POP PUSH2 0x4D68 DUP3 PUSH2 0x4D27 JUMP JUMPDEST PUSH1 0x2 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x4D8E PUSH2 0x4D89 DUP3 PUSH2 0x378B JUMP JUMPDEST PUSH2 0x4D73 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4D9F DUP3 PUSH2 0x4D50 JUMP JUMPDEST SWAP2 POP PUSH2 0x4DAB DUP3 DUP6 PUSH2 0x4D7D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH2 0x4DBB DUP3 DUP5 PUSH2 0x4D7D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x4DE0 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x3795 JUMP JUMPDEST PUSH2 0x4DED PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x3737 JUMP JUMPDEST PUSH2 0x4DFA PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x3795 JUMP JUMPDEST PUSH2 0x4E07 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x3795 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x45434453413A20696E76616C6964207369676E61747572650000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4E75 PUSH1 0x18 DUP4 PUSH2 0x3513 JUMP JUMPDEST SWAP2 POP PUSH2 0x4E80 DUP3 PUSH2 0x4E3F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4EA4 DUP2 PUSH2 0x4E68 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4EE1 PUSH1 0x1F DUP4 PUSH2 0x3513 JUMP JUMPDEST SWAP2 POP PUSH2 0x4EEC DUP3 PUSH2 0x4EAB JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4F10 DUP2 PUSH2 0x4ED4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202773272076616C PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7565000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4F73 PUSH1 0x22 DUP4 PUSH2 0x3513 JUMP JUMPDEST SWAP2 POP PUSH2 0x4F7E DUP3 PUSH2 0x4F17 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4FA2 DUP2 PUSH2 0x4F66 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x416464726573733A2064656C65676174652063616C6C20746F206E6F6E2D636F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6E74726163740000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5005 PUSH1 0x26 DUP4 PUSH2 0x3513 JUMP JUMPDEST SWAP2 POP PUSH2 0x5010 DUP3 PUSH2 0x4FA9 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x5034 DUP2 PUSH2 0x4FF8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x505C DUP3 PUSH2 0x503B JUMP JUMPDEST PUSH2 0x5066 DUP2 DUP6 PUSH2 0x5046 JUMP JUMPDEST SWAP4 POP PUSH2 0x5076 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x3524 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x508E DUP3 DUP5 PUSH2 0x5051 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x50D3 DUP3 PUSH2 0x344F JUMP JUMPDEST SWAP2 POP PUSH2 0x50DE DUP4 PUSH2 0x344F JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x50EE JUMPI PUSH2 0x50ED PUSH2 0x5099 JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5061757361626C653A2070617573656400000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x512F PUSH1 0x10 DUP4 PUSH2 0x3513 JUMP JUMPDEST SWAP2 POP PUSH2 0x513A DUP3 PUSH2 0x50F9 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x515E DUP2 PUSH2 0x5122 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID COINBASE PUSH5 0x6472657373 GASPRICE KECCAK256 PUSH13 0x6F772D6C6576656C2064656C65 PUSH8 0x6174652063616C6C KECCAK256 PUSH7 0x61696C6564A264 PUSH10 0x70667358221220208832 SELFBALANCE 0x24 PUSH2 0xC0B 0xD6 0xB9 LT GASPRICE 0x27 PUSH26 0xF50CD9631E49BF8AEA6313043161256161B064736F6C63430008 MULMOD STOP CALLER ","sourceMap":"971:4758:30:-:0;;;1332:4:5;1289:48;;;;;;;;;1248:1:30;1215:34;;1311:28;;;;;;;:::i;:::-;;;;;;;;;;;;;1301:39;;;;;;1255:85;;;;;1408:24;;;;;;;:::i;:::-;;;;;;;;;;;;;1398:35;;;;;;1346:87;;;;;2190:53;;;;;;;;;;2214:22;:20;;;:22;;:::i;:::-;971:4758;;5928:279:4;5996:13;;;;;;;;;;;5995:14;5987:66;;;;;;;;;;;;:::i;:::-;;;;;;;;;6082:15;6067:30;;:12;;;;;;;;;;:30;;;6063:138;;;6128:15;6113:12;;:30;;;;;;;;;;;;;;;;;;6162:28;6174:15;6162:28;;;;;;:::i;:::-;;;;;;;;6063:138;5928:279::o;7:148:33:-;109:11;146:3;131:18;;7:148;;;;:::o;161:158::-;301:10;297:1;289:6;285:14;278:34;161:158;:::o;325:400::-;485:3;506:84;588:1;583:3;506:84;:::i;:::-;499:91;;599:93;688:3;599:93;:::i;:::-;717:1;712:3;708:11;701:18;;325:400;;;:::o;731:381::-;916:3;938:148;1082:3;938:148;:::i;:::-;931:155;;1103:3;1096:10;;731:381;;;:::o;1118:154::-;1258:6;1254:1;1246:6;1242:14;1235:30;1118:154;:::o;1278:400::-;1438:3;1459:84;1541:1;1536:3;1459:84;:::i;:::-;1452:91;;1552:93;1641:3;1552:93;:::i;:::-;1670:1;1665:3;1661:11;1654:18;;1278:400;;;:::o;1684:381::-;1869:3;1891:148;2035:3;1891:148;:::i;:::-;1884:155;;2056:3;2049:10;;1684:381;;;:::o;2071:169::-;2155:11;2189:6;2184:3;2177:19;2229:4;2224:3;2220:14;2205:29;;2071:169;;;;:::o;2246:226::-;2386:34;2382:1;2374:6;2370:14;2363:58;2455:9;2450:2;2442:6;2438:15;2431:34;2246:226;:::o;2478:366::-;2620:3;2641:67;2705:2;2700:3;2641:67;:::i;:::-;2634:74;;2717:93;2806:3;2717:93;:::i;:::-;2835:2;2830:3;2826:12;2819:19;;2478:366;;;:::o;2850:419::-;3016:4;3054:2;3043:9;3039:18;3031:26;;3103:9;3097:4;3093:20;3089:1;3078:9;3074:17;3067:47;3131:131;3257:4;3131:131;:::i;:::-;3123:139;;2850:419;;;:::o;3275:86::-;3310:7;3350:4;3343:5;3339:16;3328:27;;3275:86;;;:::o;3367:112::-;3450:22;3466:5;3450:22;:::i;:::-;3445:3;3438:35;3367:112;;:::o;3485:214::-;3574:4;3612:2;3601:9;3597:18;3589:26;;3625:67;3689:1;3678:9;3674:17;3665:6;3625:67;:::i;:::-;3485:214;;;;:::o;971:4758:30:-;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@DOMAIN_SEPARATOR_2235":{"entryPoint":2634,"id":2235,"parameterSlots":0,"returnSlots":1},"@_5416":{"entryPoint":null,"id":5416,"parameterSlots":0,"returnSlots":0},"@_5430":{"entryPoint":null,"id":5430,"parameterSlots":0,"returnSlots":0},"@_EIP712NameHash_3593":{"entryPoint":9663,"id":3593,"parameterSlots":0,"returnSlots":1},"@_EIP712VersionHash_3602":{"entryPoint":9674,"id":3602,"parameterSlots":0,"returnSlots":1},"@__EIP712_init_unchained_3526":{"entryPoint":11337,"id":3526,"parameterSlots":2,"returnSlots":0},"@__ERC20Burnable_init_1660":{"entryPoint":8081,"id":1660,"parameterSlots":0,"returnSlots":0},"@__ERC20Permit_init_2127":{"entryPoint":8421,"id":2127,"parameterSlots":1,"returnSlots":0},"@__ERC20Snapshot_init_1723":{"entryPoint":8162,"id":1723,"parameterSlots":0,"returnSlots":0},"@__ERC20_init_999":{"entryPoint":7988,"id":999,"parameterSlots":2,"returnSlots":0},"@__ERC20_init_unchained_1017":{"entryPoint":11003,"id":1017,"parameterSlots":2,"returnSlots":0},"@__Ownable_init_26":{"entryPoint":8243,"id":26,"parameterSlots":0,"returnSlots":0},"@__Ownable_init_unchained_37":{"entryPoint":11132,"id":37,"parameterSlots":0,"returnSlots":0},"@__Pausable_init_856":{"entryPoint":8332,"id":856,"parameterSlots":0,"returnSlots":0},"@__Pausable_init_unchained_866":{"entryPoint":11229,"id":866,"parameterSlots":0,"returnSlots":0},"@__UUPSUpgradeable_init_707":{"entryPoint":8566,"id":707,"parameterSlots":0,"returnSlots":0},"@_afterTokenTransfer_1558":{"entryPoint":12152,"id":1558,"parameterSlots":3,"returnSlots":0},"@_approve_1493":{"entryPoint":5879,"id":1493,"parameterSlots":3,"returnSlots":0},"@_authorizeUpgrade_5722":{"entryPoint":7029,"id":5722,"parameterSlots":1,"returnSlots":0},"@_beforeTokenTransfer_1547":{"entryPoint":12840,"id":1547,"parameterSlots":3,"returnSlots":0},"@_beforeTokenTransfer_1905":{"entryPoint":12610,"id":1905,"parameterSlots":3,"returnSlots":0},"@_beforeTokenTransfer_5713":{"entryPoint":12128,"id":5713,"parameterSlots":3,"returnSlots":0},"@_buildDomainSeparator_3568":{"entryPoint":9685,"id":3568,"parameterSlots":3,"returnSlots":1},"@_burn_1448":{"entryPoint":9992,"id":1448,"parameterSlots":2,"returnSlots":0},"@_checkOwner_68":{"entryPoint":6338,"id":68,"parameterSlots":0,"returnSlots":0},"@_domainSeparatorV4_3541":{"entryPoint":6878,"id":3541,"parameterSlots":0,"returnSlots":1},"@_functionDelegateCall_504":{"entryPoint":12236,"id":504,"parameterSlots":2,"returnSlots":1},"@_getCurrentSnapshotId_1794":{"entryPoint":10800,"id":1794,"parameterSlots":0,"returnSlots":1},"@_getImplementation_188":{"entryPoint":6942,"id":188,"parameterSlots":0,"returnSlots":1},"@_getMultiSig_5690":{"entryPoint":6650,"id":5690,"parameterSlots":1,"returnSlots":1},"@_hashTypedDataV4_3584":{"entryPoint":8819,"id":3584,"parameterSlots":1,"returnSlots":1},"@_isVerified_5677":{"entryPoint":6464,"id":5677,"parameterSlots":1,"returnSlots":1},"@_lastSnapshotId_2048":{"entryPoint":13151,"id":2048,"parameterSlots":1,"returnSlots":1},"@_mint_1376":{"entryPoint":10456,"id":1376,"parameterSlots":2,"returnSlots":0},"@_msgSender_2773":{"entryPoint":5871,"id":2773,"parameterSlots":0,"returnSlots":1},"@_requireNotPaused_903":{"entryPoint":12536,"id":903,"parameterSlots":0,"returnSlots":0},"@_revert_2589":{"entryPoint":12948,"id":2589,"parameterSlots":2,"returnSlots":0},"@_setImplementation_212":{"entryPoint":9763,"id":212,"parameterSlots":1,"returnSlots":0},"@_spendAllowance_1536":{"entryPoint":8888,"id":1536,"parameterSlots":3,"returnSlots":0},"@_throwError_3151":{"entryPoint":11762,"id":3151,"parameterSlots":1,"returnSlots":0},"@_transferOwnership_125":{"entryPoint":7709,"id":125,"parameterSlots":1,"returnSlots":0},"@_transfer_1319":{"entryPoint":9028,"id":1319,"parameterSlots":3,"returnSlots":0},"@_updateAccountSnapshot_1975":{"entryPoint":12845,"id":1975,"parameterSlots":1,"returnSlots":0},"@_updateSnapshot_2023":{"entryPoint":13028,"id":2023,"parameterSlots":2,"returnSlots":0},"@_updateTotalSupplySnapshot_1985":{"entryPoint":12928,"id":1985,"parameterSlots":0,"returnSlots":0},"@_upgradeToAndCallUUPS_308":{"entryPoint":7040,"id":308,"parameterSlots":3,"returnSlots":0},"@_upgradeToAndCall_255":{"entryPoint":9948,"id":255,"parameterSlots":3,"returnSlots":0},"@_upgradeTo_227":{"entryPoint":12157,"id":227,"parameterSlots":1,"returnSlots":0},"@_useNonce_2264":{"entryPoint":8724,"id":2264,"parameterSlots":1,"returnSlots":1},"@_valueAt_1960":{"entryPoint":7463,"id":1960,"parameterSlots":2,"returnSlots":2},"@allowance_1114":{"entryPoint":5604,"id":1114,"parameterSlots":2,"returnSlots":1},"@approve_1139":{"entryPoint":2129,"id":1139,"parameterSlots":2,"returnSlots":1},"@average_3674":{"entryPoint":12464,"id":3674,"parameterSlots":2,"returnSlots":1},"@balanceOfAt_1823":{"entryPoint":3139,"id":1823,"parameterSlots":2,"returnSlots":1},"@balanceOf_1071":{"entryPoint":3853,"id":1071,"parameterSlots":1,"returnSlots":1},"@burnFrom_1700":{"entryPoint":7907,"id":1700,"parameterSlots":2,"returnSlots":0},"@burnFrom_5492":{"entryPoint":3946,"id":5492,"parameterSlots":2,"returnSlots":0},"@burn_1679":{"entryPoint":7421,"id":1679,"parameterSlots":1,"returnSlots":0},"@burn_5474":{"entryPoint":3097,"id":5474,"parameterSlots":1,"returnSlots":0},"@current_2806":{"entryPoint":7939,"id":2806,"parameterSlots":1,"returnSlots":1},"@decimals_1047":{"entryPoint":2574,"id":1047,"parameterSlots":0,"returnSlots":1},"@decreaseAllowance_1242":{"entryPoint":4787,"id":1242,"parameterSlots":2,"returnSlots":1},"@findUpperBound_2682":{"entryPoint":10817,"id":2682,"parameterSlots":2,"returnSlots":1},"@getAddressSlot_2888":{"entryPoint":9743,"id":2888,"parameterSlots":1,"returnSlots":1},"@getBooleanSlot_2899":{"entryPoint":9753,"id":2899,"parameterSlots":1,"returnSlots":1},"@getProfileAddress_5735":{"entryPoint":2583,"id":5735,"parameterSlots":0,"returnSlots":1},"@getUint256Slot_2921":{"entryPoint":12830,"id":2921,"parameterSlots":1,"returnSlots":1},"@increaseAllowance_1201":{"entryPoint":3042,"id":1201,"parameterSlots":2,"returnSlots":1},"@increment_2820":{"entryPoint":11462,"id":2820,"parameterSlots":1,"returnSlots":0},"@initialize_5522":{"entryPoint":4049,"id":5522,"parameterSlots":0,"returnSlots":0},"@isContract_2324":{"entryPoint":7953,"id":2324,"parameterSlots":1,"returnSlots":1},"@mintTo_5459":{"entryPoint":3117,"id":5459,"parameterSlots":2,"returnSlots":0},"@mint_5660":{"entryPoint":7441,"id":5660,"parameterSlots":2,"returnSlots":0},"@name_1027":{"entryPoint":1983,"id":1027,"parameterSlots":0,"returnSlots":1},"@nonces_2224":{"entryPoint":3968,"id":2224,"parameterSlots":1,"returnSlots":1},"@owner_54":{"entryPoint":8647,"id":54,"parameterSlots":0,"returnSlots":1},"@owner_5618":{"entryPoint":4577,"id":5618,"parameterSlots":0,"returnSlots":1},"@paused_891":{"entryPoint":3830,"id":891,"parameterSlots":0,"returnSlots":1},"@permit_2208":{"entryPoint":5282,"id":2208,"parameterSlots":7,"returnSlots":0},"@proxiableUUID_770":{"entryPoint":3568,"id":770,"parameterSlots":0,"returnSlots":1},"@recover_3398":{"entryPoint":8845,"id":3398,"parameterSlots":4,"returnSlots":1},"@renounceOwnership_82":{"entryPoint":3926,"id":82,"parameterSlots":0,"returnSlots":0},"@setProfileAddress_5444":{"entryPoint":3753,"id":5444,"parameterSlots":1,"returnSlots":0},"@symbol_1037":{"entryPoint":4592,"id":1037,"parameterSlots":0,"returnSlots":1},"@toTypedDataHash_3457":{"entryPoint":11484,"id":3457,"parameterSlots":2,"returnSlots":1},"@totalSupplyAt_1847":{"entryPoint":4738,"id":1847,"parameterSlots":1,"returnSlots":1},"@totalSupply_1057":{"entryPoint":2164,"id":1057,"parameterSlots":0,"returnSlots":1},"@transferFrom_1172":{"entryPoint":6831,"id":1172,"parameterSlots":3,"returnSlots":1},"@transferFrom_5607":{"entryPoint":2174,"id":5607,"parameterSlots":3,"returnSlots":1},"@transferOwnership_105":{"entryPoint":5739,"id":105,"parameterSlots":1,"returnSlots":0},"@transfer_1096":{"entryPoint":8689,"id":1096,"parameterSlots":2,"returnSlots":1},"@transfer_5573":{"entryPoint":4906,"id":5573,"parameterSlots":2,"returnSlots":1},"@tryRecover_3365":{"entryPoint":11535,"id":3365,"parameterSlots":4,"returnSlots":2},"@unsafeAccess_2745":{"entryPoint":12502,"id":2745,"parameterSlots":2,"returnSlots":1},"@upgradeToAndCall_813":{"entryPoint":3251,"id":813,"parameterSlots":2,"returnSlots":0},"@upgradeTo_792":{"entryPoint":2649,"id":792,"parameterSlots":1,"returnSlots":0},"@verifyCallResult_2569":{"entryPoint":12796,"id":2569,"parameterSlots":3,"returnSlots":1},"abi_decode_available_length_t_bytes_memory_ptr":{"entryPoint":14558,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_address":{"entryPoint":13856,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_address_payable":{"entryPoint":14803,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool_fromMemory":{"entryPoint":17680,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes32":{"entryPoint":14936,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes32_fromMemory":{"entryPoint":17746,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes_memory_ptr":{"entryPoint":14624,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":13900,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint8":{"entryPoint":14892,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":14271,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address_payable":{"entryPoint":14824,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":15119,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":14039,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32":{"entryPoint":14957,"id":null,"parameterSlots":2,"returnSlots":7},"abi_decode_tuple_t_addresst_bytes_memory_ptr":{"entryPoint":14670,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":13921,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":17701,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32_fromMemory":{"entryPoint":17767,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":14316,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":14177,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":13997,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_fromStack":{"entryPoint":14229,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack":{"entryPoint":19837,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":20561,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_rational_1_by_1_to_t_uint8_fromStack":{"entryPoint":16026,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":13672,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be_to_t_string_memory_ptr_fromStack":{"entryPoint":20072,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_031e0835d070e7bbd2c8dcce466eadb8c6b9fd22432b0357ab8c37bd9a385940_to_t_string_memory_ptr_fromStack":{"entryPoint":18253,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack":{"entryPoint":18846,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd_to_t_string_memory_ptr_fromStack":{"entryPoint":19513,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77_to_t_string_memory_ptr_fromStack":{"entryPoint":20180,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_16f4986ff02b8ec65b8228ad4d9cfee3779ad1f090ec2a1e15009246e11bf55f_to_t_string_memory_ptr_fromStack":{"entryPoint":15321,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack":{"entryPoint":17190,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack":{"entryPoint":17482,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_2d3c3eb826a2c156a3f5fda2e8c203bbbb959ef4be16522182f3c73c9ba3575d_to_t_string_memory_ptr_fromStack":{"entryPoint":16585,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":19792,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb_to_t_string_memory_ptr_fromStack":{"entryPoint":15467,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack":{"entryPoint":18554,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd_to_t_string_memory_ptr_fromStack":{"entryPoint":16839,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack":{"entryPoint":18992,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd_to_t_string_memory_ptr_fromStack":{"entryPoint":20326,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434_to_t_string_memory_ptr_fromStack":{"entryPoint":15613,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_5bea970c8c5b2c16f9984fa1b49104cd8ac4cec162360b95949413a68a6073f9_to_t_string_memory_ptr_fromStack":{"entryPoint":16731,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_60b31d48ddf4a3a7e36589333cb85fe8601f83d35365f582cb69e77a74e2c530_to_t_string_memory_ptr_fromStack":{"entryPoint":16293,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4_to_t_string_memory_ptr_fromStack":{"entryPoint":15759,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a_to_t_string_memory_ptr_fromStack":{"entryPoint":20770,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_6a474febbac6df5530c874e2802245fb2d8492a7ff2734cf08d72da489a71589_to_t_string_memory_ptr_fromStack":{"entryPoint":16439,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c_to_t_string_memory_ptr_fromStack":{"entryPoint":18037,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack":{"entryPoint":15905,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24_to_t_string_memory_ptr_fromStack":{"entryPoint":17891,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124_to_t_string_memory_ptr_fromStack":{"entryPoint":17044,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65_to_t_string_memory_ptr_fromStack":{"entryPoint":19221,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack":{"entryPoint":17590,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f_to_t_string_memory_ptr_fromStack":{"entryPoint":19367,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520_to_t_string_memory_ptr_fromStack":{"entryPoint":20472,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack":{"entryPoint":18700,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack":{"entryPoint":17336,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack":{"entryPoint":18446,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_d85a3cdc203c5cdc6dda93c12cd017145671a0ed9058a16c7aa00b8398a4a8e6_to_t_string_memory_ptr_fromStack":{"entryPoint":18145,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack":{"entryPoint":16147,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e_to_t_string_memory_ptr_fromStack":{"entryPoint":19621,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":13534,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint8_to_t_uint8_fromStack":{"entryPoint":14135,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":20610,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_t_bytes32_t_bytes32__to_t_string_memory_ptr_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed":{"entryPoint":19860,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":14192,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":14012,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":14244,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":16906,"id":null,"parameterSlots":7,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed":{"entryPoint":19059,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed":{"entryPoint":19915,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed":{"entryPoint":16041,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":13729,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":20107,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_031e0835d070e7bbd2c8dcce466eadb8c6b9fd22432b0357ab8c37bd9a385940__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":18288,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":18881,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":19548,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":20215,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_16f4986ff02b8ec65b8228ad4d9cfee3779ad1f090ec2a1e15009246e11bf55f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":15356,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":17225,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":17517,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_2d3c3eb826a2c156a3f5fda2e8c203bbbb959ef4be16522182f3c73c9ba3575d__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":16620,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":15502,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":18589,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":16874,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":19027,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":20361,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":15648,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_5bea970c8c5b2c16f9984fa1b49104cd8ac4cec162360b95949413a68a6073f9__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":16766,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_60b31d48ddf4a3a7e36589333cb85fe8601f83d35365f582cb69e77a74e2c530__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":16328,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":15794,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":20805,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6a474febbac6df5530c874e2802245fb2d8492a7ff2734cf08d72da489a71589__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":16474,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":18072,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":15940,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":17926,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":17079,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":19256,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":17625,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":19402,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":20507,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":18735,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":17371,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":18481,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d85a3cdc203c5cdc6dda93c12cd017145671a0ed9058a16c7aa00b8398a4a8e6__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":18180,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":16182,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":19656,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":13549,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed":{"entryPoint":14150,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":14467,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":13763,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_bytes_memory_ptr":{"entryPoint":14494,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_bytes_memory_ptr":{"entryPoint":20539,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":13576,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":20550,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":13587,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":19740,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":13448,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":20680,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":19688,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":13815,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_address_payable":{"entryPoint":14762,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":13985,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":14219,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_rational_1_by_1":{"entryPoint":15972,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":13783,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":13391,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint8":{"entryPoint":14122,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_rational_1_by_1_to_t_uint8":{"entryPoint":15992,"id":null,"parameterSlots":1,"returnSlots":1},"copy_calldata_to_memory":{"entryPoint":14543,"id":null,"parameterSlots":3,"returnSlots":0},"copy_memory_to_memory":{"entryPoint":13604,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":15230,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":14418,"id":null,"parameterSlots":2,"returnSlots":0},"identity":{"entryPoint":15982,"id":null,"parameterSlots":1,"returnSlots":1},"leftAlign_t_bytes32":{"entryPoint":19827,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":13401,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":20633,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x21":{"entryPoint":19984,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x22":{"entryPoint":15183,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":18320,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":14371,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":14361,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":14366,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":13778,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":13773,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":13655,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be":{"entryPoint":20031,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_031e0835d070e7bbd2c8dcce466eadb8c6b9fd22432b0357ab8c37bd9a385940":{"entryPoint":18212,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f":{"entryPoint":18767,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd":{"entryPoint":19434,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77":{"entryPoint":20139,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_16f4986ff02b8ec65b8228ad4d9cfee3779ad1f090ec2a1e15009246e11bf55f":{"entryPoint":15280,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe":{"entryPoint":17111,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029":{"entryPoint":17403,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_2d3c3eb826a2c156a3f5fda2e8c203bbbb959ef4be16522182f3c73c9ba3575d":{"entryPoint":16506,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541":{"entryPoint":19751,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb":{"entryPoint":15388,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe":{"entryPoint":18513,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd":{"entryPoint":16798,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6":{"entryPoint":18913,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd":{"entryPoint":20247,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434":{"entryPoint":15534,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_5bea970c8c5b2c16f9984fa1b49104cd8ac4cec162360b95949413a68a6073f9":{"entryPoint":16652,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_60b31d48ddf4a3a7e36589333cb85fe8601f83d35365f582cb69e77a74e2c530":{"entryPoint":16214,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4":{"entryPoint":15680,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a":{"entryPoint":20729,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_6a474febbac6df5530c874e2802245fb2d8492a7ff2734cf08d72da489a71589":{"entryPoint":16360,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c":{"entryPoint":17958,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759":{"entryPoint":15826,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24":{"entryPoint":17812,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124":{"entryPoint":17003,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65":{"entryPoint":19142,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe":{"entryPoint":17549,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f":{"entryPoint":19288,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520":{"entryPoint":20393,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea":{"entryPoint":18621,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208":{"entryPoint":17257,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b":{"entryPoint":18367,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_d85a3cdc203c5cdc6dda93c12cd017145671a0ed9058a16c7aa00b8398a4a8e6":{"entryPoint":18104,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8":{"entryPoint":16068,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e":{"entryPoint":19580,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":13833,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address_payable":{"entryPoint":14780,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bool":{"entryPoint":17657,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes32":{"entryPoint":14913,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":13877,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint8":{"entryPoint":14869,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:54950:33","statements":[{"body":{"nodeType":"YulBlock","src":"52:32:33","statements":[{"nodeType":"YulAssignment","src":"62:16:33","value":{"name":"value","nodeType":"YulIdentifier","src":"73:5:33"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"62:7:33"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"34:5:33","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"44:7:33","type":""}],"src":"7:77:33"},{"body":{"nodeType":"YulBlock","src":"118:152:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"135:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"138:77:33","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"128:6:33"},"nodeType":"YulFunctionCall","src":"128:88:33"},"nodeType":"YulExpressionStatement","src":"128:88:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"232:1:33","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"235:4:33","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"225:6:33"},"nodeType":"YulFunctionCall","src":"225:15:33"},"nodeType":"YulExpressionStatement","src":"225:15:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"256:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"259:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"249:6:33"},"nodeType":"YulFunctionCall","src":"249:15:33"},"nodeType":"YulExpressionStatement","src":"249:15:33"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"90:180:33"},{"body":{"nodeType":"YulBlock","src":"320:261:33","statements":[{"nodeType":"YulAssignment","src":"330:25:33","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"353:1:33"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"335:17:33"},"nodeType":"YulFunctionCall","src":"335:20:33"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"330:1:33"}]},{"nodeType":"YulAssignment","src":"364:25:33","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"387:1:33"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"369:17:33"},"nodeType":"YulFunctionCall","src":"369:20:33"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"364:1:33"}]},{"body":{"nodeType":"YulBlock","src":"527:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"529:16:33"},"nodeType":"YulFunctionCall","src":"529:18:33"},"nodeType":"YulExpressionStatement","src":"529:18:33"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"448:1:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"455:66:33","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"},{"name":"y","nodeType":"YulIdentifier","src":"523:1:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"451:3:33"},"nodeType":"YulFunctionCall","src":"451:74:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"445:2:33"},"nodeType":"YulFunctionCall","src":"445:81:33"},"nodeType":"YulIf","src":"442:107:33"},{"nodeType":"YulAssignment","src":"559:16:33","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"570:1:33"},{"name":"y","nodeType":"YulIdentifier","src":"573:1:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"566:3:33"},"nodeType":"YulFunctionCall","src":"566:9:33"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"559:3:33"}]}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"307:1:33","type":""},{"name":"y","nodeType":"YulTypedName","src":"310:1:33","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"316:3:33","type":""}],"src":"276:305:33"},{"body":{"nodeType":"YulBlock","src":"652:53:33","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"669:3:33"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"692:5:33"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"674:17:33"},"nodeType":"YulFunctionCall","src":"674:24:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"662:6:33"},"nodeType":"YulFunctionCall","src":"662:37:33"},"nodeType":"YulExpressionStatement","src":"662:37:33"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"640:5:33","type":""},{"name":"pos","nodeType":"YulTypedName","src":"647:3:33","type":""}],"src":"587:118:33"},{"body":{"nodeType":"YulBlock","src":"809:124:33","statements":[{"nodeType":"YulAssignment","src":"819:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"831:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"842:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"827:3:33"},"nodeType":"YulFunctionCall","src":"827:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"819:4:33"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"899:6:33"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"912:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"923:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"908:3:33"},"nodeType":"YulFunctionCall","src":"908:17:33"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"855:43:33"},"nodeType":"YulFunctionCall","src":"855:71:33"},"nodeType":"YulExpressionStatement","src":"855:71:33"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"781:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"793:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"804:4:33","type":""}],"src":"711:222:33"},{"body":{"nodeType":"YulBlock","src":"998:40:33","statements":[{"nodeType":"YulAssignment","src":"1009:22:33","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1025:5:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1019:5:33"},"nodeType":"YulFunctionCall","src":"1019:12:33"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1009:6:33"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"981:5:33","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"991:6:33","type":""}],"src":"939:99:33"},{"body":{"nodeType":"YulBlock","src":"1140:73:33","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1157:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"1162:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1150:6:33"},"nodeType":"YulFunctionCall","src":"1150:19:33"},"nodeType":"YulExpressionStatement","src":"1150:19:33"},{"nodeType":"YulAssignment","src":"1178:29:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1197:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"1202:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1193:3:33"},"nodeType":"YulFunctionCall","src":"1193:14:33"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"1178:11:33"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"1112:3:33","type":""},{"name":"length","nodeType":"YulTypedName","src":"1117:6:33","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"1128:11:33","type":""}],"src":"1044:169:33"},{"body":{"nodeType":"YulBlock","src":"1268:258:33","statements":[{"nodeType":"YulVariableDeclaration","src":"1278:10:33","value":{"kind":"number","nodeType":"YulLiteral","src":"1287:1:33","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1282:1:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"1347:63:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1372:3:33"},{"name":"i","nodeType":"YulIdentifier","src":"1377:1:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1368:3:33"},"nodeType":"YulFunctionCall","src":"1368:11:33"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1391:3:33"},{"name":"i","nodeType":"YulIdentifier","src":"1396:1:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1387:3:33"},"nodeType":"YulFunctionCall","src":"1387:11:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1381:5:33"},"nodeType":"YulFunctionCall","src":"1381:18:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1361:6:33"},"nodeType":"YulFunctionCall","src":"1361:39:33"},"nodeType":"YulExpressionStatement","src":"1361:39:33"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1308:1:33"},{"name":"length","nodeType":"YulIdentifier","src":"1311:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1305:2:33"},"nodeType":"YulFunctionCall","src":"1305:13:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1319:19:33","statements":[{"nodeType":"YulAssignment","src":"1321:15:33","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1330:1:33"},{"kind":"number","nodeType":"YulLiteral","src":"1333:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1326:3:33"},"nodeType":"YulFunctionCall","src":"1326:10:33"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1321:1:33"}]}]},"pre":{"nodeType":"YulBlock","src":"1301:3:33","statements":[]},"src":"1297:113:33"},{"body":{"nodeType":"YulBlock","src":"1444:76:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1494:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"1499:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1490:3:33"},"nodeType":"YulFunctionCall","src":"1490:16:33"},{"kind":"number","nodeType":"YulLiteral","src":"1508:1:33","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1483:6:33"},"nodeType":"YulFunctionCall","src":"1483:27:33"},"nodeType":"YulExpressionStatement","src":"1483:27:33"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1425:1:33"},{"name":"length","nodeType":"YulIdentifier","src":"1428:6:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1422:2:33"},"nodeType":"YulFunctionCall","src":"1422:13:33"},"nodeType":"YulIf","src":"1419:101:33"}]},"name":"copy_memory_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"1250:3:33","type":""},{"name":"dst","nodeType":"YulTypedName","src":"1255:3:33","type":""},{"name":"length","nodeType":"YulTypedName","src":"1260:6:33","type":""}],"src":"1219:307:33"},{"body":{"nodeType":"YulBlock","src":"1580:54:33","statements":[{"nodeType":"YulAssignment","src":"1590:38:33","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1608:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"1615:2:33","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1604:3:33"},"nodeType":"YulFunctionCall","src":"1604:14:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1624:2:33","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1620:3:33"},"nodeType":"YulFunctionCall","src":"1620:7:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1600:3:33"},"nodeType":"YulFunctionCall","src":"1600:28:33"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"1590:6:33"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1563:5:33","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"1573:6:33","type":""}],"src":"1532:102:33"},{"body":{"nodeType":"YulBlock","src":"1732:272:33","statements":[{"nodeType":"YulVariableDeclaration","src":"1742:53:33","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1789:5:33"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"1756:32:33"},"nodeType":"YulFunctionCall","src":"1756:39:33"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"1746:6:33","type":""}]},{"nodeType":"YulAssignment","src":"1804:78:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1870:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"1875:6:33"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"1811:58:33"},"nodeType":"YulFunctionCall","src":"1811:71:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"1804:3:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1917:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"1924:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1913:3:33"},"nodeType":"YulFunctionCall","src":"1913:16:33"},{"name":"pos","nodeType":"YulIdentifier","src":"1931:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"1936:6:33"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"1891:21:33"},"nodeType":"YulFunctionCall","src":"1891:52:33"},"nodeType":"YulExpressionStatement","src":"1891:52:33"},{"nodeType":"YulAssignment","src":"1952:46:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1963:3:33"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1990:6:33"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"1968:21:33"},"nodeType":"YulFunctionCall","src":"1968:29:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1959:3:33"},"nodeType":"YulFunctionCall","src":"1959:39:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"1952:3:33"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1713:5:33","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1720:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"1728:3:33","type":""}],"src":"1640:364:33"},{"body":{"nodeType":"YulBlock","src":"2128:195:33","statements":[{"nodeType":"YulAssignment","src":"2138:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2150:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"2161:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2146:3:33"},"nodeType":"YulFunctionCall","src":"2146:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2138:4:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2185:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"2196:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2181:3:33"},"nodeType":"YulFunctionCall","src":"2181:17:33"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"2204:4:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"2210:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2200:3:33"},"nodeType":"YulFunctionCall","src":"2200:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2174:6:33"},"nodeType":"YulFunctionCall","src":"2174:47:33"},"nodeType":"YulExpressionStatement","src":"2174:47:33"},{"nodeType":"YulAssignment","src":"2230:86:33","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2302:6:33"},{"name":"tail","nodeType":"YulIdentifier","src":"2311:4:33"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"2238:63:33"},"nodeType":"YulFunctionCall","src":"2238:78:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2230:4:33"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2100:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2112:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2123:4:33","type":""}],"src":"2010:313:33"},{"body":{"nodeType":"YulBlock","src":"2369:35:33","statements":[{"nodeType":"YulAssignment","src":"2379:19:33","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2395:2:33","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2389:5:33"},"nodeType":"YulFunctionCall","src":"2389:9:33"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2379:6:33"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"2362:6:33","type":""}],"src":"2329:75:33"},{"body":{"nodeType":"YulBlock","src":"2499:28:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2516:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2519:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2509:6:33"},"nodeType":"YulFunctionCall","src":"2509:12:33"},"nodeType":"YulExpressionStatement","src":"2509:12:33"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"2410:117:33"},{"body":{"nodeType":"YulBlock","src":"2622:28:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2639:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2642:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2632:6:33"},"nodeType":"YulFunctionCall","src":"2632:12:33"},"nodeType":"YulExpressionStatement","src":"2632:12:33"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"2533:117:33"},{"body":{"nodeType":"YulBlock","src":"2701:81:33","statements":[{"nodeType":"YulAssignment","src":"2711:65:33","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2726:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"2733:42:33","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2722:3:33"},"nodeType":"YulFunctionCall","src":"2722:54:33"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2711:7:33"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2683:5:33","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2693:7:33","type":""}],"src":"2656:126:33"},{"body":{"nodeType":"YulBlock","src":"2833:51:33","statements":[{"nodeType":"YulAssignment","src":"2843:35:33","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2872:5:33"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"2854:17:33"},"nodeType":"YulFunctionCall","src":"2854:24:33"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2843:7:33"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2815:5:33","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2825:7:33","type":""}],"src":"2788:96:33"},{"body":{"nodeType":"YulBlock","src":"2933:79:33","statements":[{"body":{"nodeType":"YulBlock","src":"2990:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2999:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3002:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2992:6:33"},"nodeType":"YulFunctionCall","src":"2992:12:33"},"nodeType":"YulExpressionStatement","src":"2992:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2956:5:33"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2981:5:33"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"2963:17:33"},"nodeType":"YulFunctionCall","src":"2963:24:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2953:2:33"},"nodeType":"YulFunctionCall","src":"2953:35:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2946:6:33"},"nodeType":"YulFunctionCall","src":"2946:43:33"},"nodeType":"YulIf","src":"2943:63:33"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2926:5:33","type":""}],"src":"2890:122:33"},{"body":{"nodeType":"YulBlock","src":"3070:87:33","statements":[{"nodeType":"YulAssignment","src":"3080:29:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3102:6:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3089:12:33"},"nodeType":"YulFunctionCall","src":"3089:20:33"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"3080:5:33"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3145:5:33"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"3118:26:33"},"nodeType":"YulFunctionCall","src":"3118:33:33"},"nodeType":"YulExpressionStatement","src":"3118:33:33"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3048:6:33","type":""},{"name":"end","nodeType":"YulTypedName","src":"3056:3:33","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"3064:5:33","type":""}],"src":"3018:139:33"},{"body":{"nodeType":"YulBlock","src":"3206:79:33","statements":[{"body":{"nodeType":"YulBlock","src":"3263:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3272:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3275:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3265:6:33"},"nodeType":"YulFunctionCall","src":"3265:12:33"},"nodeType":"YulExpressionStatement","src":"3265:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3229:5:33"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3254:5:33"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"3236:17:33"},"nodeType":"YulFunctionCall","src":"3236:24:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3226:2:33"},"nodeType":"YulFunctionCall","src":"3226:35:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3219:6:33"},"nodeType":"YulFunctionCall","src":"3219:43:33"},"nodeType":"YulIf","src":"3216:63:33"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3199:5:33","type":""}],"src":"3163:122:33"},{"body":{"nodeType":"YulBlock","src":"3343:87:33","statements":[{"nodeType":"YulAssignment","src":"3353:29:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3375:6:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3362:12:33"},"nodeType":"YulFunctionCall","src":"3362:20:33"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"3353:5:33"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3418:5:33"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"3391:26:33"},"nodeType":"YulFunctionCall","src":"3391:33:33"},"nodeType":"YulExpressionStatement","src":"3391:33:33"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3321:6:33","type":""},{"name":"end","nodeType":"YulTypedName","src":"3329:3:33","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"3337:5:33","type":""}],"src":"3291:139:33"},{"body":{"nodeType":"YulBlock","src":"3519:391:33","statements":[{"body":{"nodeType":"YulBlock","src":"3565:83:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3567:77:33"},"nodeType":"YulFunctionCall","src":"3567:79:33"},"nodeType":"YulExpressionStatement","src":"3567:79:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3540:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"3549:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3536:3:33"},"nodeType":"YulFunctionCall","src":"3536:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"3561:2:33","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3532:3:33"},"nodeType":"YulFunctionCall","src":"3532:32:33"},"nodeType":"YulIf","src":"3529:119:33"},{"nodeType":"YulBlock","src":"3658:117:33","statements":[{"nodeType":"YulVariableDeclaration","src":"3673:15:33","value":{"kind":"number","nodeType":"YulLiteral","src":"3687:1:33","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3677:6:33","type":""}]},{"nodeType":"YulAssignment","src":"3702:63:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3737:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"3748:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3733:3:33"},"nodeType":"YulFunctionCall","src":"3733:22:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3757:7:33"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"3712:20:33"},"nodeType":"YulFunctionCall","src":"3712:53:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3702:6:33"}]}]},{"nodeType":"YulBlock","src":"3785:118:33","statements":[{"nodeType":"YulVariableDeclaration","src":"3800:16:33","value":{"kind":"number","nodeType":"YulLiteral","src":"3814:2:33","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3804:6:33","type":""}]},{"nodeType":"YulAssignment","src":"3830:63:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3865:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"3876:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3861:3:33"},"nodeType":"YulFunctionCall","src":"3861:22:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3885:7:33"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"3840:20:33"},"nodeType":"YulFunctionCall","src":"3840:53:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3830:6:33"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3481:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3492:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3504:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3512:6:33","type":""}],"src":"3436:474:33"},{"body":{"nodeType":"YulBlock","src":"3958:48:33","statements":[{"nodeType":"YulAssignment","src":"3968:32:33","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3993:5:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3986:6:33"},"nodeType":"YulFunctionCall","src":"3986:13:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3979:6:33"},"nodeType":"YulFunctionCall","src":"3979:21:33"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3968:7:33"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3940:5:33","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3950:7:33","type":""}],"src":"3916:90:33"},{"body":{"nodeType":"YulBlock","src":"4071:50:33","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4088:3:33"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4108:5:33"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"4093:14:33"},"nodeType":"YulFunctionCall","src":"4093:21:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4081:6:33"},"nodeType":"YulFunctionCall","src":"4081:34:33"},"nodeType":"YulExpressionStatement","src":"4081:34:33"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4059:5:33","type":""},{"name":"pos","nodeType":"YulTypedName","src":"4066:3:33","type":""}],"src":"4012:109:33"},{"body":{"nodeType":"YulBlock","src":"4219:118:33","statements":[{"nodeType":"YulAssignment","src":"4229:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4241:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"4252:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4237:3:33"},"nodeType":"YulFunctionCall","src":"4237:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4229:4:33"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4303:6:33"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4316:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"4327:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4312:3:33"},"nodeType":"YulFunctionCall","src":"4312:17:33"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"4265:37:33"},"nodeType":"YulFunctionCall","src":"4265:65:33"},"nodeType":"YulExpressionStatement","src":"4265:65:33"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4191:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4203:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4214:4:33","type":""}],"src":"4127:210:33"},{"body":{"nodeType":"YulBlock","src":"4443:519:33","statements":[{"body":{"nodeType":"YulBlock","src":"4489:83:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"4491:77:33"},"nodeType":"YulFunctionCall","src":"4491:79:33"},"nodeType":"YulExpressionStatement","src":"4491:79:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4464:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"4473:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4460:3:33"},"nodeType":"YulFunctionCall","src":"4460:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"4485:2:33","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4456:3:33"},"nodeType":"YulFunctionCall","src":"4456:32:33"},"nodeType":"YulIf","src":"4453:119:33"},{"nodeType":"YulBlock","src":"4582:117:33","statements":[{"nodeType":"YulVariableDeclaration","src":"4597:15:33","value":{"kind":"number","nodeType":"YulLiteral","src":"4611:1:33","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4601:6:33","type":""}]},{"nodeType":"YulAssignment","src":"4626:63:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4661:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"4672:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4657:3:33"},"nodeType":"YulFunctionCall","src":"4657:22:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4681:7:33"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4636:20:33"},"nodeType":"YulFunctionCall","src":"4636:53:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4626:6:33"}]}]},{"nodeType":"YulBlock","src":"4709:118:33","statements":[{"nodeType":"YulVariableDeclaration","src":"4724:16:33","value":{"kind":"number","nodeType":"YulLiteral","src":"4738:2:33","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4728:6:33","type":""}]},{"nodeType":"YulAssignment","src":"4754:63:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4789:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"4800:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4785:3:33"},"nodeType":"YulFunctionCall","src":"4785:22:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4809:7:33"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4764:20:33"},"nodeType":"YulFunctionCall","src":"4764:53:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4754:6:33"}]}]},{"nodeType":"YulBlock","src":"4837:118:33","statements":[{"nodeType":"YulVariableDeclaration","src":"4852:16:33","value":{"kind":"number","nodeType":"YulLiteral","src":"4866:2:33","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4856:6:33","type":""}]},{"nodeType":"YulAssignment","src":"4882:63:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4917:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"4928:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4913:3:33"},"nodeType":"YulFunctionCall","src":"4913:22:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4937:7:33"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"4892:20:33"},"nodeType":"YulFunctionCall","src":"4892:53:33"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"4882:6:33"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4397:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4408:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4420:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4428:6:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4436:6:33","type":""}],"src":"4343:619:33"},{"body":{"nodeType":"YulBlock","src":"5011:43:33","statements":[{"nodeType":"YulAssignment","src":"5021:27:33","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5036:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"5043:4:33","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5032:3:33"},"nodeType":"YulFunctionCall","src":"5032:16:33"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"5021:7:33"}]}]},"name":"cleanup_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4993:5:33","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"5003:7:33","type":""}],"src":"4968:86:33"},{"body":{"nodeType":"YulBlock","src":"5121:51:33","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5138:3:33"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5159:5:33"}],"functionName":{"name":"cleanup_t_uint8","nodeType":"YulIdentifier","src":"5143:15:33"},"nodeType":"YulFunctionCall","src":"5143:22:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5131:6:33"},"nodeType":"YulFunctionCall","src":"5131:35:33"},"nodeType":"YulExpressionStatement","src":"5131:35:33"}]},"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5109:5:33","type":""},{"name":"pos","nodeType":"YulTypedName","src":"5116:3:33","type":""}],"src":"5060:112:33"},{"body":{"nodeType":"YulBlock","src":"5272:120:33","statements":[{"nodeType":"YulAssignment","src":"5282:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5294:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"5305:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5290:3:33"},"nodeType":"YulFunctionCall","src":"5290:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5282:4:33"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5358:6:33"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5371:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"5382:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5367:3:33"},"nodeType":"YulFunctionCall","src":"5367:17:33"}],"functionName":{"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"5318:39:33"},"nodeType":"YulFunctionCall","src":"5318:67:33"},"nodeType":"YulExpressionStatement","src":"5318:67:33"}]},"name":"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5244:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5256:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5267:4:33","type":""}],"src":"5178:214:33"},{"body":{"nodeType":"YulBlock","src":"5463:53:33","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5480:3:33"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5503:5:33"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"5485:17:33"},"nodeType":"YulFunctionCall","src":"5485:24:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5473:6:33"},"nodeType":"YulFunctionCall","src":"5473:37:33"},"nodeType":"YulExpressionStatement","src":"5473:37:33"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5451:5:33","type":""},{"name":"pos","nodeType":"YulTypedName","src":"5458:3:33","type":""}],"src":"5398:118:33"},{"body":{"nodeType":"YulBlock","src":"5620:124:33","statements":[{"nodeType":"YulAssignment","src":"5630:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5642:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"5653:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5638:3:33"},"nodeType":"YulFunctionCall","src":"5638:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5630:4:33"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5710:6:33"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5723:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"5734:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5719:3:33"},"nodeType":"YulFunctionCall","src":"5719:17:33"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"5666:43:33"},"nodeType":"YulFunctionCall","src":"5666:71:33"},"nodeType":"YulExpressionStatement","src":"5666:71:33"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5592:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5604:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5615:4:33","type":""}],"src":"5522:222:33"},{"body":{"nodeType":"YulBlock","src":"5795:32:33","statements":[{"nodeType":"YulAssignment","src":"5805:16:33","value":{"name":"value","nodeType":"YulIdentifier","src":"5816:5:33"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"5805:7:33"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5777:5:33","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"5787:7:33","type":""}],"src":"5750:77:33"},{"body":{"nodeType":"YulBlock","src":"5898:53:33","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5915:3:33"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5938:5:33"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"5920:17:33"},"nodeType":"YulFunctionCall","src":"5920:24:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5908:6:33"},"nodeType":"YulFunctionCall","src":"5908:37:33"},"nodeType":"YulExpressionStatement","src":"5908:37:33"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5886:5:33","type":""},{"name":"pos","nodeType":"YulTypedName","src":"5893:3:33","type":""}],"src":"5833:118:33"},{"body":{"nodeType":"YulBlock","src":"6055:124:33","statements":[{"nodeType":"YulAssignment","src":"6065:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6077:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"6088:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6073:3:33"},"nodeType":"YulFunctionCall","src":"6073:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6065:4:33"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6145:6:33"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6158:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"6169:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6154:3:33"},"nodeType":"YulFunctionCall","src":"6154:17:33"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"6101:43:33"},"nodeType":"YulFunctionCall","src":"6101:71:33"},"nodeType":"YulExpressionStatement","src":"6101:71:33"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6027:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6039:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6050:4:33","type":""}],"src":"5957:222:33"},{"body":{"nodeType":"YulBlock","src":"6251:263:33","statements":[{"body":{"nodeType":"YulBlock","src":"6297:83:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"6299:77:33"},"nodeType":"YulFunctionCall","src":"6299:79:33"},"nodeType":"YulExpressionStatement","src":"6299:79:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6272:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"6281:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6268:3:33"},"nodeType":"YulFunctionCall","src":"6268:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"6293:2:33","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6264:3:33"},"nodeType":"YulFunctionCall","src":"6264:32:33"},"nodeType":"YulIf","src":"6261:119:33"},{"nodeType":"YulBlock","src":"6390:117:33","statements":[{"nodeType":"YulVariableDeclaration","src":"6405:15:33","value":{"kind":"number","nodeType":"YulLiteral","src":"6419:1:33","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6409:6:33","type":""}]},{"nodeType":"YulAssignment","src":"6434:63:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6469:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"6480:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6465:3:33"},"nodeType":"YulFunctionCall","src":"6465:22:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6489:7:33"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"6444:20:33"},"nodeType":"YulFunctionCall","src":"6444:53:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6434:6:33"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6221:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6232:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6244:6:33","type":""}],"src":"6185:329:33"},{"body":{"nodeType":"YulBlock","src":"6586:263:33","statements":[{"body":{"nodeType":"YulBlock","src":"6632:83:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"6634:77:33"},"nodeType":"YulFunctionCall","src":"6634:79:33"},"nodeType":"YulExpressionStatement","src":"6634:79:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6607:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"6616:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6603:3:33"},"nodeType":"YulFunctionCall","src":"6603:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"6628:2:33","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6599:3:33"},"nodeType":"YulFunctionCall","src":"6599:32:33"},"nodeType":"YulIf","src":"6596:119:33"},{"nodeType":"YulBlock","src":"6725:117:33","statements":[{"nodeType":"YulVariableDeclaration","src":"6740:15:33","value":{"kind":"number","nodeType":"YulLiteral","src":"6754:1:33","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6744:6:33","type":""}]},{"nodeType":"YulAssignment","src":"6769:63:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6804:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"6815:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6800:3:33"},"nodeType":"YulFunctionCall","src":"6800:22:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6824:7:33"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"6779:20:33"},"nodeType":"YulFunctionCall","src":"6779:53:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6769:6:33"}]}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6556:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6567:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6579:6:33","type":""}],"src":"6520:329:33"},{"body":{"nodeType":"YulBlock","src":"6944:28:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6961:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6964:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6954:6:33"},"nodeType":"YulFunctionCall","src":"6954:12:33"},"nodeType":"YulExpressionStatement","src":"6954:12:33"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"6855:117:33"},{"body":{"nodeType":"YulBlock","src":"7067:28:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7084:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7087:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7077:6:33"},"nodeType":"YulFunctionCall","src":"7077:12:33"},"nodeType":"YulExpressionStatement","src":"7077:12:33"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulFunctionDefinition","src":"6978:117:33"},{"body":{"nodeType":"YulBlock","src":"7129:152:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7146:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7149:77:33","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7139:6:33"},"nodeType":"YulFunctionCall","src":"7139:88:33"},"nodeType":"YulExpressionStatement","src":"7139:88:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7243:1:33","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"7246:4:33","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7236:6:33"},"nodeType":"YulFunctionCall","src":"7236:15:33"},"nodeType":"YulExpressionStatement","src":"7236:15:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7267:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7270:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7260:6:33"},"nodeType":"YulFunctionCall","src":"7260:15:33"},"nodeType":"YulExpressionStatement","src":"7260:15:33"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"7101:180:33"},{"body":{"nodeType":"YulBlock","src":"7330:238:33","statements":[{"nodeType":"YulVariableDeclaration","src":"7340:58:33","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7362:6:33"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"7392:4:33"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"7370:21:33"},"nodeType":"YulFunctionCall","src":"7370:27:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7358:3:33"},"nodeType":"YulFunctionCall","src":"7358:40:33"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"7344:10:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"7509:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"7511:16:33"},"nodeType":"YulFunctionCall","src":"7511:18:33"},"nodeType":"YulExpressionStatement","src":"7511:18:33"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"7452:10:33"},{"kind":"number","nodeType":"YulLiteral","src":"7464:18:33","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7449:2:33"},"nodeType":"YulFunctionCall","src":"7449:34:33"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"7488:10:33"},{"name":"memPtr","nodeType":"YulIdentifier","src":"7500:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7485:2:33"},"nodeType":"YulFunctionCall","src":"7485:22:33"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"7446:2:33"},"nodeType":"YulFunctionCall","src":"7446:62:33"},"nodeType":"YulIf","src":"7443:88:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7547:2:33","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"7551:10:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7540:6:33"},"nodeType":"YulFunctionCall","src":"7540:22:33"},"nodeType":"YulExpressionStatement","src":"7540:22:33"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"7316:6:33","type":""},{"name":"size","nodeType":"YulTypedName","src":"7324:4:33","type":""}],"src":"7287:281:33"},{"body":{"nodeType":"YulBlock","src":"7615:88:33","statements":[{"nodeType":"YulAssignment","src":"7625:30:33","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"7635:18:33"},"nodeType":"YulFunctionCall","src":"7635:20:33"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7625:6:33"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7684:6:33"},{"name":"size","nodeType":"YulIdentifier","src":"7692:4:33"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"7664:19:33"},"nodeType":"YulFunctionCall","src":"7664:33:33"},"nodeType":"YulExpressionStatement","src":"7664:33:33"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"7599:4:33","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"7608:6:33","type":""}],"src":"7574:129:33"},{"body":{"nodeType":"YulBlock","src":"7775:241:33","statements":[{"body":{"nodeType":"YulBlock","src":"7880:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"7882:16:33"},"nodeType":"YulFunctionCall","src":"7882:18:33"},"nodeType":"YulExpressionStatement","src":"7882:18:33"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"7852:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"7860:18:33","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7849:2:33"},"nodeType":"YulFunctionCall","src":"7849:30:33"},"nodeType":"YulIf","src":"7846:56:33"},{"nodeType":"YulAssignment","src":"7912:37:33","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"7942:6:33"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"7920:21:33"},"nodeType":"YulFunctionCall","src":"7920:29:33"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"7912:4:33"}]},{"nodeType":"YulAssignment","src":"7986:23:33","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"7998:4:33"},{"kind":"number","nodeType":"YulLiteral","src":"8004:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7994:3:33"},"nodeType":"YulFunctionCall","src":"7994:15:33"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"7986:4:33"}]}]},"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"7759:6:33","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"7770:4:33","type":""}],"src":"7709:307:33"},{"body":{"nodeType":"YulBlock","src":"8073:103:33","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"8096:3:33"},{"name":"src","nodeType":"YulIdentifier","src":"8101:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"8106:6:33"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"8083:12:33"},"nodeType":"YulFunctionCall","src":"8083:30:33"},"nodeType":"YulExpressionStatement","src":"8083:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"8154:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"8159:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8150:3:33"},"nodeType":"YulFunctionCall","src":"8150:16:33"},{"kind":"number","nodeType":"YulLiteral","src":"8168:1:33","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8143:6:33"},"nodeType":"YulFunctionCall","src":"8143:27:33"},"nodeType":"YulExpressionStatement","src":"8143:27:33"}]},"name":"copy_calldata_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"8055:3:33","type":""},{"name":"dst","nodeType":"YulTypedName","src":"8060:3:33","type":""},{"name":"length","nodeType":"YulTypedName","src":"8065:6:33","type":""}],"src":"8022:154:33"},{"body":{"nodeType":"YulBlock","src":"8265:327:33","statements":[{"nodeType":"YulAssignment","src":"8275:74:33","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"8341:6:33"}],"functionName":{"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"8300:40:33"},"nodeType":"YulFunctionCall","src":"8300:48:33"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"8284:15:33"},"nodeType":"YulFunctionCall","src":"8284:65:33"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"8275:5:33"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"8365:5:33"},{"name":"length","nodeType":"YulIdentifier","src":"8372:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8358:6:33"},"nodeType":"YulFunctionCall","src":"8358:21:33"},"nodeType":"YulExpressionStatement","src":"8358:21:33"},{"nodeType":"YulVariableDeclaration","src":"8388:27:33","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"8403:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"8410:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8399:3:33"},"nodeType":"YulFunctionCall","src":"8399:16:33"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"8392:3:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"8453:83:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"8455:77:33"},"nodeType":"YulFunctionCall","src":"8455:79:33"},"nodeType":"YulExpressionStatement","src":"8455:79:33"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"8434:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"8439:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8430:3:33"},"nodeType":"YulFunctionCall","src":"8430:16:33"},{"name":"end","nodeType":"YulIdentifier","src":"8448:3:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8427:2:33"},"nodeType":"YulFunctionCall","src":"8427:25:33"},"nodeType":"YulIf","src":"8424:112:33"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"8569:3:33"},{"name":"dst","nodeType":"YulIdentifier","src":"8574:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"8579:6:33"}],"functionName":{"name":"copy_calldata_to_memory","nodeType":"YulIdentifier","src":"8545:23:33"},"nodeType":"YulFunctionCall","src":"8545:41:33"},"nodeType":"YulExpressionStatement","src":"8545:41:33"}]},"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"8238:3:33","type":""},{"name":"length","nodeType":"YulTypedName","src":"8243:6:33","type":""},{"name":"end","nodeType":"YulTypedName","src":"8251:3:33","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"8259:5:33","type":""}],"src":"8182:410:33"},{"body":{"nodeType":"YulBlock","src":"8672:277:33","statements":[{"body":{"nodeType":"YulBlock","src":"8721:83:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"8723:77:33"},"nodeType":"YulFunctionCall","src":"8723:79:33"},"nodeType":"YulExpressionStatement","src":"8723:79:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8700:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"8708:4:33","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8696:3:33"},"nodeType":"YulFunctionCall","src":"8696:17:33"},{"name":"end","nodeType":"YulIdentifier","src":"8715:3:33"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8692:3:33"},"nodeType":"YulFunctionCall","src":"8692:27:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8685:6:33"},"nodeType":"YulFunctionCall","src":"8685:35:33"},"nodeType":"YulIf","src":"8682:122:33"},{"nodeType":"YulVariableDeclaration","src":"8813:34:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8840:6:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8827:12:33"},"nodeType":"YulFunctionCall","src":"8827:20:33"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"8817:6:33","type":""}]},{"nodeType":"YulAssignment","src":"8856:87:33","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8916:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"8924:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8912:3:33"},"nodeType":"YulFunctionCall","src":"8912:17:33"},{"name":"length","nodeType":"YulIdentifier","src":"8931:6:33"},{"name":"end","nodeType":"YulIdentifier","src":"8939:3:33"}],"functionName":{"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"8865:46:33"},"nodeType":"YulFunctionCall","src":"8865:78:33"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"8856:5:33"}]}]},"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"8650:6:33","type":""},{"name":"end","nodeType":"YulTypedName","src":"8658:3:33","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"8666:5:33","type":""}],"src":"8611:338:33"},{"body":{"nodeType":"YulBlock","src":"9047:560:33","statements":[{"body":{"nodeType":"YulBlock","src":"9093:83:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"9095:77:33"},"nodeType":"YulFunctionCall","src":"9095:79:33"},"nodeType":"YulExpressionStatement","src":"9095:79:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"9068:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"9077:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9064:3:33"},"nodeType":"YulFunctionCall","src":"9064:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"9089:2:33","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9060:3:33"},"nodeType":"YulFunctionCall","src":"9060:32:33"},"nodeType":"YulIf","src":"9057:119:33"},{"nodeType":"YulBlock","src":"9186:117:33","statements":[{"nodeType":"YulVariableDeclaration","src":"9201:15:33","value":{"kind":"number","nodeType":"YulLiteral","src":"9215:1:33","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9205:6:33","type":""}]},{"nodeType":"YulAssignment","src":"9230:63:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9265:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"9276:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9261:3:33"},"nodeType":"YulFunctionCall","src":"9261:22:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9285:7:33"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"9240:20:33"},"nodeType":"YulFunctionCall","src":"9240:53:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"9230:6:33"}]}]},{"nodeType":"YulBlock","src":"9313:287:33","statements":[{"nodeType":"YulVariableDeclaration","src":"9328:46:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9359:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"9370:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9355:3:33"},"nodeType":"YulFunctionCall","src":"9355:18:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9342:12:33"},"nodeType":"YulFunctionCall","src":"9342:32:33"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9332:6:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"9421:83:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"9423:77:33"},"nodeType":"YulFunctionCall","src":"9423:79:33"},"nodeType":"YulExpressionStatement","src":"9423:79:33"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9393:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"9401:18:33","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9390:2:33"},"nodeType":"YulFunctionCall","src":"9390:30:33"},"nodeType":"YulIf","src":"9387:117:33"},{"nodeType":"YulAssignment","src":"9518:72:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9562:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"9573:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9558:3:33"},"nodeType":"YulFunctionCall","src":"9558:22:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9582:7:33"}],"functionName":{"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"9528:29:33"},"nodeType":"YulFunctionCall","src":"9528:62:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"9518:6:33"}]}]}]},"name":"abi_decode_tuple_t_addresst_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9009:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9020:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9032:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9040:6:33","type":""}],"src":"8955:652:33"},{"body":{"nodeType":"YulBlock","src":"9666:51:33","statements":[{"nodeType":"YulAssignment","src":"9676:35:33","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9705:5:33"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"9687:17:33"},"nodeType":"YulFunctionCall","src":"9687:24:33"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"9676:7:33"}]}]},"name":"cleanup_t_address_payable","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9648:5:33","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"9658:7:33","type":""}],"src":"9613:104:33"},{"body":{"nodeType":"YulBlock","src":"9774:87:33","statements":[{"body":{"nodeType":"YulBlock","src":"9839:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9848:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9851:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9841:6:33"},"nodeType":"YulFunctionCall","src":"9841:12:33"},"nodeType":"YulExpressionStatement","src":"9841:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9797:5:33"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9830:5:33"}],"functionName":{"name":"cleanup_t_address_payable","nodeType":"YulIdentifier","src":"9804:25:33"},"nodeType":"YulFunctionCall","src":"9804:32:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"9794:2:33"},"nodeType":"YulFunctionCall","src":"9794:43:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9787:6:33"},"nodeType":"YulFunctionCall","src":"9787:51:33"},"nodeType":"YulIf","src":"9784:71:33"}]},"name":"validator_revert_t_address_payable","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9767:5:33","type":""}],"src":"9723:138:33"},{"body":{"nodeType":"YulBlock","src":"9927:95:33","statements":[{"nodeType":"YulAssignment","src":"9937:29:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9959:6:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9946:12:33"},"nodeType":"YulFunctionCall","src":"9946:20:33"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"9937:5:33"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10010:5:33"}],"functionName":{"name":"validator_revert_t_address_payable","nodeType":"YulIdentifier","src":"9975:34:33"},"nodeType":"YulFunctionCall","src":"9975:41:33"},"nodeType":"YulExpressionStatement","src":"9975:41:33"}]},"name":"abi_decode_t_address_payable","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"9905:6:33","type":""},{"name":"end","nodeType":"YulTypedName","src":"9913:3:33","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"9921:5:33","type":""}],"src":"9867:155:33"},{"body":{"nodeType":"YulBlock","src":"10102:271:33","statements":[{"body":{"nodeType":"YulBlock","src":"10148:83:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"10150:77:33"},"nodeType":"YulFunctionCall","src":"10150:79:33"},"nodeType":"YulExpressionStatement","src":"10150:79:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10123:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"10132:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10119:3:33"},"nodeType":"YulFunctionCall","src":"10119:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"10144:2:33","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10115:3:33"},"nodeType":"YulFunctionCall","src":"10115:32:33"},"nodeType":"YulIf","src":"10112:119:33"},{"nodeType":"YulBlock","src":"10241:125:33","statements":[{"nodeType":"YulVariableDeclaration","src":"10256:15:33","value":{"kind":"number","nodeType":"YulLiteral","src":"10270:1:33","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10260:6:33","type":""}]},{"nodeType":"YulAssignment","src":"10285:71:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10328:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"10339:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10324:3:33"},"nodeType":"YulFunctionCall","src":"10324:22:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10348:7:33"}],"functionName":{"name":"abi_decode_t_address_payable","nodeType":"YulIdentifier","src":"10295:28:33"},"nodeType":"YulFunctionCall","src":"10295:61:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10285:6:33"}]}]}]},"name":"abi_decode_tuple_t_address_payable","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10072:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"10083:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"10095:6:33","type":""}],"src":"10028:345:33"},{"body":{"nodeType":"YulBlock","src":"10420:77:33","statements":[{"body":{"nodeType":"YulBlock","src":"10475:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10484:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10487:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10477:6:33"},"nodeType":"YulFunctionCall","src":"10477:12:33"},"nodeType":"YulExpressionStatement","src":"10477:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10443:5:33"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10466:5:33"}],"functionName":{"name":"cleanup_t_uint8","nodeType":"YulIdentifier","src":"10450:15:33"},"nodeType":"YulFunctionCall","src":"10450:22:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"10440:2:33"},"nodeType":"YulFunctionCall","src":"10440:33:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10433:6:33"},"nodeType":"YulFunctionCall","src":"10433:41:33"},"nodeType":"YulIf","src":"10430:61:33"}]},"name":"validator_revert_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10413:5:33","type":""}],"src":"10379:118:33"},{"body":{"nodeType":"YulBlock","src":"10553:85:33","statements":[{"nodeType":"YulAssignment","src":"10563:29:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"10585:6:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10572:12:33"},"nodeType":"YulFunctionCall","src":"10572:20:33"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"10563:5:33"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10626:5:33"}],"functionName":{"name":"validator_revert_t_uint8","nodeType":"YulIdentifier","src":"10601:24:33"},"nodeType":"YulFunctionCall","src":"10601:31:33"},"nodeType":"YulExpressionStatement","src":"10601:31:33"}]},"name":"abi_decode_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"10531:6:33","type":""},{"name":"end","nodeType":"YulTypedName","src":"10539:3:33","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"10547:5:33","type":""}],"src":"10503:135:33"},{"body":{"nodeType":"YulBlock","src":"10687:79:33","statements":[{"body":{"nodeType":"YulBlock","src":"10744:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10753:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10756:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10746:6:33"},"nodeType":"YulFunctionCall","src":"10746:12:33"},"nodeType":"YulExpressionStatement","src":"10746:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10710:5:33"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10735:5:33"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"10717:17:33"},"nodeType":"YulFunctionCall","src":"10717:24:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"10707:2:33"},"nodeType":"YulFunctionCall","src":"10707:35:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10700:6:33"},"nodeType":"YulFunctionCall","src":"10700:43:33"},"nodeType":"YulIf","src":"10697:63:33"}]},"name":"validator_revert_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10680:5:33","type":""}],"src":"10644:122:33"},{"body":{"nodeType":"YulBlock","src":"10824:87:33","statements":[{"nodeType":"YulAssignment","src":"10834:29:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"10856:6:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10843:12:33"},"nodeType":"YulFunctionCall","src":"10843:20:33"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"10834:5:33"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10899:5:33"}],"functionName":{"name":"validator_revert_t_bytes32","nodeType":"YulIdentifier","src":"10872:26:33"},"nodeType":"YulFunctionCall","src":"10872:33:33"},"nodeType":"YulExpressionStatement","src":"10872:33:33"}]},"name":"abi_decode_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"10802:6:33","type":""},{"name":"end","nodeType":"YulTypedName","src":"10810:3:33","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"10818:5:33","type":""}],"src":"10772:139:33"},{"body":{"nodeType":"YulBlock","src":"11083:1033:33","statements":[{"body":{"nodeType":"YulBlock","src":"11130:83:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"11132:77:33"},"nodeType":"YulFunctionCall","src":"11132:79:33"},"nodeType":"YulExpressionStatement","src":"11132:79:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"11104:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"11113:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11100:3:33"},"nodeType":"YulFunctionCall","src":"11100:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"11125:3:33","type":"","value":"224"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"11096:3:33"},"nodeType":"YulFunctionCall","src":"11096:33:33"},"nodeType":"YulIf","src":"11093:120:33"},{"nodeType":"YulBlock","src":"11223:117:33","statements":[{"nodeType":"YulVariableDeclaration","src":"11238:15:33","value":{"kind":"number","nodeType":"YulLiteral","src":"11252:1:33","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"11242:6:33","type":""}]},{"nodeType":"YulAssignment","src":"11267:63:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11302:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"11313:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11298:3:33"},"nodeType":"YulFunctionCall","src":"11298:22:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11322:7:33"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"11277:20:33"},"nodeType":"YulFunctionCall","src":"11277:53:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"11267:6:33"}]}]},{"nodeType":"YulBlock","src":"11350:118:33","statements":[{"nodeType":"YulVariableDeclaration","src":"11365:16:33","value":{"kind":"number","nodeType":"YulLiteral","src":"11379:2:33","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"11369:6:33","type":""}]},{"nodeType":"YulAssignment","src":"11395:63:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11430:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"11441:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11426:3:33"},"nodeType":"YulFunctionCall","src":"11426:22:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11450:7:33"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"11405:20:33"},"nodeType":"YulFunctionCall","src":"11405:53:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"11395:6:33"}]}]},{"nodeType":"YulBlock","src":"11478:118:33","statements":[{"nodeType":"YulVariableDeclaration","src":"11493:16:33","value":{"kind":"number","nodeType":"YulLiteral","src":"11507:2:33","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"11497:6:33","type":""}]},{"nodeType":"YulAssignment","src":"11523:63:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11558:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"11569:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11554:3:33"},"nodeType":"YulFunctionCall","src":"11554:22:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11578:7:33"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"11533:20:33"},"nodeType":"YulFunctionCall","src":"11533:53:33"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"11523:6:33"}]}]},{"nodeType":"YulBlock","src":"11606:118:33","statements":[{"nodeType":"YulVariableDeclaration","src":"11621:16:33","value":{"kind":"number","nodeType":"YulLiteral","src":"11635:2:33","type":"","value":"96"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"11625:6:33","type":""}]},{"nodeType":"YulAssignment","src":"11651:63:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11686:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"11697:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11682:3:33"},"nodeType":"YulFunctionCall","src":"11682:22:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11706:7:33"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"11661:20:33"},"nodeType":"YulFunctionCall","src":"11661:53:33"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"11651:6:33"}]}]},{"nodeType":"YulBlock","src":"11734:117:33","statements":[{"nodeType":"YulVariableDeclaration","src":"11749:17:33","value":{"kind":"number","nodeType":"YulLiteral","src":"11763:3:33","type":"","value":"128"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"11753:6:33","type":""}]},{"nodeType":"YulAssignment","src":"11780:61:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11813:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"11824:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11809:3:33"},"nodeType":"YulFunctionCall","src":"11809:22:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11833:7:33"}],"functionName":{"name":"abi_decode_t_uint8","nodeType":"YulIdentifier","src":"11790:18:33"},"nodeType":"YulFunctionCall","src":"11790:51:33"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"11780:6:33"}]}]},{"nodeType":"YulBlock","src":"11861:119:33","statements":[{"nodeType":"YulVariableDeclaration","src":"11876:17:33","value":{"kind":"number","nodeType":"YulLiteral","src":"11890:3:33","type":"","value":"160"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"11880:6:33","type":""}]},{"nodeType":"YulAssignment","src":"11907:63:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11942:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"11953:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11938:3:33"},"nodeType":"YulFunctionCall","src":"11938:22:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11962:7:33"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"11917:20:33"},"nodeType":"YulFunctionCall","src":"11917:53:33"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"11907:6:33"}]}]},{"nodeType":"YulBlock","src":"11990:119:33","statements":[{"nodeType":"YulVariableDeclaration","src":"12005:17:33","value":{"kind":"number","nodeType":"YulLiteral","src":"12019:3:33","type":"","value":"192"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"12009:6:33","type":""}]},{"nodeType":"YulAssignment","src":"12036:63:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12071:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"12082:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12067:3:33"},"nodeType":"YulFunctionCall","src":"12067:22:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"12091:7:33"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"12046:20:33"},"nodeType":"YulFunctionCall","src":"12046:53:33"},"variableNames":[{"name":"value6","nodeType":"YulIdentifier","src":"12036:6:33"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11005:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"11016:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"11028:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11036:6:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"11044:6:33","type":""},{"name":"value3","nodeType":"YulTypedName","src":"11052:6:33","type":""},{"name":"value4","nodeType":"YulTypedName","src":"11060:6:33","type":""},{"name":"value5","nodeType":"YulTypedName","src":"11068:6:33","type":""},{"name":"value6","nodeType":"YulTypedName","src":"11076:6:33","type":""}],"src":"10917:1199:33"},{"body":{"nodeType":"YulBlock","src":"12205:391:33","statements":[{"body":{"nodeType":"YulBlock","src":"12251:83:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"12253:77:33"},"nodeType":"YulFunctionCall","src":"12253:79:33"},"nodeType":"YulExpressionStatement","src":"12253:79:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"12226:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"12235:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12222:3:33"},"nodeType":"YulFunctionCall","src":"12222:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"12247:2:33","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"12218:3:33"},"nodeType":"YulFunctionCall","src":"12218:32:33"},"nodeType":"YulIf","src":"12215:119:33"},{"nodeType":"YulBlock","src":"12344:117:33","statements":[{"nodeType":"YulVariableDeclaration","src":"12359:15:33","value":{"kind":"number","nodeType":"YulLiteral","src":"12373:1:33","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"12363:6:33","type":""}]},{"nodeType":"YulAssignment","src":"12388:63:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12423:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"12434:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12419:3:33"},"nodeType":"YulFunctionCall","src":"12419:22:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"12443:7:33"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"12398:20:33"},"nodeType":"YulFunctionCall","src":"12398:53:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"12388:6:33"}]}]},{"nodeType":"YulBlock","src":"12471:118:33","statements":[{"nodeType":"YulVariableDeclaration","src":"12486:16:33","value":{"kind":"number","nodeType":"YulLiteral","src":"12500:2:33","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"12490:6:33","type":""}]},{"nodeType":"YulAssignment","src":"12516:63:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12551:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"12562:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12547:3:33"},"nodeType":"YulFunctionCall","src":"12547:22:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"12571:7:33"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"12526:20:33"},"nodeType":"YulFunctionCall","src":"12526:53:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"12516:6:33"}]}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12167:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"12178:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"12190:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12198:6:33","type":""}],"src":"12122:474:33"},{"body":{"nodeType":"YulBlock","src":"12630:152:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12647:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12650:77:33","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12640:6:33"},"nodeType":"YulFunctionCall","src":"12640:88:33"},"nodeType":"YulExpressionStatement","src":"12640:88:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12744:1:33","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"12747:4:33","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12737:6:33"},"nodeType":"YulFunctionCall","src":"12737:15:33"},"nodeType":"YulExpressionStatement","src":"12737:15:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12768:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12771:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12761:6:33"},"nodeType":"YulFunctionCall","src":"12761:15:33"},"nodeType":"YulExpressionStatement","src":"12761:15:33"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"12602:180:33"},{"body":{"nodeType":"YulBlock","src":"12839:269:33","statements":[{"nodeType":"YulAssignment","src":"12849:22:33","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"12863:4:33"},{"kind":"number","nodeType":"YulLiteral","src":"12869:1:33","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"12859:3:33"},"nodeType":"YulFunctionCall","src":"12859:12:33"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"12849:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"12880:38:33","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"12910:4:33"},{"kind":"number","nodeType":"YulLiteral","src":"12916:1:33","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12906:3:33"},"nodeType":"YulFunctionCall","src":"12906:12:33"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"12884:18:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"12957:51:33","statements":[{"nodeType":"YulAssignment","src":"12971:27:33","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"12985:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"12993:4:33","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12981:3:33"},"nodeType":"YulFunctionCall","src":"12981:17:33"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"12971:6:33"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"12937:18:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"12930:6:33"},"nodeType":"YulFunctionCall","src":"12930:26:33"},"nodeType":"YulIf","src":"12927:81:33"},{"body":{"nodeType":"YulBlock","src":"13060:42:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"13074:16:33"},"nodeType":"YulFunctionCall","src":"13074:18:33"},"nodeType":"YulExpressionStatement","src":"13074:18:33"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"13024:18:33"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"13047:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"13055:2:33","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"13044:2:33"},"nodeType":"YulFunctionCall","src":"13044:14:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"13021:2:33"},"nodeType":"YulFunctionCall","src":"13021:38:33"},"nodeType":"YulIf","src":"13018:84:33"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"12823:4:33","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"12832:6:33","type":""}],"src":"12788:320:33"},{"body":{"nodeType":"YulBlock","src":"13220:61:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"13242:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"13250:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13238:3:33"},"nodeType":"YulFunctionCall","src":"13238:14:33"},{"hexValue":"555345525f4e4f545f5645524946494544","kind":"string","nodeType":"YulLiteral","src":"13254:19:33","type":"","value":"USER_NOT_VERIFIED"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13231:6:33"},"nodeType":"YulFunctionCall","src":"13231:43:33"},"nodeType":"YulExpressionStatement","src":"13231:43:33"}]},"name":"store_literal_in_memory_16f4986ff02b8ec65b8228ad4d9cfee3779ad1f090ec2a1e15009246e11bf55f","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"13212:6:33","type":""}],"src":"13114:167:33"},{"body":{"nodeType":"YulBlock","src":"13433:220:33","statements":[{"nodeType":"YulAssignment","src":"13443:74:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13509:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"13514:2:33","type":"","value":"17"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13450:58:33"},"nodeType":"YulFunctionCall","src":"13450:67:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"13443:3:33"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13615:3:33"}],"functionName":{"name":"store_literal_in_memory_16f4986ff02b8ec65b8228ad4d9cfee3779ad1f090ec2a1e15009246e11bf55f","nodeType":"YulIdentifier","src":"13526:88:33"},"nodeType":"YulFunctionCall","src":"13526:93:33"},"nodeType":"YulExpressionStatement","src":"13526:93:33"},{"nodeType":"YulAssignment","src":"13628:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13639:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"13644:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13635:3:33"},"nodeType":"YulFunctionCall","src":"13635:12:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"13628:3:33"}]}]},"name":"abi_encode_t_stringliteral_16f4986ff02b8ec65b8228ad4d9cfee3779ad1f090ec2a1e15009246e11bf55f_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"13421:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"13429:3:33","type":""}],"src":"13287:366:33"},{"body":{"nodeType":"YulBlock","src":"13830:248:33","statements":[{"nodeType":"YulAssignment","src":"13840:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13852:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"13863:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13848:3:33"},"nodeType":"YulFunctionCall","src":"13848:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13840:4:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13887:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"13898:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13883:3:33"},"nodeType":"YulFunctionCall","src":"13883:17:33"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13906:4:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"13912:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13902:3:33"},"nodeType":"YulFunctionCall","src":"13902:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13876:6:33"},"nodeType":"YulFunctionCall","src":"13876:47:33"},"nodeType":"YulExpressionStatement","src":"13876:47:33"},{"nodeType":"YulAssignment","src":"13932:139:33","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14066:4:33"}],"functionName":{"name":"abi_encode_t_stringliteral_16f4986ff02b8ec65b8228ad4d9cfee3779ad1f090ec2a1e15009246e11bf55f_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13940:124:33"},"nodeType":"YulFunctionCall","src":"13940:131:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13932:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_16f4986ff02b8ec65b8228ad4d9cfee3779ad1f090ec2a1e15009246e11bf55f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13810:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13825:4:33","type":""}],"src":"13659:419:33"},{"body":{"nodeType":"YulBlock","src":"14190:125:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"14212:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"14220:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14208:3:33"},"nodeType":"YulFunctionCall","src":"14208:14:33"},{"hexValue":"46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820","kind":"string","nodeType":"YulLiteral","src":"14224:34:33","type":"","value":"Function must be called through "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14201:6:33"},"nodeType":"YulFunctionCall","src":"14201:58:33"},"nodeType":"YulExpressionStatement","src":"14201:58:33"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"14280:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"14288:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14276:3:33"},"nodeType":"YulFunctionCall","src":"14276:15:33"},{"hexValue":"64656c656761746563616c6c","kind":"string","nodeType":"YulLiteral","src":"14293:14:33","type":"","value":"delegatecall"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14269:6:33"},"nodeType":"YulFunctionCall","src":"14269:39:33"},"nodeType":"YulExpressionStatement","src":"14269:39:33"}]},"name":"store_literal_in_memory_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"14182:6:33","type":""}],"src":"14084:231:33"},{"body":{"nodeType":"YulBlock","src":"14467:220:33","statements":[{"nodeType":"YulAssignment","src":"14477:74:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14543:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"14548:2:33","type":"","value":"44"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14484:58:33"},"nodeType":"YulFunctionCall","src":"14484:67:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"14477:3:33"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14649:3:33"}],"functionName":{"name":"store_literal_in_memory_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb","nodeType":"YulIdentifier","src":"14560:88:33"},"nodeType":"YulFunctionCall","src":"14560:93:33"},"nodeType":"YulExpressionStatement","src":"14560:93:33"},{"nodeType":"YulAssignment","src":"14662:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14673:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"14678:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14669:3:33"},"nodeType":"YulFunctionCall","src":"14669:12:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"14662:3:33"}]}]},"name":"abi_encode_t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"14455:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"14463:3:33","type":""}],"src":"14321:366:33"},{"body":{"nodeType":"YulBlock","src":"14864:248:33","statements":[{"nodeType":"YulAssignment","src":"14874:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14886:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"14897:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14882:3:33"},"nodeType":"YulFunctionCall","src":"14882:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14874:4:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14921:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"14932:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14917:3:33"},"nodeType":"YulFunctionCall","src":"14917:17:33"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14940:4:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"14946:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14936:3:33"},"nodeType":"YulFunctionCall","src":"14936:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14910:6:33"},"nodeType":"YulFunctionCall","src":"14910:47:33"},"nodeType":"YulExpressionStatement","src":"14910:47:33"},{"nodeType":"YulAssignment","src":"14966:139:33","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15100:4:33"}],"functionName":{"name":"abi_encode_t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14974:124:33"},"nodeType":"YulFunctionCall","src":"14974:131:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14966:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14844:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14859:4:33","type":""}],"src":"14693:419:33"},{"body":{"nodeType":"YulBlock","src":"15224:125:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"15246:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"15254:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15242:3:33"},"nodeType":"YulFunctionCall","src":"15242:14:33"},{"hexValue":"46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820","kind":"string","nodeType":"YulLiteral","src":"15258:34:33","type":"","value":"Function must be called through "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15235:6:33"},"nodeType":"YulFunctionCall","src":"15235:58:33"},"nodeType":"YulExpressionStatement","src":"15235:58:33"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"15314:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"15322:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15310:3:33"},"nodeType":"YulFunctionCall","src":"15310:15:33"},{"hexValue":"6163746976652070726f7879","kind":"string","nodeType":"YulLiteral","src":"15327:14:33","type":"","value":"active proxy"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15303:6:33"},"nodeType":"YulFunctionCall","src":"15303:39:33"},"nodeType":"YulExpressionStatement","src":"15303:39:33"}]},"name":"store_literal_in_memory_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"15216:6:33","type":""}],"src":"15118:231:33"},{"body":{"nodeType":"YulBlock","src":"15501:220:33","statements":[{"nodeType":"YulAssignment","src":"15511:74:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15577:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"15582:2:33","type":"","value":"44"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15518:58:33"},"nodeType":"YulFunctionCall","src":"15518:67:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"15511:3:33"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15683:3:33"}],"functionName":{"name":"store_literal_in_memory_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434","nodeType":"YulIdentifier","src":"15594:88:33"},"nodeType":"YulFunctionCall","src":"15594:93:33"},"nodeType":"YulExpressionStatement","src":"15594:93:33"},{"nodeType":"YulAssignment","src":"15696:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15707:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"15712:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15703:3:33"},"nodeType":"YulFunctionCall","src":"15703:12:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"15696:3:33"}]}]},"name":"abi_encode_t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"15489:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"15497:3:33","type":""}],"src":"15355:366:33"},{"body":{"nodeType":"YulBlock","src":"15898:248:33","statements":[{"nodeType":"YulAssignment","src":"15908:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15920:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"15931:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15916:3:33"},"nodeType":"YulFunctionCall","src":"15916:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15908:4:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15955:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"15966:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15951:3:33"},"nodeType":"YulFunctionCall","src":"15951:17:33"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15974:4:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"15980:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15970:3:33"},"nodeType":"YulFunctionCall","src":"15970:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15944:6:33"},"nodeType":"YulFunctionCall","src":"15944:47:33"},"nodeType":"YulExpressionStatement","src":"15944:47:33"},{"nodeType":"YulAssignment","src":"16000:139:33","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"16134:4:33"}],"functionName":{"name":"abi_encode_t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"16008:124:33"},"nodeType":"YulFunctionCall","src":"16008:131:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16000:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15878:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15893:4:33","type":""}],"src":"15727:419:33"},{"body":{"nodeType":"YulBlock","src":"16258:137:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"16280:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"16288:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16276:3:33"},"nodeType":"YulFunctionCall","src":"16276:14:33"},{"hexValue":"555550535570677261646561626c653a206d757374206e6f742062652063616c","kind":"string","nodeType":"YulLiteral","src":"16292:34:33","type":"","value":"UUPSUpgradeable: must not be cal"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16269:6:33"},"nodeType":"YulFunctionCall","src":"16269:58:33"},"nodeType":"YulExpressionStatement","src":"16269:58:33"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"16348:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"16356:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16344:3:33"},"nodeType":"YulFunctionCall","src":"16344:15:33"},{"hexValue":"6c6564207468726f7567682064656c656761746563616c6c","kind":"string","nodeType":"YulLiteral","src":"16361:26:33","type":"","value":"led through delegatecall"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16337:6:33"},"nodeType":"YulFunctionCall","src":"16337:51:33"},"nodeType":"YulExpressionStatement","src":"16337:51:33"}]},"name":"store_literal_in_memory_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"16250:6:33","type":""}],"src":"16152:243:33"},{"body":{"nodeType":"YulBlock","src":"16547:220:33","statements":[{"nodeType":"YulAssignment","src":"16557:74:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16623:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"16628:2:33","type":"","value":"56"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"16564:58:33"},"nodeType":"YulFunctionCall","src":"16564:67:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"16557:3:33"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16729:3:33"}],"functionName":{"name":"store_literal_in_memory_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4","nodeType":"YulIdentifier","src":"16640:88:33"},"nodeType":"YulFunctionCall","src":"16640:93:33"},"nodeType":"YulExpressionStatement","src":"16640:93:33"},{"nodeType":"YulAssignment","src":"16742:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16753:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"16758:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16749:3:33"},"nodeType":"YulFunctionCall","src":"16749:12:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"16742:3:33"}]}]},"name":"abi_encode_t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"16535:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"16543:3:33","type":""}],"src":"16401:366:33"},{"body":{"nodeType":"YulBlock","src":"16944:248:33","statements":[{"nodeType":"YulAssignment","src":"16954:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16966:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"16977:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16962:3:33"},"nodeType":"YulFunctionCall","src":"16962:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16954:4:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17001:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"17012:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16997:3:33"},"nodeType":"YulFunctionCall","src":"16997:17:33"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"17020:4:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"17026:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17016:3:33"},"nodeType":"YulFunctionCall","src":"17016:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16990:6:33"},"nodeType":"YulFunctionCall","src":"16990:47:33"},"nodeType":"YulExpressionStatement","src":"16990:47:33"},{"nodeType":"YulAssignment","src":"17046:139:33","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"17180:4:33"}],"functionName":{"name":"abi_encode_t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17054:124:33"},"nodeType":"YulFunctionCall","src":"17054:131:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17046:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16924:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16939:4:33","type":""}],"src":"16773:419:33"},{"body":{"nodeType":"YulBlock","src":"17304:127:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"17326:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"17334:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17322:3:33"},"nodeType":"YulFunctionCall","src":"17322:14:33"},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561","kind":"string","nodeType":"YulLiteral","src":"17338:34:33","type":"","value":"Initializable: contract is alrea"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17315:6:33"},"nodeType":"YulFunctionCall","src":"17315:58:33"},"nodeType":"YulExpressionStatement","src":"17315:58:33"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"17394:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"17402:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17390:3:33"},"nodeType":"YulFunctionCall","src":"17390:15:33"},{"hexValue":"647920696e697469616c697a6564","kind":"string","nodeType":"YulLiteral","src":"17407:16:33","type":"","value":"dy initialized"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17383:6:33"},"nodeType":"YulFunctionCall","src":"17383:41:33"},"nodeType":"YulExpressionStatement","src":"17383:41:33"}]},"name":"store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"17296:6:33","type":""}],"src":"17198:233:33"},{"body":{"nodeType":"YulBlock","src":"17583:220:33","statements":[{"nodeType":"YulAssignment","src":"17593:74:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17659:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"17664:2:33","type":"","value":"46"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17600:58:33"},"nodeType":"YulFunctionCall","src":"17600:67:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"17593:3:33"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17765:3:33"}],"functionName":{"name":"store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","nodeType":"YulIdentifier","src":"17676:88:33"},"nodeType":"YulFunctionCall","src":"17676:93:33"},"nodeType":"YulExpressionStatement","src":"17676:93:33"},{"nodeType":"YulAssignment","src":"17778:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17789:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"17794:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17785:3:33"},"nodeType":"YulFunctionCall","src":"17785:12:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"17778:3:33"}]}]},"name":"abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"17571:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"17579:3:33","type":""}],"src":"17437:366:33"},{"body":{"nodeType":"YulBlock","src":"17980:248:33","statements":[{"nodeType":"YulAssignment","src":"17990:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18002:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"18013:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17998:3:33"},"nodeType":"YulFunctionCall","src":"17998:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17990:4:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18037:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"18048:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18033:3:33"},"nodeType":"YulFunctionCall","src":"18033:17:33"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18056:4:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"18062:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18052:3:33"},"nodeType":"YulFunctionCall","src":"18052:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18026:6:33"},"nodeType":"YulFunctionCall","src":"18026:47:33"},"nodeType":"YulExpressionStatement","src":"18026:47:33"},{"nodeType":"YulAssignment","src":"18082:139:33","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18216:4:33"}],"functionName":{"name":"abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"18090:124:33"},"nodeType":"YulFunctionCall","src":"18090:131:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18082:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17960:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17975:4:33","type":""}],"src":"17809:419:33"},{"body":{"nodeType":"YulBlock","src":"18287:32:33","statements":[{"nodeType":"YulAssignment","src":"18297:16:33","value":{"name":"value","nodeType":"YulIdentifier","src":"18308:5:33"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"18297:7:33"}]}]},"name":"cleanup_t_rational_1_by_1","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"18269:5:33","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"18279:7:33","type":""}],"src":"18234:85:33"},{"body":{"nodeType":"YulBlock","src":"18357:28:33","statements":[{"nodeType":"YulAssignment","src":"18367:12:33","value":{"name":"value","nodeType":"YulIdentifier","src":"18374:5:33"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"18367:3:33"}]}]},"name":"identity","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"18343:5:33","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"18353:3:33","type":""}],"src":"18325:60:33"},{"body":{"nodeType":"YulBlock","src":"18457:88:33","statements":[{"nodeType":"YulAssignment","src":"18467:72:33","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18531:5:33"}],"functionName":{"name":"cleanup_t_rational_1_by_1","nodeType":"YulIdentifier","src":"18505:25:33"},"nodeType":"YulFunctionCall","src":"18505:32:33"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"18496:8:33"},"nodeType":"YulFunctionCall","src":"18496:42:33"}],"functionName":{"name":"cleanup_t_uint8","nodeType":"YulIdentifier","src":"18480:15:33"},"nodeType":"YulFunctionCall","src":"18480:59:33"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"18467:9:33"}]}]},"name":"convert_t_rational_1_by_1_to_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"18437:5:33","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"18447:9:33","type":""}],"src":"18391:154:33"},{"body":{"nodeType":"YulBlock","src":"18622:72:33","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18639:3:33"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18681:5:33"}],"functionName":{"name":"convert_t_rational_1_by_1_to_t_uint8","nodeType":"YulIdentifier","src":"18644:36:33"},"nodeType":"YulFunctionCall","src":"18644:43:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18632:6:33"},"nodeType":"YulFunctionCall","src":"18632:56:33"},"nodeType":"YulExpressionStatement","src":"18632:56:33"}]},"name":"abi_encode_t_rational_1_by_1_to_t_uint8_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"18610:5:33","type":""},{"name":"pos","nodeType":"YulTypedName","src":"18617:3:33","type":""}],"src":"18551:143:33"},{"body":{"nodeType":"YulBlock","src":"18804:130:33","statements":[{"nodeType":"YulAssignment","src":"18814:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18826:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"18837:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18822:3:33"},"nodeType":"YulFunctionCall","src":"18822:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18814:4:33"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"18900:6:33"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18913:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"18924:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18909:3:33"},"nodeType":"YulFunctionCall","src":"18909:17:33"}],"functionName":{"name":"abi_encode_t_rational_1_by_1_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"18850:49:33"},"nodeType":"YulFunctionCall","src":"18850:77:33"},"nodeType":"YulExpressionStatement","src":"18850:77:33"}]},"name":"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18776:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"18788:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18799:4:33","type":""}],"src":"18700:234:33"},{"body":{"nodeType":"YulBlock","src":"19046:118:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"19068:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"19076:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19064:3:33"},"nodeType":"YulFunctionCall","src":"19064:14:33"},{"hexValue":"45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77","kind":"string","nodeType":"YulLiteral","src":"19080:34:33","type":"","value":"ERC20: decreased allowance below"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19057:6:33"},"nodeType":"YulFunctionCall","src":"19057:58:33"},"nodeType":"YulExpressionStatement","src":"19057:58:33"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"19136:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"19144:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19132:3:33"},"nodeType":"YulFunctionCall","src":"19132:15:33"},{"hexValue":"207a65726f","kind":"string","nodeType":"YulLiteral","src":"19149:7:33","type":"","value":" zero"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19125:6:33"},"nodeType":"YulFunctionCall","src":"19125:32:33"},"nodeType":"YulExpressionStatement","src":"19125:32:33"}]},"name":"store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"19038:6:33","type":""}],"src":"18940:224:33"},{"body":{"nodeType":"YulBlock","src":"19316:220:33","statements":[{"nodeType":"YulAssignment","src":"19326:74:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19392:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"19397:2:33","type":"","value":"37"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19333:58:33"},"nodeType":"YulFunctionCall","src":"19333:67:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"19326:3:33"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19498:3:33"}],"functionName":{"name":"store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8","nodeType":"YulIdentifier","src":"19409:88:33"},"nodeType":"YulFunctionCall","src":"19409:93:33"},"nodeType":"YulExpressionStatement","src":"19409:93:33"},{"nodeType":"YulAssignment","src":"19511:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19522:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"19527:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19518:3:33"},"nodeType":"YulFunctionCall","src":"19518:12:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"19511:3:33"}]}]},"name":"abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"19304:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"19312:3:33","type":""}],"src":"19170:366:33"},{"body":{"nodeType":"YulBlock","src":"19713:248:33","statements":[{"nodeType":"YulAssignment","src":"19723:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19735:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"19746:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19731:3:33"},"nodeType":"YulFunctionCall","src":"19731:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19723:4:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19770:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"19781:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19766:3:33"},"nodeType":"YulFunctionCall","src":"19766:17:33"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19789:4:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"19795:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19785:3:33"},"nodeType":"YulFunctionCall","src":"19785:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19759:6:33"},"nodeType":"YulFunctionCall","src":"19759:47:33"},"nodeType":"YulExpressionStatement","src":"19759:47:33"},{"nodeType":"YulAssignment","src":"19815:139:33","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19949:4:33"}],"functionName":{"name":"abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19823:124:33"},"nodeType":"YulFunctionCall","src":"19823:131:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19815:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19693:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19708:4:33","type":""}],"src":"19542:419:33"},{"body":{"nodeType":"YulBlock","src":"20073:119:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"20095:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"20103:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20091:3:33"},"nodeType":"YulFunctionCall","src":"20091:14:33"},{"hexValue":"66726f6d3a205452414e534645525f52455155495245445f5645524946494341","kind":"string","nodeType":"YulLiteral","src":"20107:34:33","type":"","value":"from: TRANSFER_REQUIRED_VERIFICA"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20084:6:33"},"nodeType":"YulFunctionCall","src":"20084:58:33"},"nodeType":"YulExpressionStatement","src":"20084:58:33"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"20163:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"20171:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20159:3:33"},"nodeType":"YulFunctionCall","src":"20159:15:33"},{"hexValue":"54494f4e5f49","kind":"string","nodeType":"YulLiteral","src":"20176:8:33","type":"","value":"TION_I"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20152:6:33"},"nodeType":"YulFunctionCall","src":"20152:33:33"},"nodeType":"YulExpressionStatement","src":"20152:33:33"}]},"name":"store_literal_in_memory_60b31d48ddf4a3a7e36589333cb85fe8601f83d35365f582cb69e77a74e2c530","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"20065:6:33","type":""}],"src":"19967:225:33"},{"body":{"nodeType":"YulBlock","src":"20344:220:33","statements":[{"nodeType":"YulAssignment","src":"20354:74:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20420:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"20425:2:33","type":"","value":"38"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"20361:58:33"},"nodeType":"YulFunctionCall","src":"20361:67:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"20354:3:33"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20526:3:33"}],"functionName":{"name":"store_literal_in_memory_60b31d48ddf4a3a7e36589333cb85fe8601f83d35365f582cb69e77a74e2c530","nodeType":"YulIdentifier","src":"20437:88:33"},"nodeType":"YulFunctionCall","src":"20437:93:33"},"nodeType":"YulExpressionStatement","src":"20437:93:33"},{"nodeType":"YulAssignment","src":"20539:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20550:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"20555:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20546:3:33"},"nodeType":"YulFunctionCall","src":"20546:12:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"20539:3:33"}]}]},"name":"abi_encode_t_stringliteral_60b31d48ddf4a3a7e36589333cb85fe8601f83d35365f582cb69e77a74e2c530_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"20332:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"20340:3:33","type":""}],"src":"20198:366:33"},{"body":{"nodeType":"YulBlock","src":"20741:248:33","statements":[{"nodeType":"YulAssignment","src":"20751:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20763:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"20774:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20759:3:33"},"nodeType":"YulFunctionCall","src":"20759:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20751:4:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20798:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"20809:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20794:3:33"},"nodeType":"YulFunctionCall","src":"20794:17:33"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"20817:4:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"20823:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"20813:3:33"},"nodeType":"YulFunctionCall","src":"20813:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20787:6:33"},"nodeType":"YulFunctionCall","src":"20787:47:33"},"nodeType":"YulExpressionStatement","src":"20787:47:33"},{"nodeType":"YulAssignment","src":"20843:139:33","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"20977:4:33"}],"functionName":{"name":"abi_encode_t_stringliteral_60b31d48ddf4a3a7e36589333cb85fe8601f83d35365f582cb69e77a74e2c530_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"20851:124:33"},"nodeType":"YulFunctionCall","src":"20851:131:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20843:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_60b31d48ddf4a3a7e36589333cb85fe8601f83d35365f582cb69e77a74e2c530__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20721:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20736:4:33","type":""}],"src":"20570:419:33"},{"body":{"nodeType":"YulBlock","src":"21101:118:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"21123:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"21131:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21119:3:33"},"nodeType":"YulFunctionCall","src":"21119:14:33"},{"hexValue":"746f203a205452414e534645525f52455155495245445f564552494649434154","kind":"string","nodeType":"YulLiteral","src":"21135:34:33","type":"","value":"to : TRANSFER_REQUIRED_VERIFICAT"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21112:6:33"},"nodeType":"YulFunctionCall","src":"21112:58:33"},"nodeType":"YulExpressionStatement","src":"21112:58:33"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"21191:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"21199:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21187:3:33"},"nodeType":"YulFunctionCall","src":"21187:15:33"},{"hexValue":"494f4e5f49","kind":"string","nodeType":"YulLiteral","src":"21204:7:33","type":"","value":"ION_I"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21180:6:33"},"nodeType":"YulFunctionCall","src":"21180:32:33"},"nodeType":"YulExpressionStatement","src":"21180:32:33"}]},"name":"store_literal_in_memory_6a474febbac6df5530c874e2802245fb2d8492a7ff2734cf08d72da489a71589","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"21093:6:33","type":""}],"src":"20995:224:33"},{"body":{"nodeType":"YulBlock","src":"21371:220:33","statements":[{"nodeType":"YulAssignment","src":"21381:74:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21447:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"21452:2:33","type":"","value":"37"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"21388:58:33"},"nodeType":"YulFunctionCall","src":"21388:67:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"21381:3:33"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21553:3:33"}],"functionName":{"name":"store_literal_in_memory_6a474febbac6df5530c874e2802245fb2d8492a7ff2734cf08d72da489a71589","nodeType":"YulIdentifier","src":"21464:88:33"},"nodeType":"YulFunctionCall","src":"21464:93:33"},"nodeType":"YulExpressionStatement","src":"21464:93:33"},{"nodeType":"YulAssignment","src":"21566:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21577:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"21582:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21573:3:33"},"nodeType":"YulFunctionCall","src":"21573:12:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"21566:3:33"}]}]},"name":"abi_encode_t_stringliteral_6a474febbac6df5530c874e2802245fb2d8492a7ff2734cf08d72da489a71589_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"21359:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"21367:3:33","type":""}],"src":"21225:366:33"},{"body":{"nodeType":"YulBlock","src":"21768:248:33","statements":[{"nodeType":"YulAssignment","src":"21778:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21790:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"21801:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21786:3:33"},"nodeType":"YulFunctionCall","src":"21786:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21778:4:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21825:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"21836:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21821:3:33"},"nodeType":"YulFunctionCall","src":"21821:17:33"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"21844:4:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"21850:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21840:3:33"},"nodeType":"YulFunctionCall","src":"21840:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21814:6:33"},"nodeType":"YulFunctionCall","src":"21814:47:33"},"nodeType":"YulExpressionStatement","src":"21814:47:33"},{"nodeType":"YulAssignment","src":"21870:139:33","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"22004:4:33"}],"functionName":{"name":"abi_encode_t_stringliteral_6a474febbac6df5530c874e2802245fb2d8492a7ff2734cf08d72da489a71589_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"21878:124:33"},"nodeType":"YulFunctionCall","src":"21878:131:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21870:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_6a474febbac6df5530c874e2802245fb2d8492a7ff2734cf08d72da489a71589__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21748:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21763:4:33","type":""}],"src":"21597:419:33"},{"body":{"nodeType":"YulBlock","src":"22128:120:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"22150:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"22158:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22146:3:33"},"nodeType":"YulFunctionCall","src":"22146:14:33"},{"hexValue":"66726f6d3a205452414e534645525f52455155495245445f4d554c54495f5349","kind":"string","nodeType":"YulLiteral","src":"22162:34:33","type":"","value":"from: TRANSFER_REQUIRED_MULTI_SI"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22139:6:33"},"nodeType":"YulFunctionCall","src":"22139:58:33"},"nodeType":"YulExpressionStatement","src":"22139:58:33"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"22218:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"22226:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22214:3:33"},"nodeType":"YulFunctionCall","src":"22214:15:33"},{"hexValue":"474e4154555245","kind":"string","nodeType":"YulLiteral","src":"22231:9:33","type":"","value":"GNATURE"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22207:6:33"},"nodeType":"YulFunctionCall","src":"22207:34:33"},"nodeType":"YulExpressionStatement","src":"22207:34:33"}]},"name":"store_literal_in_memory_2d3c3eb826a2c156a3f5fda2e8c203bbbb959ef4be16522182f3c73c9ba3575d","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"22120:6:33","type":""}],"src":"22022:226:33"},{"body":{"nodeType":"YulBlock","src":"22400:220:33","statements":[{"nodeType":"YulAssignment","src":"22410:74:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22476:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"22481:2:33","type":"","value":"39"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"22417:58:33"},"nodeType":"YulFunctionCall","src":"22417:67:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"22410:3:33"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22582:3:33"}],"functionName":{"name":"store_literal_in_memory_2d3c3eb826a2c156a3f5fda2e8c203bbbb959ef4be16522182f3c73c9ba3575d","nodeType":"YulIdentifier","src":"22493:88:33"},"nodeType":"YulFunctionCall","src":"22493:93:33"},"nodeType":"YulExpressionStatement","src":"22493:93:33"},{"nodeType":"YulAssignment","src":"22595:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22606:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"22611:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22602:3:33"},"nodeType":"YulFunctionCall","src":"22602:12:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"22595:3:33"}]}]},"name":"abi_encode_t_stringliteral_2d3c3eb826a2c156a3f5fda2e8c203bbbb959ef4be16522182f3c73c9ba3575d_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"22388:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"22396:3:33","type":""}],"src":"22254:366:33"},{"body":{"nodeType":"YulBlock","src":"22797:248:33","statements":[{"nodeType":"YulAssignment","src":"22807:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22819:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"22830:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22815:3:33"},"nodeType":"YulFunctionCall","src":"22815:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22807:4:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22854:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"22865:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22850:3:33"},"nodeType":"YulFunctionCall","src":"22850:17:33"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"22873:4:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"22879:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"22869:3:33"},"nodeType":"YulFunctionCall","src":"22869:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22843:6:33"},"nodeType":"YulFunctionCall","src":"22843:47:33"},"nodeType":"YulExpressionStatement","src":"22843:47:33"},{"nodeType":"YulAssignment","src":"22899:139:33","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"23033:4:33"}],"functionName":{"name":"abi_encode_t_stringliteral_2d3c3eb826a2c156a3f5fda2e8c203bbbb959ef4be16522182f3c73c9ba3575d_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"22907:124:33"},"nodeType":"YulFunctionCall","src":"22907:131:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22899:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_2d3c3eb826a2c156a3f5fda2e8c203bbbb959ef4be16522182f3c73c9ba3575d__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22777:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22792:4:33","type":""}],"src":"22626:419:33"},{"body":{"nodeType":"YulBlock","src":"23157:118:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"23179:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"23187:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23175:3:33"},"nodeType":"YulFunctionCall","src":"23175:14:33"},{"hexValue":"746f3a205452414e534645525f52455155495245445f4d554c54495f5349474e","kind":"string","nodeType":"YulLiteral","src":"23191:34:33","type":"","value":"to: TRANSFER_REQUIRED_MULTI_SIGN"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23168:6:33"},"nodeType":"YulFunctionCall","src":"23168:58:33"},"nodeType":"YulExpressionStatement","src":"23168:58:33"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"23247:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"23255:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23243:3:33"},"nodeType":"YulFunctionCall","src":"23243:15:33"},{"hexValue":"4154555245","kind":"string","nodeType":"YulLiteral","src":"23260:7:33","type":"","value":"ATURE"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23236:6:33"},"nodeType":"YulFunctionCall","src":"23236:32:33"},"nodeType":"YulExpressionStatement","src":"23236:32:33"}]},"name":"store_literal_in_memory_5bea970c8c5b2c16f9984fa1b49104cd8ac4cec162360b95949413a68a6073f9","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"23149:6:33","type":""}],"src":"23051:224:33"},{"body":{"nodeType":"YulBlock","src":"23427:220:33","statements":[{"nodeType":"YulAssignment","src":"23437:74:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23503:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"23508:2:33","type":"","value":"37"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"23444:58:33"},"nodeType":"YulFunctionCall","src":"23444:67:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"23437:3:33"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23609:3:33"}],"functionName":{"name":"store_literal_in_memory_5bea970c8c5b2c16f9984fa1b49104cd8ac4cec162360b95949413a68a6073f9","nodeType":"YulIdentifier","src":"23520:88:33"},"nodeType":"YulFunctionCall","src":"23520:93:33"},"nodeType":"YulExpressionStatement","src":"23520:93:33"},{"nodeType":"YulAssignment","src":"23622:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23633:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"23638:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23629:3:33"},"nodeType":"YulFunctionCall","src":"23629:12:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"23622:3:33"}]}]},"name":"abi_encode_t_stringliteral_5bea970c8c5b2c16f9984fa1b49104cd8ac4cec162360b95949413a68a6073f9_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"23415:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"23423:3:33","type":""}],"src":"23281:366:33"},{"body":{"nodeType":"YulBlock","src":"23824:248:33","statements":[{"nodeType":"YulAssignment","src":"23834:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23846:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"23857:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23842:3:33"},"nodeType":"YulFunctionCall","src":"23842:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23834:4:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23881:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"23892:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23877:3:33"},"nodeType":"YulFunctionCall","src":"23877:17:33"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"23900:4:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"23906:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"23896:3:33"},"nodeType":"YulFunctionCall","src":"23896:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23870:6:33"},"nodeType":"YulFunctionCall","src":"23870:47:33"},"nodeType":"YulExpressionStatement","src":"23870:47:33"},{"nodeType":"YulAssignment","src":"23926:139:33","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"24060:4:33"}],"functionName":{"name":"abi_encode_t_stringliteral_5bea970c8c5b2c16f9984fa1b49104cd8ac4cec162360b95949413a68a6073f9_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"23934:124:33"},"nodeType":"YulFunctionCall","src":"23934:131:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23926:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_5bea970c8c5b2c16f9984fa1b49104cd8ac4cec162360b95949413a68a6073f9__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23804:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"23819:4:33","type":""}],"src":"23653:419:33"},{"body":{"nodeType":"YulBlock","src":"24184:73:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"24206:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"24214:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24202:3:33"},"nodeType":"YulFunctionCall","src":"24202:14:33"},{"hexValue":"45524332305065726d69743a206578706972656420646561646c696e65","kind":"string","nodeType":"YulLiteral","src":"24218:31:33","type":"","value":"ERC20Permit: expired deadline"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24195:6:33"},"nodeType":"YulFunctionCall","src":"24195:55:33"},"nodeType":"YulExpressionStatement","src":"24195:55:33"}]},"name":"store_literal_in_memory_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"24176:6:33","type":""}],"src":"24078:179:33"},{"body":{"nodeType":"YulBlock","src":"24409:220:33","statements":[{"nodeType":"YulAssignment","src":"24419:74:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24485:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"24490:2:33","type":"","value":"29"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"24426:58:33"},"nodeType":"YulFunctionCall","src":"24426:67:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"24419:3:33"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24591:3:33"}],"functionName":{"name":"store_literal_in_memory_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd","nodeType":"YulIdentifier","src":"24502:88:33"},"nodeType":"YulFunctionCall","src":"24502:93:33"},"nodeType":"YulExpressionStatement","src":"24502:93:33"},{"nodeType":"YulAssignment","src":"24604:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24615:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"24620:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24611:3:33"},"nodeType":"YulFunctionCall","src":"24611:12:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"24604:3:33"}]}]},"name":"abi_encode_t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"24397:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"24405:3:33","type":""}],"src":"24263:366:33"},{"body":{"nodeType":"YulBlock","src":"24806:248:33","statements":[{"nodeType":"YulAssignment","src":"24816:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24828:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"24839:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24824:3:33"},"nodeType":"YulFunctionCall","src":"24824:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24816:4:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24863:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"24874:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24859:3:33"},"nodeType":"YulFunctionCall","src":"24859:17:33"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"24882:4:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"24888:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"24878:3:33"},"nodeType":"YulFunctionCall","src":"24878:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24852:6:33"},"nodeType":"YulFunctionCall","src":"24852:47:33"},"nodeType":"YulExpressionStatement","src":"24852:47:33"},{"nodeType":"YulAssignment","src":"24908:139:33","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"25042:4:33"}],"functionName":{"name":"abi_encode_t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"24916:124:33"},"nodeType":"YulFunctionCall","src":"24916:131:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24908:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"24786:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"24801:4:33","type":""}],"src":"24635:419:33"},{"body":{"nodeType":"YulBlock","src":"25298:537:33","statements":[{"nodeType":"YulAssignment","src":"25308:27:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25320:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"25331:3:33","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25316:3:33"},"nodeType":"YulFunctionCall","src":"25316:19:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25308:4:33"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"25389:6:33"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25402:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"25413:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25398:3:33"},"nodeType":"YulFunctionCall","src":"25398:17:33"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"25345:43:33"},"nodeType":"YulFunctionCall","src":"25345:71:33"},"nodeType":"YulExpressionStatement","src":"25345:71:33"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"25470:6:33"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25483:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"25494:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25479:3:33"},"nodeType":"YulFunctionCall","src":"25479:18:33"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"25426:43:33"},"nodeType":"YulFunctionCall","src":"25426:72:33"},"nodeType":"YulExpressionStatement","src":"25426:72:33"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"25552:6:33"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25565:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"25576:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25561:3:33"},"nodeType":"YulFunctionCall","src":"25561:18:33"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"25508:43:33"},"nodeType":"YulFunctionCall","src":"25508:72:33"},"nodeType":"YulExpressionStatement","src":"25508:72:33"},{"expression":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"25634:6:33"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25647:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"25658:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25643:3:33"},"nodeType":"YulFunctionCall","src":"25643:18:33"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"25590:43:33"},"nodeType":"YulFunctionCall","src":"25590:72:33"},"nodeType":"YulExpressionStatement","src":"25590:72:33"},{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"25716:6:33"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25729:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"25740:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25725:3:33"},"nodeType":"YulFunctionCall","src":"25725:19:33"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"25672:43:33"},"nodeType":"YulFunctionCall","src":"25672:73:33"},"nodeType":"YulExpressionStatement","src":"25672:73:33"},{"expression":{"arguments":[{"name":"value5","nodeType":"YulIdentifier","src":"25799:6:33"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25812:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"25823:3:33","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25808:3:33"},"nodeType":"YulFunctionCall","src":"25808:19:33"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"25755:43:33"},"nodeType":"YulFunctionCall","src":"25755:73:33"},"nodeType":"YulExpressionStatement","src":"25755:73:33"}]},"name":"abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"25230:9:33","type":""},{"name":"value5","nodeType":"YulTypedName","src":"25242:6:33","type":""},{"name":"value4","nodeType":"YulTypedName","src":"25250:6:33","type":""},{"name":"value3","nodeType":"YulTypedName","src":"25258:6:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"25266:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"25274:6:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"25282:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"25293:4:33","type":""}],"src":"25060:775:33"},{"body":{"nodeType":"YulBlock","src":"25947:74:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"25969:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"25977:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25965:3:33"},"nodeType":"YulFunctionCall","src":"25965:14:33"},{"hexValue":"45524332305065726d69743a20696e76616c6964207369676e6174757265","kind":"string","nodeType":"YulLiteral","src":"25981:32:33","type":"","value":"ERC20Permit: invalid signature"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25958:6:33"},"nodeType":"YulFunctionCall","src":"25958:56:33"},"nodeType":"YulExpressionStatement","src":"25958:56:33"}]},"name":"store_literal_in_memory_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"25939:6:33","type":""}],"src":"25841:180:33"},{"body":{"nodeType":"YulBlock","src":"26173:220:33","statements":[{"nodeType":"YulAssignment","src":"26183:74:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26249:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"26254:2:33","type":"","value":"30"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"26190:58:33"},"nodeType":"YulFunctionCall","src":"26190:67:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"26183:3:33"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26355:3:33"}],"functionName":{"name":"store_literal_in_memory_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124","nodeType":"YulIdentifier","src":"26266:88:33"},"nodeType":"YulFunctionCall","src":"26266:93:33"},"nodeType":"YulExpressionStatement","src":"26266:93:33"},{"nodeType":"YulAssignment","src":"26368:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26379:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"26384:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26375:3:33"},"nodeType":"YulFunctionCall","src":"26375:12:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"26368:3:33"}]}]},"name":"abi_encode_t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"26161:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"26169:3:33","type":""}],"src":"26027:366:33"},{"body":{"nodeType":"YulBlock","src":"26570:248:33","statements":[{"nodeType":"YulAssignment","src":"26580:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26592:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"26603:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26588:3:33"},"nodeType":"YulFunctionCall","src":"26588:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26580:4:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26627:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"26638:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26623:3:33"},"nodeType":"YulFunctionCall","src":"26623:17:33"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"26646:4:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"26652:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"26642:3:33"},"nodeType":"YulFunctionCall","src":"26642:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26616:6:33"},"nodeType":"YulFunctionCall","src":"26616:47:33"},"nodeType":"YulExpressionStatement","src":"26616:47:33"},{"nodeType":"YulAssignment","src":"26672:139:33","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"26806:4:33"}],"functionName":{"name":"abi_encode_t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"26680:124:33"},"nodeType":"YulFunctionCall","src":"26680:131:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26672:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"26550:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"26565:4:33","type":""}],"src":"26399:419:33"},{"body":{"nodeType":"YulBlock","src":"26930:119:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"26952:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"26960:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26948:3:33"},"nodeType":"YulFunctionCall","src":"26948:14:33"},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061","kind":"string","nodeType":"YulLiteral","src":"26964:34:33","type":"","value":"Ownable: new owner is the zero a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26941:6:33"},"nodeType":"YulFunctionCall","src":"26941:58:33"},"nodeType":"YulExpressionStatement","src":"26941:58:33"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"27020:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"27028:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27016:3:33"},"nodeType":"YulFunctionCall","src":"27016:15:33"},{"hexValue":"646472657373","kind":"string","nodeType":"YulLiteral","src":"27033:8:33","type":"","value":"ddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27009:6:33"},"nodeType":"YulFunctionCall","src":"27009:33:33"},"nodeType":"YulExpressionStatement","src":"27009:33:33"}]},"name":"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"26922:6:33","type":""}],"src":"26824:225:33"},{"body":{"nodeType":"YulBlock","src":"27201:220:33","statements":[{"nodeType":"YulAssignment","src":"27211:74:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27277:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"27282:2:33","type":"","value":"38"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"27218:58:33"},"nodeType":"YulFunctionCall","src":"27218:67:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"27211:3:33"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27383:3:33"}],"functionName":{"name":"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","nodeType":"YulIdentifier","src":"27294:88:33"},"nodeType":"YulFunctionCall","src":"27294:93:33"},"nodeType":"YulExpressionStatement","src":"27294:93:33"},{"nodeType":"YulAssignment","src":"27396:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27407:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"27412:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27403:3:33"},"nodeType":"YulFunctionCall","src":"27403:12:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"27396:3:33"}]}]},"name":"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"27189:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"27197:3:33","type":""}],"src":"27055:366:33"},{"body":{"nodeType":"YulBlock","src":"27598:248:33","statements":[{"nodeType":"YulAssignment","src":"27608:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27620:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"27631:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27616:3:33"},"nodeType":"YulFunctionCall","src":"27616:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27608:4:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27655:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"27666:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27651:3:33"},"nodeType":"YulFunctionCall","src":"27651:17:33"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"27674:4:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"27680:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"27670:3:33"},"nodeType":"YulFunctionCall","src":"27670:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27644:6:33"},"nodeType":"YulFunctionCall","src":"27644:47:33"},"nodeType":"YulExpressionStatement","src":"27644:47:33"},{"nodeType":"YulAssignment","src":"27700:139:33","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"27834:4:33"}],"functionName":{"name":"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"27708:124:33"},"nodeType":"YulFunctionCall","src":"27708:131:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27700:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"27578:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"27593:4:33","type":""}],"src":"27427:419:33"},{"body":{"nodeType":"YulBlock","src":"27958:117:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"27980:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"27988:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27976:3:33"},"nodeType":"YulFunctionCall","src":"27976:14:33"},{"hexValue":"45524332303a20617070726f76652066726f6d20746865207a65726f20616464","kind":"string","nodeType":"YulLiteral","src":"27992:34:33","type":"","value":"ERC20: approve from the zero add"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27969:6:33"},"nodeType":"YulFunctionCall","src":"27969:58:33"},"nodeType":"YulExpressionStatement","src":"27969:58:33"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"28048:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"28056:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28044:3:33"},"nodeType":"YulFunctionCall","src":"28044:15:33"},{"hexValue":"72657373","kind":"string","nodeType":"YulLiteral","src":"28061:6:33","type":"","value":"ress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28037:6:33"},"nodeType":"YulFunctionCall","src":"28037:31:33"},"nodeType":"YulExpressionStatement","src":"28037:31:33"}]},"name":"store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"27950:6:33","type":""}],"src":"27852:223:33"},{"body":{"nodeType":"YulBlock","src":"28227:220:33","statements":[{"nodeType":"YulAssignment","src":"28237:74:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"28303:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"28308:2:33","type":"","value":"36"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"28244:58:33"},"nodeType":"YulFunctionCall","src":"28244:67:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"28237:3:33"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"28409:3:33"}],"functionName":{"name":"store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208","nodeType":"YulIdentifier","src":"28320:88:33"},"nodeType":"YulFunctionCall","src":"28320:93:33"},"nodeType":"YulExpressionStatement","src":"28320:93:33"},{"nodeType":"YulAssignment","src":"28422:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"28433:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"28438:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28429:3:33"},"nodeType":"YulFunctionCall","src":"28429:12:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"28422:3:33"}]}]},"name":"abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"28215:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"28223:3:33","type":""}],"src":"28081:366:33"},{"body":{"nodeType":"YulBlock","src":"28624:248:33","statements":[{"nodeType":"YulAssignment","src":"28634:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28646:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"28657:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28642:3:33"},"nodeType":"YulFunctionCall","src":"28642:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"28634:4:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28681:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"28692:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28677:3:33"},"nodeType":"YulFunctionCall","src":"28677:17:33"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"28700:4:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"28706:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"28696:3:33"},"nodeType":"YulFunctionCall","src":"28696:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28670:6:33"},"nodeType":"YulFunctionCall","src":"28670:47:33"},"nodeType":"YulExpressionStatement","src":"28670:47:33"},{"nodeType":"YulAssignment","src":"28726:139:33","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"28860:4:33"}],"functionName":{"name":"abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"28734:124:33"},"nodeType":"YulFunctionCall","src":"28734:131:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"28726:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"28604:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"28619:4:33","type":""}],"src":"28453:419:33"},{"body":{"nodeType":"YulBlock","src":"28984:115:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"29006:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"29014:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29002:3:33"},"nodeType":"YulFunctionCall","src":"29002:14:33"},{"hexValue":"45524332303a20617070726f766520746f20746865207a65726f206164647265","kind":"string","nodeType":"YulLiteral","src":"29018:34:33","type":"","value":"ERC20: approve to the zero addre"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28995:6:33"},"nodeType":"YulFunctionCall","src":"28995:58:33"},"nodeType":"YulExpressionStatement","src":"28995:58:33"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"29074:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"29082:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29070:3:33"},"nodeType":"YulFunctionCall","src":"29070:15:33"},{"hexValue":"7373","kind":"string","nodeType":"YulLiteral","src":"29087:4:33","type":"","value":"ss"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29063:6:33"},"nodeType":"YulFunctionCall","src":"29063:29:33"},"nodeType":"YulExpressionStatement","src":"29063:29:33"}]},"name":"store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"28976:6:33","type":""}],"src":"28878:221:33"},{"body":{"nodeType":"YulBlock","src":"29251:220:33","statements":[{"nodeType":"YulAssignment","src":"29261:74:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29327:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"29332:2:33","type":"","value":"34"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"29268:58:33"},"nodeType":"YulFunctionCall","src":"29268:67:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"29261:3:33"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29433:3:33"}],"functionName":{"name":"store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029","nodeType":"YulIdentifier","src":"29344:88:33"},"nodeType":"YulFunctionCall","src":"29344:93:33"},"nodeType":"YulExpressionStatement","src":"29344:93:33"},{"nodeType":"YulAssignment","src":"29446:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29457:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"29462:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29453:3:33"},"nodeType":"YulFunctionCall","src":"29453:12:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"29446:3:33"}]}]},"name":"abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"29239:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"29247:3:33","type":""}],"src":"29105:366:33"},{"body":{"nodeType":"YulBlock","src":"29648:248:33","statements":[{"nodeType":"YulAssignment","src":"29658:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29670:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"29681:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29666:3:33"},"nodeType":"YulFunctionCall","src":"29666:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"29658:4:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29705:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"29716:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29701:3:33"},"nodeType":"YulFunctionCall","src":"29701:17:33"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"29724:4:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"29730:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"29720:3:33"},"nodeType":"YulFunctionCall","src":"29720:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29694:6:33"},"nodeType":"YulFunctionCall","src":"29694:47:33"},"nodeType":"YulExpressionStatement","src":"29694:47:33"},{"nodeType":"YulAssignment","src":"29750:139:33","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"29884:4:33"}],"functionName":{"name":"abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"29758:124:33"},"nodeType":"YulFunctionCall","src":"29758:131:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"29750:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"29628:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"29643:4:33","type":""}],"src":"29477:419:33"},{"body":{"nodeType":"YulBlock","src":"30008:76:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"30030:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"30038:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30026:3:33"},"nodeType":"YulFunctionCall","src":"30026:14:33"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"30042:34:33","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30019:6:33"},"nodeType":"YulFunctionCall","src":"30019:58:33"},"nodeType":"YulExpressionStatement","src":"30019:58:33"}]},"name":"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"30000:6:33","type":""}],"src":"29902:182:33"},{"body":{"nodeType":"YulBlock","src":"30236:220:33","statements":[{"nodeType":"YulAssignment","src":"30246:74:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"30312:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"30317:2:33","type":"","value":"32"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"30253:58:33"},"nodeType":"YulFunctionCall","src":"30253:67:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"30246:3:33"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"30418:3:33"}],"functionName":{"name":"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","nodeType":"YulIdentifier","src":"30329:88:33"},"nodeType":"YulFunctionCall","src":"30329:93:33"},"nodeType":"YulExpressionStatement","src":"30329:93:33"},{"nodeType":"YulAssignment","src":"30431:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"30442:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"30447:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30438:3:33"},"nodeType":"YulFunctionCall","src":"30438:12:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"30431:3:33"}]}]},"name":"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"30224:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"30232:3:33","type":""}],"src":"30090:366:33"},{"body":{"nodeType":"YulBlock","src":"30633:248:33","statements":[{"nodeType":"YulAssignment","src":"30643:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30655:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"30666:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30651:3:33"},"nodeType":"YulFunctionCall","src":"30651:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"30643:4:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30690:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"30701:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30686:3:33"},"nodeType":"YulFunctionCall","src":"30686:17:33"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"30709:4:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"30715:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"30705:3:33"},"nodeType":"YulFunctionCall","src":"30705:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30679:6:33"},"nodeType":"YulFunctionCall","src":"30679:47:33"},"nodeType":"YulExpressionStatement","src":"30679:47:33"},{"nodeType":"YulAssignment","src":"30735:139:33","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"30869:4:33"}],"functionName":{"name":"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"30743:124:33"},"nodeType":"YulFunctionCall","src":"30743:131:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"30735:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"30613:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"30628:4:33","type":""}],"src":"30462:419:33"},{"body":{"nodeType":"YulBlock","src":"30927:76:33","statements":[{"body":{"nodeType":"YulBlock","src":"30981:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"30990:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"30993:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"30983:6:33"},"nodeType":"YulFunctionCall","src":"30983:12:33"},"nodeType":"YulExpressionStatement","src":"30983:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"30950:5:33"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"30972:5:33"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"30957:14:33"},"nodeType":"YulFunctionCall","src":"30957:21:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"30947:2:33"},"nodeType":"YulFunctionCall","src":"30947:32:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"30940:6:33"},"nodeType":"YulFunctionCall","src":"30940:40:33"},"nodeType":"YulIf","src":"30937:60:33"}]},"name":"validator_revert_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"30920:5:33","type":""}],"src":"30887:116:33"},{"body":{"nodeType":"YulBlock","src":"31069:77:33","statements":[{"nodeType":"YulAssignment","src":"31079:22:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"31094:6:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"31088:5:33"},"nodeType":"YulFunctionCall","src":"31088:13:33"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"31079:5:33"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"31134:5:33"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"31110:23:33"},"nodeType":"YulFunctionCall","src":"31110:30:33"},"nodeType":"YulExpressionStatement","src":"31110:30:33"}]},"name":"abi_decode_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"31047:6:33","type":""},{"name":"end","nodeType":"YulTypedName","src":"31055:3:33","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"31063:5:33","type":""}],"src":"31009:137:33"},{"body":{"nodeType":"YulBlock","src":"31226:271:33","statements":[{"body":{"nodeType":"YulBlock","src":"31272:83:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"31274:77:33"},"nodeType":"YulFunctionCall","src":"31274:79:33"},"nodeType":"YulExpressionStatement","src":"31274:79:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"31247:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"31256:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"31243:3:33"},"nodeType":"YulFunctionCall","src":"31243:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"31268:2:33","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"31239:3:33"},"nodeType":"YulFunctionCall","src":"31239:32:33"},"nodeType":"YulIf","src":"31236:119:33"},{"nodeType":"YulBlock","src":"31365:125:33","statements":[{"nodeType":"YulVariableDeclaration","src":"31380:15:33","value":{"kind":"number","nodeType":"YulLiteral","src":"31394:1:33","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"31384:6:33","type":""}]},{"nodeType":"YulAssignment","src":"31409:71:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31452:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"31463:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31448:3:33"},"nodeType":"YulFunctionCall","src":"31448:22:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"31472:7:33"}],"functionName":{"name":"abi_decode_t_bool_fromMemory","nodeType":"YulIdentifier","src":"31419:28:33"},"nodeType":"YulFunctionCall","src":"31419:61:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"31409:6:33"}]}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"31196:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"31207:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"31219:6:33","type":""}],"src":"31152:345:33"},{"body":{"nodeType":"YulBlock","src":"31566:80:33","statements":[{"nodeType":"YulAssignment","src":"31576:22:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"31591:6:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"31585:5:33"},"nodeType":"YulFunctionCall","src":"31585:13:33"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"31576:5:33"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"31634:5:33"}],"functionName":{"name":"validator_revert_t_bytes32","nodeType":"YulIdentifier","src":"31607:26:33"},"nodeType":"YulFunctionCall","src":"31607:33:33"},"nodeType":"YulExpressionStatement","src":"31607:33:33"}]},"name":"abi_decode_t_bytes32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"31544:6:33","type":""},{"name":"end","nodeType":"YulTypedName","src":"31552:3:33","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"31560:5:33","type":""}],"src":"31503:143:33"},{"body":{"nodeType":"YulBlock","src":"31729:274:33","statements":[{"body":{"nodeType":"YulBlock","src":"31775:83:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"31777:77:33"},"nodeType":"YulFunctionCall","src":"31777:79:33"},"nodeType":"YulExpressionStatement","src":"31777:79:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"31750:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"31759:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"31746:3:33"},"nodeType":"YulFunctionCall","src":"31746:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"31771:2:33","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"31742:3:33"},"nodeType":"YulFunctionCall","src":"31742:32:33"},"nodeType":"YulIf","src":"31739:119:33"},{"nodeType":"YulBlock","src":"31868:128:33","statements":[{"nodeType":"YulVariableDeclaration","src":"31883:15:33","value":{"kind":"number","nodeType":"YulLiteral","src":"31897:1:33","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"31887:6:33","type":""}]},{"nodeType":"YulAssignment","src":"31912:74:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31958:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"31969:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31954:3:33"},"nodeType":"YulFunctionCall","src":"31954:22:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"31978:7:33"}],"functionName":{"name":"abi_decode_t_bytes32_fromMemory","nodeType":"YulIdentifier","src":"31922:31:33"},"nodeType":"YulFunctionCall","src":"31922:64:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"31912:6:33"}]}]}]},"name":"abi_decode_tuple_t_bytes32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"31699:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"31710:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"31722:6:33","type":""}],"src":"31652:351:33"},{"body":{"nodeType":"YulBlock","src":"32115:127:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"32137:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"32145:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32133:3:33"},"nodeType":"YulFunctionCall","src":"32133:14:33"},{"hexValue":"45524331393637557067726164653a206e657720696d706c656d656e74617469","kind":"string","nodeType":"YulLiteral","src":"32149:34:33","type":"","value":"ERC1967Upgrade: new implementati"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32126:6:33"},"nodeType":"YulFunctionCall","src":"32126:58:33"},"nodeType":"YulExpressionStatement","src":"32126:58:33"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"32205:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"32213:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32201:3:33"},"nodeType":"YulFunctionCall","src":"32201:15:33"},{"hexValue":"6f6e206973206e6f742055555053","kind":"string","nodeType":"YulLiteral","src":"32218:16:33","type":"","value":"on is not UUPS"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32194:6:33"},"nodeType":"YulFunctionCall","src":"32194:41:33"},"nodeType":"YulExpressionStatement","src":"32194:41:33"}]},"name":"store_literal_in_memory_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"32107:6:33","type":""}],"src":"32009:233:33"},{"body":{"nodeType":"YulBlock","src":"32394:220:33","statements":[{"nodeType":"YulAssignment","src":"32404:74:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"32470:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"32475:2:33","type":"","value":"46"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"32411:58:33"},"nodeType":"YulFunctionCall","src":"32411:67:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"32404:3:33"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"32576:3:33"}],"functionName":{"name":"store_literal_in_memory_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24","nodeType":"YulIdentifier","src":"32487:88:33"},"nodeType":"YulFunctionCall","src":"32487:93:33"},"nodeType":"YulExpressionStatement","src":"32487:93:33"},{"nodeType":"YulAssignment","src":"32589:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"32600:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"32605:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32596:3:33"},"nodeType":"YulFunctionCall","src":"32596:12:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"32589:3:33"}]}]},"name":"abi_encode_t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"32382:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"32390:3:33","type":""}],"src":"32248:366:33"},{"body":{"nodeType":"YulBlock","src":"32791:248:33","statements":[{"nodeType":"YulAssignment","src":"32801:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32813:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"32824:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32809:3:33"},"nodeType":"YulFunctionCall","src":"32809:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"32801:4:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32848:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"32859:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32844:3:33"},"nodeType":"YulFunctionCall","src":"32844:17:33"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"32867:4:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"32873:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"32863:3:33"},"nodeType":"YulFunctionCall","src":"32863:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32837:6:33"},"nodeType":"YulFunctionCall","src":"32837:47:33"},"nodeType":"YulExpressionStatement","src":"32837:47:33"},{"nodeType":"YulAssignment","src":"32893:139:33","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"33027:4:33"}],"functionName":{"name":"abi_encode_t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"32901:124:33"},"nodeType":"YulFunctionCall","src":"32901:131:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"32893:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"32771:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"32786:4:33","type":""}],"src":"32620:419:33"},{"body":{"nodeType":"YulBlock","src":"33151:122:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"33173:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"33181:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33169:3:33"},"nodeType":"YulFunctionCall","src":"33169:14:33"},{"hexValue":"45524331393637557067726164653a20756e737570706f727465642070726f78","kind":"string","nodeType":"YulLiteral","src":"33185:34:33","type":"","value":"ERC1967Upgrade: unsupported prox"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33162:6:33"},"nodeType":"YulFunctionCall","src":"33162:58:33"},"nodeType":"YulExpressionStatement","src":"33162:58:33"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"33241:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"33249:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33237:3:33"},"nodeType":"YulFunctionCall","src":"33237:15:33"},{"hexValue":"6961626c6555554944","kind":"string","nodeType":"YulLiteral","src":"33254:11:33","type":"","value":"iableUUID"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33230:6:33"},"nodeType":"YulFunctionCall","src":"33230:36:33"},"nodeType":"YulExpressionStatement","src":"33230:36:33"}]},"name":"store_literal_in_memory_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"33143:6:33","type":""}],"src":"33045:228:33"},{"body":{"nodeType":"YulBlock","src":"33425:220:33","statements":[{"nodeType":"YulAssignment","src":"33435:74:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"33501:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"33506:2:33","type":"","value":"41"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"33442:58:33"},"nodeType":"YulFunctionCall","src":"33442:67:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"33435:3:33"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"33607:3:33"}],"functionName":{"name":"store_literal_in_memory_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c","nodeType":"YulIdentifier","src":"33518:88:33"},"nodeType":"YulFunctionCall","src":"33518:93:33"},"nodeType":"YulExpressionStatement","src":"33518:93:33"},{"nodeType":"YulAssignment","src":"33620:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"33631:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"33636:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33627:3:33"},"nodeType":"YulFunctionCall","src":"33627:12:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"33620:3:33"}]}]},"name":"abi_encode_t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"33413:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"33421:3:33","type":""}],"src":"33279:366:33"},{"body":{"nodeType":"YulBlock","src":"33822:248:33","statements":[{"nodeType":"YulAssignment","src":"33832:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"33844:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"33855:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33840:3:33"},"nodeType":"YulFunctionCall","src":"33840:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"33832:4:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"33879:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"33890:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33875:3:33"},"nodeType":"YulFunctionCall","src":"33875:17:33"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"33898:4:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"33904:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"33894:3:33"},"nodeType":"YulFunctionCall","src":"33894:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33868:6:33"},"nodeType":"YulFunctionCall","src":"33868:47:33"},"nodeType":"YulExpressionStatement","src":"33868:47:33"},{"nodeType":"YulAssignment","src":"33924:139:33","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"34058:4:33"}],"functionName":{"name":"abi_encode_t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"33932:124:33"},"nodeType":"YulFunctionCall","src":"33932:131:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"33924:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"33802:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"33817:4:33","type":""}],"src":"33651:419:33"},{"body":{"nodeType":"YulBlock","src":"34182:66:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"34204:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"34212:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34200:3:33"},"nodeType":"YulFunctionCall","src":"34200:14:33"},{"hexValue":"4552433230536e617073686f743a2069642069732030","kind":"string","nodeType":"YulLiteral","src":"34216:24:33","type":"","value":"ERC20Snapshot: id is 0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"34193:6:33"},"nodeType":"YulFunctionCall","src":"34193:48:33"},"nodeType":"YulExpressionStatement","src":"34193:48:33"}]},"name":"store_literal_in_memory_d85a3cdc203c5cdc6dda93c12cd017145671a0ed9058a16c7aa00b8398a4a8e6","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"34174:6:33","type":""}],"src":"34076:172:33"},{"body":{"nodeType":"YulBlock","src":"34400:220:33","statements":[{"nodeType":"YulAssignment","src":"34410:74:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"34476:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"34481:2:33","type":"","value":"22"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"34417:58:33"},"nodeType":"YulFunctionCall","src":"34417:67:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"34410:3:33"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"34582:3:33"}],"functionName":{"name":"store_literal_in_memory_d85a3cdc203c5cdc6dda93c12cd017145671a0ed9058a16c7aa00b8398a4a8e6","nodeType":"YulIdentifier","src":"34493:88:33"},"nodeType":"YulFunctionCall","src":"34493:93:33"},"nodeType":"YulExpressionStatement","src":"34493:93:33"},{"nodeType":"YulAssignment","src":"34595:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"34606:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"34611:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34602:3:33"},"nodeType":"YulFunctionCall","src":"34602:12:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"34595:3:33"}]}]},"name":"abi_encode_t_stringliteral_d85a3cdc203c5cdc6dda93c12cd017145671a0ed9058a16c7aa00b8398a4a8e6_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"34388:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"34396:3:33","type":""}],"src":"34254:366:33"},{"body":{"nodeType":"YulBlock","src":"34797:248:33","statements":[{"nodeType":"YulAssignment","src":"34807:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"34819:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"34830:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34815:3:33"},"nodeType":"YulFunctionCall","src":"34815:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"34807:4:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"34854:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"34865:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34850:3:33"},"nodeType":"YulFunctionCall","src":"34850:17:33"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"34873:4:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"34879:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"34869:3:33"},"nodeType":"YulFunctionCall","src":"34869:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"34843:6:33"},"nodeType":"YulFunctionCall","src":"34843:47:33"},"nodeType":"YulExpressionStatement","src":"34843:47:33"},{"nodeType":"YulAssignment","src":"34899:139:33","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"35033:4:33"}],"functionName":{"name":"abi_encode_t_stringliteral_d85a3cdc203c5cdc6dda93c12cd017145671a0ed9058a16c7aa00b8398a4a8e6_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"34907:124:33"},"nodeType":"YulFunctionCall","src":"34907:131:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"34899:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_d85a3cdc203c5cdc6dda93c12cd017145671a0ed9058a16c7aa00b8398a4a8e6__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"34777:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"34792:4:33","type":""}],"src":"34626:419:33"},{"body":{"nodeType":"YulBlock","src":"35157:73:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"35179:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"35187:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35175:3:33"},"nodeType":"YulFunctionCall","src":"35175:14:33"},{"hexValue":"4552433230536e617073686f743a206e6f6e6578697374656e74206964","kind":"string","nodeType":"YulLiteral","src":"35191:31:33","type":"","value":"ERC20Snapshot: nonexistent id"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"35168:6:33"},"nodeType":"YulFunctionCall","src":"35168:55:33"},"nodeType":"YulExpressionStatement","src":"35168:55:33"}]},"name":"store_literal_in_memory_031e0835d070e7bbd2c8dcce466eadb8c6b9fd22432b0357ab8c37bd9a385940","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"35149:6:33","type":""}],"src":"35051:179:33"},{"body":{"nodeType":"YulBlock","src":"35382:220:33","statements":[{"nodeType":"YulAssignment","src":"35392:74:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"35458:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"35463:2:33","type":"","value":"29"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"35399:58:33"},"nodeType":"YulFunctionCall","src":"35399:67:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"35392:3:33"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"35564:3:33"}],"functionName":{"name":"store_literal_in_memory_031e0835d070e7bbd2c8dcce466eadb8c6b9fd22432b0357ab8c37bd9a385940","nodeType":"YulIdentifier","src":"35475:88:33"},"nodeType":"YulFunctionCall","src":"35475:93:33"},"nodeType":"YulExpressionStatement","src":"35475:93:33"},{"nodeType":"YulAssignment","src":"35577:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"35588:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"35593:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35584:3:33"},"nodeType":"YulFunctionCall","src":"35584:12:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"35577:3:33"}]}]},"name":"abi_encode_t_stringliteral_031e0835d070e7bbd2c8dcce466eadb8c6b9fd22432b0357ab8c37bd9a385940_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"35370:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"35378:3:33","type":""}],"src":"35236:366:33"},{"body":{"nodeType":"YulBlock","src":"35779:248:33","statements":[{"nodeType":"YulAssignment","src":"35789:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"35801:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"35812:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35797:3:33"},"nodeType":"YulFunctionCall","src":"35797:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"35789:4:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"35836:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"35847:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35832:3:33"},"nodeType":"YulFunctionCall","src":"35832:17:33"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"35855:4:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"35861:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"35851:3:33"},"nodeType":"YulFunctionCall","src":"35851:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"35825:6:33"},"nodeType":"YulFunctionCall","src":"35825:47:33"},"nodeType":"YulExpressionStatement","src":"35825:47:33"},{"nodeType":"YulAssignment","src":"35881:139:33","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"36015:4:33"}],"functionName":{"name":"abi_encode_t_stringliteral_031e0835d070e7bbd2c8dcce466eadb8c6b9fd22432b0357ab8c37bd9a385940_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"35889:124:33"},"nodeType":"YulFunctionCall","src":"35889:131:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"35881:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_031e0835d070e7bbd2c8dcce466eadb8c6b9fd22432b0357ab8c37bd9a385940__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"35759:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"35774:4:33","type":""}],"src":"35608:419:33"},{"body":{"nodeType":"YulBlock","src":"36061:152:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"36078:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"36081:77:33","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"36071:6:33"},"nodeType":"YulFunctionCall","src":"36071:88:33"},"nodeType":"YulExpressionStatement","src":"36071:88:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"36175:1:33","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"36178:4:33","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"36168:6:33"},"nodeType":"YulFunctionCall","src":"36168:15:33"},"nodeType":"YulExpressionStatement","src":"36168:15:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"36199:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"36202:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"36192:6:33"},"nodeType":"YulFunctionCall","src":"36192:15:33"},"nodeType":"YulExpressionStatement","src":"36192:15:33"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"36033:180:33"},{"body":{"nodeType":"YulBlock","src":"36325:124:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"36347:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"36355:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36343:3:33"},"nodeType":"YulFunctionCall","src":"36343:14:33"},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069","kind":"string","nodeType":"YulLiteral","src":"36359:34:33","type":"","value":"Initializable: contract is not i"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"36336:6:33"},"nodeType":"YulFunctionCall","src":"36336:58:33"},"nodeType":"YulExpressionStatement","src":"36336:58:33"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"36415:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"36423:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36411:3:33"},"nodeType":"YulFunctionCall","src":"36411:15:33"},{"hexValue":"6e697469616c697a696e67","kind":"string","nodeType":"YulLiteral","src":"36428:13:33","type":"","value":"nitializing"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"36404:6:33"},"nodeType":"YulFunctionCall","src":"36404:38:33"},"nodeType":"YulExpressionStatement","src":"36404:38:33"}]},"name":"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"36317:6:33","type":""}],"src":"36219:230:33"},{"body":{"nodeType":"YulBlock","src":"36601:220:33","statements":[{"nodeType":"YulAssignment","src":"36611:74:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"36677:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"36682:2:33","type":"","value":"43"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"36618:58:33"},"nodeType":"YulFunctionCall","src":"36618:67:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"36611:3:33"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"36783:3:33"}],"functionName":{"name":"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","nodeType":"YulIdentifier","src":"36694:88:33"},"nodeType":"YulFunctionCall","src":"36694:93:33"},"nodeType":"YulExpressionStatement","src":"36694:93:33"},{"nodeType":"YulAssignment","src":"36796:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"36807:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"36812:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36803:3:33"},"nodeType":"YulFunctionCall","src":"36803:12:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"36796:3:33"}]}]},"name":"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"36589:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"36597:3:33","type":""}],"src":"36455:366:33"},{"body":{"nodeType":"YulBlock","src":"36998:248:33","statements":[{"nodeType":"YulAssignment","src":"37008:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"37020:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"37031:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37016:3:33"},"nodeType":"YulFunctionCall","src":"37016:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"37008:4:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"37055:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"37066:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37051:3:33"},"nodeType":"YulFunctionCall","src":"37051:17:33"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"37074:4:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"37080:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"37070:3:33"},"nodeType":"YulFunctionCall","src":"37070:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"37044:6:33"},"nodeType":"YulFunctionCall","src":"37044:47:33"},"nodeType":"YulExpressionStatement","src":"37044:47:33"},{"nodeType":"YulAssignment","src":"37100:139:33","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"37234:4:33"}],"functionName":{"name":"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"37108:124:33"},"nodeType":"YulFunctionCall","src":"37108:131:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"37100:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"36978:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"36993:4:33","type":""}],"src":"36827:419:33"},{"body":{"nodeType":"YulBlock","src":"37358:73:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"37380:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"37388:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37376:3:33"},"nodeType":"YulFunctionCall","src":"37376:14:33"},{"hexValue":"45524332303a20696e73756666696369656e7420616c6c6f77616e6365","kind":"string","nodeType":"YulLiteral","src":"37392:31:33","type":"","value":"ERC20: insufficient allowance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"37369:6:33"},"nodeType":"YulFunctionCall","src":"37369:55:33"},"nodeType":"YulExpressionStatement","src":"37369:55:33"}]},"name":"store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"37350:6:33","type":""}],"src":"37252:179:33"},{"body":{"nodeType":"YulBlock","src":"37583:220:33","statements":[{"nodeType":"YulAssignment","src":"37593:74:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"37659:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"37664:2:33","type":"","value":"29"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"37600:58:33"},"nodeType":"YulFunctionCall","src":"37600:67:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"37593:3:33"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"37765:3:33"}],"functionName":{"name":"store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe","nodeType":"YulIdentifier","src":"37676:88:33"},"nodeType":"YulFunctionCall","src":"37676:93:33"},"nodeType":"YulExpressionStatement","src":"37676:93:33"},{"nodeType":"YulAssignment","src":"37778:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"37789:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"37794:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37785:3:33"},"nodeType":"YulFunctionCall","src":"37785:12:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"37778:3:33"}]}]},"name":"abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"37571:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"37579:3:33","type":""}],"src":"37437:366:33"},{"body":{"nodeType":"YulBlock","src":"37980:248:33","statements":[{"nodeType":"YulAssignment","src":"37990:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"38002:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"38013:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37998:3:33"},"nodeType":"YulFunctionCall","src":"37998:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"37990:4:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"38037:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"38048:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38033:3:33"},"nodeType":"YulFunctionCall","src":"38033:17:33"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"38056:4:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"38062:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"38052:3:33"},"nodeType":"YulFunctionCall","src":"38052:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"38026:6:33"},"nodeType":"YulFunctionCall","src":"38026:47:33"},"nodeType":"YulExpressionStatement","src":"38026:47:33"},{"nodeType":"YulAssignment","src":"38082:139:33","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"38216:4:33"}],"functionName":{"name":"abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"38090:124:33"},"nodeType":"YulFunctionCall","src":"38090:131:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"38082:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"37960:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"37975:4:33","type":""}],"src":"37809:419:33"},{"body":{"nodeType":"YulBlock","src":"38340:118:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"38362:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"38370:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38358:3:33"},"nodeType":"YulFunctionCall","src":"38358:14:33"},{"hexValue":"45524332303a207472616e736665722066726f6d20746865207a65726f206164","kind":"string","nodeType":"YulLiteral","src":"38374:34:33","type":"","value":"ERC20: transfer from the zero ad"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"38351:6:33"},"nodeType":"YulFunctionCall","src":"38351:58:33"},"nodeType":"YulExpressionStatement","src":"38351:58:33"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"38430:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"38438:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38426:3:33"},"nodeType":"YulFunctionCall","src":"38426:15:33"},{"hexValue":"6472657373","kind":"string","nodeType":"YulLiteral","src":"38443:7:33","type":"","value":"dress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"38419:6:33"},"nodeType":"YulFunctionCall","src":"38419:32:33"},"nodeType":"YulExpressionStatement","src":"38419:32:33"}]},"name":"store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"38332:6:33","type":""}],"src":"38234:224:33"},{"body":{"nodeType":"YulBlock","src":"38610:220:33","statements":[{"nodeType":"YulAssignment","src":"38620:74:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"38686:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"38691:2:33","type":"","value":"37"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"38627:58:33"},"nodeType":"YulFunctionCall","src":"38627:67:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"38620:3:33"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"38792:3:33"}],"functionName":{"name":"store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea","nodeType":"YulIdentifier","src":"38703:88:33"},"nodeType":"YulFunctionCall","src":"38703:93:33"},"nodeType":"YulExpressionStatement","src":"38703:93:33"},{"nodeType":"YulAssignment","src":"38805:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"38816:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"38821:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38812:3:33"},"nodeType":"YulFunctionCall","src":"38812:12:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"38805:3:33"}]}]},"name":"abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"38598:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"38606:3:33","type":""}],"src":"38464:366:33"},{"body":{"nodeType":"YulBlock","src":"39007:248:33","statements":[{"nodeType":"YulAssignment","src":"39017:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"39029:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"39040:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"39025:3:33"},"nodeType":"YulFunctionCall","src":"39025:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"39017:4:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"39064:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"39075:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"39060:3:33"},"nodeType":"YulFunctionCall","src":"39060:17:33"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"39083:4:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"39089:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"39079:3:33"},"nodeType":"YulFunctionCall","src":"39079:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"39053:6:33"},"nodeType":"YulFunctionCall","src":"39053:47:33"},"nodeType":"YulExpressionStatement","src":"39053:47:33"},{"nodeType":"YulAssignment","src":"39109:139:33","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"39243:4:33"}],"functionName":{"name":"abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"39117:124:33"},"nodeType":"YulFunctionCall","src":"39117:131:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"39109:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"38987:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"39002:4:33","type":""}],"src":"38836:419:33"},{"body":{"nodeType":"YulBlock","src":"39367:116:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"39389:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"39397:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"39385:3:33"},"nodeType":"YulFunctionCall","src":"39385:14:33"},{"hexValue":"45524332303a207472616e7366657220746f20746865207a65726f2061646472","kind":"string","nodeType":"YulLiteral","src":"39401:34:33","type":"","value":"ERC20: transfer to the zero addr"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"39378:6:33"},"nodeType":"YulFunctionCall","src":"39378:58:33"},"nodeType":"YulExpressionStatement","src":"39378:58:33"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"39457:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"39465:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"39453:3:33"},"nodeType":"YulFunctionCall","src":"39453:15:33"},{"hexValue":"657373","kind":"string","nodeType":"YulLiteral","src":"39470:5:33","type":"","value":"ess"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"39446:6:33"},"nodeType":"YulFunctionCall","src":"39446:30:33"},"nodeType":"YulExpressionStatement","src":"39446:30:33"}]},"name":"store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"39359:6:33","type":""}],"src":"39261:222:33"},{"body":{"nodeType":"YulBlock","src":"39635:220:33","statements":[{"nodeType":"YulAssignment","src":"39645:74:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"39711:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"39716:2:33","type":"","value":"35"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"39652:58:33"},"nodeType":"YulFunctionCall","src":"39652:67:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"39645:3:33"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"39817:3:33"}],"functionName":{"name":"store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f","nodeType":"YulIdentifier","src":"39728:88:33"},"nodeType":"YulFunctionCall","src":"39728:93:33"},"nodeType":"YulExpressionStatement","src":"39728:93:33"},{"nodeType":"YulAssignment","src":"39830:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"39841:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"39846:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"39837:3:33"},"nodeType":"YulFunctionCall","src":"39837:12:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"39830:3:33"}]}]},"name":"abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"39623:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"39631:3:33","type":""}],"src":"39489:366:33"},{"body":{"nodeType":"YulBlock","src":"40032:248:33","statements":[{"nodeType":"YulAssignment","src":"40042:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"40054:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"40065:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40050:3:33"},"nodeType":"YulFunctionCall","src":"40050:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"40042:4:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"40089:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"40100:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40085:3:33"},"nodeType":"YulFunctionCall","src":"40085:17:33"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"40108:4:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"40114:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"40104:3:33"},"nodeType":"YulFunctionCall","src":"40104:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"40078:6:33"},"nodeType":"YulFunctionCall","src":"40078:47:33"},"nodeType":"YulExpressionStatement","src":"40078:47:33"},{"nodeType":"YulAssignment","src":"40134:139:33","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"40268:4:33"}],"functionName":{"name":"abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"40142:124:33"},"nodeType":"YulFunctionCall","src":"40142:131:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"40134:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"40012:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"40027:4:33","type":""}],"src":"39861:419:33"},{"body":{"nodeType":"YulBlock","src":"40392:119:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"40414:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"40422:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40410:3:33"},"nodeType":"YulFunctionCall","src":"40410:14:33"},{"hexValue":"45524332303a207472616e7366657220616d6f756e7420657863656564732062","kind":"string","nodeType":"YulLiteral","src":"40426:34:33","type":"","value":"ERC20: transfer amount exceeds b"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"40403:6:33"},"nodeType":"YulFunctionCall","src":"40403:58:33"},"nodeType":"YulExpressionStatement","src":"40403:58:33"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"40482:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"40490:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40478:3:33"},"nodeType":"YulFunctionCall","src":"40478:15:33"},{"hexValue":"616c616e6365","kind":"string","nodeType":"YulLiteral","src":"40495:8:33","type":"","value":"alance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"40471:6:33"},"nodeType":"YulFunctionCall","src":"40471:33:33"},"nodeType":"YulExpressionStatement","src":"40471:33:33"}]},"name":"store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"40384:6:33","type":""}],"src":"40286:225:33"},{"body":{"nodeType":"YulBlock","src":"40663:220:33","statements":[{"nodeType":"YulAssignment","src":"40673:74:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"40739:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"40744:2:33","type":"","value":"38"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"40680:58:33"},"nodeType":"YulFunctionCall","src":"40680:67:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"40673:3:33"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"40845:3:33"}],"functionName":{"name":"store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6","nodeType":"YulIdentifier","src":"40756:88:33"},"nodeType":"YulFunctionCall","src":"40756:93:33"},"nodeType":"YulExpressionStatement","src":"40756:93:33"},{"nodeType":"YulAssignment","src":"40858:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"40869:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"40874:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40865:3:33"},"nodeType":"YulFunctionCall","src":"40865:12:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"40858:3:33"}]}]},"name":"abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"40651:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"40659:3:33","type":""}],"src":"40517:366:33"},{"body":{"nodeType":"YulBlock","src":"41060:248:33","statements":[{"nodeType":"YulAssignment","src":"41070:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"41082:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"41093:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41078:3:33"},"nodeType":"YulFunctionCall","src":"41078:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"41070:4:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"41117:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"41128:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41113:3:33"},"nodeType":"YulFunctionCall","src":"41113:17:33"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"41136:4:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"41142:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"41132:3:33"},"nodeType":"YulFunctionCall","src":"41132:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"41106:6:33"},"nodeType":"YulFunctionCall","src":"41106:47:33"},"nodeType":"YulExpressionStatement","src":"41106:47:33"},{"nodeType":"YulAssignment","src":"41162:139:33","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"41296:4:33"}],"functionName":{"name":"abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"41170:124:33"},"nodeType":"YulFunctionCall","src":"41170:131:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"41162:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"41040:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"41055:4:33","type":""}],"src":"40889:419:33"},{"body":{"nodeType":"YulBlock","src":"41524:454:33","statements":[{"nodeType":"YulAssignment","src":"41534:27:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"41546:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"41557:3:33","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41542:3:33"},"nodeType":"YulFunctionCall","src":"41542:19:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"41534:4:33"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"41615:6:33"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"41628:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"41639:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41624:3:33"},"nodeType":"YulFunctionCall","src":"41624:17:33"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"41571:43:33"},"nodeType":"YulFunctionCall","src":"41571:71:33"},"nodeType":"YulExpressionStatement","src":"41571:71:33"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"41696:6:33"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"41709:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"41720:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41705:3:33"},"nodeType":"YulFunctionCall","src":"41705:18:33"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"41652:43:33"},"nodeType":"YulFunctionCall","src":"41652:72:33"},"nodeType":"YulExpressionStatement","src":"41652:72:33"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"41778:6:33"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"41791:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"41802:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41787:3:33"},"nodeType":"YulFunctionCall","src":"41787:18:33"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"41734:43:33"},"nodeType":"YulFunctionCall","src":"41734:72:33"},"nodeType":"YulExpressionStatement","src":"41734:72:33"},{"expression":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"41860:6:33"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"41873:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"41884:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41869:3:33"},"nodeType":"YulFunctionCall","src":"41869:18:33"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"41816:43:33"},"nodeType":"YulFunctionCall","src":"41816:72:33"},"nodeType":"YulExpressionStatement","src":"41816:72:33"},{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"41942:6:33"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"41955:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"41966:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41951:3:33"},"nodeType":"YulFunctionCall","src":"41951:19:33"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"41898:43:33"},"nodeType":"YulFunctionCall","src":"41898:73:33"},"nodeType":"YulExpressionStatement","src":"41898:73:33"}]},"name":"abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"41464:9:33","type":""},{"name":"value4","nodeType":"YulTypedName","src":"41476:6:33","type":""},{"name":"value3","nodeType":"YulTypedName","src":"41484:6:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"41492:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"41500:6:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"41508:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"41519:4:33","type":""}],"src":"41314:664:33"},{"body":{"nodeType":"YulBlock","src":"42090:126:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"42112:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"42120:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"42108:3:33"},"nodeType":"YulFunctionCall","src":"42108:14:33"},{"hexValue":"455243313936373a206e657720696d706c656d656e746174696f6e206973206e","kind":"string","nodeType":"YulLiteral","src":"42124:34:33","type":"","value":"ERC1967: new implementation is n"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"42101:6:33"},"nodeType":"YulFunctionCall","src":"42101:58:33"},"nodeType":"YulExpressionStatement","src":"42101:58:33"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"42180:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"42188:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"42176:3:33"},"nodeType":"YulFunctionCall","src":"42176:15:33"},{"hexValue":"6f74206120636f6e7472616374","kind":"string","nodeType":"YulLiteral","src":"42193:15:33","type":"","value":"ot a contract"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"42169:6:33"},"nodeType":"YulFunctionCall","src":"42169:40:33"},"nodeType":"YulExpressionStatement","src":"42169:40:33"}]},"name":"store_literal_in_memory_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"42082:6:33","type":""}],"src":"41984:232:33"},{"body":{"nodeType":"YulBlock","src":"42368:220:33","statements":[{"nodeType":"YulAssignment","src":"42378:74:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"42444:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"42449:2:33","type":"","value":"45"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"42385:58:33"},"nodeType":"YulFunctionCall","src":"42385:67:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"42378:3:33"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"42550:3:33"}],"functionName":{"name":"store_literal_in_memory_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65","nodeType":"YulIdentifier","src":"42461:88:33"},"nodeType":"YulFunctionCall","src":"42461:93:33"},"nodeType":"YulExpressionStatement","src":"42461:93:33"},{"nodeType":"YulAssignment","src":"42563:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"42574:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"42579:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"42570:3:33"},"nodeType":"YulFunctionCall","src":"42570:12:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"42563:3:33"}]}]},"name":"abi_encode_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"42356:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"42364:3:33","type":""}],"src":"42222:366:33"},{"body":{"nodeType":"YulBlock","src":"42765:248:33","statements":[{"nodeType":"YulAssignment","src":"42775:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"42787:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"42798:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"42783:3:33"},"nodeType":"YulFunctionCall","src":"42783:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"42775:4:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"42822:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"42833:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"42818:3:33"},"nodeType":"YulFunctionCall","src":"42818:17:33"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"42841:4:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"42847:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"42837:3:33"},"nodeType":"YulFunctionCall","src":"42837:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"42811:6:33"},"nodeType":"YulFunctionCall","src":"42811:47:33"},"nodeType":"YulExpressionStatement","src":"42811:47:33"},{"nodeType":"YulAssignment","src":"42867:139:33","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"43001:4:33"}],"functionName":{"name":"abi_encode_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"42875:124:33"},"nodeType":"YulFunctionCall","src":"42875:131:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"42867:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"42745:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"42760:4:33","type":""}],"src":"42594:419:33"},{"body":{"nodeType":"YulBlock","src":"43125:114:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"43147:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"43155:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"43143:3:33"},"nodeType":"YulFunctionCall","src":"43143:14:33"},{"hexValue":"45524332303a206275726e2066726f6d20746865207a65726f20616464726573","kind":"string","nodeType":"YulLiteral","src":"43159:34:33","type":"","value":"ERC20: burn from the zero addres"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"43136:6:33"},"nodeType":"YulFunctionCall","src":"43136:58:33"},"nodeType":"YulExpressionStatement","src":"43136:58:33"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"43215:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"43223:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"43211:3:33"},"nodeType":"YulFunctionCall","src":"43211:15:33"},{"hexValue":"73","kind":"string","nodeType":"YulLiteral","src":"43228:3:33","type":"","value":"s"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"43204:6:33"},"nodeType":"YulFunctionCall","src":"43204:28:33"},"nodeType":"YulExpressionStatement","src":"43204:28:33"}]},"name":"store_literal_in_memory_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"43117:6:33","type":""}],"src":"43019:220:33"},{"body":{"nodeType":"YulBlock","src":"43391:220:33","statements":[{"nodeType":"YulAssignment","src":"43401:74:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"43467:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"43472:2:33","type":"","value":"33"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"43408:58:33"},"nodeType":"YulFunctionCall","src":"43408:67:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"43401:3:33"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"43573:3:33"}],"functionName":{"name":"store_literal_in_memory_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f","nodeType":"YulIdentifier","src":"43484:88:33"},"nodeType":"YulFunctionCall","src":"43484:93:33"},"nodeType":"YulExpressionStatement","src":"43484:93:33"},{"nodeType":"YulAssignment","src":"43586:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"43597:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"43602:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"43593:3:33"},"nodeType":"YulFunctionCall","src":"43593:12:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"43586:3:33"}]}]},"name":"abi_encode_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"43379:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"43387:3:33","type":""}],"src":"43245:366:33"},{"body":{"nodeType":"YulBlock","src":"43788:248:33","statements":[{"nodeType":"YulAssignment","src":"43798:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"43810:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"43821:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"43806:3:33"},"nodeType":"YulFunctionCall","src":"43806:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"43798:4:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"43845:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"43856:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"43841:3:33"},"nodeType":"YulFunctionCall","src":"43841:17:33"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"43864:4:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"43870:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"43860:3:33"},"nodeType":"YulFunctionCall","src":"43860:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"43834:6:33"},"nodeType":"YulFunctionCall","src":"43834:47:33"},"nodeType":"YulExpressionStatement","src":"43834:47:33"},{"nodeType":"YulAssignment","src":"43890:139:33","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"44024:4:33"}],"functionName":{"name":"abi_encode_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"43898:124:33"},"nodeType":"YulFunctionCall","src":"43898:131:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"43890:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"43768:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"43783:4:33","type":""}],"src":"43617:419:33"},{"body":{"nodeType":"YulBlock","src":"44148:115:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"44170:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"44178:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"44166:3:33"},"nodeType":"YulFunctionCall","src":"44166:14:33"},{"hexValue":"45524332303a206275726e20616d6f756e7420657863656564732062616c616e","kind":"string","nodeType":"YulLiteral","src":"44182:34:33","type":"","value":"ERC20: burn amount exceeds balan"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"44159:6:33"},"nodeType":"YulFunctionCall","src":"44159:58:33"},"nodeType":"YulExpressionStatement","src":"44159:58:33"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"44238:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"44246:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"44234:3:33"},"nodeType":"YulFunctionCall","src":"44234:15:33"},{"hexValue":"6365","kind":"string","nodeType":"YulLiteral","src":"44251:4:33","type":"","value":"ce"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"44227:6:33"},"nodeType":"YulFunctionCall","src":"44227:29:33"},"nodeType":"YulExpressionStatement","src":"44227:29:33"}]},"name":"store_literal_in_memory_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"44140:6:33","type":""}],"src":"44042:221:33"},{"body":{"nodeType":"YulBlock","src":"44415:220:33","statements":[{"nodeType":"YulAssignment","src":"44425:74:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"44491:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"44496:2:33","type":"","value":"34"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"44432:58:33"},"nodeType":"YulFunctionCall","src":"44432:67:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"44425:3:33"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"44597:3:33"}],"functionName":{"name":"store_literal_in_memory_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd","nodeType":"YulIdentifier","src":"44508:88:33"},"nodeType":"YulFunctionCall","src":"44508:93:33"},"nodeType":"YulExpressionStatement","src":"44508:93:33"},{"nodeType":"YulAssignment","src":"44610:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"44621:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"44626:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"44617:3:33"},"nodeType":"YulFunctionCall","src":"44617:12:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"44610:3:33"}]}]},"name":"abi_encode_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"44403:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"44411:3:33","type":""}],"src":"44269:366:33"},{"body":{"nodeType":"YulBlock","src":"44812:248:33","statements":[{"nodeType":"YulAssignment","src":"44822:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"44834:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"44845:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"44830:3:33"},"nodeType":"YulFunctionCall","src":"44830:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"44822:4:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"44869:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"44880:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"44865:3:33"},"nodeType":"YulFunctionCall","src":"44865:17:33"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"44888:4:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"44894:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"44884:3:33"},"nodeType":"YulFunctionCall","src":"44884:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"44858:6:33"},"nodeType":"YulFunctionCall","src":"44858:47:33"},"nodeType":"YulExpressionStatement","src":"44858:47:33"},{"nodeType":"YulAssignment","src":"44914:139:33","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"45048:4:33"}],"functionName":{"name":"abi_encode_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"44922:124:33"},"nodeType":"YulFunctionCall","src":"44922:131:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"44914:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"44792:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"44807:4:33","type":""}],"src":"44641:419:33"},{"body":{"nodeType":"YulBlock","src":"45172:75:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"45194:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"45202:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"45190:3:33"},"nodeType":"YulFunctionCall","src":"45190:14:33"},{"hexValue":"45524332303a206d696e7420746f20746865207a65726f2061646472657373","kind":"string","nodeType":"YulLiteral","src":"45206:33:33","type":"","value":"ERC20: mint to the zero address"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"45183:6:33"},"nodeType":"YulFunctionCall","src":"45183:57:33"},"nodeType":"YulExpressionStatement","src":"45183:57:33"}]},"name":"store_literal_in_memory_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"45164:6:33","type":""}],"src":"45066:181:33"},{"body":{"nodeType":"YulBlock","src":"45399:220:33","statements":[{"nodeType":"YulAssignment","src":"45409:74:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"45475:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"45480:2:33","type":"","value":"31"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"45416:58:33"},"nodeType":"YulFunctionCall","src":"45416:67:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"45409:3:33"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"45581:3:33"}],"functionName":{"name":"store_literal_in_memory_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e","nodeType":"YulIdentifier","src":"45492:88:33"},"nodeType":"YulFunctionCall","src":"45492:93:33"},"nodeType":"YulExpressionStatement","src":"45492:93:33"},{"nodeType":"YulAssignment","src":"45594:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"45605:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"45610:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"45601:3:33"},"nodeType":"YulFunctionCall","src":"45601:12:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"45594:3:33"}]}]},"name":"abi_encode_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"45387:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"45395:3:33","type":""}],"src":"45253:366:33"},{"body":{"nodeType":"YulBlock","src":"45796:248:33","statements":[{"nodeType":"YulAssignment","src":"45806:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"45818:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"45829:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"45814:3:33"},"nodeType":"YulFunctionCall","src":"45814:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"45806:4:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"45853:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"45864:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"45849:3:33"},"nodeType":"YulFunctionCall","src":"45849:17:33"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"45872:4:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"45878:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"45868:3:33"},"nodeType":"YulFunctionCall","src":"45868:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"45842:6:33"},"nodeType":"YulFunctionCall","src":"45842:47:33"},"nodeType":"YulExpressionStatement","src":"45842:47:33"},{"nodeType":"YulAssignment","src":"45898:139:33","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"46032:4:33"}],"functionName":{"name":"abi_encode_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"45906:124:33"},"nodeType":"YulFunctionCall","src":"45906:131:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"45898:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"45776:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"45791:4:33","type":""}],"src":"45625:419:33"},{"body":{"nodeType":"YulBlock","src":"46095:146:33","statements":[{"nodeType":"YulAssignment","src":"46105:25:33","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"46128:1:33"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"46110:17:33"},"nodeType":"YulFunctionCall","src":"46110:20:33"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"46105:1:33"}]},{"nodeType":"YulAssignment","src":"46139:25:33","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"46162:1:33"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"46144:17:33"},"nodeType":"YulFunctionCall","src":"46144:20:33"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"46139:1:33"}]},{"body":{"nodeType":"YulBlock","src":"46186:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"46188:16:33"},"nodeType":"YulFunctionCall","src":"46188:18:33"},"nodeType":"YulExpressionStatement","src":"46188:18:33"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"46180:1:33"},{"name":"y","nodeType":"YulIdentifier","src":"46183:1:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"46177:2:33"},"nodeType":"YulFunctionCall","src":"46177:8:33"},"nodeType":"YulIf","src":"46174:34:33"},{"nodeType":"YulAssignment","src":"46218:17:33","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"46230:1:33"},{"name":"y","nodeType":"YulIdentifier","src":"46233:1:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"46226:3:33"},"nodeType":"YulFunctionCall","src":"46226:9:33"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"46218:4:33"}]}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"46081:1:33","type":""},{"name":"y","nodeType":"YulTypedName","src":"46084:1:33","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"46090:4:33","type":""}],"src":"46050:191:33"},{"body":{"nodeType":"YulBlock","src":"46361:34:33","statements":[{"nodeType":"YulAssignment","src":"46371:18:33","value":{"name":"pos","nodeType":"YulIdentifier","src":"46386:3:33"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"46371:11:33"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"46333:3:33","type":""},{"name":"length","nodeType":"YulTypedName","src":"46338:6:33","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"46349:11:33","type":""}],"src":"46247:148:33"},{"body":{"nodeType":"YulBlock","src":"46507:108:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"46529:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"46537:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"46525:3:33"},"nodeType":"YulFunctionCall","src":"46525:14:33"},{"kind":"number","nodeType":"YulLiteral","src":"46541:66:33","type":"","value":"0x1901000000000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"46518:6:33"},"nodeType":"YulFunctionCall","src":"46518:90:33"},"nodeType":"YulExpressionStatement","src":"46518:90:33"}]},"name":"store_literal_in_memory_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"46499:6:33","type":""}],"src":"46401:214:33"},{"body":{"nodeType":"YulBlock","src":"46785:236:33","statements":[{"nodeType":"YulAssignment","src":"46795:91:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"46879:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"46884:1:33","type":"","value":"2"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"46802:76:33"},"nodeType":"YulFunctionCall","src":"46802:84:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"46795:3:33"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"46984:3:33"}],"functionName":{"name":"store_literal_in_memory_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541","nodeType":"YulIdentifier","src":"46895:88:33"},"nodeType":"YulFunctionCall","src":"46895:93:33"},"nodeType":"YulExpressionStatement","src":"46895:93:33"},{"nodeType":"YulAssignment","src":"46997:18:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"47008:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"47013:1:33","type":"","value":"2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"47004:3:33"},"nodeType":"YulFunctionCall","src":"47004:11:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"46997:3:33"}]}]},"name":"abi_encode_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"46773:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"46781:3:33","type":""}],"src":"46621:400:33"},{"body":{"nodeType":"YulBlock","src":"47074:32:33","statements":[{"nodeType":"YulAssignment","src":"47084:16:33","value":{"name":"value","nodeType":"YulIdentifier","src":"47095:5:33"},"variableNames":[{"name":"aligned","nodeType":"YulIdentifier","src":"47084:7:33"}]}]},"name":"leftAlign_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"47056:5:33","type":""}],"returnVariables":[{"name":"aligned","nodeType":"YulTypedName","src":"47066:7:33","type":""}],"src":"47027:79:33"},{"body":{"nodeType":"YulBlock","src":"47195:74:33","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"47212:3:33"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"47255:5:33"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"47237:17:33"},"nodeType":"YulFunctionCall","src":"47237:24:33"}],"functionName":{"name":"leftAlign_t_bytes32","nodeType":"YulIdentifier","src":"47217:19:33"},"nodeType":"YulFunctionCall","src":"47217:45:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"47205:6:33"},"nodeType":"YulFunctionCall","src":"47205:58:33"},"nodeType":"YulExpressionStatement","src":"47205:58:33"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"47183:5:33","type":""},{"name":"pos","nodeType":"YulTypedName","src":"47190:3:33","type":""}],"src":"47112:157:33"},{"body":{"nodeType":"YulBlock","src":"47520:418:33","statements":[{"nodeType":"YulAssignment","src":"47531:155:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"47682:3:33"}],"functionName":{"name":"abi_encode_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"47538:142:33"},"nodeType":"YulFunctionCall","src":"47538:148:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"47531:3:33"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"47758:6:33"},{"name":"pos","nodeType":"YulIdentifier","src":"47767:3:33"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"47696:61:33"},"nodeType":"YulFunctionCall","src":"47696:75:33"},"nodeType":"YulExpressionStatement","src":"47696:75:33"},{"nodeType":"YulAssignment","src":"47780:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"47791:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"47796:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"47787:3:33"},"nodeType":"YulFunctionCall","src":"47787:12:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"47780:3:33"}]},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"47871:6:33"},{"name":"pos","nodeType":"YulIdentifier","src":"47880:3:33"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"47809:61:33"},"nodeType":"YulFunctionCall","src":"47809:75:33"},"nodeType":"YulExpressionStatement","src":"47809:75:33"},{"nodeType":"YulAssignment","src":"47893:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"47904:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"47909:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"47900:3:33"},"nodeType":"YulFunctionCall","src":"47900:12:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"47893:3:33"}]},{"nodeType":"YulAssignment","src":"47922:10:33","value":{"name":"pos","nodeType":"YulIdentifier","src":"47929:3:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"47922:3:33"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_t_bytes32_t_bytes32__to_t_string_memory_ptr_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"47491:3:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"47497:6:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"47505:6:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"47516:3:33","type":""}],"src":"47275:663:33"},{"body":{"nodeType":"YulBlock","src":"48122:367:33","statements":[{"nodeType":"YulAssignment","src":"48132:27:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"48144:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"48155:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"48140:3:33"},"nodeType":"YulFunctionCall","src":"48140:19:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"48132:4:33"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"48213:6:33"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"48226:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"48237:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"48222:3:33"},"nodeType":"YulFunctionCall","src":"48222:17:33"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"48169:43:33"},"nodeType":"YulFunctionCall","src":"48169:71:33"},"nodeType":"YulExpressionStatement","src":"48169:71:33"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"48290:6:33"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"48303:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"48314:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"48299:3:33"},"nodeType":"YulFunctionCall","src":"48299:18:33"}],"functionName":{"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"48250:39:33"},"nodeType":"YulFunctionCall","src":"48250:68:33"},"nodeType":"YulExpressionStatement","src":"48250:68:33"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"48372:6:33"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"48385:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"48396:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"48381:3:33"},"nodeType":"YulFunctionCall","src":"48381:18:33"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"48328:43:33"},"nodeType":"YulFunctionCall","src":"48328:72:33"},"nodeType":"YulExpressionStatement","src":"48328:72:33"},{"expression":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"48454:6:33"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"48467:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"48478:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"48463:3:33"},"nodeType":"YulFunctionCall","src":"48463:18:33"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"48410:43:33"},"nodeType":"YulFunctionCall","src":"48410:72:33"},"nodeType":"YulExpressionStatement","src":"48410:72:33"}]},"name":"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"48070:9:33","type":""},{"name":"value3","nodeType":"YulTypedName","src":"48082:6:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"48090:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"48098:6:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"48106:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"48117:4:33","type":""}],"src":"47944:545:33"},{"body":{"nodeType":"YulBlock","src":"48523:152:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"48540:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"48543:77:33","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"48533:6:33"},"nodeType":"YulFunctionCall","src":"48533:88:33"},"nodeType":"YulExpressionStatement","src":"48533:88:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"48637:1:33","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"48640:4:33","type":"","value":"0x21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"48630:6:33"},"nodeType":"YulFunctionCall","src":"48630:15:33"},"nodeType":"YulExpressionStatement","src":"48630:15:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"48661:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"48664:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"48654:6:33"},"nodeType":"YulFunctionCall","src":"48654:15:33"},"nodeType":"YulExpressionStatement","src":"48654:15:33"}]},"name":"panic_error_0x21","nodeType":"YulFunctionDefinition","src":"48495:180:33"},{"body":{"nodeType":"YulBlock","src":"48787:68:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"48809:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"48817:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"48805:3:33"},"nodeType":"YulFunctionCall","src":"48805:14:33"},{"hexValue":"45434453413a20696e76616c6964207369676e6174757265","kind":"string","nodeType":"YulLiteral","src":"48821:26:33","type":"","value":"ECDSA: invalid signature"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"48798:6:33"},"nodeType":"YulFunctionCall","src":"48798:50:33"},"nodeType":"YulExpressionStatement","src":"48798:50:33"}]},"name":"store_literal_in_memory_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"48779:6:33","type":""}],"src":"48681:174:33"},{"body":{"nodeType":"YulBlock","src":"49007:220:33","statements":[{"nodeType":"YulAssignment","src":"49017:74:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"49083:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"49088:2:33","type":"","value":"24"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"49024:58:33"},"nodeType":"YulFunctionCall","src":"49024:67:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"49017:3:33"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"49189:3:33"}],"functionName":{"name":"store_literal_in_memory_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","nodeType":"YulIdentifier","src":"49100:88:33"},"nodeType":"YulFunctionCall","src":"49100:93:33"},"nodeType":"YulExpressionStatement","src":"49100:93:33"},{"nodeType":"YulAssignment","src":"49202:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"49213:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"49218:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"49209:3:33"},"nodeType":"YulFunctionCall","src":"49209:12:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"49202:3:33"}]}]},"name":"abi_encode_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"48995:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"49003:3:33","type":""}],"src":"48861:366:33"},{"body":{"nodeType":"YulBlock","src":"49404:248:33","statements":[{"nodeType":"YulAssignment","src":"49414:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"49426:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"49437:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"49422:3:33"},"nodeType":"YulFunctionCall","src":"49422:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"49414:4:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"49461:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"49472:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"49457:3:33"},"nodeType":"YulFunctionCall","src":"49457:17:33"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"49480:4:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"49486:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"49476:3:33"},"nodeType":"YulFunctionCall","src":"49476:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"49450:6:33"},"nodeType":"YulFunctionCall","src":"49450:47:33"},"nodeType":"YulExpressionStatement","src":"49450:47:33"},{"nodeType":"YulAssignment","src":"49506:139:33","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"49640:4:33"}],"functionName":{"name":"abi_encode_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"49514:124:33"},"nodeType":"YulFunctionCall","src":"49514:131:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"49506:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"49384:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"49399:4:33","type":""}],"src":"49233:419:33"},{"body":{"nodeType":"YulBlock","src":"49764:75:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"49786:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"49794:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"49782:3:33"},"nodeType":"YulFunctionCall","src":"49782:14:33"},{"hexValue":"45434453413a20696e76616c6964207369676e6174757265206c656e677468","kind":"string","nodeType":"YulLiteral","src":"49798:33:33","type":"","value":"ECDSA: invalid signature length"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"49775:6:33"},"nodeType":"YulFunctionCall","src":"49775:57:33"},"nodeType":"YulExpressionStatement","src":"49775:57:33"}]},"name":"store_literal_in_memory_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"49756:6:33","type":""}],"src":"49658:181:33"},{"body":{"nodeType":"YulBlock","src":"49991:220:33","statements":[{"nodeType":"YulAssignment","src":"50001:74:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"50067:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"50072:2:33","type":"","value":"31"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"50008:58:33"},"nodeType":"YulFunctionCall","src":"50008:67:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"50001:3:33"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"50173:3:33"}],"functionName":{"name":"store_literal_in_memory_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","nodeType":"YulIdentifier","src":"50084:88:33"},"nodeType":"YulFunctionCall","src":"50084:93:33"},"nodeType":"YulExpressionStatement","src":"50084:93:33"},{"nodeType":"YulAssignment","src":"50186:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"50197:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"50202:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"50193:3:33"},"nodeType":"YulFunctionCall","src":"50193:12:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"50186:3:33"}]}]},"name":"abi_encode_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"49979:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"49987:3:33","type":""}],"src":"49845:366:33"},{"body":{"nodeType":"YulBlock","src":"50388:248:33","statements":[{"nodeType":"YulAssignment","src":"50398:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"50410:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"50421:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"50406:3:33"},"nodeType":"YulFunctionCall","src":"50406:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"50398:4:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"50445:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"50456:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"50441:3:33"},"nodeType":"YulFunctionCall","src":"50441:17:33"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"50464:4:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"50470:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"50460:3:33"},"nodeType":"YulFunctionCall","src":"50460:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"50434:6:33"},"nodeType":"YulFunctionCall","src":"50434:47:33"},"nodeType":"YulExpressionStatement","src":"50434:47:33"},{"nodeType":"YulAssignment","src":"50490:139:33","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"50624:4:33"}],"functionName":{"name":"abi_encode_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"50498:124:33"},"nodeType":"YulFunctionCall","src":"50498:131:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"50490:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"50368:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"50383:4:33","type":""}],"src":"50217:419:33"},{"body":{"nodeType":"YulBlock","src":"50748:115:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"50770:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"50778:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"50766:3:33"},"nodeType":"YulFunctionCall","src":"50766:14:33"},{"hexValue":"45434453413a20696e76616c6964207369676e6174757265202773272076616c","kind":"string","nodeType":"YulLiteral","src":"50782:34:33","type":"","value":"ECDSA: invalid signature 's' val"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"50759:6:33"},"nodeType":"YulFunctionCall","src":"50759:58:33"},"nodeType":"YulExpressionStatement","src":"50759:58:33"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"50838:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"50846:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"50834:3:33"},"nodeType":"YulFunctionCall","src":"50834:15:33"},{"hexValue":"7565","kind":"string","nodeType":"YulLiteral","src":"50851:4:33","type":"","value":"ue"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"50827:6:33"},"nodeType":"YulFunctionCall","src":"50827:29:33"},"nodeType":"YulExpressionStatement","src":"50827:29:33"}]},"name":"store_literal_in_memory_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"50740:6:33","type":""}],"src":"50642:221:33"},{"body":{"nodeType":"YulBlock","src":"51015:220:33","statements":[{"nodeType":"YulAssignment","src":"51025:74:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"51091:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"51096:2:33","type":"","value":"34"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"51032:58:33"},"nodeType":"YulFunctionCall","src":"51032:67:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"51025:3:33"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"51197:3:33"}],"functionName":{"name":"store_literal_in_memory_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","nodeType":"YulIdentifier","src":"51108:88:33"},"nodeType":"YulFunctionCall","src":"51108:93:33"},"nodeType":"YulExpressionStatement","src":"51108:93:33"},{"nodeType":"YulAssignment","src":"51210:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"51221:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"51226:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"51217:3:33"},"nodeType":"YulFunctionCall","src":"51217:12:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"51210:3:33"}]}]},"name":"abi_encode_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"51003:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"51011:3:33","type":""}],"src":"50869:366:33"},{"body":{"nodeType":"YulBlock","src":"51412:248:33","statements":[{"nodeType":"YulAssignment","src":"51422:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"51434:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"51445:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"51430:3:33"},"nodeType":"YulFunctionCall","src":"51430:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"51422:4:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"51469:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"51480:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"51465:3:33"},"nodeType":"YulFunctionCall","src":"51465:17:33"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"51488:4:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"51494:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"51484:3:33"},"nodeType":"YulFunctionCall","src":"51484:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"51458:6:33"},"nodeType":"YulFunctionCall","src":"51458:47:33"},"nodeType":"YulExpressionStatement","src":"51458:47:33"},{"nodeType":"YulAssignment","src":"51514:139:33","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"51648:4:33"}],"functionName":{"name":"abi_encode_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"51522:124:33"},"nodeType":"YulFunctionCall","src":"51522:131:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"51514:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"51392:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"51407:4:33","type":""}],"src":"51241:419:33"},{"body":{"nodeType":"YulBlock","src":"51772:119:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"51794:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"51802:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"51790:3:33"},"nodeType":"YulFunctionCall","src":"51790:14:33"},{"hexValue":"416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f","kind":"string","nodeType":"YulLiteral","src":"51806:34:33","type":"","value":"Address: delegate call to non-co"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"51783:6:33"},"nodeType":"YulFunctionCall","src":"51783:58:33"},"nodeType":"YulExpressionStatement","src":"51783:58:33"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"51862:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"51870:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"51858:3:33"},"nodeType":"YulFunctionCall","src":"51858:15:33"},{"hexValue":"6e7472616374","kind":"string","nodeType":"YulLiteral","src":"51875:8:33","type":"","value":"ntract"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"51851:6:33"},"nodeType":"YulFunctionCall","src":"51851:33:33"},"nodeType":"YulExpressionStatement","src":"51851:33:33"}]},"name":"store_literal_in_memory_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"51764:6:33","type":""}],"src":"51666:225:33"},{"body":{"nodeType":"YulBlock","src":"52043:220:33","statements":[{"nodeType":"YulAssignment","src":"52053:74:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"52119:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"52124:2:33","type":"","value":"38"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"52060:58:33"},"nodeType":"YulFunctionCall","src":"52060:67:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"52053:3:33"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"52225:3:33"}],"functionName":{"name":"store_literal_in_memory_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520","nodeType":"YulIdentifier","src":"52136:88:33"},"nodeType":"YulFunctionCall","src":"52136:93:33"},"nodeType":"YulExpressionStatement","src":"52136:93:33"},{"nodeType":"YulAssignment","src":"52238:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"52249:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"52254:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"52245:3:33"},"nodeType":"YulFunctionCall","src":"52245:12:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"52238:3:33"}]}]},"name":"abi_encode_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"52031:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"52039:3:33","type":""}],"src":"51897:366:33"},{"body":{"nodeType":"YulBlock","src":"52440:248:33","statements":[{"nodeType":"YulAssignment","src":"52450:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"52462:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"52473:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"52458:3:33"},"nodeType":"YulFunctionCall","src":"52458:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"52450:4:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"52497:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"52508:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"52493:3:33"},"nodeType":"YulFunctionCall","src":"52493:17:33"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"52516:4:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"52522:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"52512:3:33"},"nodeType":"YulFunctionCall","src":"52512:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"52486:6:33"},"nodeType":"YulFunctionCall","src":"52486:47:33"},"nodeType":"YulExpressionStatement","src":"52486:47:33"},{"nodeType":"YulAssignment","src":"52542:139:33","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"52676:4:33"}],"functionName":{"name":"abi_encode_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"52550:124:33"},"nodeType":"YulFunctionCall","src":"52550:131:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"52542:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"52420:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"52435:4:33","type":""}],"src":"52269:419:33"},{"body":{"nodeType":"YulBlock","src":"52752:40:33","statements":[{"nodeType":"YulAssignment","src":"52763:22:33","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"52779:5:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"52773:5:33"},"nodeType":"YulFunctionCall","src":"52773:12:33"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"52763:6:33"}]}]},"name":"array_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"52735:5:33","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"52745:6:33","type":""}],"src":"52694:98:33"},{"body":{"nodeType":"YulBlock","src":"52911:34:33","statements":[{"nodeType":"YulAssignment","src":"52921:18:33","value":{"name":"pos","nodeType":"YulIdentifier","src":"52936:3:33"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"52921:11:33"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"52883:3:33","type":""},{"name":"length","nodeType":"YulTypedName","src":"52888:6:33","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"52899:11:33","type":""}],"src":"52798:147:33"},{"body":{"nodeType":"YulBlock","src":"53059:265:33","statements":[{"nodeType":"YulVariableDeclaration","src":"53069:52:33","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"53115:5:33"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"53083:31:33"},"nodeType":"YulFunctionCall","src":"53083:38:33"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"53073:6:33","type":""}]},{"nodeType":"YulAssignment","src":"53130:95:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"53213:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"53218:6:33"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"53137:75:33"},"nodeType":"YulFunctionCall","src":"53137:88:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"53130:3:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"53260:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"53267:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"53256:3:33"},"nodeType":"YulFunctionCall","src":"53256:16:33"},{"name":"pos","nodeType":"YulIdentifier","src":"53274:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"53279:6:33"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"53234:21:33"},"nodeType":"YulFunctionCall","src":"53234:52:33"},"nodeType":"YulExpressionStatement","src":"53234:52:33"},{"nodeType":"YulAssignment","src":"53295:23:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"53306:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"53311:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"53302:3:33"},"nodeType":"YulFunctionCall","src":"53302:16:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"53295:3:33"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"53040:5:33","type":""},{"name":"pos","nodeType":"YulTypedName","src":"53047:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"53055:3:33","type":""}],"src":"52951:373:33"},{"body":{"nodeType":"YulBlock","src":"53464:137:33","statements":[{"nodeType":"YulAssignment","src":"53475:100:33","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"53562:6:33"},{"name":"pos","nodeType":"YulIdentifier","src":"53571:3:33"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"53482:79:33"},"nodeType":"YulFunctionCall","src":"53482:93:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"53475:3:33"}]},{"nodeType":"YulAssignment","src":"53585:10:33","value":{"name":"pos","nodeType":"YulIdentifier","src":"53592:3:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"53585:3:33"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"53443:3:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"53449:6:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"53460:3:33","type":""}],"src":"53330:271:33"},{"body":{"nodeType":"YulBlock","src":"53635:152:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"53652:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"53655:77:33","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"53645:6:33"},"nodeType":"YulFunctionCall","src":"53645:88:33"},"nodeType":"YulExpressionStatement","src":"53645:88:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"53749:1:33","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"53752:4:33","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"53742:6:33"},"nodeType":"YulFunctionCall","src":"53742:15:33"},"nodeType":"YulExpressionStatement","src":"53742:15:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"53773:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"53776:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"53766:6:33"},"nodeType":"YulFunctionCall","src":"53766:15:33"},"nodeType":"YulExpressionStatement","src":"53766:15:33"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"53607:180:33"},{"body":{"nodeType":"YulBlock","src":"53835:143:33","statements":[{"nodeType":"YulAssignment","src":"53845:25:33","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"53868:1:33"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"53850:17:33"},"nodeType":"YulFunctionCall","src":"53850:20:33"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"53845:1:33"}]},{"nodeType":"YulAssignment","src":"53879:25:33","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"53902:1:33"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"53884:17:33"},"nodeType":"YulFunctionCall","src":"53884:20:33"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"53879:1:33"}]},{"body":{"nodeType":"YulBlock","src":"53926:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x12","nodeType":"YulIdentifier","src":"53928:16:33"},"nodeType":"YulFunctionCall","src":"53928:18:33"},"nodeType":"YulExpressionStatement","src":"53928:18:33"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"53923:1:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"53916:6:33"},"nodeType":"YulFunctionCall","src":"53916:9:33"},"nodeType":"YulIf","src":"53913:35:33"},{"nodeType":"YulAssignment","src":"53958:14:33","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"53967:1:33"},{"name":"y","nodeType":"YulIdentifier","src":"53970:1:33"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"53963:3:33"},"nodeType":"YulFunctionCall","src":"53963:9:33"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"53958:1:33"}]}]},"name":"checked_div_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"53824:1:33","type":""},{"name":"y","nodeType":"YulTypedName","src":"53827:1:33","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"53833:1:33","type":""}],"src":"53793:185:33"},{"body":{"nodeType":"YulBlock","src":"54090:60:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"54112:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"54120:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"54108:3:33"},"nodeType":"YulFunctionCall","src":"54108:14:33"},{"hexValue":"5061757361626c653a20706175736564","kind":"string","nodeType":"YulLiteral","src":"54124:18:33","type":"","value":"Pausable: paused"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"54101:6:33"},"nodeType":"YulFunctionCall","src":"54101:42:33"},"nodeType":"YulExpressionStatement","src":"54101:42:33"}]},"name":"store_literal_in_memory_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"54082:6:33","type":""}],"src":"53984:166:33"},{"body":{"nodeType":"YulBlock","src":"54302:220:33","statements":[{"nodeType":"YulAssignment","src":"54312:74:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"54378:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"54383:2:33","type":"","value":"16"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"54319:58:33"},"nodeType":"YulFunctionCall","src":"54319:67:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"54312:3:33"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"54484:3:33"}],"functionName":{"name":"store_literal_in_memory_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a","nodeType":"YulIdentifier","src":"54395:88:33"},"nodeType":"YulFunctionCall","src":"54395:93:33"},"nodeType":"YulExpressionStatement","src":"54395:93:33"},{"nodeType":"YulAssignment","src":"54497:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"54508:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"54513:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"54504:3:33"},"nodeType":"YulFunctionCall","src":"54504:12:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"54497:3:33"}]}]},"name":"abi_encode_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"54290:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"54298:3:33","type":""}],"src":"54156:366:33"},{"body":{"nodeType":"YulBlock","src":"54699:248:33","statements":[{"nodeType":"YulAssignment","src":"54709:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"54721:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"54732:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"54717:3:33"},"nodeType":"YulFunctionCall","src":"54717:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"54709:4:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"54756:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"54767:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"54752:3:33"},"nodeType":"YulFunctionCall","src":"54752:17:33"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"54775:4:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"54781:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"54771:3:33"},"nodeType":"YulFunctionCall","src":"54771:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"54745:6:33"},"nodeType":"YulFunctionCall","src":"54745:47:33"},"nodeType":"YulExpressionStatement","src":"54745:47:33"},{"nodeType":"YulAssignment","src":"54801:139:33","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"54935:4:33"}],"functionName":{"name":"abi_encode_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"54809:124:33"},"nodeType":"YulFunctionCall","src":"54809:131:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"54801:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"54679:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"54694:4:33","type":""}],"src":"54528:419:33"}]},"contents":"{\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x > (maxValue - y)\n        if gt(x, sub(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, y)) { panic_error_0x11() }\n\n        sum := add(x, y)\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function abi_encode_t_uint8_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint8_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_bytes_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_calldata_to_memory(src, dst, length) {\n        calldatacopy(dst, src, length)\n        // clear end\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_decode_available_length_t_bytes_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory(src, dst, length)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_bytes_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_addresst_bytes_memory_ptr(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_address_payable(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address_payable(value) {\n        if iszero(eq(value, cleanup_t_address_payable(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address_payable(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address_payable(value)\n    }\n\n    function abi_decode_tuple_t_address_payable(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_payable(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function validator_revert_t_uint8(value) {\n        if iszero(eq(value, cleanup_t_uint8(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint8(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint8(value)\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes32(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6 {\n        if slt(sub(dataEnd, headStart), 224) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 128\n\n            value4 := abi_decode_t_uint8(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 160\n\n            value5 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 192\n\n            value6 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function store_literal_in_memory_16f4986ff02b8ec65b8228ad4d9cfee3779ad1f090ec2a1e15009246e11bf55f(memPtr) {\n\n        mstore(add(memPtr, 0), \"USER_NOT_VERIFIED\")\n\n    }\n\n    function abi_encode_t_stringliteral_16f4986ff02b8ec65b8228ad4d9cfee3779ad1f090ec2a1e15009246e11bf55f_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 17)\n        store_literal_in_memory_16f4986ff02b8ec65b8228ad4d9cfee3779ad1f090ec2a1e15009246e11bf55f(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_16f4986ff02b8ec65b8228ad4d9cfee3779ad1f090ec2a1e15009246e11bf55f__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_16f4986ff02b8ec65b8228ad4d9cfee3779ad1f090ec2a1e15009246e11bf55f_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb(memPtr) {\n\n        mstore(add(memPtr, 0), \"Function must be called through \")\n\n        mstore(add(memPtr, 32), \"delegatecall\")\n\n    }\n\n    function abi_encode_t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 44)\n        store_literal_in_memory_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434(memPtr) {\n\n        mstore(add(memPtr, 0), \"Function must be called through \")\n\n        mstore(add(memPtr, 32), \"active proxy\")\n\n    }\n\n    function abi_encode_t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 44)\n        store_literal_in_memory_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4(memPtr) {\n\n        mstore(add(memPtr, 0), \"UUPSUpgradeable: must not be cal\")\n\n        mstore(add(memPtr, 32), \"led through delegatecall\")\n\n    }\n\n    function abi_encode_t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 56)\n        store_literal_in_memory_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(memPtr) {\n\n        mstore(add(memPtr, 0), \"Initializable: contract is alrea\")\n\n        mstore(add(memPtr, 32), \"dy initialized\")\n\n    }\n\n    function abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 46)\n        store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function cleanup_t_rational_1_by_1(value) -> cleaned {\n        cleaned := value\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_rational_1_by_1_to_t_uint8(value) -> converted {\n        converted := cleanup_t_uint8(identity(cleanup_t_rational_1_by_1(value)))\n    }\n\n    function abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, convert_t_rational_1_by_1_to_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: decreased allowance below\")\n\n        mstore(add(memPtr, 32), \" zero\")\n\n    }\n\n    function abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)\n        store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_60b31d48ddf4a3a7e36589333cb85fe8601f83d35365f582cb69e77a74e2c530(memPtr) {\n\n        mstore(add(memPtr, 0), \"from: TRANSFER_REQUIRED_VERIFICA\")\n\n        mstore(add(memPtr, 32), \"TION_I\")\n\n    }\n\n    function abi_encode_t_stringliteral_60b31d48ddf4a3a7e36589333cb85fe8601f83d35365f582cb69e77a74e2c530_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_60b31d48ddf4a3a7e36589333cb85fe8601f83d35365f582cb69e77a74e2c530(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_60b31d48ddf4a3a7e36589333cb85fe8601f83d35365f582cb69e77a74e2c530__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_60b31d48ddf4a3a7e36589333cb85fe8601f83d35365f582cb69e77a74e2c530_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_6a474febbac6df5530c874e2802245fb2d8492a7ff2734cf08d72da489a71589(memPtr) {\n\n        mstore(add(memPtr, 0), \"to : TRANSFER_REQUIRED_VERIFICAT\")\n\n        mstore(add(memPtr, 32), \"ION_I\")\n\n    }\n\n    function abi_encode_t_stringliteral_6a474febbac6df5530c874e2802245fb2d8492a7ff2734cf08d72da489a71589_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)\n        store_literal_in_memory_6a474febbac6df5530c874e2802245fb2d8492a7ff2734cf08d72da489a71589(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_6a474febbac6df5530c874e2802245fb2d8492a7ff2734cf08d72da489a71589__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_6a474febbac6df5530c874e2802245fb2d8492a7ff2734cf08d72da489a71589_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_2d3c3eb826a2c156a3f5fda2e8c203bbbb959ef4be16522182f3c73c9ba3575d(memPtr) {\n\n        mstore(add(memPtr, 0), \"from: TRANSFER_REQUIRED_MULTI_SI\")\n\n        mstore(add(memPtr, 32), \"GNATURE\")\n\n    }\n\n    function abi_encode_t_stringliteral_2d3c3eb826a2c156a3f5fda2e8c203bbbb959ef4be16522182f3c73c9ba3575d_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 39)\n        store_literal_in_memory_2d3c3eb826a2c156a3f5fda2e8c203bbbb959ef4be16522182f3c73c9ba3575d(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_2d3c3eb826a2c156a3f5fda2e8c203bbbb959ef4be16522182f3c73c9ba3575d__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_2d3c3eb826a2c156a3f5fda2e8c203bbbb959ef4be16522182f3c73c9ba3575d_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_5bea970c8c5b2c16f9984fa1b49104cd8ac4cec162360b95949413a68a6073f9(memPtr) {\n\n        mstore(add(memPtr, 0), \"to: TRANSFER_REQUIRED_MULTI_SIGN\")\n\n        mstore(add(memPtr, 32), \"ATURE\")\n\n    }\n\n    function abi_encode_t_stringliteral_5bea970c8c5b2c16f9984fa1b49104cd8ac4cec162360b95949413a68a6073f9_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)\n        store_literal_in_memory_5bea970c8c5b2c16f9984fa1b49104cd8ac4cec162360b95949413a68a6073f9(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_5bea970c8c5b2c16f9984fa1b49104cd8ac4cec162360b95949413a68a6073f9__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_5bea970c8c5b2c16f9984fa1b49104cd8ac4cec162360b95949413a68a6073f9_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20Permit: expired deadline\")\n\n    }\n\n    function abi_encode_t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 29)\n        store_literal_in_memory_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart , value5, value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 192)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_address_to_t_address_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 96))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value4,  add(headStart, 128))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value5,  add(headStart, 160))\n\n    }\n\n    function store_literal_in_memory_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20Permit: invalid signature\")\n\n    }\n\n    function abi_encode_t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 30)\n        store_literal_in_memory_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: new owner is the zero a\")\n\n        mstore(add(memPtr, 32), \"ddress\")\n\n    }\n\n    function abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: approve from the zero add\")\n\n        mstore(add(memPtr, 32), \"ress\")\n\n    }\n\n    function abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 36)\n        store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: approve to the zero addre\")\n\n        mstore(add(memPtr, 32), \"ss\")\n\n    }\n\n    function abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 34)\n        store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: caller is not the owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bool_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_t_bytes32_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function abi_decode_tuple_t_bytes32_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function store_literal_in_memory_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC1967Upgrade: new implementati\")\n\n        mstore(add(memPtr, 32), \"on is not UUPS\")\n\n    }\n\n    function abi_encode_t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 46)\n        store_literal_in_memory_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC1967Upgrade: unsupported prox\")\n\n        mstore(add(memPtr, 32), \"iableUUID\")\n\n    }\n\n    function abi_encode_t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 41)\n        store_literal_in_memory_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_d85a3cdc203c5cdc6dda93c12cd017145671a0ed9058a16c7aa00b8398a4a8e6(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20Snapshot: id is 0\")\n\n    }\n\n    function abi_encode_t_stringliteral_d85a3cdc203c5cdc6dda93c12cd017145671a0ed9058a16c7aa00b8398a4a8e6_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 22)\n        store_literal_in_memory_d85a3cdc203c5cdc6dda93c12cd017145671a0ed9058a16c7aa00b8398a4a8e6(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_d85a3cdc203c5cdc6dda93c12cd017145671a0ed9058a16c7aa00b8398a4a8e6__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_d85a3cdc203c5cdc6dda93c12cd017145671a0ed9058a16c7aa00b8398a4a8e6_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_031e0835d070e7bbd2c8dcce466eadb8c6b9fd22432b0357ab8c37bd9a385940(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20Snapshot: nonexistent id\")\n\n    }\n\n    function abi_encode_t_stringliteral_031e0835d070e7bbd2c8dcce466eadb8c6b9fd22432b0357ab8c37bd9a385940_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 29)\n        store_literal_in_memory_031e0835d070e7bbd2c8dcce466eadb8c6b9fd22432b0357ab8c37bd9a385940(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_031e0835d070e7bbd2c8dcce466eadb8c6b9fd22432b0357ab8c37bd9a385940__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_031e0835d070e7bbd2c8dcce466eadb8c6b9fd22432b0357ab8c37bd9a385940_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(memPtr) {\n\n        mstore(add(memPtr, 0), \"Initializable: contract is not i\")\n\n        mstore(add(memPtr, 32), \"nitializing\")\n\n    }\n\n    function abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 43)\n        store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: insufficient allowance\")\n\n    }\n\n    function abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 29)\n        store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: transfer from the zero ad\")\n\n        mstore(add(memPtr, 32), \"dress\")\n\n    }\n\n    function abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)\n        store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: transfer to the zero addr\")\n\n        mstore(add(memPtr, 32), \"ess\")\n\n    }\n\n    function abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 35)\n        store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: transfer amount exceeds b\")\n\n        mstore(add(memPtr, 32), \"alance\")\n\n    }\n\n    function abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed(headStart , value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 160)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 96))\n\n        abi_encode_t_address_to_t_address_fromStack(value4,  add(headStart, 128))\n\n    }\n\n    function store_literal_in_memory_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC1967: new implementation is n\")\n\n        mstore(add(memPtr, 32), \"ot a contract\")\n\n    }\n\n    function abi_encode_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 45)\n        store_literal_in_memory_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: burn from the zero addres\")\n\n        mstore(add(memPtr, 32), \"s\")\n\n    }\n\n    function abi_encode_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 33)\n        store_literal_in_memory_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: burn amount exceeds balan\")\n\n        mstore(add(memPtr, 32), \"ce\")\n\n    }\n\n    function abi_encode_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 34)\n        store_literal_in_memory_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: mint to the zero address\")\n\n    }\n\n    function abi_encode_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 31)\n        store_literal_in_memory_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        if lt(x, y) { panic_error_0x11() }\n\n        diff := sub(x, y)\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function store_literal_in_memory_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541(memPtr) {\n\n        mstore(add(memPtr, 0), 0x1901000000000000000000000000000000000000000000000000000000000000)\n\n    }\n\n    function abi_encode_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 2)\n        store_literal_in_memory_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541(pos)\n        end := add(pos, 2)\n    }\n\n    function leftAlign_t_bytes32(value) -> aligned {\n        aligned := value\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack(value, pos) {\n        mstore(pos, leftAlign_t_bytes32(cleanup_t_bytes32(value)))\n    }\n\n    function abi_encode_tuple_packed_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_t_bytes32_t_bytes32__to_t_string_memory_ptr_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n        pos := abi_encode_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack(value0,  pos)\n        pos := add(pos, 32)\n\n        abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack(value1,  pos)\n        pos := add(pos, 32)\n\n        end := pos\n    }\n\n    function abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint8_to_t_uint8_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value3,  add(headStart, 96))\n\n    }\n\n    function panic_error_0x21() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n\n    function store_literal_in_memory_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be(memPtr) {\n\n        mstore(add(memPtr, 0), \"ECDSA: invalid signature\")\n\n    }\n\n    function abi_encode_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 24)\n        store_literal_in_memory_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77(memPtr) {\n\n        mstore(add(memPtr, 0), \"ECDSA: invalid signature length\")\n\n    }\n\n    function abi_encode_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 31)\n        store_literal_in_memory_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd(memPtr) {\n\n        mstore(add(memPtr, 0), \"ECDSA: invalid signature 's' val\")\n\n        mstore(add(memPtr, 32), \"ue\")\n\n    }\n\n    function abi_encode_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 34)\n        store_literal_in_memory_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520(memPtr) {\n\n        mstore(add(memPtr, 0), \"Address: delegate call to non-co\")\n\n        mstore(add(memPtr, 32), \"ntract\")\n\n    }\n\n    function abi_encode_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value0) -> end {\n\n        pos := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        end := pos\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function checked_div_t_uint256(x, y) -> r {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        if iszero(y) { panic_error_0x12() }\n\n        r := div(x, y)\n    }\n\n    function store_literal_in_memory_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a(memPtr) {\n\n        mstore(add(memPtr, 0), \"Pausable: paused\")\n\n    }\n\n    function abi_encode_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 16)\n        store_literal_in_memory_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n}\n","id":33,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"720":[{"length":32,"start":2651},{"length":32,"start":2794},{"length":32,"start":3253},{"length":32,"start":3396},{"length":32,"start":3572}],"5329":[{"length":32,"start":5054},{"length":32,"start":5160}],"5337":[{"length":32,"start":2333},{"length":32,"start":2443}]},"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1C6 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x59E78460 GT PUSH2 0xF7 JUMPI DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xA9059CBB GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x6F3 JUMPI DUP1 PUSH4 0xD505ACCF EQ PUSH2 0x730 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x759 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x796 JUMPI PUSH2 0x21E JUMP JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x623 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x64E JUMPI DUP1 PUSH4 0x981B24D0 EQ PUSH2 0x679 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x6B6 JUMPI PUSH2 0x21E JUMP JUMPDEST DUP1 PUSH4 0x715018A6 GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x58F JUMPI DUP1 PUSH4 0x79CC6790 EQ PUSH2 0x5A6 JUMPI DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x5CF JUMPI DUP1 PUSH4 0x8129FC1C EQ PUSH2 0x60C JUMPI PUSH2 0x21E JUMP JUMPDEST DUP1 PUSH4 0x59E78460 EQ PUSH2 0x4FE JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x527 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x552 JUMPI PUSH2 0x21E JUMP JUMPDEST DUP1 PUSH4 0x3659CFE6 GT PUSH2 0x164 JUMPI DUP1 PUSH4 0x449A52F8 GT PUSH2 0x13E JUMPI DUP1 PUSH4 0x449A52F8 EQ PUSH2 0x451 JUMPI DUP1 PUSH4 0x4EE2CD7E EQ PUSH2 0x47A JUMPI DUP1 PUSH4 0x4F1EF286 EQ PUSH2 0x4B7 JUMPI DUP1 PUSH4 0x52D1902D EQ PUSH2 0x4D3 JUMPI PUSH2 0x21E JUMP JUMPDEST DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0x3C2 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x3EB JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x428 JUMPI PUSH2 0x21E JUMP JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0x1A0 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x304 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x341 JUMPI DUP1 PUSH4 0x345A903F EQ PUSH2 0x36C JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0x397 JUMPI PUSH2 0x21E JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x271 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x29C JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x2D9 JUMPI PUSH2 0x21E JUMP JUMPDEST CALLDATASIZE PUSH2 0x21E JUMPI CALLVALUE PUSH2 0x1F8 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1DE SWAP2 SWAP1 PUSH2 0x3488 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH32 0x42100F075A78C1DAC886A43652B5C7C76CCA3718758E13E7B726063CD20FE02C CALLVALUE PUSH1 0x40 MLOAD PUSH2 0x214 SWAP2 SWAP1 PUSH2 0x34ED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 STOP JUMPDEST CALLVALUE PUSH2 0x1F8 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x231 SWAP2 SWAP1 PUSH2 0x3488 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH32 0x6CB8A67804B99A2876F9D2F903120D1607DF4C6BB33315433F4F5B9284BA1588 CALLVALUE PUSH1 0x40 MLOAD PUSH2 0x267 SWAP2 SWAP1 PUSH2 0x34ED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x27D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x286 PUSH2 0x7BF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x293 SWAP2 SWAP1 PUSH2 0x35A1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2C3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2BE SWAP2 SWAP1 PUSH2 0x3661 JUMP JUMPDEST PUSH2 0x851 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2D0 SWAP2 SWAP1 PUSH2 0x36BC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EE PUSH2 0x874 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2FB SWAP2 SWAP1 PUSH2 0x34ED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x310 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x32B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x326 SWAP2 SWAP1 PUSH2 0x36D7 JUMP JUMPDEST PUSH2 0x87E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x338 SWAP2 SWAP1 PUSH2 0x36BC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x34D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x356 PUSH2 0xA0E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x363 SWAP2 SWAP1 PUSH2 0x3746 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x378 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x381 PUSH2 0xA17 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x38E SWAP2 SWAP1 PUSH2 0x3770 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3AC PUSH2 0xA4A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3B9 SWAP2 SWAP1 PUSH2 0x37A4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3E9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3E4 SWAP2 SWAP1 PUSH2 0x37BF JUMP JUMPDEST PUSH2 0xA59 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x412 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x40D SWAP2 SWAP1 PUSH2 0x3661 JUMP JUMPDEST PUSH2 0xBE2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x41F SWAP2 SWAP1 PUSH2 0x36BC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x434 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x44F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x44A SWAP2 SWAP1 PUSH2 0x37EC JUMP JUMPDEST PUSH2 0xC19 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x45D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x478 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x473 SWAP2 SWAP1 PUSH2 0x3661 JUMP JUMPDEST PUSH2 0xC2D JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x486 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4A1 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x49C SWAP2 SWAP1 PUSH2 0x3661 JUMP JUMPDEST PUSH2 0xC43 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4AE SWAP2 SWAP1 PUSH2 0x34ED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4D1 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4CC SWAP2 SWAP1 PUSH2 0x394E JUMP JUMPDEST PUSH2 0xCB3 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4E8 PUSH2 0xDF0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4F5 SWAP2 SWAP1 PUSH2 0x37A4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x50A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x525 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x520 SWAP2 SWAP1 PUSH2 0x39E8 JUMP JUMPDEST PUSH2 0xEA9 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x533 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x53C PUSH2 0xEF6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x549 SWAP2 SWAP1 PUSH2 0x36BC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x55E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x579 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x574 SWAP2 SWAP1 PUSH2 0x37BF JUMP JUMPDEST PUSH2 0xF0D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x586 SWAP2 SWAP1 PUSH2 0x34ED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x59B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5A4 PUSH2 0xF56 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5CD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5C8 SWAP2 SWAP1 PUSH2 0x3661 JUMP JUMPDEST PUSH2 0xF6A JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5F6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5F1 SWAP2 SWAP1 PUSH2 0x37BF JUMP JUMPDEST PUSH2 0xF80 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x603 SWAP2 SWAP1 PUSH2 0x34ED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x618 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x621 PUSH2 0xFD1 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x62F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x638 PUSH2 0x11E1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x645 SWAP2 SWAP1 PUSH2 0x3770 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x65A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x663 PUSH2 0x11F0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x670 SWAP2 SWAP1 PUSH2 0x35A1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x685 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6A0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x69B SWAP2 SWAP1 PUSH2 0x37EC JUMP JUMPDEST PUSH2 0x1282 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x6AD SWAP2 SWAP1 PUSH2 0x34ED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6DD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x6D8 SWAP2 SWAP1 PUSH2 0x3661 JUMP JUMPDEST PUSH2 0x12B3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x6EA SWAP2 SWAP1 PUSH2 0x36BC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x71A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x715 SWAP2 SWAP1 PUSH2 0x3661 JUMP JUMPDEST PUSH2 0x132A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x727 SWAP2 SWAP1 PUSH2 0x36BC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x73C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x757 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x752 SWAP2 SWAP1 PUSH2 0x3A6D JUMP JUMPDEST PUSH2 0x14A2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x765 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x780 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x77B SWAP2 SWAP1 PUSH2 0x3B0F JUMP JUMPDEST PUSH2 0x15E4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x78D SWAP2 SWAP1 PUSH2 0x34ED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7BD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x7B8 SWAP2 SWAP1 PUSH2 0x37BF JUMP JUMPDEST PUSH2 0x166B JUMP JUMPDEST STOP JUMPDEST PUSH1 0x60 PUSH1 0x36 DUP1 SLOAD PUSH2 0x7CE SWAP1 PUSH2 0x3B7E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x7FA SWAP1 PUSH2 0x3B7E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x847 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x81C JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x847 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x82A JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x85C PUSH2 0x16EF JUMP JUMPDEST SWAP1 POP PUSH2 0x869 DUP2 DUP6 DUP6 PUSH2 0x16F7 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x35 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x888 PUSH2 0x18C2 JUMP JUMPDEST DUP4 PUSH2 0x892 DUP2 PUSH2 0x1940 JUMP JUMPDEST PUSH2 0x8D1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8C8 SWAP1 PUSH2 0x3BFC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP4 PUSH2 0x8DB DUP2 PUSH2 0x1940 JUMP JUMPDEST PUSH2 0x91A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x911 SWAP1 PUSH2 0x3BFC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP6 PUSH32 0x0 PUSH2 0x945 DUP3 PUSH2 0x19FA JUMP JUMPDEST EQ ISZERO PUSH2 0x988 JUMPI DUP1 PUSH1 0x40 MLOAD PUSH32 0x80B9EC4500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x97F SWAP2 SWAP1 PUSH2 0x3770 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP6 PUSH32 0x0 PUSH2 0x9B3 DUP3 PUSH2 0x19FA JUMP JUMPDEST EQ ISZERO PUSH2 0x9F6 JUMPI DUP1 PUSH1 0x40 MLOAD PUSH32 0x80B9EC4500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9ED SWAP2 SWAP1 PUSH2 0x3770 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xA01 DUP9 DUP9 DUP9 PUSH2 0x1AAF JUMP JUMPDEST SWAP5 POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA21 PUSH2 0x18C2 JUMP JUMPDEST PUSH2 0x1F9 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA54 PUSH2 0x1ADE JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xAE8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xADF SWAP1 PUSH2 0x3C8E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB27 PUSH2 0x1B1E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xB7D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB74 SWAP1 PUSH2 0x3D20 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xB86 DUP2 PUSH2 0x1B75 JUMP JUMPDEST PUSH2 0xBDF DUP2 PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xBA5 JUMPI PUSH2 0xBA4 PUSH2 0x3823 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xBD7 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP PUSH1 0x0 PUSH2 0x1B80 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xBED PUSH2 0x16EF JUMP JUMPDEST SWAP1 POP PUSH2 0xC0E DUP2 DUP6 DUP6 PUSH2 0xBFF DUP6 DUP10 PUSH2 0x15E4 JUMP JUMPDEST PUSH2 0xC09 SWAP2 SWAP1 PUSH2 0x3488 JUMP JUMPDEST PUSH2 0x16F7 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xC21 PUSH2 0x18C2 JUMP JUMPDEST PUSH2 0xC2A DUP2 PUSH2 0x1CFD JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0xC35 PUSH2 0x18C2 JUMP JUMPDEST PUSH2 0xC3F DUP3 DUP3 PUSH2 0x1D11 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xC90 DUP5 PUSH1 0x97 PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x1D27 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH2 0xCA7 JUMPI PUSH2 0xCA2 DUP6 PUSH2 0xF0D JUMP JUMPDEST PUSH2 0xCA9 JUMP JUMPDEST DUP1 JUMPDEST SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xD42 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD39 SWAP1 PUSH2 0x3C8E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xD81 PUSH2 0x1B1E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xDD7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDCE SWAP1 PUSH2 0x3D20 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xDE0 DUP3 PUSH2 0x1B75 JUMP JUMPDEST PUSH2 0xDEC DUP3 DUP3 PUSH1 0x1 PUSH2 0x1B80 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xE80 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE77 SWAP1 PUSH2 0x3DB2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH1 0x0 SHL SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xEB1 PUSH2 0x18C2 JUMP JUMPDEST DUP1 PUSH2 0x1F9 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFB PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xF5E PUSH2 0x18C2 JUMP JUMPDEST PUSH2 0xF68 PUSH1 0x0 PUSH2 0x1E1D JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xF72 PUSH2 0x18C2 JUMP JUMPDEST PUSH2 0xF7C DUP3 DUP3 PUSH2 0x1EE3 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFCA PUSH2 0x161 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x1F03 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 POP DUP1 DUP1 ISZERO PUSH2 0x1002 JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND LT JUMPDEST DUP1 PUSH2 0x102F JUMPI POP PUSH2 0x1011 ADDRESS PUSH2 0x1F11 JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0x102E JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND EQ JUMPDEST JUMPDEST PUSH2 0x106E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1065 SWAP1 PUSH2 0x3E44 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0x10AB JUMPI PUSH1 0x1 PUSH1 0x0 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH2 0x111F PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x504B445200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x504B445200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH2 0x1F34 JUMP JUMPDEST PUSH2 0x1127 PUSH2 0x1F91 JUMP JUMPDEST PUSH2 0x112F PUSH2 0x1FE2 JUMP JUMPDEST PUSH2 0x1137 PUSH2 0x2033 JUMP JUMPDEST PUSH2 0x113F PUSH2 0x208C JUMP JUMPDEST PUSH2 0x117D PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x504B445200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH2 0x20E5 JUMP JUMPDEST PUSH2 0x1185 PUSH2 0x2176 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x11DE JUMPI PUSH1 0x0 DUP1 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0x1 PUSH1 0x40 MLOAD PUSH2 0x11D5 SWAP2 SWAP1 PUSH2 0x3EA9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11EB PUSH2 0x21C7 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x37 DUP1 SLOAD PUSH2 0x11FF SWAP1 PUSH2 0x3B7E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x122B SWAP1 PUSH2 0x3B7E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1278 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x124D JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1278 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x125B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1292 DUP5 PUSH1 0x98 PUSH2 0x1D27 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH2 0x12A8 JUMPI PUSH2 0x12A3 PUSH2 0x874 JUMP JUMPDEST PUSH2 0x12AA JUMP JUMPDEST DUP1 JUMPDEST SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x12BE PUSH2 0x16EF JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x12CC DUP3 DUP7 PUSH2 0x15E4 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x1311 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1308 SWAP1 PUSH2 0x3F36 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x131E DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x16F7 JUMP JUMPDEST PUSH1 0x1 SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1335 CALLER PUSH2 0x1940 JUMP JUMPDEST PUSH2 0x1374 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x136B SWAP1 PUSH2 0x3FC8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x137D DUP4 PUSH2 0x1940 JUMP JUMPDEST PUSH2 0x13BC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13B3 SWAP1 PUSH2 0x405A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x0 PUSH2 0x13E6 CALLER PUSH2 0x19FA JUMP JUMPDEST EQ PUSH2 0x1426 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x141D SWAP1 PUSH2 0x40EC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x0 PUSH2 0x1450 DUP5 PUSH2 0x19FA JUMP JUMPDEST EQ PUSH2 0x1490 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1487 SWAP1 PUSH2 0x417E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x149A DUP4 DUP4 PUSH2 0x21F1 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP4 TIMESTAMP GT ISZERO PUSH2 0x14E5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14DC SWAP1 PUSH2 0x41EA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0x6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9 DUP9 DUP9 DUP9 PUSH2 0x1514 DUP13 PUSH2 0x2214 JUMP JUMPDEST DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x152A SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x420A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 PUSH2 0x154D DUP3 PUSH2 0x2273 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x155D DUP3 DUP8 DUP8 DUP8 PUSH2 0x228D JUMP JUMPDEST SWAP1 POP DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x15CD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x15C4 SWAP1 PUSH2 0x42B7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x15D8 DUP11 DUP11 DUP11 PUSH2 0x16F7 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x34 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1673 PUSH2 0x18C2 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x16E3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x16DA SWAP1 PUSH2 0x4349 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x16EC DUP2 PUSH2 0x1E1D JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x1767 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x175E SWAP1 PUSH2 0x43DB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x17D7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x17CE SWAP1 PUSH2 0x446D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x34 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP4 PUSH1 0x40 MLOAD PUSH2 0x18B5 SWAP2 SWAP1 PUSH2 0x34ED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x18CA PUSH2 0x16EF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x18E8 PUSH2 0x11E1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x193E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1935 SWAP1 PUSH2 0x44D9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1F9 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD117FC99 DUP5 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x199F SWAP2 SWAP1 PUSH2 0x3770 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x19B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x19CB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x19EF SWAP2 SWAP1 PUSH2 0x4525 JUMP JUMPDEST SWAP1 POP DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F9 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1E9F3D5E DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A58 SWAP2 SWAP1 PUSH2 0x3770 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1A70 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1A84 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1AA8 SWAP2 SWAP1 PUSH2 0x4567 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1ABA PUSH2 0x16EF JUMP JUMPDEST SWAP1 POP PUSH2 0x1AC7 DUP6 DUP3 DUP6 PUSH2 0x22B8 JUMP JUMPDEST PUSH2 0x1AD2 DUP6 DUP6 DUP6 PUSH2 0x2344 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B19 PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH2 0x1B0C PUSH2 0x25BF JUMP JUMPDEST PUSH2 0x1B14 PUSH2 0x25CA JUMP JUMPDEST PUSH2 0x25D5 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B4C PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH1 0x0 SHL PUSH2 0x260F JUMP JUMPDEST PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x1B7D PUSH2 0x18C2 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x1BAC PUSH32 0x4910FDFA16FED3260ED0E7147F7CC6DA11A60208B5B9406D12A635614FFD9143 PUSH1 0x0 SHL PUSH2 0x2619 JUMP JUMPDEST PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x1BD0 JUMPI PUSH2 0x1BCB DUP4 PUSH2 0x2623 JUMP JUMPDEST PUSH2 0x1CF8 JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x52D1902D PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1C16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1C47 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1C44 SWAP2 SWAP1 PUSH2 0x4567 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1C86 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C7D SWAP1 PUSH2 0x4606 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH1 0x0 SHL DUP2 EQ PUSH2 0x1CEB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1CE2 SWAP1 PUSH2 0x4698 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH2 0x1CF7 DUP4 DUP4 DUP4 PUSH2 0x26DC JUMP JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x1D0E PUSH2 0x1D08 PUSH2 0x16EF JUMP JUMPDEST DUP3 PUSH2 0x2708 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x1D19 PUSH2 0x18C2 JUMP JUMPDEST PUSH2 0x1D23 DUP3 DUP3 PUSH2 0x28D8 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP5 GT PUSH2 0x1D6D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D64 SWAP1 PUSH2 0x4704 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1D75 PUSH2 0x2A30 JUMP JUMPDEST DUP5 GT ISZERO PUSH2 0x1DB7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1DAE SWAP1 PUSH2 0x4770 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1DCF DUP6 DUP6 PUSH1 0x0 ADD PUSH2 0x2A41 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP4 PUSH1 0x0 ADD DUP1 SLOAD SWAP1 POP DUP2 EQ ISZERO PUSH2 0x1DED JUMPI PUSH1 0x0 DUP1 SWAP3 POP SWAP3 POP POP PUSH2 0x1E16 JUMP JUMPDEST PUSH1 0x1 DUP5 PUSH1 0x1 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x1E05 JUMPI PUSH2 0x1E04 PUSH2 0x4790 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP3 POP SWAP3 POP POP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC9 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0xC9 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x1EF5 DUP3 PUSH2 0x1EEF PUSH2 0x16EF JUMP JUMPDEST DUP4 PUSH2 0x22B8 JUMP JUMPDEST PUSH2 0x1EFF DUP3 DUP3 PUSH2 0x2708 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1F83 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F7A SWAP1 PUSH2 0x4831 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1F8D DUP3 DUP3 PUSH2 0x2AFB JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1FE0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1FD7 SWAP1 PUSH2 0x4831 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2031 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2028 SWAP1 PUSH2 0x4831 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2082 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2079 SWAP1 PUSH2 0x4831 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x208A PUSH2 0x2B7C JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x20DB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x20D2 SWAP1 PUSH2 0x4831 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x20E3 PUSH2 0x2BDD JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2134 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x212B SWAP1 PUSH2 0x4831 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2173 DUP2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x3100000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH2 0x2C49 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x21C5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x21BC SWAP1 PUSH2 0x4831 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC9 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x21FC PUSH2 0x16EF JUMP JUMPDEST SWAP1 POP PUSH2 0x2209 DUP2 DUP6 DUP6 PUSH2 0x2344 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x161 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH2 0x2262 DUP2 PUSH2 0x1F03 JUMP JUMPDEST SWAP2 POP PUSH2 0x226D DUP2 PUSH2 0x2CC6 JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2286 PUSH2 0x2280 PUSH2 0x1ADE JUMP JUMPDEST DUP4 PUSH2 0x2CDC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x229E DUP8 DUP8 DUP8 DUP8 PUSH2 0x2D0F JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x22AB DUP2 PUSH2 0x2DF2 JUMP JUMPDEST DUP2 SWAP3 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x22C4 DUP5 DUP5 PUSH2 0x15E4 JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ PUSH2 0x233E JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x2330 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2327 SWAP1 PUSH2 0x489D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x233D DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x16F7 JUMP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x23B4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x23AB SWAP1 PUSH2 0x492F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x2424 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x241B SWAP1 PUSH2 0x49C1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x242F DUP4 DUP4 DUP4 PUSH2 0x2F60 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x24B6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x24AD SWAP1 PUSH2 0x4A53 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH1 0x33 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x33 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x25A6 SWAP2 SWAP1 PUSH2 0x34ED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x25B9 DUP5 DUP5 DUP5 PUSH2 0x2F78 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12D SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12E SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP4 DUP4 CHAINID ADDRESS PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x25F0 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4A73 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x262C DUP2 PUSH2 0x1F11 JUMP JUMPDEST PUSH2 0x266B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2662 SWAP1 PUSH2 0x4B38 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH2 0x2698 PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH1 0x0 SHL PUSH2 0x260F JUMP JUMPDEST PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH2 0x26E5 DUP4 PUSH2 0x2F7D JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT DUP1 PUSH2 0x26F2 JUMPI POP DUP1 JUMPDEST ISZERO PUSH2 0x2703 JUMPI PUSH2 0x2701 DUP4 DUP4 PUSH2 0x2FCC JUMP JUMPDEST POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x2778 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x276F SWAP1 PUSH2 0x4BCA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2784 DUP3 PUSH1 0x0 DUP4 PUSH2 0x2F60 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x280B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2802 SWAP1 PUSH2 0x4C5C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH1 0x33 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x35 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x28BF SWAP2 SWAP1 PUSH2 0x34ED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x28D3 DUP4 PUSH1 0x0 DUP5 PUSH2 0x2F78 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x2948 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x293F SWAP1 PUSH2 0x4CC8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2954 PUSH1 0x0 DUP4 DUP4 PUSH2 0x2F60 JUMP JUMPDEST DUP1 PUSH1 0x35 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x2966 SWAP2 SWAP1 PUSH2 0x3488 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x33 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0x2A18 SWAP2 SWAP1 PUSH2 0x34ED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x2A2C PUSH1 0x0 DUP4 DUP4 PUSH2 0x2F78 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A3C PUSH1 0x9A PUSH2 0x1F03 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 DUP1 SLOAD SWAP1 POP EQ ISZERO PUSH2 0x2A58 JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0x2AF5 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 DUP1 SLOAD SWAP1 POP SWAP1 POP JUMPDEST DUP1 DUP3 LT ISZERO PUSH2 0x2AAC JUMPI PUSH1 0x0 PUSH2 0x2A77 DUP4 DUP4 PUSH2 0x30B0 JUMP JUMPDEST SWAP1 POP DUP5 PUSH2 0x2A84 DUP8 DUP4 PUSH2 0x30D6 JUMP JUMPDEST PUSH1 0x0 ADD SLOAD GT ISZERO PUSH2 0x2A96 JUMPI DUP1 SWAP2 POP PUSH2 0x2AA6 JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH2 0x2AA3 SWAP2 SWAP1 PUSH2 0x3488 JUMP JUMPDEST SWAP3 POP JUMPDEST POP PUSH2 0x2A63 JUMP JUMPDEST PUSH1 0x0 DUP3 GT DUP1 ISZERO PUSH2 0x2AD4 JUMPI POP DUP4 PUSH2 0x2ACE DUP7 PUSH1 0x1 DUP6 PUSH2 0x2AC9 SWAP2 SWAP1 PUSH2 0x4CE8 JUMP JUMPDEST PUSH2 0x30D6 JUMP JUMPDEST PUSH1 0x0 ADD SLOAD EQ JUMPDEST ISZERO PUSH2 0x2AEF JUMPI PUSH1 0x1 DUP3 PUSH2 0x2AE6 SWAP2 SWAP1 PUSH2 0x4CE8 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x2AF5 JUMP JUMPDEST DUP2 SWAP3 POP POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2B4A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B41 SWAP1 PUSH2 0x4831 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x36 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x2B60 SWAP3 SWAP2 SWAP1 PUSH2 0x33AC JUMP JUMPDEST POP DUP1 PUSH1 0x37 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x2B77 SWAP3 SWAP2 SWAP1 PUSH2 0x33AC JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2BCB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2BC2 SWAP1 PUSH2 0x4831 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2BDB PUSH2 0x2BD6 PUSH2 0x16EF JUMP JUMPDEST PUSH2 0x1E1D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2C2C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2C23 SWAP1 PUSH2 0x4831 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0xFB PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2C98 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2C8F SWAP1 PUSH2 0x4831 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP DUP2 PUSH2 0x12D DUP2 SWAP1 SSTORE POP DUP1 PUSH2 0x12E DUP2 SWAP1 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2CF1 SWAP3 SWAP2 SWAP1 PUSH2 0x4D94 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP4 PUSH1 0x0 SHR GT ISZERO PUSH2 0x2D4A JUMPI PUSH1 0x0 PUSH1 0x3 SWAP2 POP SWAP2 POP PUSH2 0x2DE9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP8 DUP8 DUP8 DUP8 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x2D6F SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4DCB JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2D91 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x2DE0 JUMPI PUSH1 0x0 PUSH1 0x1 SWAP3 POP SWAP3 POP POP PUSH2 0x2DE9 JUMP JUMPDEST DUP1 PUSH1 0x0 SWAP3 POP SWAP3 POP POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x2E06 JUMPI PUSH2 0x2E05 PUSH2 0x4E10 JUMP JUMPDEST JUMPDEST DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x2E19 JUMPI PUSH2 0x2E18 PUSH2 0x4E10 JUMP JUMPDEST JUMPDEST EQ ISZERO PUSH2 0x2E24 JUMPI PUSH2 0x2F5D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x2E38 JUMPI PUSH2 0x2E37 PUSH2 0x4E10 JUMP JUMPDEST JUMPDEST DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x2E4B JUMPI PUSH2 0x2E4A PUSH2 0x4E10 JUMP JUMPDEST JUMPDEST EQ ISZERO PUSH2 0x2E8C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2E83 SWAP1 PUSH2 0x4E8B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x2EA0 JUMPI PUSH2 0x2E9F PUSH2 0x4E10 JUMP JUMPDEST JUMPDEST DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x2EB3 JUMPI PUSH2 0x2EB2 PUSH2 0x4E10 JUMP JUMPDEST JUMPDEST EQ ISZERO PUSH2 0x2EF4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EEB SWAP1 PUSH2 0x4EF7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x2F08 JUMPI PUSH2 0x2F07 PUSH2 0x4E10 JUMP JUMPDEST JUMPDEST DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x2F1B JUMPI PUSH2 0x2F1A PUSH2 0x4E10 JUMP JUMPDEST JUMPDEST EQ ISZERO PUSH2 0x2F5C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2F53 SWAP1 PUSH2 0x4F89 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH2 0x2F68 PUSH2 0x30F8 JUMP JUMPDEST PUSH2 0x2F73 DUP4 DUP4 DUP4 PUSH2 0x3142 JUMP JUMPDEST POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x2F86 DUP2 PUSH2 0x2623 JUMP JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2FD7 DUP4 PUSH2 0x1F11 JUMP JUMPDEST PUSH2 0x3016 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x300D SWAP1 PUSH2 0x501B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH1 0x40 MLOAD PUSH2 0x303E SWAP2 SWAP1 PUSH2 0x5082 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3079 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x307E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x30A6 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x5166 PUSH1 0x27 SWAP2 CODECOPY PUSH2 0x31FC JUMP JUMPDEST SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DUP5 XOR PUSH2 0x30C1 SWAP2 SWAP1 PUSH2 0x50C8 JUMP JUMPDEST DUP3 DUP5 AND PUSH2 0x30CE SWAP2 SWAP1 PUSH2 0x3488 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x0 MSTORE DUP3 PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SWAP1 POP PUSH2 0x30EF DUP2 PUSH2 0x321E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3100 PUSH2 0xEF6 JUMP JUMPDEST ISZERO PUSH2 0x3140 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3137 SWAP1 PUSH2 0x5145 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH2 0x314D DUP4 DUP4 DUP4 PUSH2 0x3228 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x3198 JUMPI PUSH2 0x318B DUP3 PUSH2 0x322D JUMP JUMPDEST PUSH2 0x3193 PUSH2 0x3280 JUMP JUMPDEST PUSH2 0x31F7 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x31E3 JUMPI PUSH2 0x31D6 DUP4 PUSH2 0x322D JUMP JUMPDEST PUSH2 0x31DE PUSH2 0x3280 JUMP JUMPDEST PUSH2 0x31F6 JUMP JUMPDEST PUSH2 0x31EC DUP4 PUSH2 0x322D JUMP JUMPDEST PUSH2 0x31F5 DUP3 PUSH2 0x322D JUMP JUMPDEST JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x320C JUMPI DUP3 SWAP1 POP PUSH2 0x3217 JUMP JUMPDEST PUSH2 0x3216 DUP4 DUP4 PUSH2 0x3294 JUMP JUMPDEST JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x327D PUSH1 0x97 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x3278 DUP4 PUSH2 0xF0D JUMP JUMPDEST PUSH2 0x32E4 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x3292 PUSH1 0x98 PUSH2 0x328D PUSH2 0x874 JUMP JUMPDEST PUSH2 0x32E4 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT ISZERO PUSH2 0x32A7 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x32DB SWAP2 SWAP1 PUSH2 0x35A1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x32EE PUSH2 0x2A30 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x32FD DUP5 PUSH1 0x0 ADD PUSH2 0x335F JUMP JUMPDEST LT ISZERO PUSH2 0x335A JUMPI DUP3 PUSH1 0x0 ADD DUP2 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP SSTORE DUP3 PUSH1 0x1 ADD DUP3 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP SSTORE JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP1 SLOAD SWAP1 POP EQ ISZERO PUSH2 0x3376 JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0x33A7 JUMP JUMPDEST DUP2 PUSH1 0x1 DUP4 DUP1 SLOAD SWAP1 POP PUSH2 0x3388 SWAP2 SWAP1 PUSH2 0x4CE8 JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0x3399 JUMPI PUSH2 0x3398 PUSH2 0x4790 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x33B8 SWAP1 PUSH2 0x3B7E JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x33DA JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x3421 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x33F3 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x3421 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x3421 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x3420 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x3405 JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH2 0x342E SWAP2 SWAP1 PUSH2 0x3432 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x344B JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH2 0x3433 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3493 DUP3 PUSH2 0x344F JUMP JUMPDEST SWAP2 POP PUSH2 0x349E DUP4 PUSH2 0x344F JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0x34D3 JUMPI PUSH2 0x34D2 PUSH2 0x3459 JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x34E7 DUP2 PUSH2 0x344F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3502 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x34DE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3542 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x3527 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x3551 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3573 DUP3 PUSH2 0x3508 JUMP JUMPDEST PUSH2 0x357D DUP2 DUP6 PUSH2 0x3513 JUMP JUMPDEST SWAP4 POP PUSH2 0x358D DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x3524 JUMP JUMPDEST PUSH2 0x3596 DUP2 PUSH2 0x3557 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x35BB DUP2 DUP5 PUSH2 0x3568 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3602 DUP3 PUSH2 0x35D7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3612 DUP2 PUSH2 0x35F7 JUMP JUMPDEST DUP2 EQ PUSH2 0x361D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x362F DUP2 PUSH2 0x3609 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x363E DUP2 PUSH2 0x344F JUMP JUMPDEST DUP2 EQ PUSH2 0x3649 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x365B DUP2 PUSH2 0x3635 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3678 JUMPI PUSH2 0x3677 PUSH2 0x35CD JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3686 DUP6 DUP3 DUP7 ADD PUSH2 0x3620 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x3697 DUP6 DUP3 DUP7 ADD PUSH2 0x364C JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x36B6 DUP2 PUSH2 0x36A1 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x36D1 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x36AD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x36F0 JUMPI PUSH2 0x36EF PUSH2 0x35CD JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x36FE DUP7 DUP3 DUP8 ADD PUSH2 0x3620 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x370F DUP7 DUP3 DUP8 ADD PUSH2 0x3620 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x3720 DUP7 DUP3 DUP8 ADD PUSH2 0x364C JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3740 DUP2 PUSH2 0x372A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x375B PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3737 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x376A DUP2 PUSH2 0x35F7 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3785 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3761 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x379E DUP2 PUSH2 0x378B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x37B9 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3795 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x37D5 JUMPI PUSH2 0x37D4 PUSH2 0x35CD JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x37E3 DUP5 DUP3 DUP6 ADD PUSH2 0x3620 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3802 JUMPI PUSH2 0x3801 PUSH2 0x35CD JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3810 DUP5 DUP3 DUP6 ADD PUSH2 0x364C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x385B DUP3 PUSH2 0x3557 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x387A JUMPI PUSH2 0x3879 PUSH2 0x3823 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x388D PUSH2 0x35C3 JUMP JUMPDEST SWAP1 POP PUSH2 0x3899 DUP3 DUP3 PUSH2 0x3852 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x38B9 JUMPI PUSH2 0x38B8 PUSH2 0x3823 JUMP JUMPDEST JUMPDEST PUSH2 0x38C2 DUP3 PUSH2 0x3557 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x38F1 PUSH2 0x38EC DUP5 PUSH2 0x389E JUMP JUMPDEST PUSH2 0x3883 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x390D JUMPI PUSH2 0x390C PUSH2 0x381E JUMP JUMPDEST JUMPDEST PUSH2 0x3918 DUP5 DUP3 DUP6 PUSH2 0x38CF JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3935 JUMPI PUSH2 0x3934 PUSH2 0x3819 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x3945 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x38DE JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3965 JUMPI PUSH2 0x3964 PUSH2 0x35CD JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3973 DUP6 DUP3 DUP7 ADD PUSH2 0x3620 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3994 JUMPI PUSH2 0x3993 PUSH2 0x35D2 JUMP JUMPDEST JUMPDEST PUSH2 0x39A0 DUP6 DUP3 DUP7 ADD PUSH2 0x3920 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x39B5 DUP3 PUSH2 0x35D7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x39C5 DUP2 PUSH2 0x39AA JUMP JUMPDEST DUP2 EQ PUSH2 0x39D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x39E2 DUP2 PUSH2 0x39BC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x39FE JUMPI PUSH2 0x39FD PUSH2 0x35CD JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3A0C DUP5 DUP3 DUP6 ADD PUSH2 0x39D3 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3A1E DUP2 PUSH2 0x372A JUMP JUMPDEST DUP2 EQ PUSH2 0x3A29 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3A3B DUP2 PUSH2 0x3A15 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3A4A DUP2 PUSH2 0x378B JUMP JUMPDEST DUP2 EQ PUSH2 0x3A55 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3A67 DUP2 PUSH2 0x3A41 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x3A8C JUMPI PUSH2 0x3A8B PUSH2 0x35CD JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3A9A DUP11 DUP3 DUP12 ADD PUSH2 0x3620 JUMP JUMPDEST SWAP8 POP POP PUSH1 0x20 PUSH2 0x3AAB DUP11 DUP3 DUP12 ADD PUSH2 0x3620 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x40 PUSH2 0x3ABC DUP11 DUP3 DUP12 ADD PUSH2 0x364C JUMP JUMPDEST SWAP6 POP POP PUSH1 0x60 PUSH2 0x3ACD DUP11 DUP3 DUP12 ADD PUSH2 0x364C JUMP JUMPDEST SWAP5 POP POP PUSH1 0x80 PUSH2 0x3ADE DUP11 DUP3 DUP12 ADD PUSH2 0x3A2C JUMP JUMPDEST SWAP4 POP POP PUSH1 0xA0 PUSH2 0x3AEF DUP11 DUP3 DUP12 ADD PUSH2 0x3A58 JUMP JUMPDEST SWAP3 POP POP PUSH1 0xC0 PUSH2 0x3B00 DUP11 DUP3 DUP12 ADD PUSH2 0x3A58 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3B26 JUMPI PUSH2 0x3B25 PUSH2 0x35CD JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3B34 DUP6 DUP3 DUP7 ADD PUSH2 0x3620 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x3B45 DUP6 DUP3 DUP7 ADD PUSH2 0x3620 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x3B96 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x3BAA JUMPI PUSH2 0x3BA9 PUSH2 0x3B4F JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x555345525F4E4F545F5645524946494544000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3BE6 PUSH1 0x11 DUP4 PUSH2 0x3513 JUMP JUMPDEST SWAP2 POP PUSH2 0x3BF1 DUP3 PUSH2 0x3BB0 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3C15 DUP2 PUSH2 0x3BD9 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x64656C656761746563616C6C0000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3C78 PUSH1 0x2C DUP4 PUSH2 0x3513 JUMP JUMPDEST SWAP2 POP PUSH2 0x3C83 DUP3 PUSH2 0x3C1C JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3CA7 DUP2 PUSH2 0x3C6B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6163746976652070726F78790000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3D0A PUSH1 0x2C DUP4 PUSH2 0x3513 JUMP JUMPDEST SWAP2 POP PUSH2 0x3D15 DUP3 PUSH2 0x3CAE JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3D39 DUP2 PUSH2 0x3CFD JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x555550535570677261646561626C653A206D757374206E6F742062652063616C PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6C6564207468726F7567682064656C656761746563616C6C0000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3D9C PUSH1 0x38 DUP4 PUSH2 0x3513 JUMP JUMPDEST SWAP2 POP PUSH2 0x3DA7 DUP3 PUSH2 0x3D40 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3DCB DUP2 PUSH2 0x3D8F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3E2E PUSH1 0x2E DUP4 PUSH2 0x3513 JUMP JUMPDEST SWAP2 POP PUSH2 0x3E39 DUP3 PUSH2 0x3DD2 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3E5D DUP2 PUSH2 0x3E21 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3E93 PUSH2 0x3E8E PUSH2 0x3E89 DUP5 PUSH2 0x3E64 JUMP JUMPDEST PUSH2 0x3E6E JUMP JUMPDEST PUSH2 0x372A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3EA3 DUP2 PUSH2 0x3E78 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3EBE PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3E9A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x207A65726F000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3F20 PUSH1 0x25 DUP4 PUSH2 0x3513 JUMP JUMPDEST SWAP2 POP PUSH2 0x3F2B DUP3 PUSH2 0x3EC4 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3F4F DUP2 PUSH2 0x3F13 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x66726F6D3A205452414E534645525F52455155495245445F5645524946494341 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x54494F4E5F490000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3FB2 PUSH1 0x26 DUP4 PUSH2 0x3513 JUMP JUMPDEST SWAP2 POP PUSH2 0x3FBD DUP3 PUSH2 0x3F56 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3FE1 DUP2 PUSH2 0x3FA5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x746F203A205452414E534645525F52455155495245445F564552494649434154 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x494F4E5F49000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4044 PUSH1 0x25 DUP4 PUSH2 0x3513 JUMP JUMPDEST SWAP2 POP PUSH2 0x404F DUP3 PUSH2 0x3FE8 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4073 DUP2 PUSH2 0x4037 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x66726F6D3A205452414E534645525F52455155495245445F4D554C54495F5349 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x474E415455524500000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x40D6 PUSH1 0x27 DUP4 PUSH2 0x3513 JUMP JUMPDEST SWAP2 POP PUSH2 0x40E1 DUP3 PUSH2 0x407A JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4105 DUP2 PUSH2 0x40C9 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x746F3A205452414E534645525F52455155495245445F4D554C54495F5349474E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x4154555245000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4168 PUSH1 0x25 DUP4 PUSH2 0x3513 JUMP JUMPDEST SWAP2 POP PUSH2 0x4173 DUP3 PUSH2 0x410C JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4197 DUP2 PUSH2 0x415B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332305065726D69743A206578706972656420646561646C696E65000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x41D4 PUSH1 0x1D DUP4 PUSH2 0x3513 JUMP JUMPDEST SWAP2 POP PUSH2 0x41DF DUP3 PUSH2 0x419E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4203 DUP2 PUSH2 0x41C7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC0 DUP3 ADD SWAP1 POP PUSH2 0x421F PUSH1 0x0 DUP4 ADD DUP10 PUSH2 0x3795 JUMP JUMPDEST PUSH2 0x422C PUSH1 0x20 DUP4 ADD DUP9 PUSH2 0x3761 JUMP JUMPDEST PUSH2 0x4239 PUSH1 0x40 DUP4 ADD DUP8 PUSH2 0x3761 JUMP JUMPDEST PUSH2 0x4246 PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x34DE JUMP JUMPDEST PUSH2 0x4253 PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0x34DE JUMP JUMPDEST PUSH2 0x4260 PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0x34DE JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x45524332305065726D69743A20696E76616C6964207369676E61747572650000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x42A1 PUSH1 0x1E DUP4 PUSH2 0x3513 JUMP JUMPDEST SWAP2 POP PUSH2 0x42AC DUP3 PUSH2 0x426B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x42D0 DUP2 PUSH2 0x4294 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4333 PUSH1 0x26 DUP4 PUSH2 0x3513 JUMP JUMPDEST SWAP2 POP PUSH2 0x433E DUP3 PUSH2 0x42D7 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4362 DUP2 PUSH2 0x4326 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x43C5 PUSH1 0x24 DUP4 PUSH2 0x3513 JUMP JUMPDEST SWAP2 POP PUSH2 0x43D0 DUP3 PUSH2 0x4369 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x43F4 DUP2 PUSH2 0x43B8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7373000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4457 PUSH1 0x22 DUP4 PUSH2 0x3513 JUMP JUMPDEST SWAP2 POP PUSH2 0x4462 DUP3 PUSH2 0x43FB JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4486 DUP2 PUSH2 0x444A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x44C3 PUSH1 0x20 DUP4 PUSH2 0x3513 JUMP JUMPDEST SWAP2 POP PUSH2 0x44CE DUP3 PUSH2 0x448D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x44F2 DUP2 PUSH2 0x44B6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x4502 DUP2 PUSH2 0x36A1 JUMP JUMPDEST DUP2 EQ PUSH2 0x450D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x451F DUP2 PUSH2 0x44F9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x453B JUMPI PUSH2 0x453A PUSH2 0x35CD JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x4549 DUP5 DUP3 DUP6 ADD PUSH2 0x4510 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x4561 DUP2 PUSH2 0x3A41 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x457D JUMPI PUSH2 0x457C PUSH2 0x35CD JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x458B DUP5 DUP3 DUP6 ADD PUSH2 0x4552 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x45524331393637557067726164653A206E657720696D706C656D656E74617469 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F6E206973206E6F742055555053000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x45F0 PUSH1 0x2E DUP4 PUSH2 0x3513 JUMP JUMPDEST SWAP2 POP PUSH2 0x45FB DUP3 PUSH2 0x4594 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x461F DUP2 PUSH2 0x45E3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524331393637557067726164653A20756E737570706F727465642070726F78 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6961626C65555549440000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4682 PUSH1 0x29 DUP4 PUSH2 0x3513 JUMP JUMPDEST SWAP2 POP PUSH2 0x468D DUP3 PUSH2 0x4626 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x46B1 DUP2 PUSH2 0x4675 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433230536E617073686F743A206964206973203000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x46EE PUSH1 0x16 DUP4 PUSH2 0x3513 JUMP JUMPDEST SWAP2 POP PUSH2 0x46F9 DUP3 PUSH2 0x46B8 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x471D DUP2 PUSH2 0x46E1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433230536E617073686F743A206E6F6E6578697374656E74206964000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x475A PUSH1 0x1D DUP4 PUSH2 0x3513 JUMP JUMPDEST SWAP2 POP PUSH2 0x4765 DUP3 PUSH2 0x4724 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4789 DUP2 PUSH2 0x474D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x481B PUSH1 0x2B DUP4 PUSH2 0x3513 JUMP JUMPDEST SWAP2 POP PUSH2 0x4826 DUP3 PUSH2 0x47BF JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x484A DUP2 PUSH2 0x480E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4887 PUSH1 0x1D DUP4 PUSH2 0x3513 JUMP JUMPDEST SWAP2 POP PUSH2 0x4892 DUP3 PUSH2 0x4851 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x48B6 DUP2 PUSH2 0x487A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4919 PUSH1 0x25 DUP4 PUSH2 0x3513 JUMP JUMPDEST SWAP2 POP PUSH2 0x4924 DUP3 PUSH2 0x48BD JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4948 DUP2 PUSH2 0x490C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6573730000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x49AB PUSH1 0x23 DUP4 PUSH2 0x3513 JUMP JUMPDEST SWAP2 POP PUSH2 0x49B6 DUP3 PUSH2 0x494F JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x49DA DUP2 PUSH2 0x499E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x616C616E63650000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4A3D PUSH1 0x26 DUP4 PUSH2 0x3513 JUMP JUMPDEST SWAP2 POP PUSH2 0x4A48 DUP3 PUSH2 0x49E1 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4A6C DUP2 PUSH2 0x4A30 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0x4A88 PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0x3795 JUMP JUMPDEST PUSH2 0x4A95 PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x3795 JUMP JUMPDEST PUSH2 0x4AA2 PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x3795 JUMP JUMPDEST PUSH2 0x4AAF PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x34DE JUMP JUMPDEST PUSH2 0x4ABC PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x3761 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F74206120636F6E747261637400000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4B22 PUSH1 0x2D DUP4 PUSH2 0x3513 JUMP JUMPDEST SWAP2 POP PUSH2 0x4B2D DUP3 PUSH2 0x4AC6 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4B51 DUP2 PUSH2 0x4B15 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A206275726E2066726F6D20746865207A65726F20616464726573 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7300000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4BB4 PUSH1 0x21 DUP4 PUSH2 0x3513 JUMP JUMPDEST SWAP2 POP PUSH2 0x4BBF DUP3 PUSH2 0x4B58 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4BE3 DUP2 PUSH2 0x4BA7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A206275726E20616D6F756E7420657863656564732062616C616E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6365000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4C46 PUSH1 0x22 DUP4 PUSH2 0x3513 JUMP JUMPDEST SWAP2 POP PUSH2 0x4C51 DUP3 PUSH2 0x4BEA JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4C75 DUP2 PUSH2 0x4C39 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4CB2 PUSH1 0x1F DUP4 PUSH2 0x3513 JUMP JUMPDEST SWAP2 POP PUSH2 0x4CBD DUP3 PUSH2 0x4C7C JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4CE1 DUP2 PUSH2 0x4CA5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4CF3 DUP3 PUSH2 0x344F JUMP JUMPDEST SWAP2 POP PUSH2 0x4CFE DUP4 PUSH2 0x344F JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 0x4D11 JUMPI PUSH2 0x4D10 PUSH2 0x3459 JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x1901000000000000000000000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4D5D PUSH1 0x2 DUP4 PUSH2 0x4D1C JUMP JUMPDEST SWAP2 POP PUSH2 0x4D68 DUP3 PUSH2 0x4D27 JUMP JUMPDEST PUSH1 0x2 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x4D8E PUSH2 0x4D89 DUP3 PUSH2 0x378B JUMP JUMPDEST PUSH2 0x4D73 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4D9F DUP3 PUSH2 0x4D50 JUMP JUMPDEST SWAP2 POP PUSH2 0x4DAB DUP3 DUP6 PUSH2 0x4D7D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH2 0x4DBB DUP3 DUP5 PUSH2 0x4D7D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x4DE0 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x3795 JUMP JUMPDEST PUSH2 0x4DED PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x3737 JUMP JUMPDEST PUSH2 0x4DFA PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x3795 JUMP JUMPDEST PUSH2 0x4E07 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x3795 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x45434453413A20696E76616C6964207369676E61747572650000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4E75 PUSH1 0x18 DUP4 PUSH2 0x3513 JUMP JUMPDEST SWAP2 POP PUSH2 0x4E80 DUP3 PUSH2 0x4E3F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4EA4 DUP2 PUSH2 0x4E68 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4EE1 PUSH1 0x1F DUP4 PUSH2 0x3513 JUMP JUMPDEST SWAP2 POP PUSH2 0x4EEC DUP3 PUSH2 0x4EAB JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4F10 DUP2 PUSH2 0x4ED4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202773272076616C PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7565000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4F73 PUSH1 0x22 DUP4 PUSH2 0x3513 JUMP JUMPDEST SWAP2 POP PUSH2 0x4F7E DUP3 PUSH2 0x4F17 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4FA2 DUP2 PUSH2 0x4F66 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x416464726573733A2064656C65676174652063616C6C20746F206E6F6E2D636F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6E74726163740000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5005 PUSH1 0x26 DUP4 PUSH2 0x3513 JUMP JUMPDEST SWAP2 POP PUSH2 0x5010 DUP3 PUSH2 0x4FA9 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x5034 DUP2 PUSH2 0x4FF8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x505C DUP3 PUSH2 0x503B JUMP JUMPDEST PUSH2 0x5066 DUP2 DUP6 PUSH2 0x5046 JUMP JUMPDEST SWAP4 POP PUSH2 0x5076 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x3524 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x508E DUP3 DUP5 PUSH2 0x5051 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x50D3 DUP3 PUSH2 0x344F JUMP JUMPDEST SWAP2 POP PUSH2 0x50DE DUP4 PUSH2 0x344F JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x50EE JUMPI PUSH2 0x50ED PUSH2 0x5099 JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5061757361626C653A2070617573656400000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x512F PUSH1 0x10 DUP4 PUSH2 0x3513 JUMP JUMPDEST SWAP2 POP PUSH2 0x513A DUP3 PUSH2 0x50F9 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x515E DUP2 PUSH2 0x5122 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID COINBASE PUSH5 0x6472657373 GASPRICE KECCAK256 PUSH13 0x6F772D6C6576656C2064656C65 PUSH8 0x6174652063616C6C KECCAK256 PUSH7 0x61696C6564A264 PUSH10 0x70667358221220208832 SELFBALANCE 0x24 PUSH2 0xC0B 0xD6 0xB9 LT GASPRICE 0x27 PUSH26 0xF50CD9631E49BF8AEA6313043161256161B064736F6C63430008 MULMOD STOP CALLER ","sourceMap":"971:4758:30:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2319:9;2301:14;;:27;;;;;;;:::i;:::-;;;;;;;;2343:42;2375:9;2343:42;;;;;;:::i;:::-;;;;;;;;971:4758;;2470:9;2452:14;;:27;;;;;;;:::i;:::-;;;;;;;;2494:43;2527:9;2494:43;;;;;;:::i;:::-;;;;;;;;971:4758;2491:98:7;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4768:197;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3579:106;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4127:357:30;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3428:91:7;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5615:112:30;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3276:113:12;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3317:197:5;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;6208:234:7;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2979:91:30;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2877:96;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5312:262:10;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3763:222:5;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3006:131;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2751:120:30;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1858:84:6;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3743:125:7;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2071:101:0;;;;;;;;;;;;;:::i;:::-;;3076:147:30;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3026:126:12;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3243:273:30;;;;;;;;;;;;;:::i;:::-;;4492:93;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2702:102:7;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5673:230:10;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6929:427:7;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3522:599:30;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2328:637:12;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4311:149:7;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2321:198:0;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2491:98:7;2545:13;2577:5;2570:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2491:98;:::o;4768:197::-;4851:4;4867:13;4883:12;:10;:12::i;:::-;4867:28;;4905:32;4914:5;4921:7;4930:6;4905:8;:32::i;:::-;4954:4;4947:11;;;4768:197;;;;:::o;3579:106::-;3640:7;3666:12;;3659:19;;3579:106;:::o;4127:357:30:-;4414:4;1334:13:0;:11;:13::i;:::-;4306:4:30::1;1878:18;1890:5;1878:11;:18::i;:::-;1870:48;;;;;;;;;;;;:::i;:::-;;;;;;;;;4331:2:::2;1878:18;1890:5;1878:11;:18::i;:::-;1870:48;;;;;;;;;;;;:::i;:::-;;;;;;;;;4361:4:::3;2021:15;1998:19;2011:5;1998:12;:19::i;:::-;:38;1994:100;;;2077:5;2059:24;;;;;;;;;;;:::i;:::-;;;;;;;;1994:100;4393:2:::4;2021:15;1998:19;2011:5;1998:12;:19::i;:::-;:38;1994:100;;;2077:5;2059:24;;;;;;;;;;;:::i;:::-;;;;;;;;1994:100;4441:36:::5;4460:4;4466:2;4470:6;4441:18;:36::i;:::-;4434:43;;2103:1:::4;1928::::3;::::2;1357::0::1;4127:357:30::0;;;;;:::o;3428:91:7:-;3486:5;3510:2;3503:9;;3428:91;:::o;5615:112:30:-;5677:7;1334:13:0;:11;:13::i;:::-;5711:8:30::1;;;;;;;;;;;5696:24;;5615:112:::0;:::o;3276:113:12:-;3336:7;3362:20;:18;:20::i;:::-;3355:27;;3276:113;:::o;3317:197:5:-;1898:6;1881:23;;1889:4;1881:23;;;;1873:80;;;;;;;;;;;;:::i;:::-;;;;;;;;;1995:6;1971:30;;:20;:18;:20::i;:::-;:30;;;1963:87;;;;;;;;;;;;:::i;:::-;;;;;;;;;3400:36:::1;3418:17;3400;:36::i;:::-;3446:61;3468:17;3497:1;3487:12;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3501:5;3446:21;:61::i;:::-;3317:197:::0;:::o;6208:234:7:-;6296:4;6312:13;6328:12;:10;:12::i;:::-;6312:28;;6350:64;6359:5;6366:7;6403:10;6375:25;6385:5;6392:7;6375:9;:25::i;:::-;:38;;;;:::i;:::-;6350:8;:64::i;:::-;6431:4;6424:11;;;6208:234;;;;:::o;2979:91:30:-;1334:13:0;:11;:13::i;:::-;3045:18:30::1;3056:6;3045:10;:18::i;:::-;2979:91:::0;:::o;2877:96::-;1334:13:0;:11;:13::i;:::-;2950:16:30::1;2955:2;2959:6;2950:4;:16::i;:::-;2877:96:::0;;:::o;5312:262:10:-;5399:7;5419:16;5437:13;5454:55;5463:10;5475:24;:33;5500:7;5475:33;;;;;;;;;;;;;;;5454:8;:55::i;:::-;5418:91;;;;5527:11;:40;;5549:18;5559:7;5549:9;:18::i;:::-;5527:40;;;5541:5;5527:40;5520:47;;;;5312:262;;;;:::o;3763:222:5:-;1898:6;1881:23;;1889:4;1881:23;;;;1873:80;;;;;;;;;;;;:::i;:::-;;;;;;;;;1995:6;1971:30;;:20;:18;:20::i;:::-;:30;;;1963:87;;;;;;;;;;;;:::i;:::-;;;;;;;;;3880:36:::1;3898:17;3880;:36::i;:::-;3926:52;3948:17;3967:4;3973;3926:21;:52::i;:::-;3763:222:::0;;:::o;3006:131::-;3084:7;2333:6;2316:23;;2324:4;2316:23;;;2308:92;;;;;;;;;;;;:::i;:::-;;;;;;;;;1292:66:2::1;3110:20:5;;3103:27;;3006:131:::0;:::o;2751:120:30:-;1334:13:0;:11;:13::i;:::-;2854:9:30::1;2834:8;;:30;;;;;;;;;;;;;;;;;;2751:120:::0;:::o;1858:84:6:-;1905:4;1928:7;;;;;;;;;;;1921:14;;1858:84;:::o;3743:125:7:-;3817:7;3843:9;:18;3853:7;3843:18;;;;;;;;;;;;;;;;3836:25;;3743:125;;;:::o;2071:101:0:-;1334:13;:11;:13::i;:::-;2135:30:::1;2162:1;2135:18;:30::i;:::-;2071:101::o:0;3076:147:30:-;1334:13:0;:11;:13::i;:::-;3185:31:30::1;3200:7;3209:6;3185:14;:31::i;:::-;3076:147:::0;;:::o;3026:126:12:-;3095:7;3121:24;:7;:14;3129:5;3121:14;;;;;;;;;;;;;;;:22;:24::i;:::-;3114:31;;3026:126;;;:::o;3243:273:30:-;3268:19:4;3291:13;;;;;;;;;;;3290:14;3268:36;;3336:14;:34;;;;;3369:1;3354:12;;;;;;;;;;:16;;;3336:34;3335:108;;;;3377:44;3415:4;3377:29;:44::i;:::-;3376:45;:66;;;;;3441:1;3425:12;;;;;;;;;;:17;;;3376:66;3335:108;3314:201;;;;;;;;;;;;:::i;:::-;;;;;;;;;3540:1;3525:12;;:16;;;;;;;;;;;;;;;;;;3555:14;3551:65;;;3601:4;3585:13;;:20;;;;;;;;;;;;;;;;;;3551:65;3294:28:30::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;::::0;:12:::1;:28::i;:::-;3332:22;:20;:22::i;:::-;3364;:20;:22::i;:::-;3396:16;:14;:16::i;:::-;3422:17;:15;:17::i;:::-;3449:26;;;;;;;;;;;;;;;;;::::0;:18:::1;:26::i;:::-;3485:24;:22;:24::i;:::-;3640:14:4::0;3636:99;;;3686:5;3670:13;;:21;;;;;;;;;;;;;;;;;;3710:14;3722:1;3710:14;;;;;;:::i;:::-;;;;;;;;3636:99;3258:483;3243:273:30:o;4492:93::-;4539:7;4565:13;:11;:13::i;:::-;4558:20;;4492:93;:::o;2702:102:7:-;2758:13;2790:7;2783:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2702:102;:::o;5673:230:10:-;5745:7;5765:16;5783:13;5800:43;5809:10;5821:21;5800:8;:43::i;:::-;5764:79;;;;5861:11;:35;;5883:13;:11;:13::i;:::-;5861:35;;;5875:5;5861:35;5854:42;;;;5673:230;;;:::o;6929:427:7:-;7022:4;7038:13;7054:12;:10;:12::i;:::-;7038:28;;7076:24;7103:25;7113:5;7120:7;7103:9;:25::i;:::-;7076:52;;7166:15;7146:16;:35;;7138:85;;;;;;;;;;;;:::i;:::-;;;;;;;;;7257:60;7266:5;7273:7;7301:15;7282:16;:34;7257:8;:60::i;:::-;7345:4;7338:11;;;;6929:427;;;;:::o;3522:599:30:-;3615:4;3652:23;3664:10;3652:11;:23::i;:::-;3631:108;;;;;;;;;;;;:::i;:::-;;;;;;;;;3757:15;3769:2;3757:11;:15::i;:::-;3749:65;;;;;;;;;;;;:::i;:::-;;;;;;;;;3873:9;3845:24;3858:10;3845:12;:24::i;:::-;:37;3824:123;;;;;;;;;;;;:::i;:::-;;;;;;;;;3998:9;3978:16;3991:2;3978:12;:16::i;:::-;:29;3957:113;;;;;;;;;;;;:::i;:::-;;;;;;;;;4088:26;4103:2;4107:6;4088:14;:26::i;:::-;4081:33;;3522:599;;;;:::o;2328:637:12:-;2563:8;2544:15;:27;;2536:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;2616:18;1363:95;2676:5;2683:7;2692:5;2699:16;2709:5;2699:9;:16::i;:::-;2717:8;2647:79;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2637:90;;;;;;2616:111;;2738:12;2753:28;2770:10;2753:16;:28::i;:::-;2738:43;;2792:14;2809:39;2834:4;2840:1;2843;2846;2809:24;:39::i;:::-;2792:56;;2876:5;2866:15;;:6;:15;;;2858:58;;;;;;;;;;;;:::i;:::-;;;;;;;;;2927:31;2936:5;2943:7;2952:5;2927:8;:31::i;:::-;2526:439;;;2328:637;;;;;;;:::o;4311:149:7:-;4400:7;4426:11;:18;4438:5;4426:18;;;;;;;;;;;;;;;:27;4445:7;4426:27;;;;;;;;;;;;;;;;4419:34;;4311:149;;;;:::o;2321:198:0:-;1334:13;:11;:13::i;:::-;2429:1:::1;2409:22;;:8;:22;;;;2401:73;;;;;;;;;;;;:::i;:::-;;;;;;;;;2484:28;2503:8;2484:18;:28::i;:::-;2321:198:::0;:::o;850:96:16:-;903:7;929:10;922:17;;850:96;:::o;10841:370:7:-;10989:1;10972:19;;:5;:19;;;;10964:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;11069:1;11050:21;;:7;:21;;;;11042:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;11151:6;11121:11;:18;11133:5;11121:18;;;;;;;;;;;;;;;:27;11140:7;11121:27;;;;;;;;;;;;;;;:36;;;;11188:7;11172:32;;11181:5;11172:32;;;11197:6;11172:32;;;;;;:::i;:::-;;;;;;;;10841:370;;;:::o;1599:130:0:-;1673:12;:10;:12::i;:::-;1662:23;;:7;:5;:7::i;:::-;:23;;;1654:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;1599:130::o;4919:150:30:-;4978:4;4994:11;5008:8;;;;;;;;;;;:24;;;5033:5;5008:31;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4994:45;;5056:6;5049:13;;;4919:150;;;:::o;5075:120::-;5135:7;5161:8;;;;;;;;;;;:20;;;5182:5;5161:27;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5154:34;;5075:120;;;:::o;5527:286:7:-;5654:4;5670:15;5688:12;:10;:12::i;:::-;5670:30;;5710:38;5726:4;5732:7;5741:6;5710:15;:38::i;:::-;5758:27;5768:4;5774:2;5778:6;5758:9;:27::i;:::-;5802:4;5795:11;;;5527:286;;;;;:::o;2851:160:21:-;2904:7;2930:74;1604:95;2964:17;:15;:17::i;:::-;2983:20;:18;:20::i;:::-;2930:21;:74::i;:::-;2923:81;;2851:160;:::o;1563:151:2:-;1616:7;1642:59;1292:66;1680:20;;1642:37;:59::i;:::-;:65;;;;;;;;;;;;1635:72;;1563:151;:::o;5474:98:30:-;1334:13:0;:11;:13::i;:::-;5474:98:30;:::o;2938:974:2:-;3384:53;951:66;3422:14;;3384:37;:53::i;:::-;:59;;;;;;;;;;;;3380:526;;;3459:37;3478:17;3459:18;:37::i;:::-;3380:526;;;3560:17;3531:61;;;:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;3527:302;;3758:56;;;;;;;;;;:::i;:::-;;;;;;;;3527:302;1292:66;3652:20;;3644:4;:28;3636:82;;;;;;;;;;;;:::i;:::-;;;;;;;;;3595:138;3842:53;3860:17;3879:4;3885:9;3842:17;:53::i;:::-;3380:526;2938:974;;;:::o;848:89:9:-;903:27;909:12;:10;:12::i;:::-;923:6;903:5;:27::i;:::-;848:89;:::o;4818:95:30:-;1334:13:0;:11;:13::i;:::-;4889:17:30::1;4895:2;4899:6;4889:5;:17::i;:::-;4818:95:::0;;:::o;6724:1594:10:-;6813:4;6819:7;6859:1;6846:10;:14;6838:49;;;;;;;;;;;;:::i;:::-;;;;;;;;;6919:23;:21;:23::i;:::-;6905:10;:37;;6897:79;;;;;;;;;;;;:::i;:::-;;;;;;;;;8099:13;8115:40;8144:10;8115:9;:13;;:28;;:40;;;;:::i;:::-;8099:56;;8179:9;:13;;:20;;;;8170:5;:29;8166:146;;;8223:5;8230:1;8215:17;;;;;;;8166:146;8271:4;8277:9;:16;;8294:5;8277:23;;;;;;;;:::i;:::-;;;;;;;;;;8263:38;;;;;6724:1594;;;;;;:::o;2673:187:0:-;2746:16;2765:6;;;;;;;;;;;2746:25;;2790:8;2781:6;;:17;;;;;;;;;;;;;;;;;;2844:8;2813:40;;2834:8;2813:40;;;;;;;;;;;;2736:124;2673:187;:::o;1243:161:9:-;1319:46;1335:7;1344:12;:10;:12::i;:::-;1358:6;1319:15;:46::i;:::-;1375:22;1381:7;1390:6;1375:5;:22::i;:::-;1243:161;;:::o;838:112:17:-;903:7;929;:14;;;922:21;;838:112;;;:::o;1186:320:14:-;1246:4;1498:1;1476:7;:19;;;:23;1469:30;;1186:320;;;:::o;2114:147:7:-;5363:13:4;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;2216:38:7::1;2239:5;2246:7;2216:22;:38::i;:::-;2114:147:::0;;:::o;594:65:9:-;5363:13:4;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;594:65:9:o;2568::10:-;5363:13:4;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;2568:65:10:o;1003:95:0:-;5363:13:4;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1065:26:0::1;:24;:26::i;:::-;1003:95::o:0;1063:97:6:-;5363:13:4;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1126:27:6::1;:25;:27::i;:::-;1063:97::o:0;2055:125:12:-;5363:13:4;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;2139:34:12::1;2163:4;2139:34;;;;;;;;;;;;;;;;::::0;:23:::1;:34::i;:::-;2055:125:::0;:::o;1042:67:5:-;5363:13:4;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1042:67:5:o;1441:85:0:-;1487:7;1513:6;;;;;;;;;;;1506:13;;1441:85;:::o;4064:189:7:-;4143:4;4159:13;4175:12;:10;:12::i;:::-;4159:28;;4197;4207:5;4214:2;4218:6;4197:9;:28::i;:::-;4242:4;4235:11;;;4064:189;;;;:::o;3520:214:12:-;3580:15;3607:41;3651:7;:14;3659:5;3651:14;;;;;;;;;;;;;;;3607:58;;3685:15;:5;:13;:15::i;:::-;3675:25;;3710:17;:5;:15;:17::i;:::-;3597:137;3520:214;;;:::o;3899:176:21:-;3976:7;4002:66;4035:20;:18;:20::i;:::-;4057:10;4002:32;:66::i;:::-;3995:73;;3899:176;;;:::o;6718:270:20:-;6841:7;6861:17;6880:18;6902:25;6913:4;6919:1;6922;6925;6902:10;:25::i;:::-;6860:67;;;;6937:18;6949:5;6937:11;:18::i;:::-;6972:9;6965:16;;;;6718:270;;;;;;:::o;11492:441:7:-;11622:24;11649:25;11659:5;11666:7;11649:9;:25::i;:::-;11622:52;;11708:17;11688:16;:37;11684:243;;11769:6;11749:16;:26;;11741:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;11851:51;11860:5;11867:7;11895:6;11876:16;:25;11851:8;:51::i;:::-;11684:243;11612:321;11492:441;;;:::o;7810:818::-;7952:1;7936:18;;:4;:18;;;;7928:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;8028:1;8014:16;;:2;:16;;;;8006:64;;;;;;;;;;;;:::i;:::-;;;;;;;;;8081:38;8102:4;8108:2;8112:6;8081:20;:38::i;:::-;8130:19;8152:9;:15;8162:4;8152:15;;;;;;;;;;;;;;;;8130:37;;8200:6;8185:11;:21;;8177:72;;;;;;;;;;;;:::i;:::-;;;;;;;;;8315:6;8301:11;:20;8283:9;:15;8293:4;8283:15;;;;;;;;;;;;;;;:38;;;;8515:6;8498:9;:13;8508:2;8498:13;;;;;;;;;;;;;;;;:23;;;;;;;;;;;8562:2;8547:26;;8556:4;8547:26;;;8566:6;8547:26;;;;;;:::i;:::-;;;;;;;;8584:37;8604:4;8610:2;8614:6;8584:19;:37::i;:::-;7918:710;7810:818;;;:::o;4311:103:21:-;4369:7;4395:12;;4388:19;;4311:103;:::o;4653:109::-;4714:7;4740:15;;4733:22;;4653:109;:::o;3017:257::-;3157:7;3204:8;3214;3224:11;3237:13;3260:4;3193:73;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3183:84;;;;;;3176:91;;3017:257;;;;;:::o;1625:190:18:-;1686:21;1795:4;1785:14;;1625:190;;;:::o;1913:::-;1974:21;2083:4;2073:14;;1913:190;;;:::o;1805:281:2:-;1886:48;1916:17;1886:29;:48::i;:::-;1878:106;;;;;;;;;;;;:::i;:::-;;;;;;;;;2062:17;1994:59;1292:66;2032:20;;1994:37;:59::i;:::-;:65;;;:85;;;;;;;;;;;;;;;;;;1805:281;:::o;2478:288::-;2616:29;2627:17;2616:10;:29::i;:::-;2673:1;2659:4;:11;:15;:28;;;;2678:9;2659:28;2655:105;;;2703:46;2725:17;2744:4;2703:21;:46::i;:::-;;2655:105;2478:288;;;:::o;9759:659:7:-;9861:1;9842:21;;:7;:21;;;;9834:67;;;;;;;;;;;;:::i;:::-;;;;;;;;;9912:49;9933:7;9950:1;9954:6;9912:20;:49::i;:::-;9972:22;9997:9;:18;10007:7;9997:18;;;;;;;;;;;;;;;;9972:43;;10051:6;10033:14;:24;;10025:71;;;;;;;;;;;;:::i;:::-;;;;;;;;;10168:6;10151:14;:23;10130:9;:18;10140:7;10130:18;;;;;;;;;;;;;;;:44;;;;10283:6;10267:12;;:22;;;;;;;;;;;10341:1;10315:37;;10324:7;10315:37;;;10345:6;10315:37;;;;;;:::i;:::-;;;;;;;;10363:48;10383:7;10400:1;10404:6;10363:19;:48::i;:::-;9824:594;9759:659;;:::o;8904:535::-;9006:1;8987:21;;:7;:21;;;;8979:65;;;;;;;;;;;;:::i;:::-;;;;;;;;;9055:49;9084:1;9088:7;9097:6;9055:20;:49::i;:::-;9131:6;9115:12;;:22;;;;;;;:::i;:::-;;;;;;;;9305:6;9283:9;:18;9293:7;9283:18;;;;;;;;;;;;;;;;:28;;;;;;;;;;;9357:7;9336:37;;9353:1;9336:37;;;9366:6;9336:37;;;;;;:::i;:::-;;;;;;;;9384:48;9412:1;9416:7;9425:6;9384:19;:48::i;:::-;8904:535;;:::o;5080:125:10:-;5144:7;5170:28;:18;:26;:28::i;:::-;5163:35;;5080:125;:::o;757:943:15:-;846:7;885:1;869:5;:12;;;;:17;865:56;;;909:1;902:8;;;;865:56;931:11;956:12;971:5;:12;;;;956:27;;994:445;1007:4;1001:3;:10;994:445;;;1027:11;1041:34;1065:3;1070:4;1041:23;:34::i;:::-;1027:48;;1325:7;1292:24;1305:5;1312:3;1292:12;:24::i;:::-;:30;;;:40;1288:141;;;1359:3;1352:10;;1288:141;;;1413:1;1407:3;:7;;;;:::i;:::-;1401:13;;1288:141;1013:426;994:445;;;1562:1;1556:3;:7;:56;;;;;1605:7;1567:28;1580:5;1593:1;1587:3;:7;;;;:::i;:::-;1567:12;:28::i;:::-;:34;;;:45;1556:56;1552:142;;;1641:1;1635:3;:7;;;;:::i;:::-;1628:14;;;;;;1552:142;1680:3;1673:10;;;;757:943;;;;;:::o;2267:159:7:-;5363:13:4;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;2387:5:7::1;2379;:13;;;;;;;;;;;;:::i;:::-;;2412:7;2402;:17;;;;;;;;;;;;:::i;:::-;;2267:159:::0;;:::o;1104:111:0:-;5363:13:4;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1176:32:0::1;1195:12;:10;:12::i;:::-;1176:18;:32::i;:::-;1104:111::o:0;1166:95:6:-;5363:13:4;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1249:5:6::1;1239:7;;:15;;;;;;;;;;;;;;;;;;1166:95::o:0;2468:297:21:-;5363:13:4;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;2580:18:21::1;2617:4;2601:22;;;;;;2580:43;;2633:21;2673:7;2657:25;;;;;;2633:49;;2707:10;2692:12;:25;;;;2745:13;2727:15;:31;;;;2570:195;;2468:297:::0;;:::o;956:123:17:-;1061:1;1043:7;:14;;;:19;;;;;;;;;;;956:123;:::o;8374:194:20:-;8467:7;8532:15;8549:10;8503:57;;;;;;;;;:::i;:::-;;;;;;;;;;;;;8493:68;;;;;;8486:75;;8374:194;;;;:::o;5091:1494::-;5217:7;5226:12;6141:66;6136:1;6128:10;;:79;6124:161;;;6239:1;6243:30;6223:51;;;;;;6124:161;6379:14;6396:24;6406:4;6412:1;6415;6418;6396:24;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6379:41;;6452:1;6434:20;;:6;:20;;;6430:101;;;6486:1;6490:29;6470:50;;;;;;;6430:101;6549:6;6557:20;6541:37;;;;;5091:1494;;;;;;;;:::o;592:511::-;669:20;660:29;;;;;;;;:::i;:::-;;:5;:29;;;;;;;;:::i;:::-;;;656:441;;;705:7;;656:441;765:29;756:38;;;;;;;;:::i;:::-;;:5;:38;;;;;;;;:::i;:::-;;;752:345;;;810:34;;;;;;;;;;:::i;:::-;;;;;;;;752:345;874:35;865:44;;;;;;;;:::i;:::-;;:5;:44;;;;;;;;:::i;:::-;;;861:236;;;925:41;;;;;;;;;;:::i;:::-;;;;;;;;861:236;996:30;987:39;;;;;;;;:::i;:::-;;:5;:39;;;;;;;;:::i;:::-;;;983:114;;;1042:44;;;;;;;;;;:::i;:::-;;;;;;;;983:114;592:511;;:::o;5201:267:30:-;1482:19:6;:17;:19::i;:::-;5417:44:30::1;5444:4;5450:2;5454:6;5417:26;:44::i;:::-;5201:267:::0;;;:::o;13226:120:7:-;;;;:::o;2192:152:2:-;2258:37;2277:17;2258:18;:37::i;:::-;2319:17;2310:27;;;;;;;;;;;;2192:152;:::o;7088:455::-;7171:12;7203:37;7233:6;7203:29;:37::i;:::-;7195:88;;;;;;;;;;;;:::i;:::-;;;;;;;;;7354:12;7368:23;7395:6;:19;;7415:4;7395:25;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7353:67;;;;7437:99;7473:7;7482:10;7437:99;;;;;;;;;;;;;;;;;:35;:99::i;:::-;7430:106;;;;7088:455;;;;:::o;816:153:22:-;878:7;961:1;956;952;:5;951:11;;;;:::i;:::-;946:1;942;:5;941:21;;;;:::i;:::-;934:28;;816:153;;;;:::o;2996:345:15:-;3077:42;3131:12;3229:8;3226:1;3219:19;3283:3;3276:4;3273:1;3263:18;3259:28;3251:36;;3313:21;:4;:19;:21::i;:::-;3306:28;;;2996:345;;;;:::o;2010:106:6:-;2080:8;:6;:8::i;:::-;2079:9;2071:38;;;;;;;;;;;;:::i;:::-;;;;;;;;;2010:106::o;6116:602:10:-;6254:44;6281:4;6287:2;6291:6;6254:26;:44::i;:::-;6329:1;6313:18;;:4;:18;;;6309:403;;;6367:26;6390:2;6367:22;:26::i;:::-;6407:28;:26;:28::i;:::-;6309:403;;;6470:1;6456:16;;:2;:16;;;6452:260;;;6508:28;6531:4;6508:22;:28::i;:::-;6550;:26;:28::i;:::-;6452:260;;;6633:28;6656:4;6633:22;:28::i;:::-;6675:26;6698:2;6675:22;:26::i;:::-;6452:260;6309:403;6116:602;;;:::o;7438:295:14:-;7584:12;7612:7;7608:119;;;7642:10;7635:17;;;;7608:119;7683:33;7691:10;7703:12;7683:7;:33::i;:::-;7438:295;;;;;;:::o;2489:190:18:-;2550:21;2659:4;2649:14;;2489:190;;;:::o;12517:121:7:-;;;;:::o;8324:144:10:-;8391:70;8407:24;:33;8432:7;8407:33;;;;;;;;;;;;;;;8442:18;8452:7;8442:9;:18::i;:::-;8391:15;:70::i;:::-;8324:144;:::o;8474:116::-;8530:53;8546:21;8569:13;:11;:13::i;:::-;8530:15;:53::i;:::-;8474:116::o;7739:540:14:-;7918:1;7898:10;:17;:21;7894:379;;;8126:10;8120:17;8182:15;8169:10;8165:2;8161:19;8154:44;7894:379;8249:12;8242:20;;;;;;;;;;;:::i;:::-;;;;;;;;8596:304:10;8690:17;8710:23;:21;:23::i;:::-;8690:43;;8780:9;8747:30;8763:9;:13;;8747:15;:30::i;:::-;:42;8743:151;;;8805:9;:13;;8824:9;8805:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8848:9;:16;;8870:12;8848:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8743:151;8680:220;8596:304;;:::o;8906:206::-;8976:7;9013:1;8999:3;:10;;;;:15;8995:111;;;9037:1;9030:8;;;;8995:111;9076:3;9093:1;9080:3;:10;;;;:14;;;;:::i;:::-;9076:19;;;;;;;;:::i;:::-;;;;;;;;;;9069:26;;8906:206;;;;:::o;-1:-1:-1:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;7:77:33:-;44:7;73:5;62:16;;7:77;;;:::o;90:180::-;138:77;135:1;128:88;235:4;232:1;225:15;259:4;256:1;249:15;276:305;316:3;335:20;353:1;335:20;:::i;:::-;330:25;;369:20;387:1;369:20;:::i;:::-;364:25;;523:1;455:66;451:74;448:1;445:81;442:107;;;529:18;;:::i;:::-;442:107;573:1;570;566:9;559:16;;276:305;;;;:::o;587:118::-;674:24;692:5;674:24;:::i;:::-;669:3;662:37;587:118;;:::o;711:222::-;804:4;842:2;831:9;827:18;819:26;;855:71;923:1;912:9;908:17;899:6;855:71;:::i;:::-;711:222;;;;:::o;939:99::-;991:6;1025:5;1019:12;1009:22;;939:99;;;:::o;1044:169::-;1128:11;1162:6;1157:3;1150:19;1202:4;1197:3;1193:14;1178:29;;1044:169;;;;:::o;1219:307::-;1287:1;1297:113;1311:6;1308:1;1305:13;1297:113;;;1396:1;1391:3;1387:11;1381:18;1377:1;1372:3;1368:11;1361:39;1333:2;1330:1;1326:10;1321:15;;1297:113;;;1428:6;1425:1;1422:13;1419:101;;;1508:1;1499:6;1494:3;1490:16;1483:27;1419:101;1268:258;1219:307;;;:::o;1532:102::-;1573:6;1624:2;1620:7;1615:2;1608:5;1604:14;1600:28;1590:38;;1532:102;;;:::o;1640:364::-;1728:3;1756:39;1789:5;1756:39;:::i;:::-;1811:71;1875:6;1870:3;1811:71;:::i;:::-;1804:78;;1891:52;1936:6;1931:3;1924:4;1917:5;1913:16;1891:52;:::i;:::-;1968:29;1990:6;1968:29;:::i;:::-;1963:3;1959:39;1952:46;;1732:272;1640:364;;;;:::o;2010:313::-;2123:4;2161:2;2150:9;2146:18;2138:26;;2210:9;2204:4;2200:20;2196:1;2185:9;2181:17;2174:47;2238:78;2311:4;2302:6;2238:78;:::i;:::-;2230:86;;2010:313;;;;:::o;2329:75::-;2362:6;2395:2;2389:9;2379:19;;2329:75;:::o;2410:117::-;2519:1;2516;2509:12;2533:117;2642:1;2639;2632:12;2656:126;2693:7;2733:42;2726:5;2722:54;2711:65;;2656:126;;;:::o;2788:96::-;2825:7;2854:24;2872:5;2854:24;:::i;:::-;2843:35;;2788:96;;;:::o;2890:122::-;2963:24;2981:5;2963:24;:::i;:::-;2956:5;2953:35;2943:63;;3002:1;2999;2992:12;2943:63;2890:122;:::o;3018:139::-;3064:5;3102:6;3089:20;3080:29;;3118:33;3145:5;3118:33;:::i;:::-;3018:139;;;;:::o;3163:122::-;3236:24;3254:5;3236:24;:::i;:::-;3229:5;3226:35;3216:63;;3275:1;3272;3265:12;3216:63;3163:122;:::o;3291:139::-;3337:5;3375:6;3362:20;3353:29;;3391:33;3418:5;3391:33;:::i;:::-;3291:139;;;;:::o;3436:474::-;3504:6;3512;3561:2;3549:9;3540:7;3536:23;3532:32;3529:119;;;3567:79;;:::i;:::-;3529:119;3687:1;3712:53;3757:7;3748:6;3737:9;3733:22;3712:53;:::i;:::-;3702:63;;3658:117;3814:2;3840:53;3885:7;3876:6;3865:9;3861:22;3840:53;:::i;:::-;3830:63;;3785:118;3436:474;;;;;:::o;3916:90::-;3950:7;3993:5;3986:13;3979:21;3968:32;;3916:90;;;:::o;4012:109::-;4093:21;4108:5;4093:21;:::i;:::-;4088:3;4081:34;4012:109;;:::o;4127:210::-;4214:4;4252:2;4241:9;4237:18;4229:26;;4265:65;4327:1;4316:9;4312:17;4303:6;4265:65;:::i;:::-;4127:210;;;;:::o;4343:619::-;4420:6;4428;4436;4485:2;4473:9;4464:7;4460:23;4456:32;4453:119;;;4491:79;;:::i;:::-;4453:119;4611:1;4636:53;4681:7;4672:6;4661:9;4657:22;4636:53;:::i;:::-;4626:63;;4582:117;4738:2;4764:53;4809:7;4800:6;4789:9;4785:22;4764:53;:::i;:::-;4754:63;;4709:118;4866:2;4892:53;4937:7;4928:6;4917:9;4913:22;4892:53;:::i;:::-;4882:63;;4837:118;4343:619;;;;;:::o;4968:86::-;5003:7;5043:4;5036:5;5032:16;5021:27;;4968:86;;;:::o;5060:112::-;5143:22;5159:5;5143:22;:::i;:::-;5138:3;5131:35;5060:112;;:::o;5178:214::-;5267:4;5305:2;5294:9;5290:18;5282:26;;5318:67;5382:1;5371:9;5367:17;5358:6;5318:67;:::i;:::-;5178:214;;;;:::o;5398:118::-;5485:24;5503:5;5485:24;:::i;:::-;5480:3;5473:37;5398:118;;:::o;5522:222::-;5615:4;5653:2;5642:9;5638:18;5630:26;;5666:71;5734:1;5723:9;5719:17;5710:6;5666:71;:::i;:::-;5522:222;;;;:::o;5750:77::-;5787:7;5816:5;5805:16;;5750:77;;;:::o;5833:118::-;5920:24;5938:5;5920:24;:::i;:::-;5915:3;5908:37;5833:118;;:::o;5957:222::-;6050:4;6088:2;6077:9;6073:18;6065:26;;6101:71;6169:1;6158:9;6154:17;6145:6;6101:71;:::i;:::-;5957:222;;;;:::o;6185:329::-;6244:6;6293:2;6281:9;6272:7;6268:23;6264:32;6261:119;;;6299:79;;:::i;:::-;6261:119;6419:1;6444:53;6489:7;6480:6;6469:9;6465:22;6444:53;:::i;:::-;6434:63;;6390:117;6185:329;;;;:::o;6520:::-;6579:6;6628:2;6616:9;6607:7;6603:23;6599:32;6596:119;;;6634:79;;:::i;:::-;6596:119;6754:1;6779:53;6824:7;6815:6;6804:9;6800:22;6779:53;:::i;:::-;6769:63;;6725:117;6520:329;;;;:::o;6855:117::-;6964:1;6961;6954:12;6978:117;7087:1;7084;7077:12;7101:180;7149:77;7146:1;7139:88;7246:4;7243:1;7236:15;7270:4;7267:1;7260:15;7287:281;7370:27;7392:4;7370:27;:::i;:::-;7362:6;7358:40;7500:6;7488:10;7485:22;7464:18;7452:10;7449:34;7446:62;7443:88;;;7511:18;;:::i;:::-;7443:88;7551:10;7547:2;7540:22;7330:238;7287:281;;:::o;7574:129::-;7608:6;7635:20;;:::i;:::-;7625:30;;7664:33;7692:4;7684:6;7664:33;:::i;:::-;7574:129;;;:::o;7709:307::-;7770:4;7860:18;7852:6;7849:30;7846:56;;;7882:18;;:::i;:::-;7846:56;7920:29;7942:6;7920:29;:::i;:::-;7912:37;;8004:4;7998;7994:15;7986:23;;7709:307;;;:::o;8022:154::-;8106:6;8101:3;8096;8083:30;8168:1;8159:6;8154:3;8150:16;8143:27;8022:154;;;:::o;8182:410::-;8259:5;8284:65;8300:48;8341:6;8300:48;:::i;:::-;8284:65;:::i;:::-;8275:74;;8372:6;8365:5;8358:21;8410:4;8403:5;8399:16;8448:3;8439:6;8434:3;8430:16;8427:25;8424:112;;;8455:79;;:::i;:::-;8424:112;8545:41;8579:6;8574:3;8569;8545:41;:::i;:::-;8265:327;8182:410;;;;;:::o;8611:338::-;8666:5;8715:3;8708:4;8700:6;8696:17;8692:27;8682:122;;8723:79;;:::i;:::-;8682:122;8840:6;8827:20;8865:78;8939:3;8931:6;8924:4;8916:6;8912:17;8865:78;:::i;:::-;8856:87;;8672:277;8611:338;;;;:::o;8955:652::-;9032:6;9040;9089:2;9077:9;9068:7;9064:23;9060:32;9057:119;;;9095:79;;:::i;:::-;9057:119;9215:1;9240:53;9285:7;9276:6;9265:9;9261:22;9240:53;:::i;:::-;9230:63;;9186:117;9370:2;9359:9;9355:18;9342:32;9401:18;9393:6;9390:30;9387:117;;;9423:79;;:::i;:::-;9387:117;9528:62;9582:7;9573:6;9562:9;9558:22;9528:62;:::i;:::-;9518:72;;9313:287;8955:652;;;;;:::o;9613:104::-;9658:7;9687:24;9705:5;9687:24;:::i;:::-;9676:35;;9613:104;;;:::o;9723:138::-;9804:32;9830:5;9804:32;:::i;:::-;9797:5;9794:43;9784:71;;9851:1;9848;9841:12;9784:71;9723:138;:::o;9867:155::-;9921:5;9959:6;9946:20;9937:29;;9975:41;10010:5;9975:41;:::i;:::-;9867:155;;;;:::o;10028:345::-;10095:6;10144:2;10132:9;10123:7;10119:23;10115:32;10112:119;;;10150:79;;:::i;:::-;10112:119;10270:1;10295:61;10348:7;10339:6;10328:9;10324:22;10295:61;:::i;:::-;10285:71;;10241:125;10028:345;;;;:::o;10379:118::-;10450:22;10466:5;10450:22;:::i;:::-;10443:5;10440:33;10430:61;;10487:1;10484;10477:12;10430:61;10379:118;:::o;10503:135::-;10547:5;10585:6;10572:20;10563:29;;10601:31;10626:5;10601:31;:::i;:::-;10503:135;;;;:::o;10644:122::-;10717:24;10735:5;10717:24;:::i;:::-;10710:5;10707:35;10697:63;;10756:1;10753;10746:12;10697:63;10644:122;:::o;10772:139::-;10818:5;10856:6;10843:20;10834:29;;10872:33;10899:5;10872:33;:::i;:::-;10772:139;;;;:::o;10917:1199::-;11028:6;11036;11044;11052;11060;11068;11076;11125:3;11113:9;11104:7;11100:23;11096:33;11093:120;;;11132:79;;:::i;:::-;11093:120;11252:1;11277:53;11322:7;11313:6;11302:9;11298:22;11277:53;:::i;:::-;11267:63;;11223:117;11379:2;11405:53;11450:7;11441:6;11430:9;11426:22;11405:53;:::i;:::-;11395:63;;11350:118;11507:2;11533:53;11578:7;11569:6;11558:9;11554:22;11533:53;:::i;:::-;11523:63;;11478:118;11635:2;11661:53;11706:7;11697:6;11686:9;11682:22;11661:53;:::i;:::-;11651:63;;11606:118;11763:3;11790:51;11833:7;11824:6;11813:9;11809:22;11790:51;:::i;:::-;11780:61;;11734:117;11890:3;11917:53;11962:7;11953:6;11942:9;11938:22;11917:53;:::i;:::-;11907:63;;11861:119;12019:3;12046:53;12091:7;12082:6;12071:9;12067:22;12046:53;:::i;:::-;12036:63;;11990:119;10917:1199;;;;;;;;;;:::o;12122:474::-;12190:6;12198;12247:2;12235:9;12226:7;12222:23;12218:32;12215:119;;;12253:79;;:::i;:::-;12215:119;12373:1;12398:53;12443:7;12434:6;12423:9;12419:22;12398:53;:::i;:::-;12388:63;;12344:117;12500:2;12526:53;12571:7;12562:6;12551:9;12547:22;12526:53;:::i;:::-;12516:63;;12471:118;12122:474;;;;;:::o;12602:180::-;12650:77;12647:1;12640:88;12747:4;12744:1;12737:15;12771:4;12768:1;12761:15;12788:320;12832:6;12869:1;12863:4;12859:12;12849:22;;12916:1;12910:4;12906:12;12937:18;12927:81;;12993:4;12985:6;12981:17;12971:27;;12927:81;13055:2;13047:6;13044:14;13024:18;13021:38;13018:84;;;13074:18;;:::i;:::-;13018:84;12839:269;12788:320;;;:::o;13114:167::-;13254:19;13250:1;13242:6;13238:14;13231:43;13114:167;:::o;13287:366::-;13429:3;13450:67;13514:2;13509:3;13450:67;:::i;:::-;13443:74;;13526:93;13615:3;13526:93;:::i;:::-;13644:2;13639:3;13635:12;13628:19;;13287:366;;;:::o;13659:419::-;13825:4;13863:2;13852:9;13848:18;13840:26;;13912:9;13906:4;13902:20;13898:1;13887:9;13883:17;13876:47;13940:131;14066:4;13940:131;:::i;:::-;13932:139;;13659:419;;;:::o;14084:231::-;14224:34;14220:1;14212:6;14208:14;14201:58;14293:14;14288:2;14280:6;14276:15;14269:39;14084:231;:::o;14321:366::-;14463:3;14484:67;14548:2;14543:3;14484:67;:::i;:::-;14477:74;;14560:93;14649:3;14560:93;:::i;:::-;14678:2;14673:3;14669:12;14662:19;;14321:366;;;:::o;14693:419::-;14859:4;14897:2;14886:9;14882:18;14874:26;;14946:9;14940:4;14936:20;14932:1;14921:9;14917:17;14910:47;14974:131;15100:4;14974:131;:::i;:::-;14966:139;;14693:419;;;:::o;15118:231::-;15258:34;15254:1;15246:6;15242:14;15235:58;15327:14;15322:2;15314:6;15310:15;15303:39;15118:231;:::o;15355:366::-;15497:3;15518:67;15582:2;15577:3;15518:67;:::i;:::-;15511:74;;15594:93;15683:3;15594:93;:::i;:::-;15712:2;15707:3;15703:12;15696:19;;15355:366;;;:::o;15727:419::-;15893:4;15931:2;15920:9;15916:18;15908:26;;15980:9;15974:4;15970:20;15966:1;15955:9;15951:17;15944:47;16008:131;16134:4;16008:131;:::i;:::-;16000:139;;15727:419;;;:::o;16152:243::-;16292:34;16288:1;16280:6;16276:14;16269:58;16361:26;16356:2;16348:6;16344:15;16337:51;16152:243;:::o;16401:366::-;16543:3;16564:67;16628:2;16623:3;16564:67;:::i;:::-;16557:74;;16640:93;16729:3;16640:93;:::i;:::-;16758:2;16753:3;16749:12;16742:19;;16401:366;;;:::o;16773:419::-;16939:4;16977:2;16966:9;16962:18;16954:26;;17026:9;17020:4;17016:20;17012:1;17001:9;16997:17;16990:47;17054:131;17180:4;17054:131;:::i;:::-;17046:139;;16773:419;;;:::o;17198:233::-;17338:34;17334:1;17326:6;17322:14;17315:58;17407:16;17402:2;17394:6;17390:15;17383:41;17198:233;:::o;17437:366::-;17579:3;17600:67;17664:2;17659:3;17600:67;:::i;:::-;17593:74;;17676:93;17765:3;17676:93;:::i;:::-;17794:2;17789:3;17785:12;17778:19;;17437:366;;;:::o;17809:419::-;17975:4;18013:2;18002:9;17998:18;17990:26;;18062:9;18056:4;18052:20;18048:1;18037:9;18033:17;18026:47;18090:131;18216:4;18090:131;:::i;:::-;18082:139;;17809:419;;;:::o;18234:85::-;18279:7;18308:5;18297:16;;18234:85;;;:::o;18325:60::-;18353:3;18374:5;18367:12;;18325:60;;;:::o;18391:154::-;18447:9;18480:59;18496:42;18505:32;18531:5;18505:32;:::i;:::-;18496:42;:::i;:::-;18480:59;:::i;:::-;18467:72;;18391:154;;;:::o;18551:143::-;18644:43;18681:5;18644:43;:::i;:::-;18639:3;18632:56;18551:143;;:::o;18700:234::-;18799:4;18837:2;18826:9;18822:18;18814:26;;18850:77;18924:1;18913:9;18909:17;18900:6;18850:77;:::i;:::-;18700:234;;;;:::o;18940:224::-;19080:34;19076:1;19068:6;19064:14;19057:58;19149:7;19144:2;19136:6;19132:15;19125:32;18940:224;:::o;19170:366::-;19312:3;19333:67;19397:2;19392:3;19333:67;:::i;:::-;19326:74;;19409:93;19498:3;19409:93;:::i;:::-;19527:2;19522:3;19518:12;19511:19;;19170:366;;;:::o;19542:419::-;19708:4;19746:2;19735:9;19731:18;19723:26;;19795:9;19789:4;19785:20;19781:1;19770:9;19766:17;19759:47;19823:131;19949:4;19823:131;:::i;:::-;19815:139;;19542:419;;;:::o;19967:225::-;20107:34;20103:1;20095:6;20091:14;20084:58;20176:8;20171:2;20163:6;20159:15;20152:33;19967:225;:::o;20198:366::-;20340:3;20361:67;20425:2;20420:3;20361:67;:::i;:::-;20354:74;;20437:93;20526:3;20437:93;:::i;:::-;20555:2;20550:3;20546:12;20539:19;;20198:366;;;:::o;20570:419::-;20736:4;20774:2;20763:9;20759:18;20751:26;;20823:9;20817:4;20813:20;20809:1;20798:9;20794:17;20787:47;20851:131;20977:4;20851:131;:::i;:::-;20843:139;;20570:419;;;:::o;20995:224::-;21135:34;21131:1;21123:6;21119:14;21112:58;21204:7;21199:2;21191:6;21187:15;21180:32;20995:224;:::o;21225:366::-;21367:3;21388:67;21452:2;21447:3;21388:67;:::i;:::-;21381:74;;21464:93;21553:3;21464:93;:::i;:::-;21582:2;21577:3;21573:12;21566:19;;21225:366;;;:::o;21597:419::-;21763:4;21801:2;21790:9;21786:18;21778:26;;21850:9;21844:4;21840:20;21836:1;21825:9;21821:17;21814:47;21878:131;22004:4;21878:131;:::i;:::-;21870:139;;21597:419;;;:::o;22022:226::-;22162:34;22158:1;22150:6;22146:14;22139:58;22231:9;22226:2;22218:6;22214:15;22207:34;22022:226;:::o;22254:366::-;22396:3;22417:67;22481:2;22476:3;22417:67;:::i;:::-;22410:74;;22493:93;22582:3;22493:93;:::i;:::-;22611:2;22606:3;22602:12;22595:19;;22254:366;;;:::o;22626:419::-;22792:4;22830:2;22819:9;22815:18;22807:26;;22879:9;22873:4;22869:20;22865:1;22854:9;22850:17;22843:47;22907:131;23033:4;22907:131;:::i;:::-;22899:139;;22626:419;;;:::o;23051:224::-;23191:34;23187:1;23179:6;23175:14;23168:58;23260:7;23255:2;23247:6;23243:15;23236:32;23051:224;:::o;23281:366::-;23423:3;23444:67;23508:2;23503:3;23444:67;:::i;:::-;23437:74;;23520:93;23609:3;23520:93;:::i;:::-;23638:2;23633:3;23629:12;23622:19;;23281:366;;;:::o;23653:419::-;23819:4;23857:2;23846:9;23842:18;23834:26;;23906:9;23900:4;23896:20;23892:1;23881:9;23877:17;23870:47;23934:131;24060:4;23934:131;:::i;:::-;23926:139;;23653:419;;;:::o;24078:179::-;24218:31;24214:1;24206:6;24202:14;24195:55;24078:179;:::o;24263:366::-;24405:3;24426:67;24490:2;24485:3;24426:67;:::i;:::-;24419:74;;24502:93;24591:3;24502:93;:::i;:::-;24620:2;24615:3;24611:12;24604:19;;24263:366;;;:::o;24635:419::-;24801:4;24839:2;24828:9;24824:18;24816:26;;24888:9;24882:4;24878:20;24874:1;24863:9;24859:17;24852:47;24916:131;25042:4;24916:131;:::i;:::-;24908:139;;24635:419;;;:::o;25060:775::-;25293:4;25331:3;25320:9;25316:19;25308:27;;25345:71;25413:1;25402:9;25398:17;25389:6;25345:71;:::i;:::-;25426:72;25494:2;25483:9;25479:18;25470:6;25426:72;:::i;:::-;25508;25576:2;25565:9;25561:18;25552:6;25508:72;:::i;:::-;25590;25658:2;25647:9;25643:18;25634:6;25590:72;:::i;:::-;25672:73;25740:3;25729:9;25725:19;25716:6;25672:73;:::i;:::-;25755;25823:3;25812:9;25808:19;25799:6;25755:73;:::i;:::-;25060:775;;;;;;;;;:::o;25841:180::-;25981:32;25977:1;25969:6;25965:14;25958:56;25841:180;:::o;26027:366::-;26169:3;26190:67;26254:2;26249:3;26190:67;:::i;:::-;26183:74;;26266:93;26355:3;26266:93;:::i;:::-;26384:2;26379:3;26375:12;26368:19;;26027:366;;;:::o;26399:419::-;26565:4;26603:2;26592:9;26588:18;26580:26;;26652:9;26646:4;26642:20;26638:1;26627:9;26623:17;26616:47;26680:131;26806:4;26680:131;:::i;:::-;26672:139;;26399:419;;;:::o;26824:225::-;26964:34;26960:1;26952:6;26948:14;26941:58;27033:8;27028:2;27020:6;27016:15;27009:33;26824:225;:::o;27055:366::-;27197:3;27218:67;27282:2;27277:3;27218:67;:::i;:::-;27211:74;;27294:93;27383:3;27294:93;:::i;:::-;27412:2;27407:3;27403:12;27396:19;;27055:366;;;:::o;27427:419::-;27593:4;27631:2;27620:9;27616:18;27608:26;;27680:9;27674:4;27670:20;27666:1;27655:9;27651:17;27644:47;27708:131;27834:4;27708:131;:::i;:::-;27700:139;;27427:419;;;:::o;27852:223::-;27992:34;27988:1;27980:6;27976:14;27969:58;28061:6;28056:2;28048:6;28044:15;28037:31;27852:223;:::o;28081:366::-;28223:3;28244:67;28308:2;28303:3;28244:67;:::i;:::-;28237:74;;28320:93;28409:3;28320:93;:::i;:::-;28438:2;28433:3;28429:12;28422:19;;28081:366;;;:::o;28453:419::-;28619:4;28657:2;28646:9;28642:18;28634:26;;28706:9;28700:4;28696:20;28692:1;28681:9;28677:17;28670:47;28734:131;28860:4;28734:131;:::i;:::-;28726:139;;28453:419;;;:::o;28878:221::-;29018:34;29014:1;29006:6;29002:14;28995:58;29087:4;29082:2;29074:6;29070:15;29063:29;28878:221;:::o;29105:366::-;29247:3;29268:67;29332:2;29327:3;29268:67;:::i;:::-;29261:74;;29344:93;29433:3;29344:93;:::i;:::-;29462:2;29457:3;29453:12;29446:19;;29105:366;;;:::o;29477:419::-;29643:4;29681:2;29670:9;29666:18;29658:26;;29730:9;29724:4;29720:20;29716:1;29705:9;29701:17;29694:47;29758:131;29884:4;29758:131;:::i;:::-;29750:139;;29477:419;;;:::o;29902:182::-;30042:34;30038:1;30030:6;30026:14;30019:58;29902:182;:::o;30090:366::-;30232:3;30253:67;30317:2;30312:3;30253:67;:::i;:::-;30246:74;;30329:93;30418:3;30329:93;:::i;:::-;30447:2;30442:3;30438:12;30431:19;;30090:366;;;:::o;30462:419::-;30628:4;30666:2;30655:9;30651:18;30643:26;;30715:9;30709:4;30705:20;30701:1;30690:9;30686:17;30679:47;30743:131;30869:4;30743:131;:::i;:::-;30735:139;;30462:419;;;:::o;30887:116::-;30957:21;30972:5;30957:21;:::i;:::-;30950:5;30947:32;30937:60;;30993:1;30990;30983:12;30937:60;30887:116;:::o;31009:137::-;31063:5;31094:6;31088:13;31079:22;;31110:30;31134:5;31110:30;:::i;:::-;31009:137;;;;:::o;31152:345::-;31219:6;31268:2;31256:9;31247:7;31243:23;31239:32;31236:119;;;31274:79;;:::i;:::-;31236:119;31394:1;31419:61;31472:7;31463:6;31452:9;31448:22;31419:61;:::i;:::-;31409:71;;31365:125;31152:345;;;;:::o;31503:143::-;31560:5;31591:6;31585:13;31576:22;;31607:33;31634:5;31607:33;:::i;:::-;31503:143;;;;:::o;31652:351::-;31722:6;31771:2;31759:9;31750:7;31746:23;31742:32;31739:119;;;31777:79;;:::i;:::-;31739:119;31897:1;31922:64;31978:7;31969:6;31958:9;31954:22;31922:64;:::i;:::-;31912:74;;31868:128;31652:351;;;;:::o;32009:233::-;32149:34;32145:1;32137:6;32133:14;32126:58;32218:16;32213:2;32205:6;32201:15;32194:41;32009:233;:::o;32248:366::-;32390:3;32411:67;32475:2;32470:3;32411:67;:::i;:::-;32404:74;;32487:93;32576:3;32487:93;:::i;:::-;32605:2;32600:3;32596:12;32589:19;;32248:366;;;:::o;32620:419::-;32786:4;32824:2;32813:9;32809:18;32801:26;;32873:9;32867:4;32863:20;32859:1;32848:9;32844:17;32837:47;32901:131;33027:4;32901:131;:::i;:::-;32893:139;;32620:419;;;:::o;33045:228::-;33185:34;33181:1;33173:6;33169:14;33162:58;33254:11;33249:2;33241:6;33237:15;33230:36;33045:228;:::o;33279:366::-;33421:3;33442:67;33506:2;33501:3;33442:67;:::i;:::-;33435:74;;33518:93;33607:3;33518:93;:::i;:::-;33636:2;33631:3;33627:12;33620:19;;33279:366;;;:::o;33651:419::-;33817:4;33855:2;33844:9;33840:18;33832:26;;33904:9;33898:4;33894:20;33890:1;33879:9;33875:17;33868:47;33932:131;34058:4;33932:131;:::i;:::-;33924:139;;33651:419;;;:::o;34076:172::-;34216:24;34212:1;34204:6;34200:14;34193:48;34076:172;:::o;34254:366::-;34396:3;34417:67;34481:2;34476:3;34417:67;:::i;:::-;34410:74;;34493:93;34582:3;34493:93;:::i;:::-;34611:2;34606:3;34602:12;34595:19;;34254:366;;;:::o;34626:419::-;34792:4;34830:2;34819:9;34815:18;34807:26;;34879:9;34873:4;34869:20;34865:1;34854:9;34850:17;34843:47;34907:131;35033:4;34907:131;:::i;:::-;34899:139;;34626:419;;;:::o;35051:179::-;35191:31;35187:1;35179:6;35175:14;35168:55;35051:179;:::o;35236:366::-;35378:3;35399:67;35463:2;35458:3;35399:67;:::i;:::-;35392:74;;35475:93;35564:3;35475:93;:::i;:::-;35593:2;35588:3;35584:12;35577:19;;35236:366;;;:::o;35608:419::-;35774:4;35812:2;35801:9;35797:18;35789:26;;35861:9;35855:4;35851:20;35847:1;35836:9;35832:17;35825:47;35889:131;36015:4;35889:131;:::i;:::-;35881:139;;35608:419;;;:::o;36033:180::-;36081:77;36078:1;36071:88;36178:4;36175:1;36168:15;36202:4;36199:1;36192:15;36219:230;36359:34;36355:1;36347:6;36343:14;36336:58;36428:13;36423:2;36415:6;36411:15;36404:38;36219:230;:::o;36455:366::-;36597:3;36618:67;36682:2;36677:3;36618:67;:::i;:::-;36611:74;;36694:93;36783:3;36694:93;:::i;:::-;36812:2;36807:3;36803:12;36796:19;;36455:366;;;:::o;36827:419::-;36993:4;37031:2;37020:9;37016:18;37008:26;;37080:9;37074:4;37070:20;37066:1;37055:9;37051:17;37044:47;37108:131;37234:4;37108:131;:::i;:::-;37100:139;;36827:419;;;:::o;37252:179::-;37392:31;37388:1;37380:6;37376:14;37369:55;37252:179;:::o;37437:366::-;37579:3;37600:67;37664:2;37659:3;37600:67;:::i;:::-;37593:74;;37676:93;37765:3;37676:93;:::i;:::-;37794:2;37789:3;37785:12;37778:19;;37437:366;;;:::o;37809:419::-;37975:4;38013:2;38002:9;37998:18;37990:26;;38062:9;38056:4;38052:20;38048:1;38037:9;38033:17;38026:47;38090:131;38216:4;38090:131;:::i;:::-;38082:139;;37809:419;;;:::o;38234:224::-;38374:34;38370:1;38362:6;38358:14;38351:58;38443:7;38438:2;38430:6;38426:15;38419:32;38234:224;:::o;38464:366::-;38606:3;38627:67;38691:2;38686:3;38627:67;:::i;:::-;38620:74;;38703:93;38792:3;38703:93;:::i;:::-;38821:2;38816:3;38812:12;38805:19;;38464:366;;;:::o;38836:419::-;39002:4;39040:2;39029:9;39025:18;39017:26;;39089:9;39083:4;39079:20;39075:1;39064:9;39060:17;39053:47;39117:131;39243:4;39117:131;:::i;:::-;39109:139;;38836:419;;;:::o;39261:222::-;39401:34;39397:1;39389:6;39385:14;39378:58;39470:5;39465:2;39457:6;39453:15;39446:30;39261:222;:::o;39489:366::-;39631:3;39652:67;39716:2;39711:3;39652:67;:::i;:::-;39645:74;;39728:93;39817:3;39728:93;:::i;:::-;39846:2;39841:3;39837:12;39830:19;;39489:366;;;:::o;39861:419::-;40027:4;40065:2;40054:9;40050:18;40042:26;;40114:9;40108:4;40104:20;40100:1;40089:9;40085:17;40078:47;40142:131;40268:4;40142:131;:::i;:::-;40134:139;;39861:419;;;:::o;40286:225::-;40426:34;40422:1;40414:6;40410:14;40403:58;40495:8;40490:2;40482:6;40478:15;40471:33;40286:225;:::o;40517:366::-;40659:3;40680:67;40744:2;40739:3;40680:67;:::i;:::-;40673:74;;40756:93;40845:3;40756:93;:::i;:::-;40874:2;40869:3;40865:12;40858:19;;40517:366;;;:::o;40889:419::-;41055:4;41093:2;41082:9;41078:18;41070:26;;41142:9;41136:4;41132:20;41128:1;41117:9;41113:17;41106:47;41170:131;41296:4;41170:131;:::i;:::-;41162:139;;40889:419;;;:::o;41314:664::-;41519:4;41557:3;41546:9;41542:19;41534:27;;41571:71;41639:1;41628:9;41624:17;41615:6;41571:71;:::i;:::-;41652:72;41720:2;41709:9;41705:18;41696:6;41652:72;:::i;:::-;41734;41802:2;41791:9;41787:18;41778:6;41734:72;:::i;:::-;41816;41884:2;41873:9;41869:18;41860:6;41816:72;:::i;:::-;41898:73;41966:3;41955:9;41951:19;41942:6;41898:73;:::i;:::-;41314:664;;;;;;;;:::o;41984:232::-;42124:34;42120:1;42112:6;42108:14;42101:58;42193:15;42188:2;42180:6;42176:15;42169:40;41984:232;:::o;42222:366::-;42364:3;42385:67;42449:2;42444:3;42385:67;:::i;:::-;42378:74;;42461:93;42550:3;42461:93;:::i;:::-;42579:2;42574:3;42570:12;42563:19;;42222:366;;;:::o;42594:419::-;42760:4;42798:2;42787:9;42783:18;42775:26;;42847:9;42841:4;42837:20;42833:1;42822:9;42818:17;42811:47;42875:131;43001:4;42875:131;:::i;:::-;42867:139;;42594:419;;;:::o;43019:220::-;43159:34;43155:1;43147:6;43143:14;43136:58;43228:3;43223:2;43215:6;43211:15;43204:28;43019:220;:::o;43245:366::-;43387:3;43408:67;43472:2;43467:3;43408:67;:::i;:::-;43401:74;;43484:93;43573:3;43484:93;:::i;:::-;43602:2;43597:3;43593:12;43586:19;;43245:366;;;:::o;43617:419::-;43783:4;43821:2;43810:9;43806:18;43798:26;;43870:9;43864:4;43860:20;43856:1;43845:9;43841:17;43834:47;43898:131;44024:4;43898:131;:::i;:::-;43890:139;;43617:419;;;:::o;44042:221::-;44182:34;44178:1;44170:6;44166:14;44159:58;44251:4;44246:2;44238:6;44234:15;44227:29;44042:221;:::o;44269:366::-;44411:3;44432:67;44496:2;44491:3;44432:67;:::i;:::-;44425:74;;44508:93;44597:3;44508:93;:::i;:::-;44626:2;44621:3;44617:12;44610:19;;44269:366;;;:::o;44641:419::-;44807:4;44845:2;44834:9;44830:18;44822:26;;44894:9;44888:4;44884:20;44880:1;44869:9;44865:17;44858:47;44922:131;45048:4;44922:131;:::i;:::-;44914:139;;44641:419;;;:::o;45066:181::-;45206:33;45202:1;45194:6;45190:14;45183:57;45066:181;:::o;45253:366::-;45395:3;45416:67;45480:2;45475:3;45416:67;:::i;:::-;45409:74;;45492:93;45581:3;45492:93;:::i;:::-;45610:2;45605:3;45601:12;45594:19;;45253:366;;;:::o;45625:419::-;45791:4;45829:2;45818:9;45814:18;45806:26;;45878:9;45872:4;45868:20;45864:1;45853:9;45849:17;45842:47;45906:131;46032:4;45906:131;:::i;:::-;45898:139;;45625:419;;;:::o;46050:191::-;46090:4;46110:20;46128:1;46110:20;:::i;:::-;46105:25;;46144:20;46162:1;46144:20;:::i;:::-;46139:25;;46183:1;46180;46177:8;46174:34;;;46188:18;;:::i;:::-;46174:34;46233:1;46230;46226:9;46218:17;;46050:191;;;;:::o;46247:148::-;46349:11;46386:3;46371:18;;46247:148;;;;:::o;46401:214::-;46541:66;46537:1;46529:6;46525:14;46518:90;46401:214;:::o;46621:400::-;46781:3;46802:84;46884:1;46879:3;46802:84;:::i;:::-;46795:91;;46895:93;46984:3;46895:93;:::i;:::-;47013:1;47008:3;47004:11;46997:18;;46621:400;;;:::o;47027:79::-;47066:7;47095:5;47084:16;;47027:79;;;:::o;47112:157::-;47217:45;47237:24;47255:5;47237:24;:::i;:::-;47217:45;:::i;:::-;47212:3;47205:58;47112:157;;:::o;47275:663::-;47516:3;47538:148;47682:3;47538:148;:::i;:::-;47531:155;;47696:75;47767:3;47758:6;47696:75;:::i;:::-;47796:2;47791:3;47787:12;47780:19;;47809:75;47880:3;47871:6;47809:75;:::i;:::-;47909:2;47904:3;47900:12;47893:19;;47929:3;47922:10;;47275:663;;;;;:::o;47944:545::-;48117:4;48155:3;48144:9;48140:19;48132:27;;48169:71;48237:1;48226:9;48222:17;48213:6;48169:71;:::i;:::-;48250:68;48314:2;48303:9;48299:18;48290:6;48250:68;:::i;:::-;48328:72;48396:2;48385:9;48381:18;48372:6;48328:72;:::i;:::-;48410;48478:2;48467:9;48463:18;48454:6;48410:72;:::i;:::-;47944:545;;;;;;;:::o;48495:180::-;48543:77;48540:1;48533:88;48640:4;48637:1;48630:15;48664:4;48661:1;48654:15;48681:174;48821:26;48817:1;48809:6;48805:14;48798:50;48681:174;:::o;48861:366::-;49003:3;49024:67;49088:2;49083:3;49024:67;:::i;:::-;49017:74;;49100:93;49189:3;49100:93;:::i;:::-;49218:2;49213:3;49209:12;49202:19;;48861:366;;;:::o;49233:419::-;49399:4;49437:2;49426:9;49422:18;49414:26;;49486:9;49480:4;49476:20;49472:1;49461:9;49457:17;49450:47;49514:131;49640:4;49514:131;:::i;:::-;49506:139;;49233:419;;;:::o;49658:181::-;49798:33;49794:1;49786:6;49782:14;49775:57;49658:181;:::o;49845:366::-;49987:3;50008:67;50072:2;50067:3;50008:67;:::i;:::-;50001:74;;50084:93;50173:3;50084:93;:::i;:::-;50202:2;50197:3;50193:12;50186:19;;49845:366;;;:::o;50217:419::-;50383:4;50421:2;50410:9;50406:18;50398:26;;50470:9;50464:4;50460:20;50456:1;50445:9;50441:17;50434:47;50498:131;50624:4;50498:131;:::i;:::-;50490:139;;50217:419;;;:::o;50642:221::-;50782:34;50778:1;50770:6;50766:14;50759:58;50851:4;50846:2;50838:6;50834:15;50827:29;50642:221;:::o;50869:366::-;51011:3;51032:67;51096:2;51091:3;51032:67;:::i;:::-;51025:74;;51108:93;51197:3;51108:93;:::i;:::-;51226:2;51221:3;51217:12;51210:19;;50869:366;;;:::o;51241:419::-;51407:4;51445:2;51434:9;51430:18;51422:26;;51494:9;51488:4;51484:20;51480:1;51469:9;51465:17;51458:47;51522:131;51648:4;51522:131;:::i;:::-;51514:139;;51241:419;;;:::o;51666:225::-;51806:34;51802:1;51794:6;51790:14;51783:58;51875:8;51870:2;51862:6;51858:15;51851:33;51666:225;:::o;51897:366::-;52039:3;52060:67;52124:2;52119:3;52060:67;:::i;:::-;52053:74;;52136:93;52225:3;52136:93;:::i;:::-;52254:2;52249:3;52245:12;52238:19;;51897:366;;;:::o;52269:419::-;52435:4;52473:2;52462:9;52458:18;52450:26;;52522:9;52516:4;52512:20;52508:1;52497:9;52493:17;52486:47;52550:131;52676:4;52550:131;:::i;:::-;52542:139;;52269:419;;;:::o;52694:98::-;52745:6;52779:5;52773:12;52763:22;;52694:98;;;:::o;52798:147::-;52899:11;52936:3;52921:18;;52798:147;;;;:::o;52951:373::-;53055:3;53083:38;53115:5;53083:38;:::i;:::-;53137:88;53218:6;53213:3;53137:88;:::i;:::-;53130:95;;53234:52;53279:6;53274:3;53267:4;53260:5;53256:16;53234:52;:::i;:::-;53311:6;53306:3;53302:16;53295:23;;53059:265;52951:373;;;;:::o;53330:271::-;53460:3;53482:93;53571:3;53562:6;53482:93;:::i;:::-;53475:100;;53592:3;53585:10;;53330:271;;;;:::o;53607:180::-;53655:77;53652:1;53645:88;53752:4;53749:1;53742:15;53776:4;53773:1;53766:15;53793:185;53833:1;53850:20;53868:1;53850:20;:::i;:::-;53845:25;;53884:20;53902:1;53884:20;:::i;:::-;53879:25;;53923:1;53913:35;;53928:18;;:::i;:::-;53913:35;53970:1;53967;53963:9;53958:14;;53793:185;;;;:::o;53984:166::-;54124:18;54120:1;54112:6;54108:14;54101:42;53984:166;:::o;54156:366::-;54298:3;54319:67;54383:2;54378:3;54319:67;:::i;:::-;54312:74;;54395:93;54484:3;54395:93;:::i;:::-;54513:2;54508:3;54504:12;54497:19;;54156:366;;;:::o;54528:419::-;54694:4;54732:2;54721:9;54717:18;54709:26;;54781:9;54775:4;54771:20;54767:1;54756:9;54752:17;54745:47;54809:131;54935:4;54809:131;:::i;:::-;54801:139;;54528:419;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"4186000","executionCost":"infinite","totalCost":"infinite"},"external":{"":"infinite","DOMAIN_SEPARATOR()":"infinite","allowance(address,address)":"infinite","approve(address,uint256)":"infinite","balanceOf(address)":"2931","balanceOfAt(address,uint256)":"infinite","burn(uint256)":"infinite","burnFrom(address,uint256)":"infinite","decimals()":"411","decreaseAllowance(address,uint256)":"infinite","getProfileAddress()":"4911","increaseAllowance(address,uint256)":"infinite","initialize()":"infinite","mintTo(address,uint256)":"infinite","name()":"infinite","nonces(address)":"2979","owner()":"2602","paused()":"2547","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"infinite","proxiableUUID()":"infinite","renounceOwnership()":"30478","setProfileAddress(address)":"27067","symbol()":"infinite","totalSupply()":"2528","totalSupplyAt(uint256)":"infinite","transfer(address,uint256)":"infinite","transferFrom(address,address,uint256)":"infinite","transferOwnership(address)":"30892","upgradeTo(address)":"infinite","upgradeToAndCall(address,bytes)":"infinite"},"internal":{"_authorizeUpgrade(address)":"infinite","_beforeTokenTransfer(address,address,uint256)":"infinite","_getMultiSig(address)":"infinite","_isVerified(address)":"infinite","mint(address,uint256)":"infinite","pause()":"infinite","snapshot()":"infinite","unpause()":"infinite"}},"methodIdentifiers":{"DOMAIN_SEPARATOR()":"3644e515","allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","balanceOfAt(address,uint256)":"4ee2cd7e","burn(uint256)":"42966c68","burnFrom(address,uint256)":"79cc6790","decimals()":"313ce567","decreaseAllowance(address,uint256)":"a457c2d7","getProfileAddress()":"345a903f","increaseAllowance(address,uint256)":"39509351","initialize()":"8129fc1c","mintTo(address,uint256)":"449a52f8","name()":"06fdde03","nonces(address)":"7ecebe00","owner()":"8da5cb5b","paused()":"5c975abb","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"d505accf","proxiableUUID()":"52d1902d","renounceOwnership()":"715018a6","setProfileAddress(address)":"59e78460","symbol()":"95d89b41","totalSupply()":"18160ddd","totalSupplyAt(uint256)":"981b24d0","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd","transferOwnership(address)":"f2fde38b","upgradeTo(address)":"3659cfe6","upgradeToAndCall(address,bytes)":"4f1ef286"}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"MULTISIG_REQUIRED\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"USER_NOT_VERIFIED\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fallbackAmount\",\"type\":\"uint256\"}],\"name\":\"AMOUNT_RECEIVED_THROUGH_FALLBACK\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receiveAmount\",\"type\":\"uint256\"}],\"name\":\"AMOUNT_RECEIVED_THROUGH_RECEIVE\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Snapshot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"TRANSFER_REQUIRED_MULTI_SIGNATURE\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"TRANSFER_REQUIRED_VERIFICATION_I\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"snapshotId\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProfileAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_profiles\",\"type\":\"address\"}],\"name\":\"setProfileAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotId\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"custom:security-contact\":\"zohaib10092001@gmail.com\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"See {IERC20Permit-DOMAIN_SEPARATOR}.\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"balanceOfAt(address,uint256)\":{\"details\":\"Retrieves the balance of `account` at the time `snapshotId` was created.\"},\"burn(uint256)\":{\"details\":\"Destroys `amount` tokens from the caller. See {ERC20-_burn}.\"},\"burnFrom(address,uint256)\":{\"details\":\"Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`.\"},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"See {IERC20Permit-nonces}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"See {IERC20Permit-permit}.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"totalSupplyAt(uint256)\":{\"details\":\"Retrieves the total supply at the time `snapshotId` was created.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PKDR.sol\":\"PKDR\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7967d130887c4b40666cd88f8744691d4527039a1b2a38aa0de41481ef646778\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xb1d9e69cf8073efa574b31b1f840e20709139c19bfb27e60b16393d6073f3d42\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20BurnableUpgradeable is Initializable, ContextUpgradeable, ERC20Upgradeable {\\n    function __ERC20Burnable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC20Burnable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xea2c6f9d434127bf36b1e3e5ebaaf6d28a64dbaeea560508e570014e905a5ad2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/extensions/ERC20Snapshot.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/ArraysUpgradeable.sol\\\";\\nimport \\\"../../../utils/CountersUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This contract extends an ERC20 token with a snapshot mechanism. When a snapshot is created, the balances and\\n * total supply at the time are recorded for later access.\\n *\\n * This can be used to safely create mechanisms based on token balances such as trustless dividends or weighted voting.\\n * In naive implementations it's possible to perform a \\\"double spend\\\" attack by reusing the same balance from different\\n * accounts. By using snapshots to calculate dividends or voting power, those attacks no longer apply. It can also be\\n * used to create an efficient ERC20 forking mechanism.\\n *\\n * Snapshots are created by the internal {_snapshot} function, which will emit the {Snapshot} event and return a\\n * snapshot id. To get the total supply at the time of a snapshot, call the function {totalSupplyAt} with the snapshot\\n * id. To get the balance of an account at the time of a snapshot, call the {balanceOfAt} function with the snapshot id\\n * and the account address.\\n *\\n * NOTE: Snapshot policy can be customized by overriding the {_getCurrentSnapshotId} method. For example, having it\\n * return `block.number` will trigger the creation of snapshot at the beginning of each new block. When overriding this\\n * function, be careful about the monotonicity of its result. Non-monotonic snapshot ids will break the contract.\\n *\\n * Implementing snapshots for every block using this method will incur significant gas costs. For a gas-efficient\\n * alternative consider {ERC20Votes}.\\n *\\n * ==== Gas Costs\\n *\\n * Snapshots are efficient. Snapshot creation is _O(1)_. Retrieval of balances or total supply from a snapshot is _O(log\\n * n)_ in the number of snapshots that have been created, although _n_ for a specific account will generally be much\\n * smaller since identical balances in subsequent snapshots are stored as a single entry.\\n *\\n * There is a constant overhead for normal ERC20 transfers due to the additional snapshot bookkeeping. This overhead is\\n * only significant for the first transfer that immediately follows a snapshot for a particular account. Subsequent\\n * transfers will have normal cost until the next snapshot, and so on.\\n */\\n\\nabstract contract ERC20SnapshotUpgradeable is Initializable, ERC20Upgradeable {\\n    function __ERC20Snapshot_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC20Snapshot_init_unchained() internal onlyInitializing {\\n    }\\n    // Inspired by Jordi Baylina's MiniMeToken to record historical balances:\\n    // https://github.com/Giveth/minime/blob/ea04d950eea153a04c51fa510b068b9dded390cb/contracts/MiniMeToken.sol\\n\\n    using ArraysUpgradeable for uint256[];\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    // Snapshotted values have arrays of ids and the value corresponding to that id. These could be an array of a\\n    // Snapshot struct, but that would impede usage of functions that work on an array.\\n    struct Snapshots {\\n        uint256[] ids;\\n        uint256[] values;\\n    }\\n\\n    mapping(address => Snapshots) private _accountBalanceSnapshots;\\n    Snapshots private _totalSupplySnapshots;\\n\\n    // Snapshot ids increase monotonically, with the first value being 1. An id of 0 is invalid.\\n    CountersUpgradeable.Counter private _currentSnapshotId;\\n\\n    /**\\n     * @dev Emitted by {_snapshot} when a snapshot identified by `id` is created.\\n     */\\n    event Snapshot(uint256 id);\\n\\n    /**\\n     * @dev Creates a new snapshot and returns its snapshot id.\\n     *\\n     * Emits a {Snapshot} event that contains the same id.\\n     *\\n     * {_snapshot} is `internal` and you have to decide how to expose it externally. Its usage may be restricted to a\\n     * set of accounts, for example using {AccessControl}, or it may be open to the public.\\n     *\\n     * [WARNING]\\n     * ====\\n     * While an open way of calling {_snapshot} is required for certain trust minimization mechanisms such as forking,\\n     * you must consider that it can potentially be used by attackers in two ways.\\n     *\\n     * First, it can be used to increase the cost of retrieval of values from snapshots, although it will grow\\n     * logarithmically thus rendering this attack ineffective in the long term. Second, it can be used to target\\n     * specific accounts and increase the cost of ERC20 transfers for them, in the ways specified in the Gas Costs\\n     * section above.\\n     *\\n     * We haven't measured the actual numbers; if this is something you're interested in please reach out to us.\\n     * ====\\n     */\\n    function _snapshot() internal virtual returns (uint256) {\\n        _currentSnapshotId.increment();\\n\\n        uint256 currentId = _getCurrentSnapshotId();\\n        emit Snapshot(currentId);\\n        return currentId;\\n    }\\n\\n    /**\\n     * @dev Get the current snapshotId\\n     */\\n    function _getCurrentSnapshotId() internal view virtual returns (uint256) {\\n        return _currentSnapshotId.current();\\n    }\\n\\n    /**\\n     * @dev Retrieves the balance of `account` at the time `snapshotId` was created.\\n     */\\n    function balanceOfAt(address account, uint256 snapshotId) public view virtual returns (uint256) {\\n        (bool snapshotted, uint256 value) = _valueAt(snapshotId, _accountBalanceSnapshots[account]);\\n\\n        return snapshotted ? value : balanceOf(account);\\n    }\\n\\n    /**\\n     * @dev Retrieves the total supply at the time `snapshotId` was created.\\n     */\\n    function totalSupplyAt(uint256 snapshotId) public view virtual returns (uint256) {\\n        (bool snapshotted, uint256 value) = _valueAt(snapshotId, _totalSupplySnapshots);\\n\\n        return snapshotted ? value : totalSupply();\\n    }\\n\\n    // Update balance and/or total supply snapshots before the values are modified. This is implemented\\n    // in the _beforeTokenTransfer hook, which is executed for _mint, _burn, and _transfer operations.\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, amount);\\n\\n        if (from == address(0)) {\\n            // mint\\n            _updateAccountSnapshot(to);\\n            _updateTotalSupplySnapshot();\\n        } else if (to == address(0)) {\\n            // burn\\n            _updateAccountSnapshot(from);\\n            _updateTotalSupplySnapshot();\\n        } else {\\n            // transfer\\n            _updateAccountSnapshot(from);\\n            _updateAccountSnapshot(to);\\n        }\\n    }\\n\\n    function _valueAt(uint256 snapshotId, Snapshots storage snapshots) private view returns (bool, uint256) {\\n        require(snapshotId > 0, \\\"ERC20Snapshot: id is 0\\\");\\n        require(snapshotId <= _getCurrentSnapshotId(), \\\"ERC20Snapshot: nonexistent id\\\");\\n\\n        // When a valid snapshot is queried, there are three possibilities:\\n        //  a) The queried value was not modified after the snapshot was taken. Therefore, a snapshot entry was never\\n        //  created for this id, and all stored snapshot ids are smaller than the requested one. The value that corresponds\\n        //  to this id is the current one.\\n        //  b) The queried value was modified after the snapshot was taken. Therefore, there will be an entry with the\\n        //  requested id, and its value is the one to return.\\n        //  c) More snapshots were created after the requested one, and the queried value was later modified. There will be\\n        //  no entry for the requested id: the value that corresponds to it is that of the smallest snapshot id that is\\n        //  larger than the requested one.\\n        //\\n        // In summary, we need to find an element in an array, returning the index of the smallest value that is larger if\\n        // it is not found, unless said value doesn't exist (e.g. when all values are smaller). Arrays.findUpperBound does\\n        // exactly this.\\n\\n        uint256 index = snapshots.ids.findUpperBound(snapshotId);\\n\\n        if (index == snapshots.ids.length) {\\n            return (false, 0);\\n        } else {\\n            return (true, snapshots.values[index]);\\n        }\\n    }\\n\\n    function _updateAccountSnapshot(address account) private {\\n        _updateSnapshot(_accountBalanceSnapshots[account], balanceOf(account));\\n    }\\n\\n    function _updateTotalSupplySnapshot() private {\\n        _updateSnapshot(_totalSupplySnapshots, totalSupply());\\n    }\\n\\n    function _updateSnapshot(Snapshots storage snapshots, uint256 currentValue) private {\\n        uint256 currentId = _getCurrentSnapshotId();\\n        if (_lastSnapshotId(snapshots.ids) < currentId) {\\n            snapshots.ids.push(currentId);\\n            snapshots.values.push(currentValue);\\n        }\\n    }\\n\\n    function _lastSnapshotId(uint256[] storage ids) private view returns (uint256) {\\n        if (ids.length == 0) {\\n            return 0;\\n        } else {\\n            return ids[ids.length - 1];\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[46] private __gap;\\n}\\n\",\"keccak256\":\"0x42da8099f59958af496f6c8f0d9c1ce0a929151e02f877e4be23aca4cc440cbe\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/extensions/draft-ERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/EIP712Upgradeable.sol\\\";\\nimport \\\"../../../utils/CountersUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 51\\n */\\nabstract contract ERC20PermitUpgradeable is Initializable, ERC20Upgradeable, IERC20PermitUpgradeable, EIP712Upgradeable {\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    mapping(address => CountersUpgradeable.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private constant _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    /**\\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\\n     * to reserve a slot.\\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    function __ERC20Permit_init(string memory name) internal onlyInitializing {\\n        __EIP712_init_unchained(name, \\\"1\\\");\\n    }\\n\\n    function __ERC20Permit_init_unchained(string memory) internal onlyInitializing {}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSAUpgradeable.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        CountersUpgradeable.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xfe1053f3a6ee4527cde96c8152b8b1dbb98774639a64e819087bc80e618d7f7f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ArraysUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Arrays.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./StorageSlotUpgradeable.sol\\\";\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to array types.\\n */\\nlibrary ArraysUpgradeable {\\n    using StorageSlotUpgradeable for bytes32;\\n\\n    /**\\n     * @dev Searches a sorted `array` and returns the first index that contains\\n     * a value greater or equal to `element`. If no such index exists (i.e. all\\n     * values in the array are strictly less than `element`), the array length is\\n     * returned. Time complexity O(log n).\\n     *\\n     * `array` is expected to be sorted in ascending order, and to contain no\\n     * repeated elements.\\n     */\\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        if (array.length == 0) {\\n            return 0;\\n        }\\n\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        while (low < high) {\\n            uint256 mid = MathUpgradeable.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds down (it does integer division with truncation).\\n            if (unsafeAccess(array, mid).value > element) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\\n        if (low > 0 && unsafeAccess(array, low - 1).value == element) {\\n            return low - 1;\\n        } else {\\n            return low;\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(address[] storage arr, uint256 pos) internal pure returns (StorageSlotUpgradeable.AddressSlot storage) {\\n        bytes32 slot;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getAddressSlot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(bytes32[] storage arr, uint256 pos) internal pure returns (StorageSlotUpgradeable.Bytes32Slot storage) {\\n        bytes32 slot;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getBytes32Slot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(uint256[] storage arr, uint256 pos) internal pure returns (StorageSlotUpgradeable.Uint256Slot storage) {\\n        bytes32 slot;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getUint256Slot();\\n    }\\n}\\n\",\"keccak256\":\"0xc3821e9d41b2b19b612238b308dcc8f4ab46afcd0f6b3bd174e89789bbf59e26\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x12f297cafe6e2847ae0378502f155654d0764b532a9873c8afe4350950fa7971\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 52\\n */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x3017aded62c4a2b9707f5f06f92934e592c1c9b6f384b91b51340a6d5f841931\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xa2b22da3032e50b55f95ec1d13336102d675f341167aa76db571ef7f8bb7975d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"contracts/PKDR.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\nimport \\\"./Profiles.sol\\\";\\n\\n//states variables\\n//error\\n//events\\n//modifier\\n// constructor\\n// receive\\n// fallback\\n// external\\n// public\\n// internal\\n// private\\n// view or pure\\n\\n/// @custom:security-contact zohaib10092001@gmail.com\\ncontract PKDR is\\n    Initializable,\\n    ERC20Upgradeable,\\n    ERC20BurnableUpgradeable,\\n    ERC20SnapshotUpgradeable,\\n    OwnableUpgradeable,\\n    PausableUpgradeable,\\n    ERC20PermitUpgradeable,\\n    UUPSUpgradeable\\n{\\n    //states variables\\n    uint256 private _contractValue = 0;\\n    bytes32 private immutable _multiSig =\\n        keccak256(abi.encodePacked(\\\"APPROVED\\\"));\\n    bytes32 private immutable _revokeMultiSig =\\n        keccak256(abi.encodePacked(\\\"NULL\\\"));\\n    Profiles profiles;\\n\\n    //error\\n\\n    error USER_NOT_VERIFIED(address);\\n    error MULTISIG_REQUIRED(address);\\n\\n    //events\\n\\n    event AMOUNT_RECEIVED_THROUGH_FALLBACK(uint256 fallbackAmount);\\n    event AMOUNT_RECEIVED_THROUGH_RECEIVE(uint256 receiveAmount);\\n    event TRANSFER_REQUIRED_MULTI_SIGNATURE(address);\\n    event TRANSFER_REQUIRED_VERIFICATION_I(address);\\n\\n    //modifier\\n\\n    modifier isVerified(address _user) {\\n        require(_isVerified(_user), \\\"USER_NOT_VERIFIED\\\");\\n        _;\\n    }\\n\\n    modifier isMultiSigApprove(address _user) {\\n        if (_getMultiSig(_user) == _revokeMultiSig) {\\n            revert MULTISIG_REQUIRED(_user);\\n        }\\n        _;\\n    }\\n\\n    // constructor\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    // receive\\n    receive() external payable {\\n        _contractValue += msg.value;\\n        emit AMOUNT_RECEIVED_THROUGH_RECEIVE(msg.value);\\n    }\\n\\n    // fallback\\n    fallback() external payable {\\n        _contractValue += msg.value;\\n        emit AMOUNT_RECEIVED_THROUGH_FALLBACK(msg.value);\\n    }\\n\\n    // external\\n\\n    // @dev function to initialize the Profile object as a storage in PKDR contract\\n    // @param _profiles is a address which is set to payable to fallback functions receiving ethers\\n    function setProfileAddress(address payable _profiles) external onlyOwner {\\n        profiles = Profiles(_profiles);\\n    }\\n\\n    function mintTo(address to, uint256 amount) external onlyOwner {\\n        mint(to, amount);\\n    }\\n\\n    function burn(uint256 amount) public override onlyOwner {\\n        super.burn(amount);\\n    }\\n\\n    function burnFrom(\\n        address account,\\n        uint256 amount\\n    ) public override onlyOwner {\\n        super.burnFrom(account, amount);\\n    }\\n\\n    // public\\n    function initialize() public initializer {\\n        __ERC20_init(\\\"PKDR\\\", \\\"PKDR\\\");\\n        __ERC20Burnable_init();\\n        __ERC20Snapshot_init();\\n        __Ownable_init();\\n        __Pausable_init();\\n        __ERC20Permit_init(\\\"PKDR\\\");\\n        __UUPSUpgradeable_init();\\n    }\\n\\n    function transfer(\\n        address to,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        require(\\n            _isVerified(msg.sender),\\n            \\\"from: TRANSFER_REQUIRED_VERIFICATION_I\\\"\\n        );\\n        require(_isVerified(to), \\\"to : TRANSFER_REQUIRED_VERIFICATION_I\\\");\\n        require(\\n            _getMultiSig(msg.sender) == _multiSig,\\n            \\\"from: TRANSFER_REQUIRED_MULTI_SIGNATURE\\\"\\n        );\\n        require(\\n            _getMultiSig(to) == _multiSig,\\n            \\\"to: TRANSFER_REQUIRED_MULTI_SIGNATURE\\\"\\n        );\\n\\n        return super.transfer(to, amount);\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    )\\n        public\\n        virtual\\n        override\\n        onlyOwner\\n        isVerified(from)\\n        isVerified(to)\\n        isMultiSigApprove(from)\\n        isMultiSigApprove(to)\\n        returns (bool)\\n    {\\n        return super.transferFrom(from, to, amount);\\n    }\\n\\n      function owner() public view override returns (address) {\\n        return super.owner();\\n    }\\n\\n    // internal\\n    function snapshot() internal onlyOwner {\\n        _snapshot();\\n    }\\n\\n    function pause() internal onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() internal onlyOwner {\\n        _unpause();\\n    }\\n\\n    function mint(address to, uint256 amount) internal onlyOwner {\\n        _mint(to, amount);\\n    }\\n\\n    function _isVerified(address _user) internal view returns (bool) {\\n        bool status = profiles.getVerifiedUser(_user);\\n        return status;\\n    }\\n\\n    function _getMultiSig(address _user) internal view returns (bytes32) {\\n        return profiles.getMultiSig(_user);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    )\\n        internal\\n        override(ERC20Upgradeable, ERC20SnapshotUpgradeable)\\n        whenNotPaused\\n    {\\n        super._beforeTokenTransfer(from, to, amount);\\n    }\\n\\n    function _authorizeUpgrade(\\n        address newImplementation\\n    ) internal override onlyOwner {}\\n\\n    // private\\n\\n    // view or pure\\n\\n    function getProfileAddress() external view onlyOwner returns (address) {\\n        return address(profiles);\\n    }\\n}\\n\",\"keccak256\":\"0x4cd74ed5084c570ed03d4f7c83081092225c1bf6e2e81d2a7df10b64aaa00695\",\"license\":\"MIT\"},\"contracts/Profiles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\\\";\\nimport \\\"./interfaces/IProfiles.sol\\\";\\n\\n// import \\\"./IProfiles.sol\\\";\\n// import \\\"./PKDR.sol\\\";\\n//states variables\\n//error\\n//events\\n//modifier\\n// constructor\\n// receive\\n// fallback\\n// external\\n// public\\n// internal\\n// private\\n// view or pure\\n\\n//createProfile\\n//getVerifiedUser\\n// revokeVerifiedUser\\n// retainVerification\\ncontract Profiles is\\n    IProfiles,\\n    Initializable,\\n    OwnableUpgradeable,\\n    UUPSUpgradeable\\n{\\n    //states variables\\n\\n    // admins array who controlled the users contract\\n    uint256 private _contractValue = 0;\\n    address private _iPkdrOrgAddresses;\\n    address[] private _userAddresses;\\n    bytes32 private immutable _multiSig =\\n        keccak256(abi.encodePacked(\\\"APPROVED\\\"));\\n    bytes32 private immutable _revokeMultiSig =\\n        keccak256(abi.encodePacked(\\\"NULL\\\"));\\n\\n    // mapping for address to a user struct\\n    mapping(address => User) private users;\\n\\n    //error\\n\\n    error USER_EXISTS_AND_VERIFIED();\\n    error USER_NOT_EXISTS();\\n    error USER_STATUS_NOT_REVOKED();\\n    error USER_STATUS_ALREADY_REVOKED();\\n\\n    //events\\n\\n    event PROFILE_CREATED(address indexed user);\\n    event PROFILE_REVOKED(address user);\\n    event PROFILE_RETAINED(address user);\\n    event AMOUNT_RECEIVED_THROUGH_FALLBACK(uint256 fallbackAmount);\\n    event AMOUNT_RECEIVED_THROUGH_RECEIVE(uint256 receiveAmount);\\n    event MULTISIG_RETAINED(address user);\\n    event MULTISIG_REVOKED(address user);\\n    event ZK_VERIFICATION_REVOKED(address _user);\\n    event ZK_VERIFICATION_RETAINED(address _user);\\n\\n    //modifier\\n\\n    // check user Exists in mapping variable\\n    modifier userExists(address _user) {\\n        if (users[_user].verificationStatus_I) {\\n            revert USER_EXISTS_AND_VERIFIED();\\n        }\\n        _;\\n    }\\n\\n    modifier userNotExists(address _user) {\\n        if (!users[_user].verificationStatus_I) {\\n            revert USER_NOT_EXISTS();\\n        }\\n        _;\\n    }\\n\\n    modifier isStatusNotRevoked(address _user) {\\n        if (!users[_user].isStatusRevoked) {\\n            revert USER_STATUS_NOT_REVOKED();\\n        }\\n        _;\\n    }\\n\\n    modifier isStatusRevoked(address _user) {\\n        if (users[_user].isStatusRevoked) {\\n            revert USER_STATUS_ALREADY_REVOKED();\\n        }\\n        _;\\n    }\\n\\n    // constructor\\n\\n    // constructor() {\\n    //     _disableInitializers();\\n    // }\\n\\n    // receive\\n    receive() external payable {\\n        _contractValue += msg.value;\\n        emit AMOUNT_RECEIVED_THROUGH_RECEIVE(msg.value);\\n    }\\n\\n    // fallback\\n    fallback() external payable {\\n        _contractValue += msg.value;\\n        emit AMOUNT_RECEIVED_THROUGH_FALLBACK(msg.value);\\n    }\\n\\n    // external\\n\\n    //create the profile of a given address in a mapping of a struct\\n    function createProfile(address _user) external onlyOwner userExists(_user) {\\n        users[_user] = User(_user, _multiSig, true, false, false);\\n        _userAddresses.push(_user);\\n        emit PROFILE_CREATED(_user);\\n    }\\n\\n    // retain verification of a user\\n    function retainVerification(\\n        address _user\\n    ) external onlyOwner userNotExists(_user) isStatusNotRevoked(_user) {\\n        users[_user].isStatusRevoked = false;\\n\\n        emit PROFILE_RETAINED(_user);\\n    }\\n\\n    // revoke the verification status of a user\\n    function revokeVerifiedUser(\\n        address _user\\n    ) external onlyOwner userNotExists(_user) isStatusRevoked(_user) {\\n        users[_user].isStatusRevoked = true;\\n\\n        emit PROFILE_REVOKED(_user);\\n    }\\n\\n    function retainMultiSignature(\\n        address _user\\n    ) external onlyOwner userNotExists(_user) {\\n        require(\\n            users[_user].multiSig == _revokeMultiSig,\\n            \\\"MULTI_SIGNATURE ALREADY RETAINED \\\"\\n        );\\n        users[_user].multiSig = _multiSig;\\n    }\\n\\n    function revokeMultiSignature(\\n        address _user\\n    ) external onlyOwner userNotExists(_user) {\\n        require(\\n            users[_user].multiSig == _multiSig,\\n            \\\"MULTI_SIGNATURE ALREADY REVOKED \\\"\\n        );\\n        users[_user].multiSig = _revokeMultiSig;\\n        emit MULTISIG_REVOKED(_user);\\n    }\\n\\n    function revokeZkVerification(\\n        address _user\\n    ) external onlyOwner userNotExists(_user) {\\n        require(\\n            users[_user].verificationStatus_II,\\n            \\\"ZK_VERIFICATION ALREADY REVOKED \\\"\\n        );\\n        users[_user].verificationStatus_II = false;\\n        emit ZK_VERIFICATION_REVOKED(_user);\\n    }\\n\\n    function retainZkVerification(\\n        address _user\\n    ) external onlyOwner userNotExists(_user) {\\n        require(\\n            !users[_user].verificationStatus_II,\\n            \\\"ZK_VERIFICATION ALREADY RETAINED\\\"\\n        );\\n        users[_user].verificationStatus_II = true;\\n        emit ZK_VERIFICATION_RETAINED(_user);\\n    }\\n\\n    // public\\n\\n    function initialize() public initializer {\\n        __Ownable_init();\\n        __UUPSUpgradeable_init();\\n    }\\n\\n    // internal\\n\\n    function _authorizeUpgrade(\\n        address newImplementation\\n    ) internal override onlyOwner {}\\n\\n    // private\\n    function _getContractValue() private view returns (uint256) {\\n        return _contractValue;\\n    }\\n\\n    // view or pure\\n\\n    function getAdminAddress() external view onlyOwner returns (address) {\\n        return owner();\\n    }\\n\\n    function getUser(\\n        address _user\\n    ) external view userNotExists(_user) returns (User memory) {\\n        return users[_user];\\n    }\\n\\n    function getUsers() external view onlyOwner returns (address[] memory) {\\n        address[] memory _users = _userAddresses;\\n        return _users;\\n    }\\n\\n    //retuns only the verification status for a user Address not other data present in struct\\n    function getVerifiedUser(\\n        address _user\\n    ) external view userNotExists(_user) returns (bool) {\\n        if (users[_user].isStatusRevoked) {\\n            return false;\\n        } else {\\n            return users[_user].verificationStatus_I;\\n        }\\n    }\\n\\n    function getMultiSig(\\n        address _user\\n    ) external view userNotExists(_user) returns (bytes32) {\\n        return users[_user].multiSig;\\n    }\\n}\\n\",\"keccak256\":\"0xddcd7070efd4194d4bf849d9631ea7e5c8904fc195bbdeaaf328175211f0cf65\",\"license\":\"MIT\"},\"contracts/interfaces/IProfiles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\ninterface IProfiles {\\n    struct User {\\n        address userPubAddress;\\n        bytes32 multiSig;\\n        bool verificationStatus_I;\\n        bool verificationStatus_II;\\n        bool isStatusRevoked;\\n    }\\n\\n    function createProfile(address _user) external;\\n\\n    function retainVerification(address _user) external;\\n\\n    function revokeVerifiedUser(address _user) external;\\n\\n    function getVerifiedUser(address _user) external view returns (bool);\\n\\n    function getAdminAddress() external view returns (address);\\n\\n    function getUser(address _user) external view returns (User memory);\\n\\n    function getUsers() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0xf8827808f1fcd820c053f1ca74ba1116a54d33f3c576579350d25700f18ad647\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":527,"contract":"contracts/PKDR.sol:PKDR","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":530,"contract":"contracts/PKDR.sol:PKDR","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2787,"contract":"contracts/PKDR.sol:PKDR","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":971,"contract":"contracts/PKDR.sol:PKDR","label":"_balances","offset":0,"slot":"51","type":"t_mapping(t_address,t_uint256)"},{"astId":977,"contract":"contracts/PKDR.sol:PKDR","label":"_allowances","offset":0,"slot":"52","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":979,"contract":"contracts/PKDR.sol:PKDR","label":"_totalSupply","offset":0,"slot":"53","type":"t_uint256"},{"astId":981,"contract":"contracts/PKDR.sol:PKDR","label":"_name","offset":0,"slot":"54","type":"t_string_storage"},{"astId":983,"contract":"contracts/PKDR.sol:PKDR","label":"_symbol","offset":0,"slot":"55","type":"t_string_storage"},{"astId":1563,"contract":"contracts/PKDR.sol:PKDR","label":"__gap","offset":0,"slot":"56","type":"t_array(t_uint256)45_storage"},{"astId":1705,"contract":"contracts/PKDR.sol:PKDR","label":"__gap","offset":0,"slot":"101","type":"t_array(t_uint256)50_storage"},{"astId":1749,"contract":"contracts/PKDR.sol:PKDR","label":"_accountBalanceSnapshots","offset":0,"slot":"151","type":"t_mapping(t_address,t_struct(Snapshots)1744_storage)"},{"astId":1752,"contract":"contracts/PKDR.sol:PKDR","label":"_totalSupplySnapshots","offset":0,"slot":"152","type":"t_struct(Snapshots)1744_storage"},{"astId":1755,"contract":"contracts/PKDR.sol:PKDR","label":"_currentSnapshotId","offset":0,"slot":"154","type":"t_struct(Counter)2794_storage"},{"astId":2053,"contract":"contracts/PKDR.sol:PKDR","label":"__gap","offset":0,"slot":"155","type":"t_array(t_uint256)46_storage"},{"astId":10,"contract":"contracts/PKDR.sol:PKDR","label":"_owner","offset":0,"slot":"201","type":"t_address"},{"astId":130,"contract":"contracts/PKDR.sol:PKDR","label":"__gap","offset":0,"slot":"202","type":"t_array(t_uint256)49_storage"},{"astId":846,"contract":"contracts/PKDR.sol:PKDR","label":"_paused","offset":0,"slot":"251","type":"t_bool"},{"astId":951,"contract":"contracts/PKDR.sol:PKDR","label":"__gap","offset":0,"slot":"252","type":"t_array(t_uint256)49_storage"},{"astId":3467,"contract":"contracts/PKDR.sol:PKDR","label":"_HASHED_NAME","offset":0,"slot":"301","type":"t_bytes32"},{"astId":3469,"contract":"contracts/PKDR.sol:PKDR","label":"_HASHED_VERSION","offset":0,"slot":"302","type":"t_bytes32"},{"astId":3607,"contract":"contracts/PKDR.sol:PKDR","label":"__gap","offset":0,"slot":"303","type":"t_array(t_uint256)50_storage"},{"astId":2105,"contract":"contracts/PKDR.sol:PKDR","label":"_nonces","offset":0,"slot":"353","type":"t_mapping(t_address,t_struct(Counter)2794_storage)"},{"astId":2113,"contract":"contracts/PKDR.sol:PKDR","label":"_PERMIT_TYPEHASH_DEPRECATED_SLOT","offset":0,"slot":"354","type":"t_bytes32"},{"astId":2269,"contract":"contracts/PKDR.sol:PKDR","label":"__gap","offset":0,"slot":"355","type":"t_array(t_uint256)49_storage"},{"astId":509,"contract":"contracts/PKDR.sol:PKDR","label":"__gap","offset":0,"slot":"404","type":"t_array(t_uint256)50_storage"},{"astId":824,"contract":"contracts/PKDR.sol:PKDR","label":"__gap","offset":0,"slot":"454","type":"t_array(t_uint256)50_storage"},{"astId":5321,"contract":"contracts/PKDR.sol:PKDR","label":"_contractValue","offset":0,"slot":"504","type":"t_uint256"},{"astId":5340,"contract":"contracts/PKDR.sol:PKDR","label":"profiles","offset":0,"slot":"505","type":"t_contract(Profiles)6234"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)45_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[45]","numberOfBytes":"1440"},"t_array(t_uint256)46_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[46]","numberOfBytes":"1472"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_array(t_uint256)dyn_storage":{"base":"t_uint256","encoding":"dynamic_array","label":"uint256[]","numberOfBytes":"32"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_contract(Profiles)6234":{"encoding":"inplace","label":"contract Profiles","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_struct(Counter)2794_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct CountersUpgradeable.Counter)","numberOfBytes":"32","value":"t_struct(Counter)2794_storage"},"t_mapping(t_address,t_struct(Snapshots)1744_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct ERC20SnapshotUpgradeable.Snapshots)","numberOfBytes":"32","value":"t_struct(Snapshots)1744_storage"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(Counter)2794_storage":{"encoding":"inplace","label":"struct CountersUpgradeable.Counter","members":[{"astId":2793,"contract":"contracts/PKDR.sol:PKDR","label":"_value","offset":0,"slot":"0","type":"t_uint256"}],"numberOfBytes":"32"},"t_struct(Snapshots)1744_storage":{"encoding":"inplace","label":"struct ERC20SnapshotUpgradeable.Snapshots","members":[{"astId":1740,"contract":"contracts/PKDR.sol:PKDR","label":"ids","offset":0,"slot":"0","type":"t_array(t_uint256)dyn_storage"},{"astId":1743,"contract":"contracts/PKDR.sol:PKDR","label":"values","offset":0,"slot":"1","type":"t_array(t_uint256)dyn_storage"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/Profiles.sol":{"Profiles":{"abi":[{"inputs":[],"name":"USER_EXISTS_AND_VERIFIED","type":"error"},{"inputs":[],"name":"USER_NOT_EXISTS","type":"error"},{"inputs":[],"name":"USER_STATUS_ALREADY_REVOKED","type":"error"},{"inputs":[],"name":"USER_STATUS_NOT_REVOKED","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"fallbackAmount","type":"uint256"}],"name":"AMOUNT_RECEIVED_THROUGH_FALLBACK","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"receiveAmount","type":"uint256"}],"name":"AMOUNT_RECEIVED_THROUGH_RECEIVE","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beacon","type":"address"}],"name":"BeaconUpgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"user","type":"address"}],"name":"MULTISIG_RETAINED","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"user","type":"address"}],"name":"MULTISIG_REVOKED","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"}],"name":"PROFILE_CREATED","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"user","type":"address"}],"name":"PROFILE_RETAINED","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"user","type":"address"}],"name":"PROFILE_REVOKED","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"_user","type":"address"}],"name":"ZK_VERIFICATION_RETAINED","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"_user","type":"address"}],"name":"ZK_VERIFICATION_REVOKED","type":"event"},{"stateMutability":"payable","type":"fallback"},{"inputs":[{"internalType":"address","name":"_user","type":"address"}],"name":"createProfile","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getAdminAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"}],"name":"getMultiSig","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"}],"name":"getUser","outputs":[{"components":[{"internalType":"address","name":"userPubAddress","type":"address"},{"internalType":"bytes32","name":"multiSig","type":"bytes32"},{"internalType":"bool","name":"verificationStatus_I","type":"bool"},{"internalType":"bool","name":"verificationStatus_II","type":"bool"},{"internalType":"bool","name":"isStatusRevoked","type":"bool"}],"internalType":"struct IProfiles.User","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getUsers","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"}],"name":"getVerifiedUser","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"proxiableUUID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"}],"name":"retainMultiSignature","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"}],"name":"retainVerification","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"}],"name":"retainZkVerification","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"}],"name":"revokeMultiSignature","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"}],"name":"revokeVerifiedUser","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"}],"name":"revokeZkVerification","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"}],"name":"upgradeTo","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"upgradeToAndCall","outputs":[],"stateMutability":"payable","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"proxiableUUID()":{"details":"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."},"upgradeTo(address)":{"details":"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."},"upgradeToAndCall(address,bytes)":{"details":"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"abi_encode_t_stringliteral_bb4e1f8434f661d4c52cce6e51dba6eb9c909f0b452eb22968b55416ecb18fb5_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":325,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_e321069d1ac41cdfb1421ffa231cd2dc5e3a334703a998a5f84566b6fbf3f7bd_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":222,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_bb4e1f8434f661d4c52cce6e51dba6eb9c909f0b452eb22968b55416ecb18fb5__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":364,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_e321069d1ac41cdfb1421ffa231cd2dc5e3a334703a998a5f84566b6fbf3f7bd__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":261,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":170,"id":null,"parameterSlots":2,"returnSlots":1},"store_literal_in_memory_bb4e1f8434f661d4c52cce6e51dba6eb9c909f0b452eb22968b55416ecb18fb5":{"entryPoint":284,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_e321069d1ac41cdfb1421ffa231cd2dc5e3a334703a998a5f84566b6fbf3f7bd":{"entryPoint":181,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:2068:33","statements":[{"body":{"nodeType":"YulBlock","src":"121:34:33","statements":[{"nodeType":"YulAssignment","src":"131:18:33","value":{"name":"pos","nodeType":"YulIdentifier","src":"146:3:33"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"131:11:33"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"93:3:33","type":""},{"name":"length","nodeType":"YulTypedName","src":"98:6:33","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"109:11:33","type":""}],"src":"7:148:33"},{"body":{"nodeType":"YulBlock","src":"267:52:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"289:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"297:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"285:3:33"},"nodeType":"YulFunctionCall","src":"285:14:33"},{"hexValue":"415050524f564544","kind":"string","nodeType":"YulLiteral","src":"301:10:33","type":"","value":"APPROVED"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"278:6:33"},"nodeType":"YulFunctionCall","src":"278:34:33"},"nodeType":"YulExpressionStatement","src":"278:34:33"}]},"name":"store_literal_in_memory_e321069d1ac41cdfb1421ffa231cd2dc5e3a334703a998a5f84566b6fbf3f7bd","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"259:6:33","type":""}],"src":"161:158:33"},{"body":{"nodeType":"YulBlock","src":"489:236:33","statements":[{"nodeType":"YulAssignment","src":"499:91:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"583:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"588:1:33","type":"","value":"8"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"506:76:33"},"nodeType":"YulFunctionCall","src":"506:84:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"499:3:33"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"688:3:33"}],"functionName":{"name":"store_literal_in_memory_e321069d1ac41cdfb1421ffa231cd2dc5e3a334703a998a5f84566b6fbf3f7bd","nodeType":"YulIdentifier","src":"599:88:33"},"nodeType":"YulFunctionCall","src":"599:93:33"},"nodeType":"YulExpressionStatement","src":"599:93:33"},{"nodeType":"YulAssignment","src":"701:18:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"712:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"717:1:33","type":"","value":"8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"708:3:33"},"nodeType":"YulFunctionCall","src":"708:11:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"701:3:33"}]}]},"name":"abi_encode_t_stringliteral_e321069d1ac41cdfb1421ffa231cd2dc5e3a334703a998a5f84566b6fbf3f7bd_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"477:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"485:3:33","type":""}],"src":"325:400:33"},{"body":{"nodeType":"YulBlock","src":"920:192:33","statements":[{"nodeType":"YulAssignment","src":"931:155:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1082:3:33"}],"functionName":{"name":"abi_encode_t_stringliteral_e321069d1ac41cdfb1421ffa231cd2dc5e3a334703a998a5f84566b6fbf3f7bd_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"938:142:33"},"nodeType":"YulFunctionCall","src":"938:148:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"931:3:33"}]},{"nodeType":"YulAssignment","src":"1096:10:33","value":{"name":"pos","nodeType":"YulIdentifier","src":"1103:3:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"1096:3:33"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_e321069d1ac41cdfb1421ffa231cd2dc5e3a334703a998a5f84566b6fbf3f7bd__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"907:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"916:3:33","type":""}],"src":"731:381:33"},{"body":{"nodeType":"YulBlock","src":"1224:48:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1246:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"1254:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1242:3:33"},"nodeType":"YulFunctionCall","src":"1242:14:33"},{"hexValue":"4e554c4c","kind":"string","nodeType":"YulLiteral","src":"1258:6:33","type":"","value":"NULL"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1235:6:33"},"nodeType":"YulFunctionCall","src":"1235:30:33"},"nodeType":"YulExpressionStatement","src":"1235:30:33"}]},"name":"store_literal_in_memory_bb4e1f8434f661d4c52cce6e51dba6eb9c909f0b452eb22968b55416ecb18fb5","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"1216:6:33","type":""}],"src":"1118:154:33"},{"body":{"nodeType":"YulBlock","src":"1442:236:33","statements":[{"nodeType":"YulAssignment","src":"1452:91:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1536:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"1541:1:33","type":"","value":"4"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"1459:76:33"},"nodeType":"YulFunctionCall","src":"1459:84:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"1452:3:33"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1641:3:33"}],"functionName":{"name":"store_literal_in_memory_bb4e1f8434f661d4c52cce6e51dba6eb9c909f0b452eb22968b55416ecb18fb5","nodeType":"YulIdentifier","src":"1552:88:33"},"nodeType":"YulFunctionCall","src":"1552:93:33"},"nodeType":"YulExpressionStatement","src":"1552:93:33"},{"nodeType":"YulAssignment","src":"1654:18:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1665:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"1670:1:33","type":"","value":"4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1661:3:33"},"nodeType":"YulFunctionCall","src":"1661:11:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"1654:3:33"}]}]},"name":"abi_encode_t_stringliteral_bb4e1f8434f661d4c52cce6e51dba6eb9c909f0b452eb22968b55416ecb18fb5_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"1430:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"1438:3:33","type":""}],"src":"1278:400:33"},{"body":{"nodeType":"YulBlock","src":"1873:192:33","statements":[{"nodeType":"YulAssignment","src":"1884:155:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2035:3:33"}],"functionName":{"name":"abi_encode_t_stringliteral_bb4e1f8434f661d4c52cce6e51dba6eb9c909f0b452eb22968b55416ecb18fb5_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"1891:142:33"},"nodeType":"YulFunctionCall","src":"1891:148:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"1884:3:33"}]},{"nodeType":"YulAssignment","src":"2049:10:33","value":{"name":"pos","nodeType":"YulIdentifier","src":"2056:3:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"2049:3:33"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_bb4e1f8434f661d4c52cce6e51dba6eb9c909f0b452eb22968b55416ecb18fb5__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"1860:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"1869:3:33","type":""}],"src":"1684:381:33"}]},"contents":"{\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function store_literal_in_memory_e321069d1ac41cdfb1421ffa231cd2dc5e3a334703a998a5f84566b6fbf3f7bd(memPtr) {\n\n        mstore(add(memPtr, 0), \"APPROVED\")\n\n    }\n\n    function abi_encode_t_stringliteral_e321069d1ac41cdfb1421ffa231cd2dc5e3a334703a998a5f84566b6fbf3f7bd_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 8)\n        store_literal_in_memory_e321069d1ac41cdfb1421ffa231cd2dc5e3a334703a998a5f84566b6fbf3f7bd(pos)\n        end := add(pos, 8)\n    }\n\n    function abi_encode_tuple_packed_t_stringliteral_e321069d1ac41cdfb1421ffa231cd2dc5e3a334703a998a5f84566b6fbf3f7bd__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos ) -> end {\n\n        pos := abi_encode_t_stringliteral_e321069d1ac41cdfb1421ffa231cd2dc5e3a334703a998a5f84566b6fbf3f7bd_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        end := pos\n    }\n\n    function store_literal_in_memory_bb4e1f8434f661d4c52cce6e51dba6eb9c909f0b452eb22968b55416ecb18fb5(memPtr) {\n\n        mstore(add(memPtr, 0), \"NULL\")\n\n    }\n\n    function abi_encode_t_stringliteral_bb4e1f8434f661d4c52cce6e51dba6eb9c909f0b452eb22968b55416ecb18fb5_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 4)\n        store_literal_in_memory_bb4e1f8434f661d4c52cce6e51dba6eb9c909f0b452eb22968b55416ecb18fb5(pos)\n        end := add(pos, 4)\n    }\n\n    function abi_encode_tuple_packed_t_stringliteral_bb4e1f8434f661d4c52cce6e51dba6eb9c909f0b452eb22968b55416ecb18fb5__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos ) -> end {\n\n        pos := abi_encode_t_stringliteral_bb4e1f8434f661d4c52cce6e51dba6eb9c909f0b452eb22968b55416ecb18fb5_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        end := pos\n    }\n\n}\n","id":33,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60e06040523073ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff16815250600060c9556040516020016200004d9062000105565b6040516020818303038152906040528051906020012060a0908152506040516020016200007a906200016c565b6040516020818303038152906040528051906020012060c090815250348015620000a357600080fd5b5062000183565b600081905092915050565b7f415050524f564544000000000000000000000000000000000000000000000000600082015250565b6000620000ed600883620000aa565b9150620000fa82620000b5565b600882019050919050565b60006200011282620000de565b9150819050919050565b7f4e554c4c00000000000000000000000000000000000000000000000000000000600082015250565b600062000154600483620000aa565b915062000161826200011c565b600482019050919050565b6000620001798262000145565b9150819050919050565b60805160a05160c0516131fd620001e4600039600081816113270152611624015260008181611283015281816116c801526119ae015260008181610650015281816106df0152818161098601528181610a150152610ac501526131fd6000f3fe6080604052600436106101175760003560e01c80638129fc1c116100a0578063b2e6b91211610064578063b2e6b912146103fb578063cde5535314610426578063d117fc991461044f578063f2fde38b1461048c578063f536c520146104b55761016e565b80638129fc1c1461033e57806387d55ff3146103555780638da5cb5b1461037e578063acfb7980146103a9578063b2b35eb4146103d25761016e565b80634f1ef286116100e75780634f1ef2861461027a57806352d1902d1461029657806354ef5c52146102c15780636f77926b146102ea578063715018a6146103275761016e565b8062ce8e3e146101c05780631e9f3d5e146101eb5780633659cfe614610228578063391a5bf0146102515761016e565b3661016e573460c9600082825461012e9190612306565b925050819055507f42100f075a78c1dac886a43652b5c7c76cca3718758e13e7b726063cd20fe02c34604051610164919061236b565b60405180910390a1005b3460c960008282546101809190612306565b925050819055507f6cb8a67804b99a2876f9d2f903120d1607df4c6bb33315433f4f5b9284ba1588346040516101b6919061236b565b60405180910390a1005b3480156101cc57600080fd5b506101d56104de565b6040516101e29190612476565b60405180910390f35b3480156101f757600080fd5b50610212600480360381019061020d91906124d8565b61057a565b60405161021f919061251e565b60405180910390f35b34801561023457600080fd5b5061024f600480360381019061024a91906124d8565b61064e565b005b34801561025d57600080fd5b50610278600480360381019061027391906124d8565b6107d7565b005b610294600480360381019061028f919061267f565b610984565b005b3480156102a257600080fd5b506102ab610ac1565b6040516102b8919061251e565b60405180910390f35b3480156102cd57600080fd5b506102e860048036038101906102e391906124d8565b610b7a565b005b3480156102f657600080fd5b50610311600480360381019061030c91906124d8565b610d2e565b60405161031e919061276d565b60405180910390f35b34801561033357600080fd5b5061033c610ec0565b005b34801561034a57600080fd5b50610353610ed4565b005b34801561036157600080fd5b5061037c600480360381019061037791906124d8565b61101a565b005b34801561038a57600080fd5b506103936111c8565b6040516103a09190612797565b60405180910390f35b3480156103b557600080fd5b506103d060048036038101906103cb91906124d8565b6111f2565b005b3480156103de57600080fd5b506103f960048036038101906103f491906124d8565b6113c7565b005b34801561040757600080fd5b5061041061157c565b60405161041d9190612797565b60405180910390f35b34801561043257600080fd5b5061044d600480360381019061044891906124d8565b611593565b005b34801561045b57600080fd5b50610476600480360381019061047191906124d8565b611731565b60405161048391906127c1565b60405180910390f35b34801561049857600080fd5b506104b360048036038101906104ae91906124d8565b611871565b005b3480156104c157600080fd5b506104dc60048036038101906104d791906124d8565b6118f5565b005b60606104e8611b88565b600060cb80548060200260200160405190810160405280929190818152602001828054801561056c57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610522575b505050505090508091505090565b60008160cc60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16610603576040517f551b5fec00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60cc60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154915050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614156106dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d49061285f565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1661071c611c06565b73ffffffffffffffffffffffffffffffffffffffff1614610772576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610769906128f1565b60405180910390fd5b61077b81611c5d565b6107d481600067ffffffffffffffff81111561079a57610799612554565b5b6040519080825280601f01601f1916602001820160405280156107cc5781602001600182028036833780820191505090505b506000611c68565b50565b6107df611b88565b8060cc60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16610866576040517f551b5fec00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8160cc60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160029054906101000a900460ff166108ed576040517ffbc601ed00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060cc60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160026101000a81548160ff0219169083151502179055507fdd8163d7c65d364e6e39c7e0fc2c8812d436ff8b4bc35e2f8db2b39c0662e2a4836040516109779190612797565b60405180910390a1505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161415610a13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0a9061285f565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610a52611c06565b73ffffffffffffffffffffffffffffffffffffffff1614610aa8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9f906128f1565b60405180910390fd5b610ab182611c5d565b610abd82826001611c68565b5050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614610b51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4890612983565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b905090565b610b82611b88565b8060cc60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16610c09576040517f551b5fec00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60cc60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160019054906101000a900460ff16610c98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8f906129ef565b60405180910390fd5b600060cc60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160016101000a81548160ff0219169083151502179055507f7665796ea03d3ff112c33b16cef72d11283b08518156fd5545a4511e6832e37282604051610d229190612797565b60405180910390a15050565b610d3661227f565b8160cc60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16610dbd576040517f551b5fec00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60cc60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060a00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a900460ff161515151581526020016002820160019054906101000a900460ff161515151581526020016002820160029054906101000a900460ff161515151581525050915050919050565b610ec8611b88565b610ed26000611de5565b565b60008060019054906101000a900460ff16159050808015610f055750600160008054906101000a900460ff1660ff16105b80610f325750610f1430611eab565b158015610f315750600160008054906101000a900460ff1660ff16145b5b610f71576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6890612a81565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015610fae576001600060016101000a81548160ff0219169083151502179055505b610fb6611ece565b610fbe611f27565b80156110175760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498600160405161100e9190612af3565b60405180910390a15b50565b611022611b88565b8060cc60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff166110a9576040517f551b5fec00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8160cc60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160029054906101000a900460ff1615611131576040517fe174c66c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160cc60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160026101000a81548160ff0219169083151502179055507f511d3bd421d86e995c1e2e4b179b681f67697e06c363a32945f11569520da052836040516111bb9190612797565b60405180910390a1505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6111fa611b88565b8060cc60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16611281576040517f551b5fec00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000060cc60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015414611325576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161131c90612b5a565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000060cc60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055507fc75dbd8ce00e37df747f1fe930658f85d9d198d29ccc1497d5bd5803915f1063826040516113bb9190612797565b60405180910390a15050565b6113cf611b88565b8060cc60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16611456576040517f551b5fec00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60cc60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160019054906101000a900460ff16156114e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114dd90612bc6565b60405180910390fd5b600160cc60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160016101000a81548160ff0219169083151502179055507ff8ae011d8a06a2397c554ef5e6bb3790b25410a7926f10e37f4306aaa20ad7e5826040516115709190612797565b60405180910390a15050565b6000611586611b88565b61158e6111c8565b905090565b61159b611b88565b8060cc60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16611622576040517f551b5fec00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000060cc60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154146116c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116bd90612c58565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000060cc60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055505050565b60008160cc60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff166117ba576040517f551b5fec00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60cc60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160029054906101000a900460ff1615611818576000915061186b565b60cc60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff1691505b50919050565b611879611b88565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156118e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118e090612cea565b60405180910390fd5b6118f281611de5565b50565b6118fd611b88565b8060cc60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff1615611985576040517f845f7cbb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040518060a001604052808373ffffffffffffffffffffffffffffffffffffffff1681526020017f000000000000000000000000000000000000000000000000000000000000000081526020016001151581526020016000151581526020016000151581525060cc60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020160006101000a81548160ff02191690831515021790555060608201518160020160016101000a81548160ff02191690831515021790555060808201518160020160026101000a81548160ff02191690831515021790555090505060cb829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff167fafa89aec2d2fd28210e1b3f83a2862febdac7db6e14888b9913882a46fef18a560405160405180910390a25050565b611b90611f78565b73ffffffffffffffffffffffffffffffffffffffff16611bae6111c8565b73ffffffffffffffffffffffffffffffffffffffff1614611c04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bfb90612d56565b60405180910390fd5b565b6000611c347f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b611f80565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b611c65611b88565b50565b611c947f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd914360001b611f8a565b60000160009054906101000a900460ff1615611cb857611cb383611f94565b611de0565b8273ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611cfe57600080fd5b505afa925050508015611d2f57506040513d601f19601f82011682018060405250810190611d2c9190612da2565b60015b611d6e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d6590612e41565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b8114611dd3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dca90612ed3565b60405180910390fd5b50611ddf83838361204d565b5b505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16611f1d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f1490612f65565b60405180910390fd5b611f25612079565b565b600060019054906101000a900460ff16611f76576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f6d90612f65565b60405180910390fd5b565b600033905090565b6000819050919050565b6000819050919050565b611f9d81611eab565b611fdc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fd390612ff7565b60405180910390fd5b806120097f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b611f80565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b612056836120da565b6000825111806120635750805b15612074576120728383612129565b505b505050565b600060019054906101000a900460ff166120c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120bf90612f65565b60405180910390fd5b6120d86120d3611f78565b611de5565b565b6120e381611f94565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b606061213483611eab565b612173576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161216a90613089565b60405180910390fd5b6000808473ffffffffffffffffffffffffffffffffffffffff168460405161219b9190613123565b600060405180830381855af49150503d80600081146121d6576040519150601f19603f3d011682016040523d82523d6000602084013e6121db565b606091505b509150915061220382826040518060600160405280602781526020016131a16027913961220d565b9250505092915050565b6060831561221d57829050612228565b612227838361222f565b5b9392505050565b6000825111156122425781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612276919061317e565b60405180910390fd5b6040518060a00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600080191681526020016000151581526020016000151581526020016000151581525090565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612311826122cd565b915061231c836122cd565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612351576123506122d7565b5b828201905092915050565b612365816122cd565b82525050565b6000602082019050612380600083018461235c565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006123dd826123b2565b9050919050565b6123ed816123d2565b82525050565b60006123ff83836123e4565b60208301905092915050565b6000602082019050919050565b600061242382612386565b61242d8185612391565b9350612438836123a2565b8060005b8381101561246957815161245088826123f3565b975061245b8361240b565b92505060018101905061243c565b5085935050505092915050565b600060208201905081810360008301526124908184612418565b905092915050565b6000604051905090565b600080fd5b600080fd5b6124b5816123d2565b81146124c057600080fd5b50565b6000813590506124d2816124ac565b92915050565b6000602082840312156124ee576124ed6124a2565b5b60006124fc848285016124c3565b91505092915050565b6000819050919050565b61251881612505565b82525050565b6000602082019050612533600083018461250f565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61258c82612543565b810181811067ffffffffffffffff821117156125ab576125aa612554565b5b80604052505050565b60006125be612498565b90506125ca8282612583565b919050565b600067ffffffffffffffff8211156125ea576125e9612554565b5b6125f382612543565b9050602081019050919050565b82818337600083830152505050565b600061262261261d846125cf565b6125b4565b90508281526020810184848401111561263e5761263d61253e565b5b612649848285612600565b509392505050565b600082601f83011261266657612665612539565b5b813561267684826020860161260f565b91505092915050565b60008060408385031215612696576126956124a2565b5b60006126a4858286016124c3565b925050602083013567ffffffffffffffff8111156126c5576126c46124a7565b5b6126d185828601612651565b9150509250929050565b6126e481612505565b82525050565b60008115159050919050565b6126ff816126ea565b82525050565b60a08201600082015161271b60008501826123e4565b50602082015161272e60208501826126db565b50604082015161274160408501826126f6565b50606082015161275460608501826126f6565b50608082015161276760808501826126f6565b50505050565b600060a0820190506127826000830184612705565b92915050565b612791816123d2565b82525050565b60006020820190506127ac6000830184612788565b92915050565b6127bb816126ea565b82525050565b60006020820190506127d660008301846127b2565b92915050565b600082825260208201905092915050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f64656c656761746563616c6c0000000000000000000000000000000000000000602082015250565b6000612849602c836127dc565b9150612854826127ed565b604082019050919050565b600060208201905081810360008301526128788161283c565b9050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f6163746976652070726f78790000000000000000000000000000000000000000602082015250565b60006128db602c836127dc565b91506128e68261287f565b604082019050919050565b6000602082019050818103600083015261290a816128ce565b9050919050565b7f555550535570677261646561626c653a206d757374206e6f742062652063616c60008201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000602082015250565b600061296d6038836127dc565b915061297882612911565b604082019050919050565b6000602082019050818103600083015261299c81612960565b9050919050565b7f5a4b5f564552494649434154494f4e20414c5245414459205245564f4b454420600082015250565b60006129d96020836127dc565b91506129e4826129a3565b602082019050919050565b60006020820190508181036000830152612a08816129cc565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000612a6b602e836127dc565b9150612a7682612a0f565b604082019050919050565b60006020820190508181036000830152612a9a81612a5e565b9050919050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b6000612add612ad8612ad384612aa1565b612ab8565b612aab565b9050919050565b612aed81612ac2565b82525050565b6000602082019050612b086000830184612ae4565b92915050565b7f4d554c54495f5349474e415455524520414c5245414459205245564f4b454420600082015250565b6000612b446020836127dc565b9150612b4f82612b0e565b602082019050919050565b60006020820190508181036000830152612b7381612b37565b9050919050565b7f5a4b5f564552494649434154494f4e20414c52454144592052455441494e4544600082015250565b6000612bb06020836127dc565b9150612bbb82612b7a565b602082019050919050565b60006020820190508181036000830152612bdf81612ba3565b9050919050565b7f4d554c54495f5349474e415455524520414c52454144592052455441494e454460008201527f2000000000000000000000000000000000000000000000000000000000000000602082015250565b6000612c426021836127dc565b9150612c4d82612be6565b604082019050919050565b60006020820190508181036000830152612c7181612c35565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612cd46026836127dc565b9150612cdf82612c78565b604082019050919050565b60006020820190508181036000830152612d0381612cc7565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612d406020836127dc565b9150612d4b82612d0a565b602082019050919050565b60006020820190508181036000830152612d6f81612d33565b9050919050565b612d7f81612505565b8114612d8a57600080fd5b50565b600081519050612d9c81612d76565b92915050565b600060208284031215612db857612db76124a2565b5b6000612dc684828501612d8d565b91505092915050565b7f45524331393637557067726164653a206e657720696d706c656d656e7461746960008201527f6f6e206973206e6f742055555053000000000000000000000000000000000000602082015250565b6000612e2b602e836127dc565b9150612e3682612dcf565b604082019050919050565b60006020820190508181036000830152612e5a81612e1e565b9050919050565b7f45524331393637557067726164653a20756e737570706f727465642070726f7860008201527f6961626c65555549440000000000000000000000000000000000000000000000602082015250565b6000612ebd6029836127dc565b9150612ec882612e61565b604082019050919050565b60006020820190508181036000830152612eec81612eb0565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000612f4f602b836127dc565b9150612f5a82612ef3565b604082019050919050565b60006020820190508181036000830152612f7e81612f42565b9050919050565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b6000612fe1602d836127dc565b9150612fec82612f85565b604082019050919050565b6000602082019050818103600083015261301081612fd4565b9050919050565b7f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60008201527f6e74726163740000000000000000000000000000000000000000000000000000602082015250565b60006130736026836127dc565b915061307e82613017565b604082019050919050565b600060208201905081810360008301526130a281613066565b9050919050565b600081519050919050565b600081905092915050565b60005b838110156130dd5780820151818401526020810190506130c2565b838111156130ec576000848401525b50505050565b60006130fd826130a9565b61310781856130b4565b93506131178185602086016130bf565b80840191505092915050565b600061312f82846130f2565b915081905092915050565b600081519050919050565b60006131508261313a565b61315a81856127dc565b935061316a8185602086016130bf565b61317381612543565b840191505092915050565b600060208201905081810360008301526131988184613145565b90509291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212201ec6fc2ec5adfefaf7210893f5ac48d1e0c9754b57fb31dbfae3f5d42d29ffd764736f6c63430008090033","opcodes":"PUSH1 0xE0 PUSH1 0x40 MSTORE ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x80 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP PUSH1 0x0 PUSH1 0xC9 SSTORE PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH3 0x4D SWAP1 PUSH3 0x105 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0xA0 SWAP1 DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH3 0x7A SWAP1 PUSH3 0x16C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0xC0 SWAP1 DUP2 MSTORE POP CALLVALUE DUP1 ISZERO PUSH3 0xA3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x183 JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x415050524F564544000000000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0xED PUSH1 0x8 DUP4 PUSH3 0xAA JUMP JUMPDEST SWAP2 POP PUSH3 0xFA DUP3 PUSH3 0xB5 JUMP JUMPDEST PUSH1 0x8 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x112 DUP3 PUSH3 0xDE JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E554C4C00000000000000000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x154 PUSH1 0x4 DUP4 PUSH3 0xAA JUMP JUMPDEST SWAP2 POP PUSH3 0x161 DUP3 PUSH3 0x11C JUMP JUMPDEST PUSH1 0x4 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x179 DUP3 PUSH3 0x145 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH2 0x31FD PUSH3 0x1E4 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x1327 ADD MSTORE PUSH2 0x1624 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x1283 ADD MSTORE DUP2 DUP2 PUSH2 0x16C8 ADD MSTORE PUSH2 0x19AE ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x650 ADD MSTORE DUP2 DUP2 PUSH2 0x6DF ADD MSTORE DUP2 DUP2 PUSH2 0x986 ADD MSTORE DUP2 DUP2 PUSH2 0xA15 ADD MSTORE PUSH2 0xAC5 ADD MSTORE PUSH2 0x31FD PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x117 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8129FC1C GT PUSH2 0xA0 JUMPI DUP1 PUSH4 0xB2E6B912 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xB2E6B912 EQ PUSH2 0x3FB JUMPI DUP1 PUSH4 0xCDE55353 EQ PUSH2 0x426 JUMPI DUP1 PUSH4 0xD117FC99 EQ PUSH2 0x44F JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x48C JUMPI DUP1 PUSH4 0xF536C520 EQ PUSH2 0x4B5 JUMPI PUSH2 0x16E JUMP JUMPDEST DUP1 PUSH4 0x8129FC1C EQ PUSH2 0x33E JUMPI DUP1 PUSH4 0x87D55FF3 EQ PUSH2 0x355 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x37E JUMPI DUP1 PUSH4 0xACFB7980 EQ PUSH2 0x3A9 JUMPI DUP1 PUSH4 0xB2B35EB4 EQ PUSH2 0x3D2 JUMPI PUSH2 0x16E JUMP JUMPDEST DUP1 PUSH4 0x4F1EF286 GT PUSH2 0xE7 JUMPI DUP1 PUSH4 0x4F1EF286 EQ PUSH2 0x27A JUMPI DUP1 PUSH4 0x52D1902D EQ PUSH2 0x296 JUMPI DUP1 PUSH4 0x54EF5C52 EQ PUSH2 0x2C1 JUMPI DUP1 PUSH4 0x6F77926B EQ PUSH2 0x2EA JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x327 JUMPI PUSH2 0x16E JUMP JUMPDEST DUP1 PUSH3 0xCE8E3E EQ PUSH2 0x1C0 JUMPI DUP1 PUSH4 0x1E9F3D5E EQ PUSH2 0x1EB JUMPI DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0x228 JUMPI DUP1 PUSH4 0x391A5BF0 EQ PUSH2 0x251 JUMPI PUSH2 0x16E JUMP JUMPDEST CALLDATASIZE PUSH2 0x16E JUMPI CALLVALUE PUSH1 0xC9 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x12E SWAP2 SWAP1 PUSH2 0x2306 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH32 0x42100F075A78C1DAC886A43652B5C7C76CCA3718758E13E7B726063CD20FE02C CALLVALUE PUSH1 0x40 MLOAD PUSH2 0x164 SWAP2 SWAP1 PUSH2 0x236B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 STOP JUMPDEST CALLVALUE PUSH1 0xC9 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x180 SWAP2 SWAP1 PUSH2 0x2306 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH32 0x6CB8A67804B99A2876F9D2F903120D1607DF4C6BB33315433F4F5B9284BA1588 CALLVALUE PUSH1 0x40 MLOAD PUSH2 0x1B6 SWAP2 SWAP1 PUSH2 0x236B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1D5 PUSH2 0x4DE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E2 SWAP2 SWAP1 PUSH2 0x2476 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x212 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x20D SWAP2 SWAP1 PUSH2 0x24D8 JUMP JUMPDEST PUSH2 0x57A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x21F SWAP2 SWAP1 PUSH2 0x251E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x234 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x24F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x24A SWAP2 SWAP1 PUSH2 0x24D8 JUMP JUMPDEST PUSH2 0x64E JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x25D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x278 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x273 SWAP2 SWAP1 PUSH2 0x24D8 JUMP JUMPDEST PUSH2 0x7D7 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x294 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x28F SWAP2 SWAP1 PUSH2 0x267F JUMP JUMPDEST PUSH2 0x984 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2AB PUSH2 0xAC1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2B8 SWAP2 SWAP1 PUSH2 0x251E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2E3 SWAP2 SWAP1 PUSH2 0x24D8 JUMP JUMPDEST PUSH2 0xB7A JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x311 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x30C SWAP2 SWAP1 PUSH2 0x24D8 JUMP JUMPDEST PUSH2 0xD2E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x31E SWAP2 SWAP1 PUSH2 0x276D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x333 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x33C PUSH2 0xEC0 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x34A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x353 PUSH2 0xED4 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x361 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x37C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x377 SWAP2 SWAP1 PUSH2 0x24D8 JUMP JUMPDEST PUSH2 0x101A JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x38A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x393 PUSH2 0x11C8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3A0 SWAP2 SWAP1 PUSH2 0x2797 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3D0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3CB SWAP2 SWAP1 PUSH2 0x24D8 JUMP JUMPDEST PUSH2 0x11F2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3F4 SWAP2 SWAP1 PUSH2 0x24D8 JUMP JUMPDEST PUSH2 0x13C7 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x407 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x410 PUSH2 0x157C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x41D SWAP2 SWAP1 PUSH2 0x2797 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x432 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x44D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x448 SWAP2 SWAP1 PUSH2 0x24D8 JUMP JUMPDEST PUSH2 0x1593 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x45B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x476 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x471 SWAP2 SWAP1 PUSH2 0x24D8 JUMP JUMPDEST PUSH2 0x1731 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x483 SWAP2 SWAP1 PUSH2 0x27C1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x498 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4B3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4AE SWAP2 SWAP1 PUSH2 0x24D8 JUMP JUMPDEST PUSH2 0x1871 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4DC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4D7 SWAP2 SWAP1 PUSH2 0x24D8 JUMP JUMPDEST PUSH2 0x18F5 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x60 PUSH2 0x4E8 PUSH2 0x1B88 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xCB DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x56C JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x522 JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP DUP1 SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0xCC PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x603 JUMPI PUSH1 0x40 MLOAD PUSH32 0x551B5FEC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xCC PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x6DD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6D4 SWAP1 PUSH2 0x285F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x71C PUSH2 0x1C06 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x772 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x769 SWAP1 PUSH2 0x28F1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x77B DUP2 PUSH2 0x1C5D JUMP JUMPDEST PUSH2 0x7D4 DUP2 PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x79A JUMPI PUSH2 0x799 PUSH2 0x2554 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x7CC JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP PUSH1 0x0 PUSH2 0x1C68 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x7DF PUSH2 0x1B88 JUMP JUMPDEST DUP1 PUSH1 0xCC PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x866 JUMPI PUSH1 0x40 MLOAD PUSH32 0x551B5FEC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0xCC PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x2 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x8ED JUMPI PUSH1 0x40 MLOAD PUSH32 0xFBC601ED00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0xCC PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0xDD8163D7C65D364E6E39C7E0FC2C8812D436FF8B4BC35E2F8DB2B39C0662E2A4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x977 SWAP2 SWAP1 PUSH2 0x2797 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xA13 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA0A SWAP1 PUSH2 0x285F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xA52 PUSH2 0x1C06 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xAA8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA9F SWAP1 PUSH2 0x28F1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xAB1 DUP3 PUSH2 0x1C5D JUMP JUMPDEST PUSH2 0xABD DUP3 DUP3 PUSH1 0x1 PUSH2 0x1C68 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xB51 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB48 SWAP1 PUSH2 0x2983 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH1 0x0 SHL SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xB82 PUSH2 0x1B88 JUMP JUMPDEST DUP1 PUSH1 0xCC PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0xC09 JUMPI PUSH1 0x40 MLOAD PUSH32 0x551B5FEC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xCC PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0xC98 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC8F SWAP1 PUSH2 0x29EF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0xCC PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x7665796EA03D3FF112C33B16CEF72D11283B08518156FD5545A4511E6832E372 DUP3 PUSH1 0x40 MLOAD PUSH2 0xD22 SWAP2 SWAP1 PUSH2 0x2797 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH2 0xD36 PUSH2 0x227F JUMP JUMPDEST DUP2 PUSH1 0xCC PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0xDBD JUMPI PUSH1 0x40 MLOAD PUSH32 0x551B5FEC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xCC PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD PUSH1 0x2 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE POP POP SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xEC8 PUSH2 0x1B88 JUMP JUMPDEST PUSH2 0xED2 PUSH1 0x0 PUSH2 0x1DE5 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 POP DUP1 DUP1 ISZERO PUSH2 0xF05 JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND LT JUMPDEST DUP1 PUSH2 0xF32 JUMPI POP PUSH2 0xF14 ADDRESS PUSH2 0x1EAB JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0xF31 JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND EQ JUMPDEST JUMPDEST PUSH2 0xF71 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF68 SWAP1 PUSH2 0x2A81 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0xFAE JUMPI PUSH1 0x1 PUSH1 0x0 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH2 0xFB6 PUSH2 0x1ECE JUMP JUMPDEST PUSH2 0xFBE PUSH2 0x1F27 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1017 JUMPI PUSH1 0x0 DUP1 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0x1 PUSH1 0x40 MLOAD PUSH2 0x100E SWAP2 SWAP1 PUSH2 0x2AF3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP JUMP JUMPDEST PUSH2 0x1022 PUSH2 0x1B88 JUMP JUMPDEST DUP1 PUSH1 0xCC PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x10A9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x551B5FEC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0xCC PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x2 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x1131 JUMPI PUSH1 0x40 MLOAD PUSH32 0xE174C66C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xCC PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x511D3BD421D86E995C1E2E4B179B681F67697E06C363A32945F11569520DA052 DUP4 PUSH1 0x40 MLOAD PUSH2 0x11BB SWAP2 SWAP1 PUSH2 0x2797 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x11FA PUSH2 0x1B88 JUMP JUMPDEST DUP1 PUSH1 0xCC PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1281 JUMPI PUSH1 0x40 MLOAD PUSH32 0x551B5FEC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x0 PUSH1 0xCC PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD EQ PUSH2 0x1325 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x131C SWAP1 PUSH2 0x2B5A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x0 PUSH1 0xCC PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP PUSH32 0xC75DBD8CE00E37DF747F1FE930658F85D9D198D29CCC1497D5BD5803915F1063 DUP3 PUSH1 0x40 MLOAD PUSH2 0x13BB SWAP2 SWAP1 PUSH2 0x2797 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH2 0x13CF PUSH2 0x1B88 JUMP JUMPDEST DUP1 PUSH1 0xCC PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1456 JUMPI PUSH1 0x40 MLOAD PUSH32 0x551B5FEC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xCC PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x14E6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14DD SWAP1 PUSH2 0x2BC6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xCC PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0xF8AE011D8A06A2397C554EF5E6BB3790B25410A7926F10E37F4306AAA20AD7E5 DUP3 PUSH1 0x40 MLOAD PUSH2 0x1570 SWAP2 SWAP1 PUSH2 0x2797 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1586 PUSH2 0x1B88 JUMP JUMPDEST PUSH2 0x158E PUSH2 0x11C8 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x159B PUSH2 0x1B88 JUMP JUMPDEST DUP1 PUSH1 0xCC PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1622 JUMPI PUSH1 0x40 MLOAD PUSH32 0x551B5FEC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x0 PUSH1 0xCC PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD EQ PUSH2 0x16C6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x16BD SWAP1 PUSH2 0x2C58 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x0 PUSH1 0xCC PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0xCC PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x17BA JUMPI PUSH1 0x40 MLOAD PUSH32 0x551B5FEC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xCC PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x2 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x1818 JUMPI PUSH1 0x0 SWAP2 POP PUSH2 0x186B JUMP JUMPDEST PUSH1 0xCC PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP2 POP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1879 PUSH2 0x1B88 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x18E9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x18E0 SWAP1 PUSH2 0x2CEA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x18F2 DUP2 PUSH2 0x1DE5 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x18FD PUSH2 0x1B88 JUMP JUMPDEST DUP1 PUSH1 0xCC PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x1985 JUMPI PUSH1 0x40 MLOAD PUSH32 0x845F7CBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE POP PUSH1 0xCC PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD PUSH1 0x2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP SWAP1 POP POP PUSH1 0xCB DUP3 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xAFA89AEC2D2FD28210E1B3F83A2862FEBDAC7DB6E14888B9913882A46FEF18A5 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH2 0x1B90 PUSH2 0x1F78 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1BAE PUSH2 0x11C8 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1C04 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1BFB SWAP1 PUSH2 0x2D56 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C34 PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH1 0x0 SHL PUSH2 0x1F80 JUMP JUMPDEST PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x1C65 PUSH2 0x1B88 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x1C94 PUSH32 0x4910FDFA16FED3260ED0E7147F7CC6DA11A60208B5B9406D12A635614FFD9143 PUSH1 0x0 SHL PUSH2 0x1F8A JUMP JUMPDEST PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x1CB8 JUMPI PUSH2 0x1CB3 DUP4 PUSH2 0x1F94 JUMP JUMPDEST PUSH2 0x1DE0 JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x52D1902D PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1CFE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1D2F JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1D2C SWAP2 SWAP1 PUSH2 0x2DA2 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1D6E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D65 SWAP1 PUSH2 0x2E41 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH1 0x0 SHL DUP2 EQ PUSH2 0x1DD3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1DCA SWAP1 PUSH2 0x2ED3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH2 0x1DDF DUP4 DUP4 DUP4 PUSH2 0x204D JUMP JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1F1D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F14 SWAP1 PUSH2 0x2F65 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1F25 PUSH2 0x2079 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1F76 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F6D SWAP1 PUSH2 0x2F65 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1F9D DUP2 PUSH2 0x1EAB JUMP JUMPDEST PUSH2 0x1FDC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1FD3 SWAP1 PUSH2 0x2FF7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH2 0x2009 PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH1 0x0 SHL PUSH2 0x1F80 JUMP JUMPDEST PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH2 0x2056 DUP4 PUSH2 0x20DA JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT DUP1 PUSH2 0x2063 JUMPI POP DUP1 JUMPDEST ISZERO PUSH2 0x2074 JUMPI PUSH2 0x2072 DUP4 DUP4 PUSH2 0x2129 JUMP JUMPDEST POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x20C8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x20BF SWAP1 PUSH2 0x2F65 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x20D8 PUSH2 0x20D3 PUSH2 0x1F78 JUMP JUMPDEST PUSH2 0x1DE5 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x20E3 DUP2 PUSH2 0x1F94 JUMP JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2134 DUP4 PUSH2 0x1EAB JUMP JUMPDEST PUSH2 0x2173 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x216A SWAP1 PUSH2 0x3089 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH1 0x40 MLOAD PUSH2 0x219B SWAP2 SWAP1 PUSH2 0x3123 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x21D6 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x21DB JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x2203 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x31A1 PUSH1 0x27 SWAP2 CODECOPY PUSH2 0x220D JUMP JUMPDEST SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x221D JUMPI DUP3 SWAP1 POP PUSH2 0x2228 JUMP JUMPDEST PUSH2 0x2227 DUP4 DUP4 PUSH2 0x222F JUMP JUMPDEST JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT ISZERO PUSH2 0x2242 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2276 SWAP2 SWAP1 PUSH2 0x317E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2311 DUP3 PUSH2 0x22CD JUMP JUMPDEST SWAP2 POP PUSH2 0x231C DUP4 PUSH2 0x22CD JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0x2351 JUMPI PUSH2 0x2350 PUSH2 0x22D7 JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2365 DUP2 PUSH2 0x22CD JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2380 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x235C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x23DD DUP3 PUSH2 0x23B2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x23ED DUP2 PUSH2 0x23D2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x23FF DUP4 DUP4 PUSH2 0x23E4 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2423 DUP3 PUSH2 0x2386 JUMP JUMPDEST PUSH2 0x242D DUP2 DUP6 PUSH2 0x2391 JUMP JUMPDEST SWAP4 POP PUSH2 0x2438 DUP4 PUSH2 0x23A2 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2469 JUMPI DUP2 MLOAD PUSH2 0x2450 DUP9 DUP3 PUSH2 0x23F3 JUMP JUMPDEST SWAP8 POP PUSH2 0x245B DUP4 PUSH2 0x240B JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x243C JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2490 DUP2 DUP5 PUSH2 0x2418 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x24B5 DUP2 PUSH2 0x23D2 JUMP JUMPDEST DUP2 EQ PUSH2 0x24C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x24D2 DUP2 PUSH2 0x24AC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x24EE JUMPI PUSH2 0x24ED PUSH2 0x24A2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x24FC DUP5 DUP3 DUP6 ADD PUSH2 0x24C3 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2518 DUP2 PUSH2 0x2505 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2533 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x250F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x258C DUP3 PUSH2 0x2543 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x25AB JUMPI PUSH2 0x25AA PUSH2 0x2554 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x25BE PUSH2 0x2498 JUMP JUMPDEST SWAP1 POP PUSH2 0x25CA DUP3 DUP3 PUSH2 0x2583 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x25EA JUMPI PUSH2 0x25E9 PUSH2 0x2554 JUMP JUMPDEST JUMPDEST PUSH2 0x25F3 DUP3 PUSH2 0x2543 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2622 PUSH2 0x261D DUP5 PUSH2 0x25CF JUMP JUMPDEST PUSH2 0x25B4 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x263E JUMPI PUSH2 0x263D PUSH2 0x253E JUMP JUMPDEST JUMPDEST PUSH2 0x2649 DUP5 DUP3 DUP6 PUSH2 0x2600 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2666 JUMPI PUSH2 0x2665 PUSH2 0x2539 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2676 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x260F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2696 JUMPI PUSH2 0x2695 PUSH2 0x24A2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x26A4 DUP6 DUP3 DUP7 ADD PUSH2 0x24C3 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x26C5 JUMPI PUSH2 0x26C4 PUSH2 0x24A7 JUMP JUMPDEST JUMPDEST PUSH2 0x26D1 DUP6 DUP3 DUP7 ADD PUSH2 0x2651 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x26E4 DUP2 PUSH2 0x2505 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x26FF DUP2 PUSH2 0x26EA JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x271B PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x23E4 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x272E PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x26DB JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x2741 PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x26F6 JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0x2754 PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0x26F6 JUMP JUMPDEST POP PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0x2767 PUSH1 0x80 DUP6 ADD DUP3 PUSH2 0x26F6 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0x2782 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2705 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2791 DUP2 PUSH2 0x23D2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x27AC PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2788 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x27BB DUP2 PUSH2 0x26EA JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x27D6 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x27B2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x64656C656761746563616C6C0000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2849 PUSH1 0x2C DUP4 PUSH2 0x27DC JUMP JUMPDEST SWAP2 POP PUSH2 0x2854 DUP3 PUSH2 0x27ED JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2878 DUP2 PUSH2 0x283C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6163746976652070726F78790000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x28DB PUSH1 0x2C DUP4 PUSH2 0x27DC JUMP JUMPDEST SWAP2 POP PUSH2 0x28E6 DUP3 PUSH2 0x287F JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x290A DUP2 PUSH2 0x28CE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x555550535570677261646561626C653A206D757374206E6F742062652063616C PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6C6564207468726F7567682064656C656761746563616C6C0000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x296D PUSH1 0x38 DUP4 PUSH2 0x27DC JUMP JUMPDEST SWAP2 POP PUSH2 0x2978 DUP3 PUSH2 0x2911 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x299C DUP2 PUSH2 0x2960 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5A4B5F564552494649434154494F4E20414C5245414459205245564F4B454420 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x29D9 PUSH1 0x20 DUP4 PUSH2 0x27DC JUMP JUMPDEST SWAP2 POP PUSH2 0x29E4 DUP3 PUSH2 0x29A3 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2A08 DUP2 PUSH2 0x29CC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A6B PUSH1 0x2E DUP4 PUSH2 0x27DC JUMP JUMPDEST SWAP2 POP PUSH2 0x2A76 DUP3 PUSH2 0x2A0F JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2A9A DUP2 PUSH2 0x2A5E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2ADD PUSH2 0x2AD8 PUSH2 0x2AD3 DUP5 PUSH2 0x2AA1 JUMP JUMPDEST PUSH2 0x2AB8 JUMP JUMPDEST PUSH2 0x2AAB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2AED DUP2 PUSH2 0x2AC2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2B08 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2AE4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4D554C54495F5349474E415455524520414C5245414459205245564F4B454420 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B44 PUSH1 0x20 DUP4 PUSH2 0x27DC JUMP JUMPDEST SWAP2 POP PUSH2 0x2B4F DUP3 PUSH2 0x2B0E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2B73 DUP2 PUSH2 0x2B37 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5A4B5F564552494649434154494F4E20414C52454144592052455441494E4544 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2BB0 PUSH1 0x20 DUP4 PUSH2 0x27DC JUMP JUMPDEST SWAP2 POP PUSH2 0x2BBB DUP3 PUSH2 0x2B7A JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2BDF DUP2 PUSH2 0x2BA3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4D554C54495F5349474E415455524520414C52454144592052455441494E4544 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x2000000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2C42 PUSH1 0x21 DUP4 PUSH2 0x27DC JUMP JUMPDEST SWAP2 POP PUSH2 0x2C4D DUP3 PUSH2 0x2BE6 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2C71 DUP2 PUSH2 0x2C35 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2CD4 PUSH1 0x26 DUP4 PUSH2 0x27DC JUMP JUMPDEST SWAP2 POP PUSH2 0x2CDF DUP3 PUSH2 0x2C78 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2D03 DUP2 PUSH2 0x2CC7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2D40 PUSH1 0x20 DUP4 PUSH2 0x27DC JUMP JUMPDEST SWAP2 POP PUSH2 0x2D4B DUP3 PUSH2 0x2D0A JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2D6F DUP2 PUSH2 0x2D33 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2D7F DUP2 PUSH2 0x2505 JUMP JUMPDEST DUP2 EQ PUSH2 0x2D8A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x2D9C DUP2 PUSH2 0x2D76 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2DB8 JUMPI PUSH2 0x2DB7 PUSH2 0x24A2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2DC6 DUP5 DUP3 DUP6 ADD PUSH2 0x2D8D JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x45524331393637557067726164653A206E657720696D706C656D656E74617469 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F6E206973206E6F742055555053000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E2B PUSH1 0x2E DUP4 PUSH2 0x27DC JUMP JUMPDEST SWAP2 POP PUSH2 0x2E36 DUP3 PUSH2 0x2DCF JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2E5A DUP2 PUSH2 0x2E1E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524331393637557067726164653A20756E737570706F727465642070726F78 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6961626C65555549440000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2EBD PUSH1 0x29 DUP4 PUSH2 0x27DC JUMP JUMPDEST SWAP2 POP PUSH2 0x2EC8 DUP3 PUSH2 0x2E61 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2EEC DUP2 PUSH2 0x2EB0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F4F PUSH1 0x2B DUP4 PUSH2 0x27DC JUMP JUMPDEST SWAP2 POP PUSH2 0x2F5A DUP3 PUSH2 0x2EF3 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2F7E DUP2 PUSH2 0x2F42 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F74206120636F6E747261637400000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2FE1 PUSH1 0x2D DUP4 PUSH2 0x27DC JUMP JUMPDEST SWAP2 POP PUSH2 0x2FEC DUP3 PUSH2 0x2F85 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3010 DUP2 PUSH2 0x2FD4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x416464726573733A2064656C65676174652063616C6C20746F206E6F6E2D636F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6E74726163740000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3073 PUSH1 0x26 DUP4 PUSH2 0x27DC JUMP JUMPDEST SWAP2 POP PUSH2 0x307E DUP3 PUSH2 0x3017 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x30A2 DUP2 PUSH2 0x3066 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x30DD JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x30C2 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x30EC JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x30FD DUP3 PUSH2 0x30A9 JUMP JUMPDEST PUSH2 0x3107 DUP2 DUP6 PUSH2 0x30B4 JUMP JUMPDEST SWAP4 POP PUSH2 0x3117 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x30BF JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x312F DUP3 DUP5 PUSH2 0x30F2 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3150 DUP3 PUSH2 0x313A JUMP JUMPDEST PUSH2 0x315A DUP2 DUP6 PUSH2 0x27DC JUMP JUMPDEST SWAP4 POP PUSH2 0x316A DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x30BF JUMP JUMPDEST PUSH2 0x3173 DUP2 PUSH2 0x2543 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3198 DUP2 DUP5 PUSH2 0x3145 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP INVALID COINBASE PUSH5 0x6472657373 GASPRICE KECCAK256 PUSH13 0x6F772D6C6576656C2064656C65 PUSH8 0x6174652063616C6C KECCAK256 PUSH7 0x61696C6564A264 PUSH10 0x706673582212201EC6FC 0x2E 0xC5 0xAD INVALID STATICCALL 0xF7 0x21 ADDMOD SWAP4 CREATE2 0xAC BASEFEE 0xD1 0xE0 0xC9 PUSH22 0x4B57FB31DBFAE3F5D42D29FFD764736F6C6343000809 STOP CALLER ","sourceMap":"669:5730:31:-:0;;;1332:4:5;1289:48;;;;;;;;;885:1:31;852:34;;1026:28;;;;;;;:::i;:::-;;;;;;;;;;;;;1016:39;;;;;;970:85;;;;;1123:24;;;;;;;:::i;:::-;;;;;;;;;;;;;1113:35;;;;;;1061:87;;;;;669:5730;;;;;;;;;;;;7:148:33;109:11;146:3;131:18;;7:148;;;;:::o;161:158::-;301:10;297:1;289:6;285:14;278:34;161:158;:::o;325:400::-;485:3;506:84;588:1;583:3;506:84;:::i;:::-;499:91;;599:93;688:3;599:93;:::i;:::-;717:1;712:3;708:11;701:18;;325:400;;;:::o;731:381::-;916:3;938:148;1082:3;938:148;:::i;:::-;931:155;;1103:3;1096:10;;731:381;;;:::o;1118:154::-;1258:6;1254:1;1246:6;1242:14;1235:30;1118:154;:::o;1278:400::-;1438:3;1459:84;1541:1;1536:3;1459:84;:::i;:::-;1452:91;;1552:93;1641:3;1552:93;:::i;:::-;1670:1;1665:3;1661:11;1654:18;;1278:400;;;:::o;1684:381::-;1869:3;1891:148;2035:3;1891:148;:::i;:::-;1884:155;;2056:3;2049:10;;1684:381;;;:::o;669:5730:31:-;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_5900":{"entryPoint":null,"id":5900,"parameterSlots":0,"returnSlots":0},"@_5914":{"entryPoint":null,"id":5914,"parameterSlots":0,"returnSlots":0},"@__Ownable_init_26":{"entryPoint":7886,"id":26,"parameterSlots":0,"returnSlots":0},"@__Ownable_init_unchained_37":{"entryPoint":8313,"id":37,"parameterSlots":0,"returnSlots":0},"@__UUPSUpgradeable_init_707":{"entryPoint":7975,"id":707,"parameterSlots":0,"returnSlots":0},"@_authorizeUpgrade_6139":{"entryPoint":7261,"id":6139,"parameterSlots":1,"returnSlots":0},"@_checkOwner_68":{"entryPoint":7048,"id":68,"parameterSlots":0,"returnSlots":0},"@_functionDelegateCall_504":{"entryPoint":8489,"id":504,"parameterSlots":2,"returnSlots":1},"@_getImplementation_188":{"entryPoint":7174,"id":188,"parameterSlots":0,"returnSlots":1},"@_msgSender_2773":{"entryPoint":8056,"id":2773,"parameterSlots":0,"returnSlots":1},"@_revert_2589":{"entryPoint":8751,"id":2589,"parameterSlots":2,"returnSlots":0},"@_setImplementation_212":{"entryPoint":8084,"id":212,"parameterSlots":1,"returnSlots":0},"@_transferOwnership_125":{"entryPoint":7653,"id":125,"parameterSlots":1,"returnSlots":0},"@_upgradeToAndCallUUPS_308":{"entryPoint":7272,"id":308,"parameterSlots":3,"returnSlots":0},"@_upgradeToAndCall_255":{"entryPoint":8269,"id":255,"parameterSlots":3,"returnSlots":0},"@_upgradeTo_227":{"entryPoint":8410,"id":227,"parameterSlots":1,"returnSlots":0},"@createProfile_5947":{"entryPoint":6389,"id":5947,"parameterSlots":1,"returnSlots":0},"@getAddressSlot_2888":{"entryPoint":8064,"id":2888,"parameterSlots":1,"returnSlots":1},"@getAdminAddress_6158":{"entryPoint":5500,"id":6158,"parameterSlots":0,"returnSlots":1},"@getBooleanSlot_2899":{"entryPoint":8074,"id":2899,"parameterSlots":1,"returnSlots":1},"@getMultiSig_6233":{"entryPoint":1402,"id":6233,"parameterSlots":1,"returnSlots":1},"@getUser_6174":{"entryPoint":3374,"id":6174,"parameterSlots":1,"returnSlots":1},"@getUsers_6192":{"entryPoint":1246,"id":6192,"parameterSlots":0,"returnSlots":1},"@getVerifiedUser_6217":{"entryPoint":5937,"id":6217,"parameterSlots":1,"returnSlots":1},"@initialize_6130":{"entryPoint":3796,"id":6130,"parameterSlots":0,"returnSlots":0},"@isContract_2324":{"entryPoint":7851,"id":2324,"parameterSlots":1,"returnSlots":1},"@owner_54":{"entryPoint":4552,"id":54,"parameterSlots":0,"returnSlots":1},"@proxiableUUID_770":{"entryPoint":2753,"id":770,"parameterSlots":0,"returnSlots":1},"@renounceOwnership_82":{"entryPoint":3776,"id":82,"parameterSlots":0,"returnSlots":0},"@retainMultiSignature_6025":{"entryPoint":5523,"id":6025,"parameterSlots":1,"returnSlots":0},"@retainVerification_5972":{"entryPoint":2007,"id":5972,"parameterSlots":1,"returnSlots":0},"@retainZkVerification_6118":{"entryPoint":5063,"id":6118,"parameterSlots":1,"returnSlots":0},"@revokeMultiSignature_6057":{"entryPoint":4594,"id":6057,"parameterSlots":1,"returnSlots":0},"@revokeVerifiedUser_5997":{"entryPoint":4122,"id":5997,"parameterSlots":1,"returnSlots":0},"@revokeZkVerification_6087":{"entryPoint":2938,"id":6087,"parameterSlots":1,"returnSlots":0},"@transferOwnership_105":{"entryPoint":6257,"id":105,"parameterSlots":1,"returnSlots":0},"@upgradeToAndCall_813":{"entryPoint":2436,"id":813,"parameterSlots":2,"returnSlots":0},"@upgradeTo_792":{"entryPoint":1614,"id":792,"parameterSlots":1,"returnSlots":0},"@verifyCallResult_2569":{"entryPoint":8717,"id":2569,"parameterSlots":3,"returnSlots":1},"abi_decode_available_length_t_bytes_memory_ptr":{"entryPoint":9743,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_address":{"entryPoint":9411,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes32_fromMemory":{"entryPoint":11661,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes_memory_ptr":{"entryPoint":9809,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":9432,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_bytes_memory_ptr":{"entryPoint":9855,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32_fromMemory":{"entryPoint":11682,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encodeUpdatedPos_t_address_to_t_address":{"entryPoint":9203,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_to_t_address":{"entryPoint":9188,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":10120,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_array$_t_address_$dyn_memory_ptr_to_t_array$_t_address_$dyn_memory_ptr_fromStack":{"entryPoint":9240,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_bool_to_t_bool":{"entryPoint":9974,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":10162,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32":{"entryPoint":9947,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_fromStack":{"entryPoint":9487,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":12530,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_rational_1_by_1_to_t_uint8_fromStack":{"entryPoint":10980,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":12613,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_08d0c5f0cc66c73f518001e6f234dffe5541b83b4743ef2eec0db170576be85f_to_t_string_memory_ptr_fromStack":{"entryPoint":10700,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack":{"entryPoint":11463,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_2ec99e6d611129d5d446401a53002d56de11cd1961b140eb64e5ce86a4c14361_to_t_string_memory_ptr_fromStack":{"entryPoint":11317,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb_to_t_string_memory_ptr_fromStack":{"entryPoint":10300,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434_to_t_string_memory_ptr_fromStack":{"entryPoint":10446,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4_to_t_string_memory_ptr_fromStack":{"entryPoint":10592,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_6e8e6a900089259539cd5a4ffb1559532588f15e739713ca236a69dd15dad28d_to_t_string_memory_ptr_fromStack":{"entryPoint":11171,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c_to_t_string_memory_ptr_fromStack":{"entryPoint":11952,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack":{"entryPoint":10846,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24_to_t_string_memory_ptr_fromStack":{"entryPoint":11806,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65_to_t_string_memory_ptr_fromStack":{"entryPoint":12244,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack":{"entryPoint":11571,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520_to_t_string_memory_ptr_fromStack":{"entryPoint":12390,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack":{"entryPoint":12098,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_dc07914abe0b3d10797b2cb887fa8b14cfc1681b47ac3540e1f0ebac6c5c8771_to_t_string_memory_ptr_fromStack":{"entryPoint":11063,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_struct$_User_$6247_memory_ptr_to_t_struct$_User_$6247_memory_ptr_fromStack":{"entryPoint":9989,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":9052,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":12579,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":10135,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":9334,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":10177,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":9502,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed":{"entryPoint":10995,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":12670,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_08d0c5f0cc66c73f518001e6f234dffe5541b83b4743ef2eec0db170576be85f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":10735,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":11498,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_2ec99e6d611129d5d446401a53002d56de11cd1961b140eb64e5ce86a4c14361__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":11352,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":10335,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":10481,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":10627,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6e8e6a900089259539cd5a4ffb1559532588f15e739713ca236a69dd15dad28d__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":11206,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":11987,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":10881,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":11841,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":12279,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":11606,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":12425,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":12133,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_dc07914abe0b3d10797b2cb887fa8b14cfc1681b47ac3540e1f0ebac6c5c8771__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":11098,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_struct$_User_$6247_memory_ptr__to_t_struct$_User_$6247_memory_ptr__fromStack_reversed":{"entryPoint":10093,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":9067,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":9652,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":9368,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_bytes_memory_ptr":{"entryPoint":9679,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_t_array$_t_address_$dyn_memory_ptr":{"entryPoint":9122,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_array$_t_address_$dyn_memory_ptr":{"entryPoint":9094,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_bytes_memory_ptr":{"entryPoint":12457,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":12602,"id":null,"parameterSlots":1,"returnSlots":1},"array_nextElement_t_array$_t_address_$dyn_memory_ptr":{"entryPoint":9227,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_array$_t_address_$dyn_memory_ptr_fromStack":{"entryPoint":9105,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":12468,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":10204,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":8966,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":9170,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":9962,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":9477,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_rational_1_by_1":{"entryPoint":10913,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":9138,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":8909,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint8":{"entryPoint":10923,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_rational_1_by_1_to_t_uint8":{"entryPoint":10946,"id":null,"parameterSlots":1,"returnSlots":1},"copy_calldata_to_memory":{"entryPoint":9728,"id":null,"parameterSlots":3,"returnSlots":0},"copy_memory_to_memory":{"entryPoint":12479,"id":null,"parameterSlots":3,"returnSlots":0},"finalize_allocation":{"entryPoint":9603,"id":null,"parameterSlots":2,"returnSlots":0},"identity":{"entryPoint":10936,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":8919,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":9556,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":9529,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":9534,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":9383,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":9378,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":9539,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_08d0c5f0cc66c73f518001e6f234dffe5541b83b4743ef2eec0db170576be85f":{"entryPoint":10659,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe":{"entryPoint":11384,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_2ec99e6d611129d5d446401a53002d56de11cd1961b140eb64e5ce86a4c14361":{"entryPoint":11238,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb":{"entryPoint":10221,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434":{"entryPoint":10367,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4":{"entryPoint":10513,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_6e8e6a900089259539cd5a4ffb1559532588f15e739713ca236a69dd15dad28d":{"entryPoint":11130,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c":{"entryPoint":11873,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759":{"entryPoint":10767,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24":{"entryPoint":11727,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65":{"entryPoint":12165,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe":{"entryPoint":11530,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520":{"entryPoint":12311,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b":{"entryPoint":12019,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_dc07914abe0b3d10797b2cb887fa8b14cfc1681b47ac3540e1f0ebac6c5c8771":{"entryPoint":11022,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":9388,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes32":{"entryPoint":11638,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:28788:33","statements":[{"body":{"nodeType":"YulBlock","src":"52:32:33","statements":[{"nodeType":"YulAssignment","src":"62:16:33","value":{"name":"value","nodeType":"YulIdentifier","src":"73:5:33"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"62:7:33"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"34:5:33","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"44:7:33","type":""}],"src":"7:77:33"},{"body":{"nodeType":"YulBlock","src":"118:152:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"135:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"138:77:33","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"128:6:33"},"nodeType":"YulFunctionCall","src":"128:88:33"},"nodeType":"YulExpressionStatement","src":"128:88:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"232:1:33","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"235:4:33","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"225:6:33"},"nodeType":"YulFunctionCall","src":"225:15:33"},"nodeType":"YulExpressionStatement","src":"225:15:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"256:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"259:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"249:6:33"},"nodeType":"YulFunctionCall","src":"249:15:33"},"nodeType":"YulExpressionStatement","src":"249:15:33"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"90:180:33"},{"body":{"nodeType":"YulBlock","src":"320:261:33","statements":[{"nodeType":"YulAssignment","src":"330:25:33","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"353:1:33"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"335:17:33"},"nodeType":"YulFunctionCall","src":"335:20:33"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"330:1:33"}]},{"nodeType":"YulAssignment","src":"364:25:33","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"387:1:33"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"369:17:33"},"nodeType":"YulFunctionCall","src":"369:20:33"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"364:1:33"}]},{"body":{"nodeType":"YulBlock","src":"527:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"529:16:33"},"nodeType":"YulFunctionCall","src":"529:18:33"},"nodeType":"YulExpressionStatement","src":"529:18:33"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"448:1:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"455:66:33","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"},{"name":"y","nodeType":"YulIdentifier","src":"523:1:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"451:3:33"},"nodeType":"YulFunctionCall","src":"451:74:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"445:2:33"},"nodeType":"YulFunctionCall","src":"445:81:33"},"nodeType":"YulIf","src":"442:107:33"},{"nodeType":"YulAssignment","src":"559:16:33","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"570:1:33"},{"name":"y","nodeType":"YulIdentifier","src":"573:1:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"566:3:33"},"nodeType":"YulFunctionCall","src":"566:9:33"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"559:3:33"}]}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"307:1:33","type":""},{"name":"y","nodeType":"YulTypedName","src":"310:1:33","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"316:3:33","type":""}],"src":"276:305:33"},{"body":{"nodeType":"YulBlock","src":"652:53:33","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"669:3:33"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"692:5:33"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"674:17:33"},"nodeType":"YulFunctionCall","src":"674:24:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"662:6:33"},"nodeType":"YulFunctionCall","src":"662:37:33"},"nodeType":"YulExpressionStatement","src":"662:37:33"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"640:5:33","type":""},{"name":"pos","nodeType":"YulTypedName","src":"647:3:33","type":""}],"src":"587:118:33"},{"body":{"nodeType":"YulBlock","src":"809:124:33","statements":[{"nodeType":"YulAssignment","src":"819:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"831:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"842:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"827:3:33"},"nodeType":"YulFunctionCall","src":"827:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"819:4:33"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"899:6:33"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"912:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"923:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"908:3:33"},"nodeType":"YulFunctionCall","src":"908:17:33"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"855:43:33"},"nodeType":"YulFunctionCall","src":"855:71:33"},"nodeType":"YulExpressionStatement","src":"855:71:33"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"781:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"793:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"804:4:33","type":""}],"src":"711:222:33"},{"body":{"nodeType":"YulBlock","src":"1013:40:33","statements":[{"nodeType":"YulAssignment","src":"1024:22:33","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1040:5:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1034:5:33"},"nodeType":"YulFunctionCall","src":"1034:12:33"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1024:6:33"}]}]},"name":"array_length_t_array$_t_address_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"996:5:33","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"1006:6:33","type":""}],"src":"939:114:33"},{"body":{"nodeType":"YulBlock","src":"1170:73:33","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1187:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"1192:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1180:6:33"},"nodeType":"YulFunctionCall","src":"1180:19:33"},"nodeType":"YulExpressionStatement","src":"1180:19:33"},{"nodeType":"YulAssignment","src":"1208:29:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1227:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"1232:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1223:3:33"},"nodeType":"YulFunctionCall","src":"1223:14:33"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"1208:11:33"}]}]},"name":"array_storeLengthForEncoding_t_array$_t_address_$dyn_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"1142:3:33","type":""},{"name":"length","nodeType":"YulTypedName","src":"1147:6:33","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"1158:11:33","type":""}],"src":"1059:184:33"},{"body":{"nodeType":"YulBlock","src":"1321:60:33","statements":[{"nodeType":"YulAssignment","src":"1331:11:33","value":{"name":"ptr","nodeType":"YulIdentifier","src":"1339:3:33"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"1331:4:33"}]},{"nodeType":"YulAssignment","src":"1352:22:33","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"1364:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"1369:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1360:3:33"},"nodeType":"YulFunctionCall","src":"1360:14:33"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"1352:4:33"}]}]},"name":"array_dataslot_t_array$_t_address_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"1308:3:33","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"1316:4:33","type":""}],"src":"1249:132:33"},{"body":{"nodeType":"YulBlock","src":"1432:81:33","statements":[{"nodeType":"YulAssignment","src":"1442:65:33","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1457:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"1464:42:33","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1453:3:33"},"nodeType":"YulFunctionCall","src":"1453:54:33"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1442:7:33"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1414:5:33","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1424:7:33","type":""}],"src":"1387:126:33"},{"body":{"nodeType":"YulBlock","src":"1564:51:33","statements":[{"nodeType":"YulAssignment","src":"1574:35:33","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1603:5:33"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"1585:17:33"},"nodeType":"YulFunctionCall","src":"1585:24:33"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1574:7:33"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1546:5:33","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1556:7:33","type":""}],"src":"1519:96:33"},{"body":{"nodeType":"YulBlock","src":"1676:53:33","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1693:3:33"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1716:5:33"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"1698:17:33"},"nodeType":"YulFunctionCall","src":"1698:24:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1686:6:33"},"nodeType":"YulFunctionCall","src":"1686:37:33"},"nodeType":"YulExpressionStatement","src":"1686:37:33"}]},"name":"abi_encode_t_address_to_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1664:5:33","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1671:3:33","type":""}],"src":"1621:108:33"},{"body":{"nodeType":"YulBlock","src":"1815:99:33","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1859:6:33"},{"name":"pos","nodeType":"YulIdentifier","src":"1867:3:33"}],"functionName":{"name":"abi_encode_t_address_to_t_address","nodeType":"YulIdentifier","src":"1825:33:33"},"nodeType":"YulFunctionCall","src":"1825:46:33"},"nodeType":"YulExpressionStatement","src":"1825:46:33"},{"nodeType":"YulAssignment","src":"1880:28:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1898:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"1903:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1894:3:33"},"nodeType":"YulFunctionCall","src":"1894:14:33"},"variableNames":[{"name":"updatedPos","nodeType":"YulIdentifier","src":"1880:10:33"}]}]},"name":"abi_encodeUpdatedPos_t_address_to_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value0","nodeType":"YulTypedName","src":"1788:6:33","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1796:3:33","type":""}],"returnVariables":[{"name":"updatedPos","nodeType":"YulTypedName","src":"1804:10:33","type":""}],"src":"1735:179:33"},{"body":{"nodeType":"YulBlock","src":"1995:38:33","statements":[{"nodeType":"YulAssignment","src":"2005:22:33","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"2017:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"2022:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2013:3:33"},"nodeType":"YulFunctionCall","src":"2013:14:33"},"variableNames":[{"name":"next","nodeType":"YulIdentifier","src":"2005:4:33"}]}]},"name":"array_nextElement_t_array$_t_address_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"1982:3:33","type":""}],"returnVariables":[{"name":"next","nodeType":"YulTypedName","src":"1990:4:33","type":""}],"src":"1920:113:33"},{"body":{"nodeType":"YulBlock","src":"2193:608:33","statements":[{"nodeType":"YulVariableDeclaration","src":"2203:68:33","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2265:5:33"}],"functionName":{"name":"array_length_t_array$_t_address_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"2217:47:33"},"nodeType":"YulFunctionCall","src":"2217:54:33"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"2207:6:33","type":""}]},{"nodeType":"YulAssignment","src":"2280:93:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2361:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"2366:6:33"}],"functionName":{"name":"array_storeLengthForEncoding_t_array$_t_address_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"2287:73:33"},"nodeType":"YulFunctionCall","src":"2287:86:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"2280:3:33"}]},{"nodeType":"YulVariableDeclaration","src":"2382:71:33","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2447:5:33"}],"functionName":{"name":"array_dataslot_t_array$_t_address_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"2397:49:33"},"nodeType":"YulFunctionCall","src":"2397:56:33"},"variables":[{"name":"baseRef","nodeType":"YulTypedName","src":"2386:7:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2462:21:33","value":{"name":"baseRef","nodeType":"YulIdentifier","src":"2476:7:33"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"2466:6:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"2552:224:33","statements":[{"nodeType":"YulVariableDeclaration","src":"2566:34:33","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"2593:6:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2587:5:33"},"nodeType":"YulFunctionCall","src":"2587:13:33"},"variables":[{"name":"elementValue0","nodeType":"YulTypedName","src":"2570:13:33","type":""}]},{"nodeType":"YulAssignment","src":"2613:70:33","value":{"arguments":[{"name":"elementValue0","nodeType":"YulIdentifier","src":"2664:13:33"},{"name":"pos","nodeType":"YulIdentifier","src":"2679:3:33"}],"functionName":{"name":"abi_encodeUpdatedPos_t_address_to_t_address","nodeType":"YulIdentifier","src":"2620:43:33"},"nodeType":"YulFunctionCall","src":"2620:63:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"2613:3:33"}]},{"nodeType":"YulAssignment","src":"2696:70:33","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"2759:6:33"}],"functionName":{"name":"array_nextElement_t_array$_t_address_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"2706:52:33"},"nodeType":"YulFunctionCall","src":"2706:60:33"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"2696:6:33"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2514:1:33"},{"name":"length","nodeType":"YulIdentifier","src":"2517:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2511:2:33"},"nodeType":"YulFunctionCall","src":"2511:13:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2525:18:33","statements":[{"nodeType":"YulAssignment","src":"2527:14:33","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2536:1:33"},{"kind":"number","nodeType":"YulLiteral","src":"2539:1:33","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2532:3:33"},"nodeType":"YulFunctionCall","src":"2532:9:33"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"2527:1:33"}]}]},"pre":{"nodeType":"YulBlock","src":"2496:14:33","statements":[{"nodeType":"YulVariableDeclaration","src":"2498:10:33","value":{"kind":"number","nodeType":"YulLiteral","src":"2507:1:33","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"2502:1:33","type":""}]}]},"src":"2492:284:33"},{"nodeType":"YulAssignment","src":"2785:10:33","value":{"name":"pos","nodeType":"YulIdentifier","src":"2792:3:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"2785:3:33"}]}]},"name":"abi_encode_t_array$_t_address_$dyn_memory_ptr_to_t_array$_t_address_$dyn_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2172:5:33","type":""},{"name":"pos","nodeType":"YulTypedName","src":"2179:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"2188:3:33","type":""}],"src":"2069:732:33"},{"body":{"nodeType":"YulBlock","src":"2955:225:33","statements":[{"nodeType":"YulAssignment","src":"2965:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2977:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"2988:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2973:3:33"},"nodeType":"YulFunctionCall","src":"2973:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2965:4:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3012:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"3023:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3008:3:33"},"nodeType":"YulFunctionCall","src":"3008:17:33"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"3031:4:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"3037:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3027:3:33"},"nodeType":"YulFunctionCall","src":"3027:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3001:6:33"},"nodeType":"YulFunctionCall","src":"3001:47:33"},"nodeType":"YulExpressionStatement","src":"3001:47:33"},{"nodeType":"YulAssignment","src":"3057:116:33","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3159:6:33"},{"name":"tail","nodeType":"YulIdentifier","src":"3168:4:33"}],"functionName":{"name":"abi_encode_t_array$_t_address_$dyn_memory_ptr_to_t_array$_t_address_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"3065:93:33"},"nodeType":"YulFunctionCall","src":"3065:108:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3057:4:33"}]}]},"name":"abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2927:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2939:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2950:4:33","type":""}],"src":"2807:373:33"},{"body":{"nodeType":"YulBlock","src":"3226:35:33","statements":[{"nodeType":"YulAssignment","src":"3236:19:33","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3252:2:33","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3246:5:33"},"nodeType":"YulFunctionCall","src":"3246:9:33"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3236:6:33"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"3219:6:33","type":""}],"src":"3186:75:33"},{"body":{"nodeType":"YulBlock","src":"3356:28:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3373:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3376:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3366:6:33"},"nodeType":"YulFunctionCall","src":"3366:12:33"},"nodeType":"YulExpressionStatement","src":"3366:12:33"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"3267:117:33"},{"body":{"nodeType":"YulBlock","src":"3479:28:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3496:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3499:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3489:6:33"},"nodeType":"YulFunctionCall","src":"3489:12:33"},"nodeType":"YulExpressionStatement","src":"3489:12:33"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"3390:117:33"},{"body":{"nodeType":"YulBlock","src":"3556:79:33","statements":[{"body":{"nodeType":"YulBlock","src":"3613:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3622:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3625:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3615:6:33"},"nodeType":"YulFunctionCall","src":"3615:12:33"},"nodeType":"YulExpressionStatement","src":"3615:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3579:5:33"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3604:5:33"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"3586:17:33"},"nodeType":"YulFunctionCall","src":"3586:24:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3576:2:33"},"nodeType":"YulFunctionCall","src":"3576:35:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3569:6:33"},"nodeType":"YulFunctionCall","src":"3569:43:33"},"nodeType":"YulIf","src":"3566:63:33"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3549:5:33","type":""}],"src":"3513:122:33"},{"body":{"nodeType":"YulBlock","src":"3693:87:33","statements":[{"nodeType":"YulAssignment","src":"3703:29:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3725:6:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3712:12:33"},"nodeType":"YulFunctionCall","src":"3712:20:33"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"3703:5:33"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3768:5:33"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"3741:26:33"},"nodeType":"YulFunctionCall","src":"3741:33:33"},"nodeType":"YulExpressionStatement","src":"3741:33:33"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3671:6:33","type":""},{"name":"end","nodeType":"YulTypedName","src":"3679:3:33","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"3687:5:33","type":""}],"src":"3641:139:33"},{"body":{"nodeType":"YulBlock","src":"3852:263:33","statements":[{"body":{"nodeType":"YulBlock","src":"3898:83:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3900:77:33"},"nodeType":"YulFunctionCall","src":"3900:79:33"},"nodeType":"YulExpressionStatement","src":"3900:79:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3873:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"3882:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3869:3:33"},"nodeType":"YulFunctionCall","src":"3869:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"3894:2:33","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3865:3:33"},"nodeType":"YulFunctionCall","src":"3865:32:33"},"nodeType":"YulIf","src":"3862:119:33"},{"nodeType":"YulBlock","src":"3991:117:33","statements":[{"nodeType":"YulVariableDeclaration","src":"4006:15:33","value":{"kind":"number","nodeType":"YulLiteral","src":"4020:1:33","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4010:6:33","type":""}]},{"nodeType":"YulAssignment","src":"4035:63:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4070:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"4081:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4066:3:33"},"nodeType":"YulFunctionCall","src":"4066:22:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4090:7:33"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4045:20:33"},"nodeType":"YulFunctionCall","src":"4045:53:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4035:6:33"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3822:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3833:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3845:6:33","type":""}],"src":"3786:329:33"},{"body":{"nodeType":"YulBlock","src":"4166:32:33","statements":[{"nodeType":"YulAssignment","src":"4176:16:33","value":{"name":"value","nodeType":"YulIdentifier","src":"4187:5:33"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"4176:7:33"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4148:5:33","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"4158:7:33","type":""}],"src":"4121:77:33"},{"body":{"nodeType":"YulBlock","src":"4269:53:33","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4286:3:33"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4309:5:33"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"4291:17:33"},"nodeType":"YulFunctionCall","src":"4291:24:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4279:6:33"},"nodeType":"YulFunctionCall","src":"4279:37:33"},"nodeType":"YulExpressionStatement","src":"4279:37:33"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4257:5:33","type":""},{"name":"pos","nodeType":"YulTypedName","src":"4264:3:33","type":""}],"src":"4204:118:33"},{"body":{"nodeType":"YulBlock","src":"4426:124:33","statements":[{"nodeType":"YulAssignment","src":"4436:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4448:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"4459:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4444:3:33"},"nodeType":"YulFunctionCall","src":"4444:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4436:4:33"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4516:6:33"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4529:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"4540:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4525:3:33"},"nodeType":"YulFunctionCall","src":"4525:17:33"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"4472:43:33"},"nodeType":"YulFunctionCall","src":"4472:71:33"},"nodeType":"YulExpressionStatement","src":"4472:71:33"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4398:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4410:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4421:4:33","type":""}],"src":"4328:222:33"},{"body":{"nodeType":"YulBlock","src":"4645:28:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4662:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4665:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4655:6:33"},"nodeType":"YulFunctionCall","src":"4655:12:33"},"nodeType":"YulExpressionStatement","src":"4655:12:33"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"4556:117:33"},{"body":{"nodeType":"YulBlock","src":"4768:28:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4785:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4788:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4778:6:33"},"nodeType":"YulFunctionCall","src":"4778:12:33"},"nodeType":"YulExpressionStatement","src":"4778:12:33"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulFunctionDefinition","src":"4679:117:33"},{"body":{"nodeType":"YulBlock","src":"4850:54:33","statements":[{"nodeType":"YulAssignment","src":"4860:38:33","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4878:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"4885:2:33","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4874:3:33"},"nodeType":"YulFunctionCall","src":"4874:14:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4894:2:33","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4890:3:33"},"nodeType":"YulFunctionCall","src":"4890:7:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4870:3:33"},"nodeType":"YulFunctionCall","src":"4870:28:33"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"4860:6:33"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4833:5:33","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"4843:6:33","type":""}],"src":"4802:102:33"},{"body":{"nodeType":"YulBlock","src":"4938:152:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4955:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4958:77:33","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4948:6:33"},"nodeType":"YulFunctionCall","src":"4948:88:33"},"nodeType":"YulExpressionStatement","src":"4948:88:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5052:1:33","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5055:4:33","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5045:6:33"},"nodeType":"YulFunctionCall","src":"5045:15:33"},"nodeType":"YulExpressionStatement","src":"5045:15:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5076:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5079:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5069:6:33"},"nodeType":"YulFunctionCall","src":"5069:15:33"},"nodeType":"YulExpressionStatement","src":"5069:15:33"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"4910:180:33"},{"body":{"nodeType":"YulBlock","src":"5139:238:33","statements":[{"nodeType":"YulVariableDeclaration","src":"5149:58:33","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5171:6:33"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"5201:4:33"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"5179:21:33"},"nodeType":"YulFunctionCall","src":"5179:27:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5167:3:33"},"nodeType":"YulFunctionCall","src":"5167:40:33"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"5153:10:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"5318:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"5320:16:33"},"nodeType":"YulFunctionCall","src":"5320:18:33"},"nodeType":"YulExpressionStatement","src":"5320:18:33"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"5261:10:33"},{"kind":"number","nodeType":"YulLiteral","src":"5273:18:33","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5258:2:33"},"nodeType":"YulFunctionCall","src":"5258:34:33"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"5297:10:33"},{"name":"memPtr","nodeType":"YulIdentifier","src":"5309:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5294:2:33"},"nodeType":"YulFunctionCall","src":"5294:22:33"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"5255:2:33"},"nodeType":"YulFunctionCall","src":"5255:62:33"},"nodeType":"YulIf","src":"5252:88:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5356:2:33","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"5360:10:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5349:6:33"},"nodeType":"YulFunctionCall","src":"5349:22:33"},"nodeType":"YulExpressionStatement","src":"5349:22:33"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"5125:6:33","type":""},{"name":"size","nodeType":"YulTypedName","src":"5133:4:33","type":""}],"src":"5096:281:33"},{"body":{"nodeType":"YulBlock","src":"5424:88:33","statements":[{"nodeType":"YulAssignment","src":"5434:30:33","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"5444:18:33"},"nodeType":"YulFunctionCall","src":"5444:20:33"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5434:6:33"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5493:6:33"},{"name":"size","nodeType":"YulIdentifier","src":"5501:4:33"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"5473:19:33"},"nodeType":"YulFunctionCall","src":"5473:33:33"},"nodeType":"YulExpressionStatement","src":"5473:33:33"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"5408:4:33","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"5417:6:33","type":""}],"src":"5383:129:33"},{"body":{"nodeType":"YulBlock","src":"5584:241:33","statements":[{"body":{"nodeType":"YulBlock","src":"5689:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"5691:16:33"},"nodeType":"YulFunctionCall","src":"5691:18:33"},"nodeType":"YulExpressionStatement","src":"5691:18:33"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"5661:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"5669:18:33","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5658:2:33"},"nodeType":"YulFunctionCall","src":"5658:30:33"},"nodeType":"YulIf","src":"5655:56:33"},{"nodeType":"YulAssignment","src":"5721:37:33","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"5751:6:33"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"5729:21:33"},"nodeType":"YulFunctionCall","src":"5729:29:33"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"5721:4:33"}]},{"nodeType":"YulAssignment","src":"5795:23:33","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"5807:4:33"},{"kind":"number","nodeType":"YulLiteral","src":"5813:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5803:3:33"},"nodeType":"YulFunctionCall","src":"5803:15:33"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"5795:4:33"}]}]},"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"5568:6:33","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"5579:4:33","type":""}],"src":"5518:307:33"},{"body":{"nodeType":"YulBlock","src":"5882:103:33","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"5905:3:33"},{"name":"src","nodeType":"YulIdentifier","src":"5910:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"5915:6:33"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"5892:12:33"},"nodeType":"YulFunctionCall","src":"5892:30:33"},"nodeType":"YulExpressionStatement","src":"5892:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"5963:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"5968:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5959:3:33"},"nodeType":"YulFunctionCall","src":"5959:16:33"},{"kind":"number","nodeType":"YulLiteral","src":"5977:1:33","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5952:6:33"},"nodeType":"YulFunctionCall","src":"5952:27:33"},"nodeType":"YulExpressionStatement","src":"5952:27:33"}]},"name":"copy_calldata_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"5864:3:33","type":""},{"name":"dst","nodeType":"YulTypedName","src":"5869:3:33","type":""},{"name":"length","nodeType":"YulTypedName","src":"5874:6:33","type":""}],"src":"5831:154:33"},{"body":{"nodeType":"YulBlock","src":"6074:327:33","statements":[{"nodeType":"YulAssignment","src":"6084:74:33","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6150:6:33"}],"functionName":{"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"6109:40:33"},"nodeType":"YulFunctionCall","src":"6109:48:33"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"6093:15:33"},"nodeType":"YulFunctionCall","src":"6093:65:33"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"6084:5:33"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"6174:5:33"},{"name":"length","nodeType":"YulIdentifier","src":"6181:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6167:6:33"},"nodeType":"YulFunctionCall","src":"6167:21:33"},"nodeType":"YulExpressionStatement","src":"6167:21:33"},{"nodeType":"YulVariableDeclaration","src":"6197:27:33","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"6212:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"6219:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6208:3:33"},"nodeType":"YulFunctionCall","src":"6208:16:33"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"6201:3:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"6262:83:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"6264:77:33"},"nodeType":"YulFunctionCall","src":"6264:79:33"},"nodeType":"YulExpressionStatement","src":"6264:79:33"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"6243:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"6248:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6239:3:33"},"nodeType":"YulFunctionCall","src":"6239:16:33"},{"name":"end","nodeType":"YulIdentifier","src":"6257:3:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6236:2:33"},"nodeType":"YulFunctionCall","src":"6236:25:33"},"nodeType":"YulIf","src":"6233:112:33"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"6378:3:33"},{"name":"dst","nodeType":"YulIdentifier","src":"6383:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"6388:6:33"}],"functionName":{"name":"copy_calldata_to_memory","nodeType":"YulIdentifier","src":"6354:23:33"},"nodeType":"YulFunctionCall","src":"6354:41:33"},"nodeType":"YulExpressionStatement","src":"6354:41:33"}]},"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"6047:3:33","type":""},{"name":"length","nodeType":"YulTypedName","src":"6052:6:33","type":""},{"name":"end","nodeType":"YulTypedName","src":"6060:3:33","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"6068:5:33","type":""}],"src":"5991:410:33"},{"body":{"nodeType":"YulBlock","src":"6481:277:33","statements":[{"body":{"nodeType":"YulBlock","src":"6530:83:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"6532:77:33"},"nodeType":"YulFunctionCall","src":"6532:79:33"},"nodeType":"YulExpressionStatement","src":"6532:79:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6509:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"6517:4:33","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6505:3:33"},"nodeType":"YulFunctionCall","src":"6505:17:33"},{"name":"end","nodeType":"YulIdentifier","src":"6524:3:33"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6501:3:33"},"nodeType":"YulFunctionCall","src":"6501:27:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6494:6:33"},"nodeType":"YulFunctionCall","src":"6494:35:33"},"nodeType":"YulIf","src":"6491:122:33"},{"nodeType":"YulVariableDeclaration","src":"6622:34:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6649:6:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6636:12:33"},"nodeType":"YulFunctionCall","src":"6636:20:33"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"6626:6:33","type":""}]},{"nodeType":"YulAssignment","src":"6665:87:33","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6725:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"6733:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6721:3:33"},"nodeType":"YulFunctionCall","src":"6721:17:33"},{"name":"length","nodeType":"YulIdentifier","src":"6740:6:33"},{"name":"end","nodeType":"YulIdentifier","src":"6748:3:33"}],"functionName":{"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"6674:46:33"},"nodeType":"YulFunctionCall","src":"6674:78:33"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"6665:5:33"}]}]},"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"6459:6:33","type":""},{"name":"end","nodeType":"YulTypedName","src":"6467:3:33","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"6475:5:33","type":""}],"src":"6420:338:33"},{"body":{"nodeType":"YulBlock","src":"6856:560:33","statements":[{"body":{"nodeType":"YulBlock","src":"6902:83:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"6904:77:33"},"nodeType":"YulFunctionCall","src":"6904:79:33"},"nodeType":"YulExpressionStatement","src":"6904:79:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6877:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"6886:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6873:3:33"},"nodeType":"YulFunctionCall","src":"6873:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"6898:2:33","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6869:3:33"},"nodeType":"YulFunctionCall","src":"6869:32:33"},"nodeType":"YulIf","src":"6866:119:33"},{"nodeType":"YulBlock","src":"6995:117:33","statements":[{"nodeType":"YulVariableDeclaration","src":"7010:15:33","value":{"kind":"number","nodeType":"YulLiteral","src":"7024:1:33","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7014:6:33","type":""}]},{"nodeType":"YulAssignment","src":"7039:63:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7074:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"7085:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7070:3:33"},"nodeType":"YulFunctionCall","src":"7070:22:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7094:7:33"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"7049:20:33"},"nodeType":"YulFunctionCall","src":"7049:53:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7039:6:33"}]}]},{"nodeType":"YulBlock","src":"7122:287:33","statements":[{"nodeType":"YulVariableDeclaration","src":"7137:46:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7168:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"7179:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7164:3:33"},"nodeType":"YulFunctionCall","src":"7164:18:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7151:12:33"},"nodeType":"YulFunctionCall","src":"7151:32:33"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7141:6:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"7230:83:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"7232:77:33"},"nodeType":"YulFunctionCall","src":"7232:79:33"},"nodeType":"YulExpressionStatement","src":"7232:79:33"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7202:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"7210:18:33","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7199:2:33"},"nodeType":"YulFunctionCall","src":"7199:30:33"},"nodeType":"YulIf","src":"7196:117:33"},{"nodeType":"YulAssignment","src":"7327:72:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7371:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"7382:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7367:3:33"},"nodeType":"YulFunctionCall","src":"7367:22:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7391:7:33"}],"functionName":{"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"7337:29:33"},"nodeType":"YulFunctionCall","src":"7337:62:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"7327:6:33"}]}]}]},"name":"abi_decode_tuple_t_addresst_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6818:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6829:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6841:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6849:6:33","type":""}],"src":"6764:652:33"},{"body":{"nodeType":"YulBlock","src":"7477:53:33","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7494:3:33"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7517:5:33"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"7499:17:33"},"nodeType":"YulFunctionCall","src":"7499:24:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7487:6:33"},"nodeType":"YulFunctionCall","src":"7487:37:33"},"nodeType":"YulExpressionStatement","src":"7487:37:33"}]},"name":"abi_encode_t_bytes32_to_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7465:5:33","type":""},{"name":"pos","nodeType":"YulTypedName","src":"7472:3:33","type":""}],"src":"7422:108:33"},{"body":{"nodeType":"YulBlock","src":"7578:48:33","statements":[{"nodeType":"YulAssignment","src":"7588:32:33","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7613:5:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7606:6:33"},"nodeType":"YulFunctionCall","src":"7606:13:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7599:6:33"},"nodeType":"YulFunctionCall","src":"7599:21:33"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"7588:7:33"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7560:5:33","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"7570:7:33","type":""}],"src":"7536:90:33"},{"body":{"nodeType":"YulBlock","src":"7681:50:33","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7698:3:33"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7718:5:33"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"7703:14:33"},"nodeType":"YulFunctionCall","src":"7703:21:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7691:6:33"},"nodeType":"YulFunctionCall","src":"7691:34:33"},"nodeType":"YulExpressionStatement","src":"7691:34:33"}]},"name":"abi_encode_t_bool_to_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7669:5:33","type":""},{"name":"pos","nodeType":"YulTypedName","src":"7676:3:33","type":""}],"src":"7632:99:33"},{"body":{"nodeType":"YulBlock","src":"7901:953:33","statements":[{"nodeType":"YulVariableDeclaration","src":"7911:26:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7927:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"7932:4:33","type":"","value":"0xa0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7923:3:33"},"nodeType":"YulFunctionCall","src":"7923:14:33"},"variables":[{"name":"tail","nodeType":"YulTypedName","src":"7915:4:33","type":""}]},{"nodeType":"YulBlock","src":"7947:174:33","statements":[{"nodeType":"YulVariableDeclaration","src":"7992:43:33","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8022:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"8029:4:33","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8018:3:33"},"nodeType":"YulFunctionCall","src":"8018:16:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8012:5:33"},"nodeType":"YulFunctionCall","src":"8012:23:33"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"7996:12:33","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"8082:12:33"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8100:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"8105:4:33","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8096:3:33"},"nodeType":"YulFunctionCall","src":"8096:14:33"}],"functionName":{"name":"abi_encode_t_address_to_t_address","nodeType":"YulIdentifier","src":"8048:33:33"},"nodeType":"YulFunctionCall","src":"8048:63:33"},"nodeType":"YulExpressionStatement","src":"8048:63:33"}]},{"nodeType":"YulBlock","src":"8131:168:33","statements":[{"nodeType":"YulVariableDeclaration","src":"8170:43:33","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8200:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"8207:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8196:3:33"},"nodeType":"YulFunctionCall","src":"8196:16:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8190:5:33"},"nodeType":"YulFunctionCall","src":"8190:23:33"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"8174:12:33","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"8260:12:33"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8278:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"8283:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8274:3:33"},"nodeType":"YulFunctionCall","src":"8274:14:33"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32","nodeType":"YulIdentifier","src":"8226:33:33"},"nodeType":"YulFunctionCall","src":"8226:63:33"},"nodeType":"YulExpressionStatement","src":"8226:63:33"}]},{"nodeType":"YulBlock","src":"8309:174:33","statements":[{"nodeType":"YulVariableDeclaration","src":"8360:43:33","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8390:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"8397:4:33","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8386:3:33"},"nodeType":"YulFunctionCall","src":"8386:16:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8380:5:33"},"nodeType":"YulFunctionCall","src":"8380:23:33"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"8364:12:33","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"8444:12:33"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8462:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"8467:4:33","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8458:3:33"},"nodeType":"YulFunctionCall","src":"8458:14:33"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool","nodeType":"YulIdentifier","src":"8416:27:33"},"nodeType":"YulFunctionCall","src":"8416:57:33"},"nodeType":"YulExpressionStatement","src":"8416:57:33"}]},{"nodeType":"YulBlock","src":"8493:175:33","statements":[{"nodeType":"YulVariableDeclaration","src":"8545:43:33","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8575:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"8582:4:33","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8571:3:33"},"nodeType":"YulFunctionCall","src":"8571:16:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8565:5:33"},"nodeType":"YulFunctionCall","src":"8565:23:33"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"8549:12:33","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"8629:12:33"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8647:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"8652:4:33","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8643:3:33"},"nodeType":"YulFunctionCall","src":"8643:14:33"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool","nodeType":"YulIdentifier","src":"8601:27:33"},"nodeType":"YulFunctionCall","src":"8601:57:33"},"nodeType":"YulExpressionStatement","src":"8601:57:33"}]},{"nodeType":"YulBlock","src":"8678:169:33","statements":[{"nodeType":"YulVariableDeclaration","src":"8724:43:33","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8754:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"8761:4:33","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8750:3:33"},"nodeType":"YulFunctionCall","src":"8750:16:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8744:5:33"},"nodeType":"YulFunctionCall","src":"8744:23:33"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"8728:12:33","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"8808:12:33"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8826:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"8831:4:33","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8822:3:33"},"nodeType":"YulFunctionCall","src":"8822:14:33"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool","nodeType":"YulIdentifier","src":"8780:27:33"},"nodeType":"YulFunctionCall","src":"8780:57:33"},"nodeType":"YulExpressionStatement","src":"8780:57:33"}]}]},"name":"abi_encode_t_struct$_User_$6247_memory_ptr_to_t_struct$_User_$6247_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7888:5:33","type":""},{"name":"pos","nodeType":"YulTypedName","src":"7895:3:33","type":""}],"src":"7791:1063:33"},{"body":{"nodeType":"YulBlock","src":"9002:169:33","statements":[{"nodeType":"YulAssignment","src":"9012:27:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9024:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"9035:3:33","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9020:3:33"},"nodeType":"YulFunctionCall","src":"9020:19:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9012:4:33"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9137:6:33"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9150:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"9161:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9146:3:33"},"nodeType":"YulFunctionCall","src":"9146:17:33"}],"functionName":{"name":"abi_encode_t_struct$_User_$6247_memory_ptr_to_t_struct$_User_$6247_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9049:87:33"},"nodeType":"YulFunctionCall","src":"9049:115:33"},"nodeType":"YulExpressionStatement","src":"9049:115:33"}]},"name":"abi_encode_tuple_t_struct$_User_$6247_memory_ptr__to_t_struct$_User_$6247_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8974:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8986:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8997:4:33","type":""}],"src":"8860:311:33"},{"body":{"nodeType":"YulBlock","src":"9242:53:33","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9259:3:33"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9282:5:33"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"9264:17:33"},"nodeType":"YulFunctionCall","src":"9264:24:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9252:6:33"},"nodeType":"YulFunctionCall","src":"9252:37:33"},"nodeType":"YulExpressionStatement","src":"9252:37:33"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9230:5:33","type":""},{"name":"pos","nodeType":"YulTypedName","src":"9237:3:33","type":""}],"src":"9177:118:33"},{"body":{"nodeType":"YulBlock","src":"9399:124:33","statements":[{"nodeType":"YulAssignment","src":"9409:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9421:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"9432:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9417:3:33"},"nodeType":"YulFunctionCall","src":"9417:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9409:4:33"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9489:6:33"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9502:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"9513:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9498:3:33"},"nodeType":"YulFunctionCall","src":"9498:17:33"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"9445:43:33"},"nodeType":"YulFunctionCall","src":"9445:71:33"},"nodeType":"YulExpressionStatement","src":"9445:71:33"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9371:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9383:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9394:4:33","type":""}],"src":"9301:222:33"},{"body":{"nodeType":"YulBlock","src":"9588:50:33","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9605:3:33"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9625:5:33"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"9610:14:33"},"nodeType":"YulFunctionCall","src":"9610:21:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9598:6:33"},"nodeType":"YulFunctionCall","src":"9598:34:33"},"nodeType":"YulExpressionStatement","src":"9598:34:33"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9576:5:33","type":""},{"name":"pos","nodeType":"YulTypedName","src":"9583:3:33","type":""}],"src":"9529:109:33"},{"body":{"nodeType":"YulBlock","src":"9736:118:33","statements":[{"nodeType":"YulAssignment","src":"9746:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9758:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"9769:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9754:3:33"},"nodeType":"YulFunctionCall","src":"9754:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9746:4:33"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9820:6:33"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9833:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"9844:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9829:3:33"},"nodeType":"YulFunctionCall","src":"9829:17:33"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"9782:37:33"},"nodeType":"YulFunctionCall","src":"9782:65:33"},"nodeType":"YulExpressionStatement","src":"9782:65:33"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9708:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9720:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9731:4:33","type":""}],"src":"9644:210:33"},{"body":{"nodeType":"YulBlock","src":"9956:73:33","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9973:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"9978:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9966:6:33"},"nodeType":"YulFunctionCall","src":"9966:19:33"},"nodeType":"YulExpressionStatement","src":"9966:19:33"},{"nodeType":"YulAssignment","src":"9994:29:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10013:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"10018:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10009:3:33"},"nodeType":"YulFunctionCall","src":"10009:14:33"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"9994:11:33"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"9928:3:33","type":""},{"name":"length","nodeType":"YulTypedName","src":"9933:6:33","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"9944:11:33","type":""}],"src":"9860:169:33"},{"body":{"nodeType":"YulBlock","src":"10141:125:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"10163:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"10171:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10159:3:33"},"nodeType":"YulFunctionCall","src":"10159:14:33"},{"hexValue":"46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820","kind":"string","nodeType":"YulLiteral","src":"10175:34:33","type":"","value":"Function must be called through "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10152:6:33"},"nodeType":"YulFunctionCall","src":"10152:58:33"},"nodeType":"YulExpressionStatement","src":"10152:58:33"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"10231:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"10239:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10227:3:33"},"nodeType":"YulFunctionCall","src":"10227:15:33"},{"hexValue":"64656c656761746563616c6c","kind":"string","nodeType":"YulLiteral","src":"10244:14:33","type":"","value":"delegatecall"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10220:6:33"},"nodeType":"YulFunctionCall","src":"10220:39:33"},"nodeType":"YulExpressionStatement","src":"10220:39:33"}]},"name":"store_literal_in_memory_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"10133:6:33","type":""}],"src":"10035:231:33"},{"body":{"nodeType":"YulBlock","src":"10418:220:33","statements":[{"nodeType":"YulAssignment","src":"10428:74:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10494:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"10499:2:33","type":"","value":"44"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"10435:58:33"},"nodeType":"YulFunctionCall","src":"10435:67:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"10428:3:33"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10600:3:33"}],"functionName":{"name":"store_literal_in_memory_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb","nodeType":"YulIdentifier","src":"10511:88:33"},"nodeType":"YulFunctionCall","src":"10511:93:33"},"nodeType":"YulExpressionStatement","src":"10511:93:33"},{"nodeType":"YulAssignment","src":"10613:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10624:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"10629:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10620:3:33"},"nodeType":"YulFunctionCall","src":"10620:12:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"10613:3:33"}]}]},"name":"abi_encode_t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"10406:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"10414:3:33","type":""}],"src":"10272:366:33"},{"body":{"nodeType":"YulBlock","src":"10815:248:33","statements":[{"nodeType":"YulAssignment","src":"10825:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10837:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"10848:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10833:3:33"},"nodeType":"YulFunctionCall","src":"10833:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10825:4:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10872:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"10883:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10868:3:33"},"nodeType":"YulFunctionCall","src":"10868:17:33"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"10891:4:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"10897:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10887:3:33"},"nodeType":"YulFunctionCall","src":"10887:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10861:6:33"},"nodeType":"YulFunctionCall","src":"10861:47:33"},"nodeType":"YulExpressionStatement","src":"10861:47:33"},{"nodeType":"YulAssignment","src":"10917:139:33","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"11051:4:33"}],"functionName":{"name":"abi_encode_t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"10925:124:33"},"nodeType":"YulFunctionCall","src":"10925:131:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10917:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10795:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10810:4:33","type":""}],"src":"10644:419:33"},{"body":{"nodeType":"YulBlock","src":"11175:125:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"11197:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"11205:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11193:3:33"},"nodeType":"YulFunctionCall","src":"11193:14:33"},{"hexValue":"46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820","kind":"string","nodeType":"YulLiteral","src":"11209:34:33","type":"","value":"Function must be called through "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11186:6:33"},"nodeType":"YulFunctionCall","src":"11186:58:33"},"nodeType":"YulExpressionStatement","src":"11186:58:33"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"11265:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"11273:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11261:3:33"},"nodeType":"YulFunctionCall","src":"11261:15:33"},{"hexValue":"6163746976652070726f7879","kind":"string","nodeType":"YulLiteral","src":"11278:14:33","type":"","value":"active proxy"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11254:6:33"},"nodeType":"YulFunctionCall","src":"11254:39:33"},"nodeType":"YulExpressionStatement","src":"11254:39:33"}]},"name":"store_literal_in_memory_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"11167:6:33","type":""}],"src":"11069:231:33"},{"body":{"nodeType":"YulBlock","src":"11452:220:33","statements":[{"nodeType":"YulAssignment","src":"11462:74:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11528:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"11533:2:33","type":"","value":"44"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11469:58:33"},"nodeType":"YulFunctionCall","src":"11469:67:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"11462:3:33"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11634:3:33"}],"functionName":{"name":"store_literal_in_memory_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434","nodeType":"YulIdentifier","src":"11545:88:33"},"nodeType":"YulFunctionCall","src":"11545:93:33"},"nodeType":"YulExpressionStatement","src":"11545:93:33"},{"nodeType":"YulAssignment","src":"11647:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11658:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"11663:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11654:3:33"},"nodeType":"YulFunctionCall","src":"11654:12:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"11647:3:33"}]}]},"name":"abi_encode_t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"11440:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"11448:3:33","type":""}],"src":"11306:366:33"},{"body":{"nodeType":"YulBlock","src":"11849:248:33","statements":[{"nodeType":"YulAssignment","src":"11859:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11871:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"11882:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11867:3:33"},"nodeType":"YulFunctionCall","src":"11867:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11859:4:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11906:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"11917:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11902:3:33"},"nodeType":"YulFunctionCall","src":"11902:17:33"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"11925:4:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"11931:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11921:3:33"},"nodeType":"YulFunctionCall","src":"11921:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11895:6:33"},"nodeType":"YulFunctionCall","src":"11895:47:33"},"nodeType":"YulExpressionStatement","src":"11895:47:33"},{"nodeType":"YulAssignment","src":"11951:139:33","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12085:4:33"}],"functionName":{"name":"abi_encode_t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11959:124:33"},"nodeType":"YulFunctionCall","src":"11959:131:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11951:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11829:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11844:4:33","type":""}],"src":"11678:419:33"},{"body":{"nodeType":"YulBlock","src":"12209:137:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"12231:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"12239:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12227:3:33"},"nodeType":"YulFunctionCall","src":"12227:14:33"},{"hexValue":"555550535570677261646561626c653a206d757374206e6f742062652063616c","kind":"string","nodeType":"YulLiteral","src":"12243:34:33","type":"","value":"UUPSUpgradeable: must not be cal"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12220:6:33"},"nodeType":"YulFunctionCall","src":"12220:58:33"},"nodeType":"YulExpressionStatement","src":"12220:58:33"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"12299:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"12307:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12295:3:33"},"nodeType":"YulFunctionCall","src":"12295:15:33"},{"hexValue":"6c6564207468726f7567682064656c656761746563616c6c","kind":"string","nodeType":"YulLiteral","src":"12312:26:33","type":"","value":"led through delegatecall"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12288:6:33"},"nodeType":"YulFunctionCall","src":"12288:51:33"},"nodeType":"YulExpressionStatement","src":"12288:51:33"}]},"name":"store_literal_in_memory_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"12201:6:33","type":""}],"src":"12103:243:33"},{"body":{"nodeType":"YulBlock","src":"12498:220:33","statements":[{"nodeType":"YulAssignment","src":"12508:74:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12574:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"12579:2:33","type":"","value":"56"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12515:58:33"},"nodeType":"YulFunctionCall","src":"12515:67:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"12508:3:33"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12680:3:33"}],"functionName":{"name":"store_literal_in_memory_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4","nodeType":"YulIdentifier","src":"12591:88:33"},"nodeType":"YulFunctionCall","src":"12591:93:33"},"nodeType":"YulExpressionStatement","src":"12591:93:33"},{"nodeType":"YulAssignment","src":"12693:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12704:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"12709:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12700:3:33"},"nodeType":"YulFunctionCall","src":"12700:12:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"12693:3:33"}]}]},"name":"abi_encode_t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"12486:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"12494:3:33","type":""}],"src":"12352:366:33"},{"body":{"nodeType":"YulBlock","src":"12895:248:33","statements":[{"nodeType":"YulAssignment","src":"12905:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12917:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"12928:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12913:3:33"},"nodeType":"YulFunctionCall","src":"12913:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12905:4:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12952:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"12963:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12948:3:33"},"nodeType":"YulFunctionCall","src":"12948:17:33"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12971:4:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"12977:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12967:3:33"},"nodeType":"YulFunctionCall","src":"12967:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12941:6:33"},"nodeType":"YulFunctionCall","src":"12941:47:33"},"nodeType":"YulExpressionStatement","src":"12941:47:33"},{"nodeType":"YulAssignment","src":"12997:139:33","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13131:4:33"}],"functionName":{"name":"abi_encode_t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13005:124:33"},"nodeType":"YulFunctionCall","src":"13005:131:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12997:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12875:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12890:4:33","type":""}],"src":"12724:419:33"},{"body":{"nodeType":"YulBlock","src":"13255:76:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"13277:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"13285:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13273:3:33"},"nodeType":"YulFunctionCall","src":"13273:14:33"},{"hexValue":"5a4b5f564552494649434154494f4e20414c5245414459205245564f4b454420","kind":"string","nodeType":"YulLiteral","src":"13289:34:33","type":"","value":"ZK_VERIFICATION ALREADY REVOKED "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13266:6:33"},"nodeType":"YulFunctionCall","src":"13266:58:33"},"nodeType":"YulExpressionStatement","src":"13266:58:33"}]},"name":"store_literal_in_memory_08d0c5f0cc66c73f518001e6f234dffe5541b83b4743ef2eec0db170576be85f","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"13247:6:33","type":""}],"src":"13149:182:33"},{"body":{"nodeType":"YulBlock","src":"13483:220:33","statements":[{"nodeType":"YulAssignment","src":"13493:74:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13559:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"13564:2:33","type":"","value":"32"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13500:58:33"},"nodeType":"YulFunctionCall","src":"13500:67:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"13493:3:33"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13665:3:33"}],"functionName":{"name":"store_literal_in_memory_08d0c5f0cc66c73f518001e6f234dffe5541b83b4743ef2eec0db170576be85f","nodeType":"YulIdentifier","src":"13576:88:33"},"nodeType":"YulFunctionCall","src":"13576:93:33"},"nodeType":"YulExpressionStatement","src":"13576:93:33"},{"nodeType":"YulAssignment","src":"13678:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13689:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"13694:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13685:3:33"},"nodeType":"YulFunctionCall","src":"13685:12:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"13678:3:33"}]}]},"name":"abi_encode_t_stringliteral_08d0c5f0cc66c73f518001e6f234dffe5541b83b4743ef2eec0db170576be85f_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"13471:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"13479:3:33","type":""}],"src":"13337:366:33"},{"body":{"nodeType":"YulBlock","src":"13880:248:33","statements":[{"nodeType":"YulAssignment","src":"13890:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13902:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"13913:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13898:3:33"},"nodeType":"YulFunctionCall","src":"13898:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13890:4:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13937:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"13948:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13933:3:33"},"nodeType":"YulFunctionCall","src":"13933:17:33"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13956:4:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"13962:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13952:3:33"},"nodeType":"YulFunctionCall","src":"13952:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13926:6:33"},"nodeType":"YulFunctionCall","src":"13926:47:33"},"nodeType":"YulExpressionStatement","src":"13926:47:33"},{"nodeType":"YulAssignment","src":"13982:139:33","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14116:4:33"}],"functionName":{"name":"abi_encode_t_stringliteral_08d0c5f0cc66c73f518001e6f234dffe5541b83b4743ef2eec0db170576be85f_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13990:124:33"},"nodeType":"YulFunctionCall","src":"13990:131:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13982:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_08d0c5f0cc66c73f518001e6f234dffe5541b83b4743ef2eec0db170576be85f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13860:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13875:4:33","type":""}],"src":"13709:419:33"},{"body":{"nodeType":"YulBlock","src":"14240:127:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"14262:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"14270:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14258:3:33"},"nodeType":"YulFunctionCall","src":"14258:14:33"},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561","kind":"string","nodeType":"YulLiteral","src":"14274:34:33","type":"","value":"Initializable: contract is alrea"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14251:6:33"},"nodeType":"YulFunctionCall","src":"14251:58:33"},"nodeType":"YulExpressionStatement","src":"14251:58:33"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"14330:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"14338:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14326:3:33"},"nodeType":"YulFunctionCall","src":"14326:15:33"},{"hexValue":"647920696e697469616c697a6564","kind":"string","nodeType":"YulLiteral","src":"14343:16:33","type":"","value":"dy initialized"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14319:6:33"},"nodeType":"YulFunctionCall","src":"14319:41:33"},"nodeType":"YulExpressionStatement","src":"14319:41:33"}]},"name":"store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"14232:6:33","type":""}],"src":"14134:233:33"},{"body":{"nodeType":"YulBlock","src":"14519:220:33","statements":[{"nodeType":"YulAssignment","src":"14529:74:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14595:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"14600:2:33","type":"","value":"46"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14536:58:33"},"nodeType":"YulFunctionCall","src":"14536:67:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"14529:3:33"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14701:3:33"}],"functionName":{"name":"store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","nodeType":"YulIdentifier","src":"14612:88:33"},"nodeType":"YulFunctionCall","src":"14612:93:33"},"nodeType":"YulExpressionStatement","src":"14612:93:33"},{"nodeType":"YulAssignment","src":"14714:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14725:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"14730:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14721:3:33"},"nodeType":"YulFunctionCall","src":"14721:12:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"14714:3:33"}]}]},"name":"abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"14507:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"14515:3:33","type":""}],"src":"14373:366:33"},{"body":{"nodeType":"YulBlock","src":"14916:248:33","statements":[{"nodeType":"YulAssignment","src":"14926:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14938:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"14949:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14934:3:33"},"nodeType":"YulFunctionCall","src":"14934:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14926:4:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14973:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"14984:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14969:3:33"},"nodeType":"YulFunctionCall","src":"14969:17:33"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14992:4:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"14998:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14988:3:33"},"nodeType":"YulFunctionCall","src":"14988:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14962:6:33"},"nodeType":"YulFunctionCall","src":"14962:47:33"},"nodeType":"YulExpressionStatement","src":"14962:47:33"},{"nodeType":"YulAssignment","src":"15018:139:33","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15152:4:33"}],"functionName":{"name":"abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15026:124:33"},"nodeType":"YulFunctionCall","src":"15026:131:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15018:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14896:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14911:4:33","type":""}],"src":"14745:419:33"},{"body":{"nodeType":"YulBlock","src":"15223:32:33","statements":[{"nodeType":"YulAssignment","src":"15233:16:33","value":{"name":"value","nodeType":"YulIdentifier","src":"15244:5:33"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"15233:7:33"}]}]},"name":"cleanup_t_rational_1_by_1","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"15205:5:33","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"15215:7:33","type":""}],"src":"15170:85:33"},{"body":{"nodeType":"YulBlock","src":"15304:43:33","statements":[{"nodeType":"YulAssignment","src":"15314:27:33","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15329:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"15336:4:33","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15325:3:33"},"nodeType":"YulFunctionCall","src":"15325:16:33"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"15314:7:33"}]}]},"name":"cleanup_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"15286:5:33","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"15296:7:33","type":""}],"src":"15261:86:33"},{"body":{"nodeType":"YulBlock","src":"15385:28:33","statements":[{"nodeType":"YulAssignment","src":"15395:12:33","value":{"name":"value","nodeType":"YulIdentifier","src":"15402:5:33"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"15395:3:33"}]}]},"name":"identity","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"15371:5:33","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"15381:3:33","type":""}],"src":"15353:60:33"},{"body":{"nodeType":"YulBlock","src":"15485:88:33","statements":[{"nodeType":"YulAssignment","src":"15495:72:33","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15559:5:33"}],"functionName":{"name":"cleanup_t_rational_1_by_1","nodeType":"YulIdentifier","src":"15533:25:33"},"nodeType":"YulFunctionCall","src":"15533:32:33"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"15524:8:33"},"nodeType":"YulFunctionCall","src":"15524:42:33"}],"functionName":{"name":"cleanup_t_uint8","nodeType":"YulIdentifier","src":"15508:15:33"},"nodeType":"YulFunctionCall","src":"15508:59:33"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"15495:9:33"}]}]},"name":"convert_t_rational_1_by_1_to_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"15465:5:33","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"15475:9:33","type":""}],"src":"15419:154:33"},{"body":{"nodeType":"YulBlock","src":"15650:72:33","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15667:3:33"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15709:5:33"}],"functionName":{"name":"convert_t_rational_1_by_1_to_t_uint8","nodeType":"YulIdentifier","src":"15672:36:33"},"nodeType":"YulFunctionCall","src":"15672:43:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15660:6:33"},"nodeType":"YulFunctionCall","src":"15660:56:33"},"nodeType":"YulExpressionStatement","src":"15660:56:33"}]},"name":"abi_encode_t_rational_1_by_1_to_t_uint8_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"15638:5:33","type":""},{"name":"pos","nodeType":"YulTypedName","src":"15645:3:33","type":""}],"src":"15579:143:33"},{"body":{"nodeType":"YulBlock","src":"15832:130:33","statements":[{"nodeType":"YulAssignment","src":"15842:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15854:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"15865:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15850:3:33"},"nodeType":"YulFunctionCall","src":"15850:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15842:4:33"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"15928:6:33"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15941:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"15952:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15937:3:33"},"nodeType":"YulFunctionCall","src":"15937:17:33"}],"functionName":{"name":"abi_encode_t_rational_1_by_1_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"15878:49:33"},"nodeType":"YulFunctionCall","src":"15878:77:33"},"nodeType":"YulExpressionStatement","src":"15878:77:33"}]},"name":"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15804:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"15816:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15827:4:33","type":""}],"src":"15728:234:33"},{"body":{"nodeType":"YulBlock","src":"16074:76:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"16096:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"16104:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16092:3:33"},"nodeType":"YulFunctionCall","src":"16092:14:33"},{"hexValue":"4d554c54495f5349474e415455524520414c5245414459205245564f4b454420","kind":"string","nodeType":"YulLiteral","src":"16108:34:33","type":"","value":"MULTI_SIGNATURE ALREADY REVOKED "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16085:6:33"},"nodeType":"YulFunctionCall","src":"16085:58:33"},"nodeType":"YulExpressionStatement","src":"16085:58:33"}]},"name":"store_literal_in_memory_dc07914abe0b3d10797b2cb887fa8b14cfc1681b47ac3540e1f0ebac6c5c8771","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"16066:6:33","type":""}],"src":"15968:182:33"},{"body":{"nodeType":"YulBlock","src":"16302:220:33","statements":[{"nodeType":"YulAssignment","src":"16312:74:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16378:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"16383:2:33","type":"","value":"32"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"16319:58:33"},"nodeType":"YulFunctionCall","src":"16319:67:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"16312:3:33"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16484:3:33"}],"functionName":{"name":"store_literal_in_memory_dc07914abe0b3d10797b2cb887fa8b14cfc1681b47ac3540e1f0ebac6c5c8771","nodeType":"YulIdentifier","src":"16395:88:33"},"nodeType":"YulFunctionCall","src":"16395:93:33"},"nodeType":"YulExpressionStatement","src":"16395:93:33"},{"nodeType":"YulAssignment","src":"16497:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16508:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"16513:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16504:3:33"},"nodeType":"YulFunctionCall","src":"16504:12:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"16497:3:33"}]}]},"name":"abi_encode_t_stringliteral_dc07914abe0b3d10797b2cb887fa8b14cfc1681b47ac3540e1f0ebac6c5c8771_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"16290:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"16298:3:33","type":""}],"src":"16156:366:33"},{"body":{"nodeType":"YulBlock","src":"16699:248:33","statements":[{"nodeType":"YulAssignment","src":"16709:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16721:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"16732:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16717:3:33"},"nodeType":"YulFunctionCall","src":"16717:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16709:4:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16756:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"16767:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16752:3:33"},"nodeType":"YulFunctionCall","src":"16752:17:33"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"16775:4:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"16781:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16771:3:33"},"nodeType":"YulFunctionCall","src":"16771:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16745:6:33"},"nodeType":"YulFunctionCall","src":"16745:47:33"},"nodeType":"YulExpressionStatement","src":"16745:47:33"},{"nodeType":"YulAssignment","src":"16801:139:33","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"16935:4:33"}],"functionName":{"name":"abi_encode_t_stringliteral_dc07914abe0b3d10797b2cb887fa8b14cfc1681b47ac3540e1f0ebac6c5c8771_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"16809:124:33"},"nodeType":"YulFunctionCall","src":"16809:131:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16801:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_dc07914abe0b3d10797b2cb887fa8b14cfc1681b47ac3540e1f0ebac6c5c8771__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16679:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16694:4:33","type":""}],"src":"16528:419:33"},{"body":{"nodeType":"YulBlock","src":"17059:76:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"17081:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"17089:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17077:3:33"},"nodeType":"YulFunctionCall","src":"17077:14:33"},{"hexValue":"5a4b5f564552494649434154494f4e20414c52454144592052455441494e4544","kind":"string","nodeType":"YulLiteral","src":"17093:34:33","type":"","value":"ZK_VERIFICATION ALREADY RETAINED"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17070:6:33"},"nodeType":"YulFunctionCall","src":"17070:58:33"},"nodeType":"YulExpressionStatement","src":"17070:58:33"}]},"name":"store_literal_in_memory_6e8e6a900089259539cd5a4ffb1559532588f15e739713ca236a69dd15dad28d","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"17051:6:33","type":""}],"src":"16953:182:33"},{"body":{"nodeType":"YulBlock","src":"17287:220:33","statements":[{"nodeType":"YulAssignment","src":"17297:74:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17363:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"17368:2:33","type":"","value":"32"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17304:58:33"},"nodeType":"YulFunctionCall","src":"17304:67:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"17297:3:33"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17469:3:33"}],"functionName":{"name":"store_literal_in_memory_6e8e6a900089259539cd5a4ffb1559532588f15e739713ca236a69dd15dad28d","nodeType":"YulIdentifier","src":"17380:88:33"},"nodeType":"YulFunctionCall","src":"17380:93:33"},"nodeType":"YulExpressionStatement","src":"17380:93:33"},{"nodeType":"YulAssignment","src":"17482:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17493:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"17498:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17489:3:33"},"nodeType":"YulFunctionCall","src":"17489:12:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"17482:3:33"}]}]},"name":"abi_encode_t_stringliteral_6e8e6a900089259539cd5a4ffb1559532588f15e739713ca236a69dd15dad28d_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"17275:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"17283:3:33","type":""}],"src":"17141:366:33"},{"body":{"nodeType":"YulBlock","src":"17684:248:33","statements":[{"nodeType":"YulAssignment","src":"17694:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17706:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"17717:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17702:3:33"},"nodeType":"YulFunctionCall","src":"17702:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17694:4:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17741:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"17752:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17737:3:33"},"nodeType":"YulFunctionCall","src":"17737:17:33"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"17760:4:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"17766:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17756:3:33"},"nodeType":"YulFunctionCall","src":"17756:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17730:6:33"},"nodeType":"YulFunctionCall","src":"17730:47:33"},"nodeType":"YulExpressionStatement","src":"17730:47:33"},{"nodeType":"YulAssignment","src":"17786:139:33","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"17920:4:33"}],"functionName":{"name":"abi_encode_t_stringliteral_6e8e6a900089259539cd5a4ffb1559532588f15e739713ca236a69dd15dad28d_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17794:124:33"},"nodeType":"YulFunctionCall","src":"17794:131:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17786:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_6e8e6a900089259539cd5a4ffb1559532588f15e739713ca236a69dd15dad28d__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17664:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17679:4:33","type":""}],"src":"17513:419:33"},{"body":{"nodeType":"YulBlock","src":"18044:114:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"18066:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"18074:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18062:3:33"},"nodeType":"YulFunctionCall","src":"18062:14:33"},{"hexValue":"4d554c54495f5349474e415455524520414c52454144592052455441494e4544","kind":"string","nodeType":"YulLiteral","src":"18078:34:33","type":"","value":"MULTI_SIGNATURE ALREADY RETAINED"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18055:6:33"},"nodeType":"YulFunctionCall","src":"18055:58:33"},"nodeType":"YulExpressionStatement","src":"18055:58:33"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"18134:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"18142:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18130:3:33"},"nodeType":"YulFunctionCall","src":"18130:15:33"},{"hexValue":"20","kind":"string","nodeType":"YulLiteral","src":"18147:3:33","type":"","value":" "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18123:6:33"},"nodeType":"YulFunctionCall","src":"18123:28:33"},"nodeType":"YulExpressionStatement","src":"18123:28:33"}]},"name":"store_literal_in_memory_2ec99e6d611129d5d446401a53002d56de11cd1961b140eb64e5ce86a4c14361","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"18036:6:33","type":""}],"src":"17938:220:33"},{"body":{"nodeType":"YulBlock","src":"18310:220:33","statements":[{"nodeType":"YulAssignment","src":"18320:74:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18386:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"18391:2:33","type":"","value":"33"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"18327:58:33"},"nodeType":"YulFunctionCall","src":"18327:67:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"18320:3:33"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18492:3:33"}],"functionName":{"name":"store_literal_in_memory_2ec99e6d611129d5d446401a53002d56de11cd1961b140eb64e5ce86a4c14361","nodeType":"YulIdentifier","src":"18403:88:33"},"nodeType":"YulFunctionCall","src":"18403:93:33"},"nodeType":"YulExpressionStatement","src":"18403:93:33"},{"nodeType":"YulAssignment","src":"18505:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18516:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"18521:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18512:3:33"},"nodeType":"YulFunctionCall","src":"18512:12:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"18505:3:33"}]}]},"name":"abi_encode_t_stringliteral_2ec99e6d611129d5d446401a53002d56de11cd1961b140eb64e5ce86a4c14361_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"18298:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"18306:3:33","type":""}],"src":"18164:366:33"},{"body":{"nodeType":"YulBlock","src":"18707:248:33","statements":[{"nodeType":"YulAssignment","src":"18717:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18729:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"18740:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18725:3:33"},"nodeType":"YulFunctionCall","src":"18725:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18717:4:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18764:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"18775:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18760:3:33"},"nodeType":"YulFunctionCall","src":"18760:17:33"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18783:4:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"18789:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18779:3:33"},"nodeType":"YulFunctionCall","src":"18779:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18753:6:33"},"nodeType":"YulFunctionCall","src":"18753:47:33"},"nodeType":"YulExpressionStatement","src":"18753:47:33"},{"nodeType":"YulAssignment","src":"18809:139:33","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18943:4:33"}],"functionName":{"name":"abi_encode_t_stringliteral_2ec99e6d611129d5d446401a53002d56de11cd1961b140eb64e5ce86a4c14361_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"18817:124:33"},"nodeType":"YulFunctionCall","src":"18817:131:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18809:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_2ec99e6d611129d5d446401a53002d56de11cd1961b140eb64e5ce86a4c14361__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18687:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18702:4:33","type":""}],"src":"18536:419:33"},{"body":{"nodeType":"YulBlock","src":"19067:119:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"19089:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"19097:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19085:3:33"},"nodeType":"YulFunctionCall","src":"19085:14:33"},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061","kind":"string","nodeType":"YulLiteral","src":"19101:34:33","type":"","value":"Ownable: new owner is the zero a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19078:6:33"},"nodeType":"YulFunctionCall","src":"19078:58:33"},"nodeType":"YulExpressionStatement","src":"19078:58:33"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"19157:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"19165:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19153:3:33"},"nodeType":"YulFunctionCall","src":"19153:15:33"},{"hexValue":"646472657373","kind":"string","nodeType":"YulLiteral","src":"19170:8:33","type":"","value":"ddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19146:6:33"},"nodeType":"YulFunctionCall","src":"19146:33:33"},"nodeType":"YulExpressionStatement","src":"19146:33:33"}]},"name":"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"19059:6:33","type":""}],"src":"18961:225:33"},{"body":{"nodeType":"YulBlock","src":"19338:220:33","statements":[{"nodeType":"YulAssignment","src":"19348:74:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19414:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"19419:2:33","type":"","value":"38"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19355:58:33"},"nodeType":"YulFunctionCall","src":"19355:67:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"19348:3:33"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19520:3:33"}],"functionName":{"name":"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","nodeType":"YulIdentifier","src":"19431:88:33"},"nodeType":"YulFunctionCall","src":"19431:93:33"},"nodeType":"YulExpressionStatement","src":"19431:93:33"},{"nodeType":"YulAssignment","src":"19533:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19544:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"19549:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19540:3:33"},"nodeType":"YulFunctionCall","src":"19540:12:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"19533:3:33"}]}]},"name":"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"19326:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"19334:3:33","type":""}],"src":"19192:366:33"},{"body":{"nodeType":"YulBlock","src":"19735:248:33","statements":[{"nodeType":"YulAssignment","src":"19745:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19757:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"19768:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19753:3:33"},"nodeType":"YulFunctionCall","src":"19753:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19745:4:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19792:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"19803:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19788:3:33"},"nodeType":"YulFunctionCall","src":"19788:17:33"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19811:4:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"19817:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19807:3:33"},"nodeType":"YulFunctionCall","src":"19807:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19781:6:33"},"nodeType":"YulFunctionCall","src":"19781:47:33"},"nodeType":"YulExpressionStatement","src":"19781:47:33"},{"nodeType":"YulAssignment","src":"19837:139:33","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19971:4:33"}],"functionName":{"name":"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19845:124:33"},"nodeType":"YulFunctionCall","src":"19845:131:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19837:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19715:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19730:4:33","type":""}],"src":"19564:419:33"},{"body":{"nodeType":"YulBlock","src":"20095:76:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"20117:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"20125:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20113:3:33"},"nodeType":"YulFunctionCall","src":"20113:14:33"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"20129:34:33","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20106:6:33"},"nodeType":"YulFunctionCall","src":"20106:58:33"},"nodeType":"YulExpressionStatement","src":"20106:58:33"}]},"name":"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"20087:6:33","type":""}],"src":"19989:182:33"},{"body":{"nodeType":"YulBlock","src":"20323:220:33","statements":[{"nodeType":"YulAssignment","src":"20333:74:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20399:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"20404:2:33","type":"","value":"32"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"20340:58:33"},"nodeType":"YulFunctionCall","src":"20340:67:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"20333:3:33"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20505:3:33"}],"functionName":{"name":"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","nodeType":"YulIdentifier","src":"20416:88:33"},"nodeType":"YulFunctionCall","src":"20416:93:33"},"nodeType":"YulExpressionStatement","src":"20416:93:33"},{"nodeType":"YulAssignment","src":"20518:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20529:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"20534:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20525:3:33"},"nodeType":"YulFunctionCall","src":"20525:12:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"20518:3:33"}]}]},"name":"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"20311:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"20319:3:33","type":""}],"src":"20177:366:33"},{"body":{"nodeType":"YulBlock","src":"20720:248:33","statements":[{"nodeType":"YulAssignment","src":"20730:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20742:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"20753:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20738:3:33"},"nodeType":"YulFunctionCall","src":"20738:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20730:4:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20777:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"20788:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20773:3:33"},"nodeType":"YulFunctionCall","src":"20773:17:33"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"20796:4:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"20802:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"20792:3:33"},"nodeType":"YulFunctionCall","src":"20792:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20766:6:33"},"nodeType":"YulFunctionCall","src":"20766:47:33"},"nodeType":"YulExpressionStatement","src":"20766:47:33"},{"nodeType":"YulAssignment","src":"20822:139:33","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"20956:4:33"}],"functionName":{"name":"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"20830:124:33"},"nodeType":"YulFunctionCall","src":"20830:131:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20822:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20700:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20715:4:33","type":""}],"src":"20549:419:33"},{"body":{"nodeType":"YulBlock","src":"21017:79:33","statements":[{"body":{"nodeType":"YulBlock","src":"21074:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21083:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"21086:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"21076:6:33"},"nodeType":"YulFunctionCall","src":"21076:12:33"},"nodeType":"YulExpressionStatement","src":"21076:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"21040:5:33"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"21065:5:33"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"21047:17:33"},"nodeType":"YulFunctionCall","src":"21047:24:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"21037:2:33"},"nodeType":"YulFunctionCall","src":"21037:35:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"21030:6:33"},"nodeType":"YulFunctionCall","src":"21030:43:33"},"nodeType":"YulIf","src":"21027:63:33"}]},"name":"validator_revert_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"21010:5:33","type":""}],"src":"20974:122:33"},{"body":{"nodeType":"YulBlock","src":"21165:80:33","statements":[{"nodeType":"YulAssignment","src":"21175:22:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"21190:6:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"21184:5:33"},"nodeType":"YulFunctionCall","src":"21184:13:33"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"21175:5:33"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"21233:5:33"}],"functionName":{"name":"validator_revert_t_bytes32","nodeType":"YulIdentifier","src":"21206:26:33"},"nodeType":"YulFunctionCall","src":"21206:33:33"},"nodeType":"YulExpressionStatement","src":"21206:33:33"}]},"name":"abi_decode_t_bytes32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"21143:6:33","type":""},{"name":"end","nodeType":"YulTypedName","src":"21151:3:33","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"21159:5:33","type":""}],"src":"21102:143:33"},{"body":{"nodeType":"YulBlock","src":"21328:274:33","statements":[{"body":{"nodeType":"YulBlock","src":"21374:83:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"21376:77:33"},"nodeType":"YulFunctionCall","src":"21376:79:33"},"nodeType":"YulExpressionStatement","src":"21376:79:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"21349:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"21358:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21345:3:33"},"nodeType":"YulFunctionCall","src":"21345:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"21370:2:33","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"21341:3:33"},"nodeType":"YulFunctionCall","src":"21341:32:33"},"nodeType":"YulIf","src":"21338:119:33"},{"nodeType":"YulBlock","src":"21467:128:33","statements":[{"nodeType":"YulVariableDeclaration","src":"21482:15:33","value":{"kind":"number","nodeType":"YulLiteral","src":"21496:1:33","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"21486:6:33","type":""}]},{"nodeType":"YulAssignment","src":"21511:74:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21557:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"21568:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21553:3:33"},"nodeType":"YulFunctionCall","src":"21553:22:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"21577:7:33"}],"functionName":{"name":"abi_decode_t_bytes32_fromMemory","nodeType":"YulIdentifier","src":"21521:31:33"},"nodeType":"YulFunctionCall","src":"21521:64:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"21511:6:33"}]}]}]},"name":"abi_decode_tuple_t_bytes32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21298:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"21309:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"21321:6:33","type":""}],"src":"21251:351:33"},{"body":{"nodeType":"YulBlock","src":"21714:127:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"21736:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"21744:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21732:3:33"},"nodeType":"YulFunctionCall","src":"21732:14:33"},{"hexValue":"45524331393637557067726164653a206e657720696d706c656d656e74617469","kind":"string","nodeType":"YulLiteral","src":"21748:34:33","type":"","value":"ERC1967Upgrade: new implementati"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21725:6:33"},"nodeType":"YulFunctionCall","src":"21725:58:33"},"nodeType":"YulExpressionStatement","src":"21725:58:33"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"21804:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"21812:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21800:3:33"},"nodeType":"YulFunctionCall","src":"21800:15:33"},{"hexValue":"6f6e206973206e6f742055555053","kind":"string","nodeType":"YulLiteral","src":"21817:16:33","type":"","value":"on is not UUPS"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21793:6:33"},"nodeType":"YulFunctionCall","src":"21793:41:33"},"nodeType":"YulExpressionStatement","src":"21793:41:33"}]},"name":"store_literal_in_memory_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"21706:6:33","type":""}],"src":"21608:233:33"},{"body":{"nodeType":"YulBlock","src":"21993:220:33","statements":[{"nodeType":"YulAssignment","src":"22003:74:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22069:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"22074:2:33","type":"","value":"46"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"22010:58:33"},"nodeType":"YulFunctionCall","src":"22010:67:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"22003:3:33"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22175:3:33"}],"functionName":{"name":"store_literal_in_memory_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24","nodeType":"YulIdentifier","src":"22086:88:33"},"nodeType":"YulFunctionCall","src":"22086:93:33"},"nodeType":"YulExpressionStatement","src":"22086:93:33"},{"nodeType":"YulAssignment","src":"22188:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22199:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"22204:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22195:3:33"},"nodeType":"YulFunctionCall","src":"22195:12:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"22188:3:33"}]}]},"name":"abi_encode_t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"21981:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"21989:3:33","type":""}],"src":"21847:366:33"},{"body":{"nodeType":"YulBlock","src":"22390:248:33","statements":[{"nodeType":"YulAssignment","src":"22400:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22412:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"22423:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22408:3:33"},"nodeType":"YulFunctionCall","src":"22408:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22400:4:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22447:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"22458:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22443:3:33"},"nodeType":"YulFunctionCall","src":"22443:17:33"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"22466:4:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"22472:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"22462:3:33"},"nodeType":"YulFunctionCall","src":"22462:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22436:6:33"},"nodeType":"YulFunctionCall","src":"22436:47:33"},"nodeType":"YulExpressionStatement","src":"22436:47:33"},{"nodeType":"YulAssignment","src":"22492:139:33","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"22626:4:33"}],"functionName":{"name":"abi_encode_t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"22500:124:33"},"nodeType":"YulFunctionCall","src":"22500:131:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22492:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22370:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22385:4:33","type":""}],"src":"22219:419:33"},{"body":{"nodeType":"YulBlock","src":"22750:122:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"22772:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"22780:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22768:3:33"},"nodeType":"YulFunctionCall","src":"22768:14:33"},{"hexValue":"45524331393637557067726164653a20756e737570706f727465642070726f78","kind":"string","nodeType":"YulLiteral","src":"22784:34:33","type":"","value":"ERC1967Upgrade: unsupported prox"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22761:6:33"},"nodeType":"YulFunctionCall","src":"22761:58:33"},"nodeType":"YulExpressionStatement","src":"22761:58:33"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"22840:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"22848:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22836:3:33"},"nodeType":"YulFunctionCall","src":"22836:15:33"},{"hexValue":"6961626c6555554944","kind":"string","nodeType":"YulLiteral","src":"22853:11:33","type":"","value":"iableUUID"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22829:6:33"},"nodeType":"YulFunctionCall","src":"22829:36:33"},"nodeType":"YulExpressionStatement","src":"22829:36:33"}]},"name":"store_literal_in_memory_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"22742:6:33","type":""}],"src":"22644:228:33"},{"body":{"nodeType":"YulBlock","src":"23024:220:33","statements":[{"nodeType":"YulAssignment","src":"23034:74:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23100:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"23105:2:33","type":"","value":"41"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"23041:58:33"},"nodeType":"YulFunctionCall","src":"23041:67:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"23034:3:33"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23206:3:33"}],"functionName":{"name":"store_literal_in_memory_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c","nodeType":"YulIdentifier","src":"23117:88:33"},"nodeType":"YulFunctionCall","src":"23117:93:33"},"nodeType":"YulExpressionStatement","src":"23117:93:33"},{"nodeType":"YulAssignment","src":"23219:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23230:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"23235:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23226:3:33"},"nodeType":"YulFunctionCall","src":"23226:12:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"23219:3:33"}]}]},"name":"abi_encode_t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"23012:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"23020:3:33","type":""}],"src":"22878:366:33"},{"body":{"nodeType":"YulBlock","src":"23421:248:33","statements":[{"nodeType":"YulAssignment","src":"23431:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23443:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"23454:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23439:3:33"},"nodeType":"YulFunctionCall","src":"23439:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23431:4:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23478:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"23489:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23474:3:33"},"nodeType":"YulFunctionCall","src":"23474:17:33"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"23497:4:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"23503:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"23493:3:33"},"nodeType":"YulFunctionCall","src":"23493:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23467:6:33"},"nodeType":"YulFunctionCall","src":"23467:47:33"},"nodeType":"YulExpressionStatement","src":"23467:47:33"},{"nodeType":"YulAssignment","src":"23523:139:33","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"23657:4:33"}],"functionName":{"name":"abi_encode_t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"23531:124:33"},"nodeType":"YulFunctionCall","src":"23531:131:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23523:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23401:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"23416:4:33","type":""}],"src":"23250:419:33"},{"body":{"nodeType":"YulBlock","src":"23781:124:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"23803:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"23811:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23799:3:33"},"nodeType":"YulFunctionCall","src":"23799:14:33"},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069","kind":"string","nodeType":"YulLiteral","src":"23815:34:33","type":"","value":"Initializable: contract is not i"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23792:6:33"},"nodeType":"YulFunctionCall","src":"23792:58:33"},"nodeType":"YulExpressionStatement","src":"23792:58:33"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"23871:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"23879:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23867:3:33"},"nodeType":"YulFunctionCall","src":"23867:15:33"},{"hexValue":"6e697469616c697a696e67","kind":"string","nodeType":"YulLiteral","src":"23884:13:33","type":"","value":"nitializing"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23860:6:33"},"nodeType":"YulFunctionCall","src":"23860:38:33"},"nodeType":"YulExpressionStatement","src":"23860:38:33"}]},"name":"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"23773:6:33","type":""}],"src":"23675:230:33"},{"body":{"nodeType":"YulBlock","src":"24057:220:33","statements":[{"nodeType":"YulAssignment","src":"24067:74:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24133:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"24138:2:33","type":"","value":"43"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"24074:58:33"},"nodeType":"YulFunctionCall","src":"24074:67:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"24067:3:33"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24239:3:33"}],"functionName":{"name":"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","nodeType":"YulIdentifier","src":"24150:88:33"},"nodeType":"YulFunctionCall","src":"24150:93:33"},"nodeType":"YulExpressionStatement","src":"24150:93:33"},{"nodeType":"YulAssignment","src":"24252:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24263:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"24268:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24259:3:33"},"nodeType":"YulFunctionCall","src":"24259:12:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"24252:3:33"}]}]},"name":"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"24045:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"24053:3:33","type":""}],"src":"23911:366:33"},{"body":{"nodeType":"YulBlock","src":"24454:248:33","statements":[{"nodeType":"YulAssignment","src":"24464:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24476:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"24487:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24472:3:33"},"nodeType":"YulFunctionCall","src":"24472:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24464:4:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24511:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"24522:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24507:3:33"},"nodeType":"YulFunctionCall","src":"24507:17:33"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"24530:4:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"24536:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"24526:3:33"},"nodeType":"YulFunctionCall","src":"24526:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24500:6:33"},"nodeType":"YulFunctionCall","src":"24500:47:33"},"nodeType":"YulExpressionStatement","src":"24500:47:33"},{"nodeType":"YulAssignment","src":"24556:139:33","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"24690:4:33"}],"functionName":{"name":"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"24564:124:33"},"nodeType":"YulFunctionCall","src":"24564:131:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24556:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"24434:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"24449:4:33","type":""}],"src":"24283:419:33"},{"body":{"nodeType":"YulBlock","src":"24814:126:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"24836:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"24844:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24832:3:33"},"nodeType":"YulFunctionCall","src":"24832:14:33"},{"hexValue":"455243313936373a206e657720696d706c656d656e746174696f6e206973206e","kind":"string","nodeType":"YulLiteral","src":"24848:34:33","type":"","value":"ERC1967: new implementation is n"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24825:6:33"},"nodeType":"YulFunctionCall","src":"24825:58:33"},"nodeType":"YulExpressionStatement","src":"24825:58:33"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"24904:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"24912:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24900:3:33"},"nodeType":"YulFunctionCall","src":"24900:15:33"},{"hexValue":"6f74206120636f6e7472616374","kind":"string","nodeType":"YulLiteral","src":"24917:15:33","type":"","value":"ot a contract"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24893:6:33"},"nodeType":"YulFunctionCall","src":"24893:40:33"},"nodeType":"YulExpressionStatement","src":"24893:40:33"}]},"name":"store_literal_in_memory_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"24806:6:33","type":""}],"src":"24708:232:33"},{"body":{"nodeType":"YulBlock","src":"25092:220:33","statements":[{"nodeType":"YulAssignment","src":"25102:74:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25168:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"25173:2:33","type":"","value":"45"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"25109:58:33"},"nodeType":"YulFunctionCall","src":"25109:67:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"25102:3:33"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25274:3:33"}],"functionName":{"name":"store_literal_in_memory_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65","nodeType":"YulIdentifier","src":"25185:88:33"},"nodeType":"YulFunctionCall","src":"25185:93:33"},"nodeType":"YulExpressionStatement","src":"25185:93:33"},{"nodeType":"YulAssignment","src":"25287:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25298:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"25303:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25294:3:33"},"nodeType":"YulFunctionCall","src":"25294:12:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"25287:3:33"}]}]},"name":"abi_encode_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"25080:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"25088:3:33","type":""}],"src":"24946:366:33"},{"body":{"nodeType":"YulBlock","src":"25489:248:33","statements":[{"nodeType":"YulAssignment","src":"25499:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25511:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"25522:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25507:3:33"},"nodeType":"YulFunctionCall","src":"25507:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25499:4:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25546:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"25557:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25542:3:33"},"nodeType":"YulFunctionCall","src":"25542:17:33"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"25565:4:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"25571:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"25561:3:33"},"nodeType":"YulFunctionCall","src":"25561:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25535:6:33"},"nodeType":"YulFunctionCall","src":"25535:47:33"},"nodeType":"YulExpressionStatement","src":"25535:47:33"},{"nodeType":"YulAssignment","src":"25591:139:33","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"25725:4:33"}],"functionName":{"name":"abi_encode_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"25599:124:33"},"nodeType":"YulFunctionCall","src":"25599:131:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25591:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"25469:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"25484:4:33","type":""}],"src":"25318:419:33"},{"body":{"nodeType":"YulBlock","src":"25849:119:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"25871:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"25879:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25867:3:33"},"nodeType":"YulFunctionCall","src":"25867:14:33"},{"hexValue":"416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f","kind":"string","nodeType":"YulLiteral","src":"25883:34:33","type":"","value":"Address: delegate call to non-co"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25860:6:33"},"nodeType":"YulFunctionCall","src":"25860:58:33"},"nodeType":"YulExpressionStatement","src":"25860:58:33"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"25939:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"25947:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25935:3:33"},"nodeType":"YulFunctionCall","src":"25935:15:33"},{"hexValue":"6e7472616374","kind":"string","nodeType":"YulLiteral","src":"25952:8:33","type":"","value":"ntract"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25928:6:33"},"nodeType":"YulFunctionCall","src":"25928:33:33"},"nodeType":"YulExpressionStatement","src":"25928:33:33"}]},"name":"store_literal_in_memory_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"25841:6:33","type":""}],"src":"25743:225:33"},{"body":{"nodeType":"YulBlock","src":"26120:220:33","statements":[{"nodeType":"YulAssignment","src":"26130:74:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26196:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"26201:2:33","type":"","value":"38"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"26137:58:33"},"nodeType":"YulFunctionCall","src":"26137:67:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"26130:3:33"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26302:3:33"}],"functionName":{"name":"store_literal_in_memory_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520","nodeType":"YulIdentifier","src":"26213:88:33"},"nodeType":"YulFunctionCall","src":"26213:93:33"},"nodeType":"YulExpressionStatement","src":"26213:93:33"},{"nodeType":"YulAssignment","src":"26315:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26326:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"26331:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26322:3:33"},"nodeType":"YulFunctionCall","src":"26322:12:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"26315:3:33"}]}]},"name":"abi_encode_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"26108:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"26116:3:33","type":""}],"src":"25974:366:33"},{"body":{"nodeType":"YulBlock","src":"26517:248:33","statements":[{"nodeType":"YulAssignment","src":"26527:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26539:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"26550:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26535:3:33"},"nodeType":"YulFunctionCall","src":"26535:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26527:4:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26574:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"26585:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26570:3:33"},"nodeType":"YulFunctionCall","src":"26570:17:33"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"26593:4:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"26599:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"26589:3:33"},"nodeType":"YulFunctionCall","src":"26589:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26563:6:33"},"nodeType":"YulFunctionCall","src":"26563:47:33"},"nodeType":"YulExpressionStatement","src":"26563:47:33"},{"nodeType":"YulAssignment","src":"26619:139:33","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"26753:4:33"}],"functionName":{"name":"abi_encode_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"26627:124:33"},"nodeType":"YulFunctionCall","src":"26627:131:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26619:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"26497:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"26512:4:33","type":""}],"src":"26346:419:33"},{"body":{"nodeType":"YulBlock","src":"26829:40:33","statements":[{"nodeType":"YulAssignment","src":"26840:22:33","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"26856:5:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"26850:5:33"},"nodeType":"YulFunctionCall","src":"26850:12:33"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"26840:6:33"}]}]},"name":"array_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"26812:5:33","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"26822:6:33","type":""}],"src":"26771:98:33"},{"body":{"nodeType":"YulBlock","src":"26988:34:33","statements":[{"nodeType":"YulAssignment","src":"26998:18:33","value":{"name":"pos","nodeType":"YulIdentifier","src":"27013:3:33"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"26998:11:33"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"26960:3:33","type":""},{"name":"length","nodeType":"YulTypedName","src":"26965:6:33","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"26976:11:33","type":""}],"src":"26875:147:33"},{"body":{"nodeType":"YulBlock","src":"27077:258:33","statements":[{"nodeType":"YulVariableDeclaration","src":"27087:10:33","value":{"kind":"number","nodeType":"YulLiteral","src":"27096:1:33","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"27091:1:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"27156:63:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"27181:3:33"},{"name":"i","nodeType":"YulIdentifier","src":"27186:1:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27177:3:33"},"nodeType":"YulFunctionCall","src":"27177:11:33"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"27200:3:33"},{"name":"i","nodeType":"YulIdentifier","src":"27205:1:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27196:3:33"},"nodeType":"YulFunctionCall","src":"27196:11:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"27190:5:33"},"nodeType":"YulFunctionCall","src":"27190:18:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27170:6:33"},"nodeType":"YulFunctionCall","src":"27170:39:33"},"nodeType":"YulExpressionStatement","src":"27170:39:33"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"27117:1:33"},{"name":"length","nodeType":"YulIdentifier","src":"27120:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"27114:2:33"},"nodeType":"YulFunctionCall","src":"27114:13:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"27128:19:33","statements":[{"nodeType":"YulAssignment","src":"27130:15:33","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"27139:1:33"},{"kind":"number","nodeType":"YulLiteral","src":"27142:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27135:3:33"},"nodeType":"YulFunctionCall","src":"27135:10:33"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"27130:1:33"}]}]},"pre":{"nodeType":"YulBlock","src":"27110:3:33","statements":[]},"src":"27106:113:33"},{"body":{"nodeType":"YulBlock","src":"27253:76:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"27303:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"27308:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27299:3:33"},"nodeType":"YulFunctionCall","src":"27299:16:33"},{"kind":"number","nodeType":"YulLiteral","src":"27317:1:33","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27292:6:33"},"nodeType":"YulFunctionCall","src":"27292:27:33"},"nodeType":"YulExpressionStatement","src":"27292:27:33"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"27234:1:33"},{"name":"length","nodeType":"YulIdentifier","src":"27237:6:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"27231:2:33"},"nodeType":"YulFunctionCall","src":"27231:13:33"},"nodeType":"YulIf","src":"27228:101:33"}]},"name":"copy_memory_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"27059:3:33","type":""},{"name":"dst","nodeType":"YulTypedName","src":"27064:3:33","type":""},{"name":"length","nodeType":"YulTypedName","src":"27069:6:33","type":""}],"src":"27028:307:33"},{"body":{"nodeType":"YulBlock","src":"27449:265:33","statements":[{"nodeType":"YulVariableDeclaration","src":"27459:52:33","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"27505:5:33"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"27473:31:33"},"nodeType":"YulFunctionCall","src":"27473:38:33"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"27463:6:33","type":""}]},{"nodeType":"YulAssignment","src":"27520:95:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27603:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"27608:6:33"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"27527:75:33"},"nodeType":"YulFunctionCall","src":"27527:88:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"27520:3:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"27650:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"27657:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27646:3:33"},"nodeType":"YulFunctionCall","src":"27646:16:33"},{"name":"pos","nodeType":"YulIdentifier","src":"27664:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"27669:6:33"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"27624:21:33"},"nodeType":"YulFunctionCall","src":"27624:52:33"},"nodeType":"YulExpressionStatement","src":"27624:52:33"},{"nodeType":"YulAssignment","src":"27685:23:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27696:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"27701:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27692:3:33"},"nodeType":"YulFunctionCall","src":"27692:16:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"27685:3:33"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"27430:5:33","type":""},{"name":"pos","nodeType":"YulTypedName","src":"27437:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"27445:3:33","type":""}],"src":"27341:373:33"},{"body":{"nodeType":"YulBlock","src":"27854:137:33","statements":[{"nodeType":"YulAssignment","src":"27865:100:33","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"27952:6:33"},{"name":"pos","nodeType":"YulIdentifier","src":"27961:3:33"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"27872:79:33"},"nodeType":"YulFunctionCall","src":"27872:93:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"27865:3:33"}]},{"nodeType":"YulAssignment","src":"27975:10:33","value":{"name":"pos","nodeType":"YulIdentifier","src":"27982:3:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"27975:3:33"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"27833:3:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"27839:6:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"27850:3:33","type":""}],"src":"27720:271:33"},{"body":{"nodeType":"YulBlock","src":"28056:40:33","statements":[{"nodeType":"YulAssignment","src":"28067:22:33","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"28083:5:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"28077:5:33"},"nodeType":"YulFunctionCall","src":"28077:12:33"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"28067:6:33"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"28039:5:33","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"28049:6:33","type":""}],"src":"27997:99:33"},{"body":{"nodeType":"YulBlock","src":"28194:272:33","statements":[{"nodeType":"YulVariableDeclaration","src":"28204:53:33","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"28251:5:33"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"28218:32:33"},"nodeType":"YulFunctionCall","src":"28218:39:33"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"28208:6:33","type":""}]},{"nodeType":"YulAssignment","src":"28266:78:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"28332:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"28337:6:33"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"28273:58:33"},"nodeType":"YulFunctionCall","src":"28273:71:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"28266:3:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"28379:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"28386:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28375:3:33"},"nodeType":"YulFunctionCall","src":"28375:16:33"},{"name":"pos","nodeType":"YulIdentifier","src":"28393:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"28398:6:33"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"28353:21:33"},"nodeType":"YulFunctionCall","src":"28353:52:33"},"nodeType":"YulExpressionStatement","src":"28353:52:33"},{"nodeType":"YulAssignment","src":"28414:46:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"28425:3:33"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"28452:6:33"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"28430:21:33"},"nodeType":"YulFunctionCall","src":"28430:29:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28421:3:33"},"nodeType":"YulFunctionCall","src":"28421:39:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"28414:3:33"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"28175:5:33","type":""},{"name":"pos","nodeType":"YulTypedName","src":"28182:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"28190:3:33","type":""}],"src":"28102:364:33"},{"body":{"nodeType":"YulBlock","src":"28590:195:33","statements":[{"nodeType":"YulAssignment","src":"28600:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28612:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"28623:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28608:3:33"},"nodeType":"YulFunctionCall","src":"28608:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"28600:4:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28647:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"28658:1:33","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28643:3:33"},"nodeType":"YulFunctionCall","src":"28643:17:33"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"28666:4:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"28672:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"28662:3:33"},"nodeType":"YulFunctionCall","src":"28662:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28636:6:33"},"nodeType":"YulFunctionCall","src":"28636:47:33"},"nodeType":"YulExpressionStatement","src":"28636:47:33"},{"nodeType":"YulAssignment","src":"28692:86:33","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"28764:6:33"},{"name":"tail","nodeType":"YulIdentifier","src":"28773:4:33"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"28700:63:33"},"nodeType":"YulFunctionCall","src":"28700:78:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"28692:4:33"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"28562:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"28574:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"28585:4:33","type":""}],"src":"28472:313:33"}]},"contents":"{\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x > (maxValue - y)\n        if gt(x, sub(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, y)) { panic_error_0x11() }\n\n        sum := add(x, y)\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_length_t_array$_t_address_$dyn_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_array$_t_address_$dyn_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_dataslot_t_array$_t_address_$dyn_memory_ptr(ptr) -> data {\n        data := ptr\n\n        data := add(ptr, 0x20)\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_to_t_address(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encodeUpdatedPos_t_address_to_t_address(value0, pos) -> updatedPos {\n        abi_encode_t_address_to_t_address(value0, pos)\n        updatedPos := add(pos, 0x20)\n    }\n\n    function array_nextElement_t_array$_t_address_$dyn_memory_ptr(ptr) -> next {\n        next := add(ptr, 0x20)\n    }\n\n    // address[] -> address[]\n    function abi_encode_t_array$_t_address_$dyn_memory_ptr_to_t_array$_t_address_$dyn_memory_ptr_fromStack(value, pos)  -> end  {\n        let length := array_length_t_array$_t_address_$dyn_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_array$_t_address_$dyn_memory_ptr_fromStack(pos, length)\n        let baseRef := array_dataslot_t_array$_t_address_$dyn_memory_ptr(value)\n        let srcPtr := baseRef\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n            let elementValue0 := mload(srcPtr)\n            pos := abi_encodeUpdatedPos_t_address_to_t_address(elementValue0, pos)\n            srcPtr := array_nextElement_t_array$_t_address_$dyn_memory_ptr(srcPtr)\n        }\n        end := pos\n    }\n\n    function abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_array$_t_address_$dyn_memory_ptr_to_t_array$_t_address_$dyn_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_bytes_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_calldata_to_memory(src, dst, length) {\n        calldatacopy(dst, src, length)\n        // clear end\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_decode_available_length_t_bytes_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory(src, dst, length)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_bytes_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_addresst_bytes_memory_ptr(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    // struct IProfiles.User -> struct IProfiles.User\n    function abi_encode_t_struct$_User_$6247_memory_ptr_to_t_struct$_User_$6247_memory_ptr_fromStack(value, pos)  {\n        let tail := add(pos, 0xa0)\n\n        {\n            // userPubAddress\n\n            let memberValue0 := mload(add(value, 0x00))\n            abi_encode_t_address_to_t_address(memberValue0, add(pos, 0x00))\n        }\n\n        {\n            // multiSig\n\n            let memberValue0 := mload(add(value, 0x20))\n            abi_encode_t_bytes32_to_t_bytes32(memberValue0, add(pos, 0x20))\n        }\n\n        {\n            // verificationStatus_I\n\n            let memberValue0 := mload(add(value, 0x40))\n            abi_encode_t_bool_to_t_bool(memberValue0, add(pos, 0x40))\n        }\n\n        {\n            // verificationStatus_II\n\n            let memberValue0 := mload(add(value, 0x60))\n            abi_encode_t_bool_to_t_bool(memberValue0, add(pos, 0x60))\n        }\n\n        {\n            // isStatusRevoked\n\n            let memberValue0 := mload(add(value, 0x80))\n            abi_encode_t_bool_to_t_bool(memberValue0, add(pos, 0x80))\n        }\n\n    }\n\n    function abi_encode_tuple_t_struct$_User_$6247_memory_ptr__to_t_struct$_User_$6247_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 160)\n\n        abi_encode_t_struct$_User_$6247_memory_ptr_to_t_struct$_User_$6247_memory_ptr_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb(memPtr) {\n\n        mstore(add(memPtr, 0), \"Function must be called through \")\n\n        mstore(add(memPtr, 32), \"delegatecall\")\n\n    }\n\n    function abi_encode_t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 44)\n        store_literal_in_memory_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434(memPtr) {\n\n        mstore(add(memPtr, 0), \"Function must be called through \")\n\n        mstore(add(memPtr, 32), \"active proxy\")\n\n    }\n\n    function abi_encode_t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 44)\n        store_literal_in_memory_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4(memPtr) {\n\n        mstore(add(memPtr, 0), \"UUPSUpgradeable: must not be cal\")\n\n        mstore(add(memPtr, 32), \"led through delegatecall\")\n\n    }\n\n    function abi_encode_t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 56)\n        store_literal_in_memory_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_08d0c5f0cc66c73f518001e6f234dffe5541b83b4743ef2eec0db170576be85f(memPtr) {\n\n        mstore(add(memPtr, 0), \"ZK_VERIFICATION ALREADY REVOKED \")\n\n    }\n\n    function abi_encode_t_stringliteral_08d0c5f0cc66c73f518001e6f234dffe5541b83b4743ef2eec0db170576be85f_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_08d0c5f0cc66c73f518001e6f234dffe5541b83b4743ef2eec0db170576be85f(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_08d0c5f0cc66c73f518001e6f234dffe5541b83b4743ef2eec0db170576be85f__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_08d0c5f0cc66c73f518001e6f234dffe5541b83b4743ef2eec0db170576be85f_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(memPtr) {\n\n        mstore(add(memPtr, 0), \"Initializable: contract is alrea\")\n\n        mstore(add(memPtr, 32), \"dy initialized\")\n\n    }\n\n    function abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 46)\n        store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function cleanup_t_rational_1_by_1(value) -> cleaned {\n        cleaned := value\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_rational_1_by_1_to_t_uint8(value) -> converted {\n        converted := cleanup_t_uint8(identity(cleanup_t_rational_1_by_1(value)))\n    }\n\n    function abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, convert_t_rational_1_by_1_to_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function store_literal_in_memory_dc07914abe0b3d10797b2cb887fa8b14cfc1681b47ac3540e1f0ebac6c5c8771(memPtr) {\n\n        mstore(add(memPtr, 0), \"MULTI_SIGNATURE ALREADY REVOKED \")\n\n    }\n\n    function abi_encode_t_stringliteral_dc07914abe0b3d10797b2cb887fa8b14cfc1681b47ac3540e1f0ebac6c5c8771_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_dc07914abe0b3d10797b2cb887fa8b14cfc1681b47ac3540e1f0ebac6c5c8771(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_dc07914abe0b3d10797b2cb887fa8b14cfc1681b47ac3540e1f0ebac6c5c8771__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_dc07914abe0b3d10797b2cb887fa8b14cfc1681b47ac3540e1f0ebac6c5c8771_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_6e8e6a900089259539cd5a4ffb1559532588f15e739713ca236a69dd15dad28d(memPtr) {\n\n        mstore(add(memPtr, 0), \"ZK_VERIFICATION ALREADY RETAINED\")\n\n    }\n\n    function abi_encode_t_stringliteral_6e8e6a900089259539cd5a4ffb1559532588f15e739713ca236a69dd15dad28d_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_6e8e6a900089259539cd5a4ffb1559532588f15e739713ca236a69dd15dad28d(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_6e8e6a900089259539cd5a4ffb1559532588f15e739713ca236a69dd15dad28d__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_6e8e6a900089259539cd5a4ffb1559532588f15e739713ca236a69dd15dad28d_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_2ec99e6d611129d5d446401a53002d56de11cd1961b140eb64e5ce86a4c14361(memPtr) {\n\n        mstore(add(memPtr, 0), \"MULTI_SIGNATURE ALREADY RETAINED\")\n\n        mstore(add(memPtr, 32), \" \")\n\n    }\n\n    function abi_encode_t_stringliteral_2ec99e6d611129d5d446401a53002d56de11cd1961b140eb64e5ce86a4c14361_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 33)\n        store_literal_in_memory_2ec99e6d611129d5d446401a53002d56de11cd1961b140eb64e5ce86a4c14361(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_2ec99e6d611129d5d446401a53002d56de11cd1961b140eb64e5ce86a4c14361__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_2ec99e6d611129d5d446401a53002d56de11cd1961b140eb64e5ce86a4c14361_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: new owner is the zero a\")\n\n        mstore(add(memPtr, 32), \"ddress\")\n\n    }\n\n    function abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: caller is not the owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes32_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function abi_decode_tuple_t_bytes32_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function store_literal_in_memory_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC1967Upgrade: new implementati\")\n\n        mstore(add(memPtr, 32), \"on is not UUPS\")\n\n    }\n\n    function abi_encode_t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 46)\n        store_literal_in_memory_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC1967Upgrade: unsupported prox\")\n\n        mstore(add(memPtr, 32), \"iableUUID\")\n\n    }\n\n    function abi_encode_t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 41)\n        store_literal_in_memory_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(memPtr) {\n\n        mstore(add(memPtr, 0), \"Initializable: contract is not i\")\n\n        mstore(add(memPtr, 32), \"nitializing\")\n\n    }\n\n    function abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 43)\n        store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC1967: new implementation is n\")\n\n        mstore(add(memPtr, 32), \"ot a contract\")\n\n    }\n\n    function abi_encode_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 45)\n        store_literal_in_memory_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520(memPtr) {\n\n        mstore(add(memPtr, 0), \"Address: delegate call to non-co\")\n\n        mstore(add(memPtr, 32), \"ntract\")\n\n    }\n\n    function abi_encode_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value0) -> end {\n\n        pos := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        end := pos\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n}\n","id":33,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"720":[{"length":32,"start":1616},{"length":32,"start":1759},{"length":32,"start":2438},{"length":32,"start":2581},{"length":32,"start":2757}],"5767":[{"length":32,"start":4739},{"length":32,"start":5832},{"length":32,"start":6574}],"5775":[{"length":32,"start":4903},{"length":32,"start":5668}]},"linkReferences":{},"object":"6080604052600436106101175760003560e01c80638129fc1c116100a0578063b2e6b91211610064578063b2e6b912146103fb578063cde5535314610426578063d117fc991461044f578063f2fde38b1461048c578063f536c520146104b55761016e565b80638129fc1c1461033e57806387d55ff3146103555780638da5cb5b1461037e578063acfb7980146103a9578063b2b35eb4146103d25761016e565b80634f1ef286116100e75780634f1ef2861461027a57806352d1902d1461029657806354ef5c52146102c15780636f77926b146102ea578063715018a6146103275761016e565b8062ce8e3e146101c05780631e9f3d5e146101eb5780633659cfe614610228578063391a5bf0146102515761016e565b3661016e573460c9600082825461012e9190612306565b925050819055507f42100f075a78c1dac886a43652b5c7c76cca3718758e13e7b726063cd20fe02c34604051610164919061236b565b60405180910390a1005b3460c960008282546101809190612306565b925050819055507f6cb8a67804b99a2876f9d2f903120d1607df4c6bb33315433f4f5b9284ba1588346040516101b6919061236b565b60405180910390a1005b3480156101cc57600080fd5b506101d56104de565b6040516101e29190612476565b60405180910390f35b3480156101f757600080fd5b50610212600480360381019061020d91906124d8565b61057a565b60405161021f919061251e565b60405180910390f35b34801561023457600080fd5b5061024f600480360381019061024a91906124d8565b61064e565b005b34801561025d57600080fd5b50610278600480360381019061027391906124d8565b6107d7565b005b610294600480360381019061028f919061267f565b610984565b005b3480156102a257600080fd5b506102ab610ac1565b6040516102b8919061251e565b60405180910390f35b3480156102cd57600080fd5b506102e860048036038101906102e391906124d8565b610b7a565b005b3480156102f657600080fd5b50610311600480360381019061030c91906124d8565b610d2e565b60405161031e919061276d565b60405180910390f35b34801561033357600080fd5b5061033c610ec0565b005b34801561034a57600080fd5b50610353610ed4565b005b34801561036157600080fd5b5061037c600480360381019061037791906124d8565b61101a565b005b34801561038a57600080fd5b506103936111c8565b6040516103a09190612797565b60405180910390f35b3480156103b557600080fd5b506103d060048036038101906103cb91906124d8565b6111f2565b005b3480156103de57600080fd5b506103f960048036038101906103f491906124d8565b6113c7565b005b34801561040757600080fd5b5061041061157c565b60405161041d9190612797565b60405180910390f35b34801561043257600080fd5b5061044d600480360381019061044891906124d8565b611593565b005b34801561045b57600080fd5b50610476600480360381019061047191906124d8565b611731565b60405161048391906127c1565b60405180910390f35b34801561049857600080fd5b506104b360048036038101906104ae91906124d8565b611871565b005b3480156104c157600080fd5b506104dc60048036038101906104d791906124d8565b6118f5565b005b60606104e8611b88565b600060cb80548060200260200160405190810160405280929190818152602001828054801561056c57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610522575b505050505090508091505090565b60008160cc60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16610603576040517f551b5fec00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60cc60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154915050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614156106dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d49061285f565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1661071c611c06565b73ffffffffffffffffffffffffffffffffffffffff1614610772576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610769906128f1565b60405180910390fd5b61077b81611c5d565b6107d481600067ffffffffffffffff81111561079a57610799612554565b5b6040519080825280601f01601f1916602001820160405280156107cc5781602001600182028036833780820191505090505b506000611c68565b50565b6107df611b88565b8060cc60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16610866576040517f551b5fec00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8160cc60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160029054906101000a900460ff166108ed576040517ffbc601ed00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060cc60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160026101000a81548160ff0219169083151502179055507fdd8163d7c65d364e6e39c7e0fc2c8812d436ff8b4bc35e2f8db2b39c0662e2a4836040516109779190612797565b60405180910390a1505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161415610a13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0a9061285f565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610a52611c06565b73ffffffffffffffffffffffffffffffffffffffff1614610aa8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9f906128f1565b60405180910390fd5b610ab182611c5d565b610abd82826001611c68565b5050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614610b51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4890612983565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b905090565b610b82611b88565b8060cc60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16610c09576040517f551b5fec00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60cc60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160019054906101000a900460ff16610c98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8f906129ef565b60405180910390fd5b600060cc60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160016101000a81548160ff0219169083151502179055507f7665796ea03d3ff112c33b16cef72d11283b08518156fd5545a4511e6832e37282604051610d229190612797565b60405180910390a15050565b610d3661227f565b8160cc60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16610dbd576040517f551b5fec00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60cc60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060a00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a900460ff161515151581526020016002820160019054906101000a900460ff161515151581526020016002820160029054906101000a900460ff161515151581525050915050919050565b610ec8611b88565b610ed26000611de5565b565b60008060019054906101000a900460ff16159050808015610f055750600160008054906101000a900460ff1660ff16105b80610f325750610f1430611eab565b158015610f315750600160008054906101000a900460ff1660ff16145b5b610f71576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6890612a81565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015610fae576001600060016101000a81548160ff0219169083151502179055505b610fb6611ece565b610fbe611f27565b80156110175760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498600160405161100e9190612af3565b60405180910390a15b50565b611022611b88565b8060cc60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff166110a9576040517f551b5fec00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8160cc60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160029054906101000a900460ff1615611131576040517fe174c66c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160cc60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160026101000a81548160ff0219169083151502179055507f511d3bd421d86e995c1e2e4b179b681f67697e06c363a32945f11569520da052836040516111bb9190612797565b60405180910390a1505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6111fa611b88565b8060cc60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16611281576040517f551b5fec00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000060cc60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015414611325576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161131c90612b5a565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000060cc60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055507fc75dbd8ce00e37df747f1fe930658f85d9d198d29ccc1497d5bd5803915f1063826040516113bb9190612797565b60405180910390a15050565b6113cf611b88565b8060cc60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16611456576040517f551b5fec00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60cc60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160019054906101000a900460ff16156114e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114dd90612bc6565b60405180910390fd5b600160cc60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160016101000a81548160ff0219169083151502179055507ff8ae011d8a06a2397c554ef5e6bb3790b25410a7926f10e37f4306aaa20ad7e5826040516115709190612797565b60405180910390a15050565b6000611586611b88565b61158e6111c8565b905090565b61159b611b88565b8060cc60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16611622576040517f551b5fec00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000060cc60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154146116c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116bd90612c58565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000060cc60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055505050565b60008160cc60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff166117ba576040517f551b5fec00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60cc60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160029054906101000a900460ff1615611818576000915061186b565b60cc60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff1691505b50919050565b611879611b88565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156118e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118e090612cea565b60405180910390fd5b6118f281611de5565b50565b6118fd611b88565b8060cc60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff1615611985576040517f845f7cbb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040518060a001604052808373ffffffffffffffffffffffffffffffffffffffff1681526020017f000000000000000000000000000000000000000000000000000000000000000081526020016001151581526020016000151581526020016000151581525060cc60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020160006101000a81548160ff02191690831515021790555060608201518160020160016101000a81548160ff02191690831515021790555060808201518160020160026101000a81548160ff02191690831515021790555090505060cb829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff167fafa89aec2d2fd28210e1b3f83a2862febdac7db6e14888b9913882a46fef18a560405160405180910390a25050565b611b90611f78565b73ffffffffffffffffffffffffffffffffffffffff16611bae6111c8565b73ffffffffffffffffffffffffffffffffffffffff1614611c04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bfb90612d56565b60405180910390fd5b565b6000611c347f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b611f80565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b611c65611b88565b50565b611c947f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd914360001b611f8a565b60000160009054906101000a900460ff1615611cb857611cb383611f94565b611de0565b8273ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611cfe57600080fd5b505afa925050508015611d2f57506040513d601f19601f82011682018060405250810190611d2c9190612da2565b60015b611d6e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d6590612e41565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b8114611dd3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dca90612ed3565b60405180910390fd5b50611ddf83838361204d565b5b505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16611f1d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f1490612f65565b60405180910390fd5b611f25612079565b565b600060019054906101000a900460ff16611f76576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f6d90612f65565b60405180910390fd5b565b600033905090565b6000819050919050565b6000819050919050565b611f9d81611eab565b611fdc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fd390612ff7565b60405180910390fd5b806120097f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b611f80565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b612056836120da565b6000825111806120635750805b15612074576120728383612129565b505b505050565b600060019054906101000a900460ff166120c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120bf90612f65565b60405180910390fd5b6120d86120d3611f78565b611de5565b565b6120e381611f94565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b606061213483611eab565b612173576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161216a90613089565b60405180910390fd5b6000808473ffffffffffffffffffffffffffffffffffffffff168460405161219b9190613123565b600060405180830381855af49150503d80600081146121d6576040519150601f19603f3d011682016040523d82523d6000602084013e6121db565b606091505b509150915061220382826040518060600160405280602781526020016131a16027913961220d565b9250505092915050565b6060831561221d57829050612228565b612227838361222f565b5b9392505050565b6000825111156122425781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612276919061317e565b60405180910390fd5b6040518060a00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600080191681526020016000151581526020016000151581526020016000151581525090565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612311826122cd565b915061231c836122cd565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612351576123506122d7565b5b828201905092915050565b612365816122cd565b82525050565b6000602082019050612380600083018461235c565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006123dd826123b2565b9050919050565b6123ed816123d2565b82525050565b60006123ff83836123e4565b60208301905092915050565b6000602082019050919050565b600061242382612386565b61242d8185612391565b9350612438836123a2565b8060005b8381101561246957815161245088826123f3565b975061245b8361240b565b92505060018101905061243c565b5085935050505092915050565b600060208201905081810360008301526124908184612418565b905092915050565b6000604051905090565b600080fd5b600080fd5b6124b5816123d2565b81146124c057600080fd5b50565b6000813590506124d2816124ac565b92915050565b6000602082840312156124ee576124ed6124a2565b5b60006124fc848285016124c3565b91505092915050565b6000819050919050565b61251881612505565b82525050565b6000602082019050612533600083018461250f565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61258c82612543565b810181811067ffffffffffffffff821117156125ab576125aa612554565b5b80604052505050565b60006125be612498565b90506125ca8282612583565b919050565b600067ffffffffffffffff8211156125ea576125e9612554565b5b6125f382612543565b9050602081019050919050565b82818337600083830152505050565b600061262261261d846125cf565b6125b4565b90508281526020810184848401111561263e5761263d61253e565b5b612649848285612600565b509392505050565b600082601f83011261266657612665612539565b5b813561267684826020860161260f565b91505092915050565b60008060408385031215612696576126956124a2565b5b60006126a4858286016124c3565b925050602083013567ffffffffffffffff8111156126c5576126c46124a7565b5b6126d185828601612651565b9150509250929050565b6126e481612505565b82525050565b60008115159050919050565b6126ff816126ea565b82525050565b60a08201600082015161271b60008501826123e4565b50602082015161272e60208501826126db565b50604082015161274160408501826126f6565b50606082015161275460608501826126f6565b50608082015161276760808501826126f6565b50505050565b600060a0820190506127826000830184612705565b92915050565b612791816123d2565b82525050565b60006020820190506127ac6000830184612788565b92915050565b6127bb816126ea565b82525050565b60006020820190506127d660008301846127b2565b92915050565b600082825260208201905092915050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f64656c656761746563616c6c0000000000000000000000000000000000000000602082015250565b6000612849602c836127dc565b9150612854826127ed565b604082019050919050565b600060208201905081810360008301526128788161283c565b9050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f6163746976652070726f78790000000000000000000000000000000000000000602082015250565b60006128db602c836127dc565b91506128e68261287f565b604082019050919050565b6000602082019050818103600083015261290a816128ce565b9050919050565b7f555550535570677261646561626c653a206d757374206e6f742062652063616c60008201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000602082015250565b600061296d6038836127dc565b915061297882612911565b604082019050919050565b6000602082019050818103600083015261299c81612960565b9050919050565b7f5a4b5f564552494649434154494f4e20414c5245414459205245564f4b454420600082015250565b60006129d96020836127dc565b91506129e4826129a3565b602082019050919050565b60006020820190508181036000830152612a08816129cc565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000612a6b602e836127dc565b9150612a7682612a0f565b604082019050919050565b60006020820190508181036000830152612a9a81612a5e565b9050919050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b6000612add612ad8612ad384612aa1565b612ab8565b612aab565b9050919050565b612aed81612ac2565b82525050565b6000602082019050612b086000830184612ae4565b92915050565b7f4d554c54495f5349474e415455524520414c5245414459205245564f4b454420600082015250565b6000612b446020836127dc565b9150612b4f82612b0e565b602082019050919050565b60006020820190508181036000830152612b7381612b37565b9050919050565b7f5a4b5f564552494649434154494f4e20414c52454144592052455441494e4544600082015250565b6000612bb06020836127dc565b9150612bbb82612b7a565b602082019050919050565b60006020820190508181036000830152612bdf81612ba3565b9050919050565b7f4d554c54495f5349474e415455524520414c52454144592052455441494e454460008201527f2000000000000000000000000000000000000000000000000000000000000000602082015250565b6000612c426021836127dc565b9150612c4d82612be6565b604082019050919050565b60006020820190508181036000830152612c7181612c35565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612cd46026836127dc565b9150612cdf82612c78565b604082019050919050565b60006020820190508181036000830152612d0381612cc7565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612d406020836127dc565b9150612d4b82612d0a565b602082019050919050565b60006020820190508181036000830152612d6f81612d33565b9050919050565b612d7f81612505565b8114612d8a57600080fd5b50565b600081519050612d9c81612d76565b92915050565b600060208284031215612db857612db76124a2565b5b6000612dc684828501612d8d565b91505092915050565b7f45524331393637557067726164653a206e657720696d706c656d656e7461746960008201527f6f6e206973206e6f742055555053000000000000000000000000000000000000602082015250565b6000612e2b602e836127dc565b9150612e3682612dcf565b604082019050919050565b60006020820190508181036000830152612e5a81612e1e565b9050919050565b7f45524331393637557067726164653a20756e737570706f727465642070726f7860008201527f6961626c65555549440000000000000000000000000000000000000000000000602082015250565b6000612ebd6029836127dc565b9150612ec882612e61565b604082019050919050565b60006020820190508181036000830152612eec81612eb0565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000612f4f602b836127dc565b9150612f5a82612ef3565b604082019050919050565b60006020820190508181036000830152612f7e81612f42565b9050919050565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b6000612fe1602d836127dc565b9150612fec82612f85565b604082019050919050565b6000602082019050818103600083015261301081612fd4565b9050919050565b7f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60008201527f6e74726163740000000000000000000000000000000000000000000000000000602082015250565b60006130736026836127dc565b915061307e82613017565b604082019050919050565b600060208201905081810360008301526130a281613066565b9050919050565b600081519050919050565b600081905092915050565b60005b838110156130dd5780820151818401526020810190506130c2565b838111156130ec576000848401525b50505050565b60006130fd826130a9565b61310781856130b4565b93506131178185602086016130bf565b80840191505092915050565b600061312f82846130f2565b915081905092915050565b600081519050919050565b60006131508261313a565b61315a81856127dc565b935061316a8185602086016130bf565b61317381612543565b840191505092915050565b600060208201905081810360008301526131988184613145565b90509291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212201ec6fc2ec5adfefaf7210893f5ac48d1e0c9754b57fb31dbfae3f5d42d29ffd764736f6c63430008090033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x117 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8129FC1C GT PUSH2 0xA0 JUMPI DUP1 PUSH4 0xB2E6B912 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xB2E6B912 EQ PUSH2 0x3FB JUMPI DUP1 PUSH4 0xCDE55353 EQ PUSH2 0x426 JUMPI DUP1 PUSH4 0xD117FC99 EQ PUSH2 0x44F JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x48C JUMPI DUP1 PUSH4 0xF536C520 EQ PUSH2 0x4B5 JUMPI PUSH2 0x16E JUMP JUMPDEST DUP1 PUSH4 0x8129FC1C EQ PUSH2 0x33E JUMPI DUP1 PUSH4 0x87D55FF3 EQ PUSH2 0x355 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x37E JUMPI DUP1 PUSH4 0xACFB7980 EQ PUSH2 0x3A9 JUMPI DUP1 PUSH4 0xB2B35EB4 EQ PUSH2 0x3D2 JUMPI PUSH2 0x16E JUMP JUMPDEST DUP1 PUSH4 0x4F1EF286 GT PUSH2 0xE7 JUMPI DUP1 PUSH4 0x4F1EF286 EQ PUSH2 0x27A JUMPI DUP1 PUSH4 0x52D1902D EQ PUSH2 0x296 JUMPI DUP1 PUSH4 0x54EF5C52 EQ PUSH2 0x2C1 JUMPI DUP1 PUSH4 0x6F77926B EQ PUSH2 0x2EA JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x327 JUMPI PUSH2 0x16E JUMP JUMPDEST DUP1 PUSH3 0xCE8E3E EQ PUSH2 0x1C0 JUMPI DUP1 PUSH4 0x1E9F3D5E EQ PUSH2 0x1EB JUMPI DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0x228 JUMPI DUP1 PUSH4 0x391A5BF0 EQ PUSH2 0x251 JUMPI PUSH2 0x16E JUMP JUMPDEST CALLDATASIZE PUSH2 0x16E JUMPI CALLVALUE PUSH1 0xC9 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x12E SWAP2 SWAP1 PUSH2 0x2306 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH32 0x42100F075A78C1DAC886A43652B5C7C76CCA3718758E13E7B726063CD20FE02C CALLVALUE PUSH1 0x40 MLOAD PUSH2 0x164 SWAP2 SWAP1 PUSH2 0x236B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 STOP JUMPDEST CALLVALUE PUSH1 0xC9 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x180 SWAP2 SWAP1 PUSH2 0x2306 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH32 0x6CB8A67804B99A2876F9D2F903120D1607DF4C6BB33315433F4F5B9284BA1588 CALLVALUE PUSH1 0x40 MLOAD PUSH2 0x1B6 SWAP2 SWAP1 PUSH2 0x236B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1D5 PUSH2 0x4DE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E2 SWAP2 SWAP1 PUSH2 0x2476 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x212 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x20D SWAP2 SWAP1 PUSH2 0x24D8 JUMP JUMPDEST PUSH2 0x57A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x21F SWAP2 SWAP1 PUSH2 0x251E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x234 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x24F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x24A SWAP2 SWAP1 PUSH2 0x24D8 JUMP JUMPDEST PUSH2 0x64E JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x25D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x278 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x273 SWAP2 SWAP1 PUSH2 0x24D8 JUMP JUMPDEST PUSH2 0x7D7 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x294 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x28F SWAP2 SWAP1 PUSH2 0x267F JUMP JUMPDEST PUSH2 0x984 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2AB PUSH2 0xAC1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2B8 SWAP2 SWAP1 PUSH2 0x251E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2E3 SWAP2 SWAP1 PUSH2 0x24D8 JUMP JUMPDEST PUSH2 0xB7A JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x311 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x30C SWAP2 SWAP1 PUSH2 0x24D8 JUMP JUMPDEST PUSH2 0xD2E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x31E SWAP2 SWAP1 PUSH2 0x276D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x333 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x33C PUSH2 0xEC0 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x34A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x353 PUSH2 0xED4 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x361 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x37C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x377 SWAP2 SWAP1 PUSH2 0x24D8 JUMP JUMPDEST PUSH2 0x101A JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x38A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x393 PUSH2 0x11C8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3A0 SWAP2 SWAP1 PUSH2 0x2797 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3D0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3CB SWAP2 SWAP1 PUSH2 0x24D8 JUMP JUMPDEST PUSH2 0x11F2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3F4 SWAP2 SWAP1 PUSH2 0x24D8 JUMP JUMPDEST PUSH2 0x13C7 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x407 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x410 PUSH2 0x157C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x41D SWAP2 SWAP1 PUSH2 0x2797 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x432 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x44D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x448 SWAP2 SWAP1 PUSH2 0x24D8 JUMP JUMPDEST PUSH2 0x1593 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x45B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x476 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x471 SWAP2 SWAP1 PUSH2 0x24D8 JUMP JUMPDEST PUSH2 0x1731 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x483 SWAP2 SWAP1 PUSH2 0x27C1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x498 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4B3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4AE SWAP2 SWAP1 PUSH2 0x24D8 JUMP JUMPDEST PUSH2 0x1871 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4DC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4D7 SWAP2 SWAP1 PUSH2 0x24D8 JUMP JUMPDEST PUSH2 0x18F5 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x60 PUSH2 0x4E8 PUSH2 0x1B88 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xCB DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x56C JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x522 JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP DUP1 SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0xCC PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x603 JUMPI PUSH1 0x40 MLOAD PUSH32 0x551B5FEC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xCC PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x6DD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6D4 SWAP1 PUSH2 0x285F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x71C PUSH2 0x1C06 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x772 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x769 SWAP1 PUSH2 0x28F1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x77B DUP2 PUSH2 0x1C5D JUMP JUMPDEST PUSH2 0x7D4 DUP2 PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x79A JUMPI PUSH2 0x799 PUSH2 0x2554 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x7CC JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP PUSH1 0x0 PUSH2 0x1C68 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x7DF PUSH2 0x1B88 JUMP JUMPDEST DUP1 PUSH1 0xCC PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x866 JUMPI PUSH1 0x40 MLOAD PUSH32 0x551B5FEC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0xCC PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x2 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x8ED JUMPI PUSH1 0x40 MLOAD PUSH32 0xFBC601ED00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0xCC PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0xDD8163D7C65D364E6E39C7E0FC2C8812D436FF8B4BC35E2F8DB2B39C0662E2A4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x977 SWAP2 SWAP1 PUSH2 0x2797 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xA13 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA0A SWAP1 PUSH2 0x285F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xA52 PUSH2 0x1C06 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xAA8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA9F SWAP1 PUSH2 0x28F1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xAB1 DUP3 PUSH2 0x1C5D JUMP JUMPDEST PUSH2 0xABD DUP3 DUP3 PUSH1 0x1 PUSH2 0x1C68 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xB51 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB48 SWAP1 PUSH2 0x2983 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH1 0x0 SHL SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xB82 PUSH2 0x1B88 JUMP JUMPDEST DUP1 PUSH1 0xCC PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0xC09 JUMPI PUSH1 0x40 MLOAD PUSH32 0x551B5FEC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xCC PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0xC98 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC8F SWAP1 PUSH2 0x29EF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0xCC PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x7665796EA03D3FF112C33B16CEF72D11283B08518156FD5545A4511E6832E372 DUP3 PUSH1 0x40 MLOAD PUSH2 0xD22 SWAP2 SWAP1 PUSH2 0x2797 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH2 0xD36 PUSH2 0x227F JUMP JUMPDEST DUP2 PUSH1 0xCC PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0xDBD JUMPI PUSH1 0x40 MLOAD PUSH32 0x551B5FEC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xCC PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD PUSH1 0x2 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE POP POP SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xEC8 PUSH2 0x1B88 JUMP JUMPDEST PUSH2 0xED2 PUSH1 0x0 PUSH2 0x1DE5 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 POP DUP1 DUP1 ISZERO PUSH2 0xF05 JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND LT JUMPDEST DUP1 PUSH2 0xF32 JUMPI POP PUSH2 0xF14 ADDRESS PUSH2 0x1EAB JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0xF31 JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND EQ JUMPDEST JUMPDEST PUSH2 0xF71 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF68 SWAP1 PUSH2 0x2A81 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0xFAE JUMPI PUSH1 0x1 PUSH1 0x0 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH2 0xFB6 PUSH2 0x1ECE JUMP JUMPDEST PUSH2 0xFBE PUSH2 0x1F27 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1017 JUMPI PUSH1 0x0 DUP1 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0x1 PUSH1 0x40 MLOAD PUSH2 0x100E SWAP2 SWAP1 PUSH2 0x2AF3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP JUMP JUMPDEST PUSH2 0x1022 PUSH2 0x1B88 JUMP JUMPDEST DUP1 PUSH1 0xCC PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x10A9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x551B5FEC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0xCC PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x2 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x1131 JUMPI PUSH1 0x40 MLOAD PUSH32 0xE174C66C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xCC PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x511D3BD421D86E995C1E2E4B179B681F67697E06C363A32945F11569520DA052 DUP4 PUSH1 0x40 MLOAD PUSH2 0x11BB SWAP2 SWAP1 PUSH2 0x2797 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x11FA PUSH2 0x1B88 JUMP JUMPDEST DUP1 PUSH1 0xCC PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1281 JUMPI PUSH1 0x40 MLOAD PUSH32 0x551B5FEC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x0 PUSH1 0xCC PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD EQ PUSH2 0x1325 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x131C SWAP1 PUSH2 0x2B5A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x0 PUSH1 0xCC PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP PUSH32 0xC75DBD8CE00E37DF747F1FE930658F85D9D198D29CCC1497D5BD5803915F1063 DUP3 PUSH1 0x40 MLOAD PUSH2 0x13BB SWAP2 SWAP1 PUSH2 0x2797 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH2 0x13CF PUSH2 0x1B88 JUMP JUMPDEST DUP1 PUSH1 0xCC PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1456 JUMPI PUSH1 0x40 MLOAD PUSH32 0x551B5FEC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xCC PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x14E6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14DD SWAP1 PUSH2 0x2BC6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xCC PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0xF8AE011D8A06A2397C554EF5E6BB3790B25410A7926F10E37F4306AAA20AD7E5 DUP3 PUSH1 0x40 MLOAD PUSH2 0x1570 SWAP2 SWAP1 PUSH2 0x2797 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1586 PUSH2 0x1B88 JUMP JUMPDEST PUSH2 0x158E PUSH2 0x11C8 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x159B PUSH2 0x1B88 JUMP JUMPDEST DUP1 PUSH1 0xCC PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1622 JUMPI PUSH1 0x40 MLOAD PUSH32 0x551B5FEC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x0 PUSH1 0xCC PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD EQ PUSH2 0x16C6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x16BD SWAP1 PUSH2 0x2C58 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x0 PUSH1 0xCC PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0xCC PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x17BA JUMPI PUSH1 0x40 MLOAD PUSH32 0x551B5FEC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xCC PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x2 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x1818 JUMPI PUSH1 0x0 SWAP2 POP PUSH2 0x186B JUMP JUMPDEST PUSH1 0xCC PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP2 POP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1879 PUSH2 0x1B88 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x18E9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x18E0 SWAP1 PUSH2 0x2CEA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x18F2 DUP2 PUSH2 0x1DE5 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x18FD PUSH2 0x1B88 JUMP JUMPDEST DUP1 PUSH1 0xCC PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x1985 JUMPI PUSH1 0x40 MLOAD PUSH32 0x845F7CBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE POP PUSH1 0xCC PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD PUSH1 0x2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP SWAP1 POP POP PUSH1 0xCB DUP3 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xAFA89AEC2D2FD28210E1B3F83A2862FEBDAC7DB6E14888B9913882A46FEF18A5 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH2 0x1B90 PUSH2 0x1F78 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1BAE PUSH2 0x11C8 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1C04 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1BFB SWAP1 PUSH2 0x2D56 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C34 PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH1 0x0 SHL PUSH2 0x1F80 JUMP JUMPDEST PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x1C65 PUSH2 0x1B88 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x1C94 PUSH32 0x4910FDFA16FED3260ED0E7147F7CC6DA11A60208B5B9406D12A635614FFD9143 PUSH1 0x0 SHL PUSH2 0x1F8A JUMP JUMPDEST PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x1CB8 JUMPI PUSH2 0x1CB3 DUP4 PUSH2 0x1F94 JUMP JUMPDEST PUSH2 0x1DE0 JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x52D1902D PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1CFE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1D2F JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1D2C SWAP2 SWAP1 PUSH2 0x2DA2 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1D6E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D65 SWAP1 PUSH2 0x2E41 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH1 0x0 SHL DUP2 EQ PUSH2 0x1DD3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1DCA SWAP1 PUSH2 0x2ED3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH2 0x1DDF DUP4 DUP4 DUP4 PUSH2 0x204D JUMP JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1F1D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F14 SWAP1 PUSH2 0x2F65 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1F25 PUSH2 0x2079 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1F76 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F6D SWAP1 PUSH2 0x2F65 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1F9D DUP2 PUSH2 0x1EAB JUMP JUMPDEST PUSH2 0x1FDC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1FD3 SWAP1 PUSH2 0x2FF7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH2 0x2009 PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH1 0x0 SHL PUSH2 0x1F80 JUMP JUMPDEST PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH2 0x2056 DUP4 PUSH2 0x20DA JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT DUP1 PUSH2 0x2063 JUMPI POP DUP1 JUMPDEST ISZERO PUSH2 0x2074 JUMPI PUSH2 0x2072 DUP4 DUP4 PUSH2 0x2129 JUMP JUMPDEST POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x20C8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x20BF SWAP1 PUSH2 0x2F65 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x20D8 PUSH2 0x20D3 PUSH2 0x1F78 JUMP JUMPDEST PUSH2 0x1DE5 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x20E3 DUP2 PUSH2 0x1F94 JUMP JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2134 DUP4 PUSH2 0x1EAB JUMP JUMPDEST PUSH2 0x2173 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x216A SWAP1 PUSH2 0x3089 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH1 0x40 MLOAD PUSH2 0x219B SWAP2 SWAP1 PUSH2 0x3123 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x21D6 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x21DB JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x2203 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x31A1 PUSH1 0x27 SWAP2 CODECOPY PUSH2 0x220D JUMP JUMPDEST SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x221D JUMPI DUP3 SWAP1 POP PUSH2 0x2228 JUMP JUMPDEST PUSH2 0x2227 DUP4 DUP4 PUSH2 0x222F JUMP JUMPDEST JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT ISZERO PUSH2 0x2242 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2276 SWAP2 SWAP1 PUSH2 0x317E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2311 DUP3 PUSH2 0x22CD JUMP JUMPDEST SWAP2 POP PUSH2 0x231C DUP4 PUSH2 0x22CD JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0x2351 JUMPI PUSH2 0x2350 PUSH2 0x22D7 JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2365 DUP2 PUSH2 0x22CD JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2380 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x235C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x23DD DUP3 PUSH2 0x23B2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x23ED DUP2 PUSH2 0x23D2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x23FF DUP4 DUP4 PUSH2 0x23E4 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2423 DUP3 PUSH2 0x2386 JUMP JUMPDEST PUSH2 0x242D DUP2 DUP6 PUSH2 0x2391 JUMP JUMPDEST SWAP4 POP PUSH2 0x2438 DUP4 PUSH2 0x23A2 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2469 JUMPI DUP2 MLOAD PUSH2 0x2450 DUP9 DUP3 PUSH2 0x23F3 JUMP JUMPDEST SWAP8 POP PUSH2 0x245B DUP4 PUSH2 0x240B JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x243C JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2490 DUP2 DUP5 PUSH2 0x2418 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x24B5 DUP2 PUSH2 0x23D2 JUMP JUMPDEST DUP2 EQ PUSH2 0x24C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x24D2 DUP2 PUSH2 0x24AC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x24EE JUMPI PUSH2 0x24ED PUSH2 0x24A2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x24FC DUP5 DUP3 DUP6 ADD PUSH2 0x24C3 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2518 DUP2 PUSH2 0x2505 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2533 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x250F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x258C DUP3 PUSH2 0x2543 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x25AB JUMPI PUSH2 0x25AA PUSH2 0x2554 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x25BE PUSH2 0x2498 JUMP JUMPDEST SWAP1 POP PUSH2 0x25CA DUP3 DUP3 PUSH2 0x2583 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x25EA JUMPI PUSH2 0x25E9 PUSH2 0x2554 JUMP JUMPDEST JUMPDEST PUSH2 0x25F3 DUP3 PUSH2 0x2543 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2622 PUSH2 0x261D DUP5 PUSH2 0x25CF JUMP JUMPDEST PUSH2 0x25B4 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x263E JUMPI PUSH2 0x263D PUSH2 0x253E JUMP JUMPDEST JUMPDEST PUSH2 0x2649 DUP5 DUP3 DUP6 PUSH2 0x2600 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2666 JUMPI PUSH2 0x2665 PUSH2 0x2539 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2676 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x260F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2696 JUMPI PUSH2 0x2695 PUSH2 0x24A2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x26A4 DUP6 DUP3 DUP7 ADD PUSH2 0x24C3 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x26C5 JUMPI PUSH2 0x26C4 PUSH2 0x24A7 JUMP JUMPDEST JUMPDEST PUSH2 0x26D1 DUP6 DUP3 DUP7 ADD PUSH2 0x2651 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x26E4 DUP2 PUSH2 0x2505 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x26FF DUP2 PUSH2 0x26EA JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x271B PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x23E4 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x272E PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x26DB JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x2741 PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x26F6 JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0x2754 PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0x26F6 JUMP JUMPDEST POP PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0x2767 PUSH1 0x80 DUP6 ADD DUP3 PUSH2 0x26F6 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0x2782 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2705 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2791 DUP2 PUSH2 0x23D2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x27AC PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2788 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x27BB DUP2 PUSH2 0x26EA JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x27D6 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x27B2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x64656C656761746563616C6C0000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2849 PUSH1 0x2C DUP4 PUSH2 0x27DC JUMP JUMPDEST SWAP2 POP PUSH2 0x2854 DUP3 PUSH2 0x27ED JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2878 DUP2 PUSH2 0x283C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6163746976652070726F78790000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x28DB PUSH1 0x2C DUP4 PUSH2 0x27DC JUMP JUMPDEST SWAP2 POP PUSH2 0x28E6 DUP3 PUSH2 0x287F JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x290A DUP2 PUSH2 0x28CE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x555550535570677261646561626C653A206D757374206E6F742062652063616C PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6C6564207468726F7567682064656C656761746563616C6C0000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x296D PUSH1 0x38 DUP4 PUSH2 0x27DC JUMP JUMPDEST SWAP2 POP PUSH2 0x2978 DUP3 PUSH2 0x2911 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x299C DUP2 PUSH2 0x2960 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5A4B5F564552494649434154494F4E20414C5245414459205245564F4B454420 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x29D9 PUSH1 0x20 DUP4 PUSH2 0x27DC JUMP JUMPDEST SWAP2 POP PUSH2 0x29E4 DUP3 PUSH2 0x29A3 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2A08 DUP2 PUSH2 0x29CC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A6B PUSH1 0x2E DUP4 PUSH2 0x27DC JUMP JUMPDEST SWAP2 POP PUSH2 0x2A76 DUP3 PUSH2 0x2A0F JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2A9A DUP2 PUSH2 0x2A5E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2ADD PUSH2 0x2AD8 PUSH2 0x2AD3 DUP5 PUSH2 0x2AA1 JUMP JUMPDEST PUSH2 0x2AB8 JUMP JUMPDEST PUSH2 0x2AAB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2AED DUP2 PUSH2 0x2AC2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2B08 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2AE4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4D554C54495F5349474E415455524520414C5245414459205245564F4B454420 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B44 PUSH1 0x20 DUP4 PUSH2 0x27DC JUMP JUMPDEST SWAP2 POP PUSH2 0x2B4F DUP3 PUSH2 0x2B0E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2B73 DUP2 PUSH2 0x2B37 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5A4B5F564552494649434154494F4E20414C52454144592052455441494E4544 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2BB0 PUSH1 0x20 DUP4 PUSH2 0x27DC JUMP JUMPDEST SWAP2 POP PUSH2 0x2BBB DUP3 PUSH2 0x2B7A JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2BDF DUP2 PUSH2 0x2BA3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4D554C54495F5349474E415455524520414C52454144592052455441494E4544 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x2000000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2C42 PUSH1 0x21 DUP4 PUSH2 0x27DC JUMP JUMPDEST SWAP2 POP PUSH2 0x2C4D DUP3 PUSH2 0x2BE6 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2C71 DUP2 PUSH2 0x2C35 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2CD4 PUSH1 0x26 DUP4 PUSH2 0x27DC JUMP JUMPDEST SWAP2 POP PUSH2 0x2CDF DUP3 PUSH2 0x2C78 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2D03 DUP2 PUSH2 0x2CC7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2D40 PUSH1 0x20 DUP4 PUSH2 0x27DC JUMP JUMPDEST SWAP2 POP PUSH2 0x2D4B DUP3 PUSH2 0x2D0A JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2D6F DUP2 PUSH2 0x2D33 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2D7F DUP2 PUSH2 0x2505 JUMP JUMPDEST DUP2 EQ PUSH2 0x2D8A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x2D9C DUP2 PUSH2 0x2D76 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2DB8 JUMPI PUSH2 0x2DB7 PUSH2 0x24A2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2DC6 DUP5 DUP3 DUP6 ADD PUSH2 0x2D8D JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x45524331393637557067726164653A206E657720696D706C656D656E74617469 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F6E206973206E6F742055555053000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E2B PUSH1 0x2E DUP4 PUSH2 0x27DC JUMP JUMPDEST SWAP2 POP PUSH2 0x2E36 DUP3 PUSH2 0x2DCF JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2E5A DUP2 PUSH2 0x2E1E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524331393637557067726164653A20756E737570706F727465642070726F78 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6961626C65555549440000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2EBD PUSH1 0x29 DUP4 PUSH2 0x27DC JUMP JUMPDEST SWAP2 POP PUSH2 0x2EC8 DUP3 PUSH2 0x2E61 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2EEC DUP2 PUSH2 0x2EB0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F4F PUSH1 0x2B DUP4 PUSH2 0x27DC JUMP JUMPDEST SWAP2 POP PUSH2 0x2F5A DUP3 PUSH2 0x2EF3 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2F7E DUP2 PUSH2 0x2F42 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F74206120636F6E747261637400000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2FE1 PUSH1 0x2D DUP4 PUSH2 0x27DC JUMP JUMPDEST SWAP2 POP PUSH2 0x2FEC DUP3 PUSH2 0x2F85 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3010 DUP2 PUSH2 0x2FD4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x416464726573733A2064656C65676174652063616C6C20746F206E6F6E2D636F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6E74726163740000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3073 PUSH1 0x26 DUP4 PUSH2 0x27DC JUMP JUMPDEST SWAP2 POP PUSH2 0x307E DUP3 PUSH2 0x3017 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x30A2 DUP2 PUSH2 0x3066 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x30DD JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x30C2 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x30EC JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x30FD DUP3 PUSH2 0x30A9 JUMP JUMPDEST PUSH2 0x3107 DUP2 DUP6 PUSH2 0x30B4 JUMP JUMPDEST SWAP4 POP PUSH2 0x3117 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x30BF JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x312F DUP3 DUP5 PUSH2 0x30F2 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3150 DUP3 PUSH2 0x313A JUMP JUMPDEST PUSH2 0x315A DUP2 DUP6 PUSH2 0x27DC JUMP JUMPDEST SWAP4 POP PUSH2 0x316A DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x30BF JUMP JUMPDEST PUSH2 0x3173 DUP2 PUSH2 0x2543 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3198 DUP2 DUP5 PUSH2 0x3145 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP INVALID COINBASE PUSH5 0x6472657373 GASPRICE KECCAK256 PUSH13 0x6F772D6C6576656C2064656C65 PUSH8 0x6174652063616C6C KECCAK256 PUSH7 0x61696C6564A264 PUSH10 0x706673582212201EC6FC 0x2E 0xC5 0xAD INVALID STATICCALL 0xF7 0x21 ADDMOD SWAP4 CREATE2 0xAC BASEFEE 0xD1 0xE0 0xC9 PUSH22 0x4B57FB31DBFAE3F5D42D29FFD764736F6C6343000809 STOP CALLER ","sourceMap":"669:5730:31:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2750:9;2732:14;;:27;;;;;;;:::i;:::-;;;;;;;;2774:42;2806:9;2774:42;;;;;;:::i;:::-;;;;;;;;669:5730;;2901:9;2883:14;;:27;;;;;;;:::i;:::-;;;;;;;;2925:43;2958:9;2925:43;;;;;;:::i;:::-;;;;;;;;669:5730;5730:151;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6249:148;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3317:197:5;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3332:215:31;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3763:222:5;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3006:131;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4424:326:31;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5585:139;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2071:101:0;;;;;;;;;;;;;:::i;:::-;;5104:108:31;;;;;;;;;;;;;:::i;:::-;;3601:210;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1441:85:0;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4102:316:31;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4756:327;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5479:100;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3817:279;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5981:262;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2321:198:0;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3067:222:31;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5730:151;5783:16;1334:13:0;:11;:13::i;:::-;5811:23:31::1;5837:14;5811:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5868:6;5861:13;;;5730:151:::0;:::o;6249:148::-;6343:7;6327:5;2149;:12;2155:5;2149:12;;;;;;;;;;;;;;;:33;;;;;;;;;;;;2144:89;;2205:17;;;;;;;;;;;;;;2144:89;6369:5:::1;:12;6375:5;6369:12;;;;;;;;;;;;;;;:21;;;6362:28;;6249:148:::0;;;;:::o;3317:197:5:-;1898:6;1881:23;;1889:4;1881:23;;;;1873:80;;;;;;;;;;;;:::i;:::-;;;;;;;;;1995:6;1971:30;;:20;:18;:20::i;:::-;:30;;;1963:87;;;;;;;;;;;;:::i;:::-;;;;;;;;;3400:36:::1;3418:17;3400;:36::i;:::-;3446:61;3468:17;3497:1;3487:12;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3501:5;3446:21;:61::i;:::-;3317:197:::0;:::o;3332:215:31:-;1334:13:0;:11;:13::i;:::-;3422:5:31::1;2149;:12;2155:5;2149:12;;;;;;;;;;;;;;;:33;;;;;;;;;;;;2144:89;;2205:17;;;;;;;;;;;;;;2144:89;3448:5:::2;2314;:12;2320:5;2314:12;;;;;;;;;;;;;;;:28;;;;;;;;;;;;2309:92;;2365:25;;;;;;;;;;;;;;2309:92;3496:5:::3;3465;:12;3471:5;3465:12;;;;;;;;;;;;;;;:28;;;:36;;;;;;;;;;;;;;;;;;3517:23;3534:5;3517:23;;;;;;:::i;:::-;;;;;;;;2242:1:::2;1357::0::1;3332:215:31::0;:::o;3763:222:5:-;1898:6;1881:23;;1889:4;1881:23;;;;1873:80;;;;;;;;;;;;:::i;:::-;;;;;;;;;1995:6;1971:30;;:20;:18;:20::i;:::-;:30;;;1963:87;;;;;;;;;;;;:::i;:::-;;;;;;;;;3880:36:::1;3898:17;3880;:36::i;:::-;3926:52;3948:17;3967:4;3973;3926:21;:52::i;:::-;3763:222:::0;;:::o;3006:131::-;3084:7;2333:6;2316:23;;2324:4;2316:23;;;2308:92;;;;;;;;;;;;:::i;:::-;;;;;;;;;1292:66:2::1;3110:20:5;;3103:27;;3006:131:::0;:::o;4424:326:31:-;1334:13:0;:11;:13::i;:::-;4516:5:31::1;2149;:12;2155:5;2149:12;;;;;;;;;;;;;;;:33;;;;;;;;;;;;2144:89;;2205:17;;;;;;;;;;;;;;2144:89;4554:5:::2;:12;4560:5;4554:12;;;;;;;;;;;;;;;:34;;;;;;;;;;;;4533:113;;;;;;;;;;;;:::i;:::-;;;;;;;;;4693:5;4656;:12;4662:5;4656:12;;;;;;;;;;;;;;;:34;;;:42;;;;;;;;;;;;;;;;;;4713:30;4737:5;4713:30;;;;;;:::i;:::-;;;;;;;;1357:1:0::1;4424:326:31::0;:::o;5585:139::-;5675:11;;:::i;:::-;5659:5;2149;:12;2155:5;2149:12;;;;;;;;;;;;;;;:33;;;;;;;;;;;;2144:89;;2205:17;;;;;;;;;;;;;;2144:89;5705:5:::1;:12;5711:5;5705:12;;;;;;;;;;;;;;;5698:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;5585:139:::0;;;;:::o;2071:101:0:-;1334:13;:11;:13::i;:::-;2135:30:::1;2162:1;2135:18;:30::i;:::-;2071:101::o:0;5104:108:31:-;3268:19:4;3291:13;;;;;;;;;;;3290:14;3268:36;;3336:14;:34;;;;;3369:1;3354:12;;;;;;;;;;:16;;;3336:34;3335:108;;;;3377:44;3415:4;3377:29;:44::i;:::-;3376:45;:66;;;;;3441:1;3425:12;;;;;;;;;;:17;;;3376:66;3335:108;3314:201;;;;;;;;;;;;:::i;:::-;;;;;;;;;3540:1;3525:12;;:16;;;;;;;;;;;;;;;;;;3555:14;3551:65;;;3601:4;3585:13;;:20;;;;;;;;;;;;;;;;;;3551:65;5155:16:31::1;:14;:16::i;:::-;5181:24;:22;:24::i;:::-;3640:14:4::0;3636:99;;;3686:5;3670:13;;:21;;;;;;;;;;;;;;;;;;3710:14;3722:1;3710:14;;;;;;:::i;:::-;;;;;;;;3636:99;3258:483;5104:108:31:o;3601:210::-;1334:13:0;:11;:13::i;:::-;3691:5:31::1;2149;:12;2155:5;2149:12;;;;;;;;;;;;;;;:33;;;;;;;;;;;;2144:89;;2205:17;;;;;;;;;;;;;;2144:89;3714:5:::2;2478;:12;2484:5;2478:12;;;;;;;;;;;;;;;:28;;;;;;;;;;;;2474:95;;;2529:29;;;;;;;;;;;;;;2474:95;3762:4:::3;3731:5;:12;3737:5;3731:12;;;;;;;;;;;;;;;:28;;;:35;;;;;;;;;;;;;;;;;;3782:22;3798:5;3782:22;;;;;;:::i;:::-;;;;;;;;2242:1:::2;1357::0::1;3601:210:31::0;:::o;1441:85:0:-;1487:7;1513:6;;;;;;;;;;;1506:13;;1441:85;:::o;4102:316:31:-;1334:13:0;:11;:13::i;:::-;4194:5:31::1;2149;:12;2155:5;2149:12;;;;;;;;;;;;;;;:33;;;;;;;;;;;;2144:89;;2205:17;;;;;;;;;;;;;;2144:89;4257:9:::2;4232:5;:12;4238:5;4232:12;;;;;;;;;;;;;;;:21;;;:34;4211:113;;;;;;;;;;;;:::i;:::-;;;;;;;;;4358:15;4334:5;:12;4340:5;4334:12;;;;;;;;;;;;;;;:21;;:39;;;;4388:23;4405:5;4388:23;;;;;;:::i;:::-;;;;;;;;1357:1:0::1;4102:316:31::0;:::o;4756:327::-;1334:13:0;:11;:13::i;:::-;4848:5:31::1;2149;:12;2155:5;2149:12;;;;;;;;;;;;;;;:33;;;;;;;;;;;;2144:89;;2205:17;;;;;;;;;;;;;;2144:89;4887:5:::2;:12;4893:5;4887:12;;;;;;;;;;;;;;;:34;;;;;;;;;;;;4886:35;4865:114;;;;;;;;;;;;:::i;:::-;;;;;;;;;5026:4;4989:5;:12;4995:5;4989:12;;;;;;;;;;;;;;;:34;;;:41;;;;;;;;;;;;;;;;;;5045:31;5070:5;5045:31;;;;;;:::i;:::-;;;;;;;;1357:1:0::1;4756:327:31::0;:::o;5479:100::-;5539:7;1334:13:0;:11;:13::i;:::-;5565:7:31::1;:5;:7::i;:::-;5558:14;;5479:100:::0;:::o;3817:279::-;1334:13:0;:11;:13::i;:::-;3909:5:31::1;2149;:12;2155:5;2149:12;;;;;;;;;;;;;;;:33;;;;;;;;;;;;2144:89;;2205:17;;;;;;;;;;;;;;2144:89;3972:15:::2;3947:5;:12;3953:5;3947:12;;;;;;;;;;;;;;;:21;;;:40;3926:120;;;;;;;;;;;;:::i;:::-;;;;;;;;;4080:9;4056:5;:12;4062:5;4056:12;;;;;;;;;;;;;;;:21;;:33;;;;1357:1:0::1;3817:279:31::0;:::o;5981:262::-;6079:4;6063:5;2149;:12;2155:5;2149:12;;;;;;;;;;;;;;;:33;;;;;;;;;;;;2144:89;;2205:17;;;;;;;;;;;;;;2144:89;6099:5:::1;:12;6105:5;6099:12;;;;;;;;;;;;;;;:28;;;;;;;;;;;;6095:142;;;6150:5;6143:12;;;;6095:142;6193:5;:12;6199:5;6193:12;;;;;;;;;;;;;;;:33;;;;;;;;;;;;6186:40;;2242:1;5981:262:::0;;;;:::o;2321:198:0:-;1334:13;:11;:13::i;:::-;2429:1:::1;2409:22;;:8;:22;;;;2401:73;;;;;;;;;;;;:::i;:::-;;;;;;;;;2484:28;2503:8;2484:18;:28::i;:::-;2321:198:::0;:::o;3067:222:31:-;1334:13:0;:11;:13::i;:::-;3135:5:31::1;1980;:12;1986:5;1980:12;;;;;;;;;;;;;;;:33;;;;;;;;;;;;1976:97;;;2036:26;;;;;;;;;;;;;;1976:97;3167:42:::2;;;;;;;;3172:5;3167:42;;;;;;3179:9;3167:42;;;;3190:4;3167:42;;;;;;3196:5;3167:42;;;;;;3203:5;3167:42;;;;::::0;3152:5:::2;:12;3158:5;3152:12;;;;;;;;;;;;;;;:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3219:14;3239:5;3219:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3276:5;3260:22;;;;;;;;;;;;1357:1:0::1;3067:222:31::0;:::o;1599:130:0:-;1673:12;:10;:12::i;:::-;1662:23;;:7;:5;:7::i;:::-;:23;;;1654:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;1599:130::o;1563:151:2:-;1616:7;1642:59;1292:66;1680:20;;1642:37;:59::i;:::-;:65;;;;;;;;;;;;1635:72;;1563:151;:::o;5235:98:31:-;1334:13:0;:11;:13::i;:::-;5235:98:31;:::o;2938:974:2:-;3384:53;951:66;3422:14;;3384:37;:53::i;:::-;:59;;;;;;;;;;;;3380:526;;;3459:37;3478:17;3459:18;:37::i;:::-;3380:526;;;3560:17;3531:61;;;:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;3527:302;;3758:56;;;;;;;;;;:::i;:::-;;;;;;;;3527:302;1292:66;3652:20;;3644:4;:28;3636:82;;;;;;;;;;;;:::i;:::-;;;;;;;;;3595:138;3842:53;3860:17;3879:4;3885:9;3842:17;:53::i;:::-;3380:526;2938:974;;;:::o;2673:187:0:-;2746:16;2765:6;;;;;;;;;;;2746:25;;2790:8;2781:6;;:17;;;;;;;;;;;;;;;;;;2844:8;2813:40;;2834:8;2813:40;;;;;;;;;;;;2736:124;2673:187;:::o;1186:320:14:-;1246:4;1498:1;1476:7;:19;;;:23;1469:30;;1186:320;;;:::o;1003:95:0:-;5363:13:4;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1065:26:0::1;:24;:26::i;:::-;1003:95::o:0;1042:67:5:-;5363:13:4;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1042:67:5:o;850:96:16:-;903:7;929:10;922:17;;850:96;:::o;1625:190:18:-;1686:21;1795:4;1785:14;;1625:190;;;:::o;1913:::-;1974:21;2083:4;2073:14;;1913:190;;;:::o;1805:281:2:-;1886:48;1916:17;1886:29;:48::i;:::-;1878:106;;;;;;;;;;;;:::i;:::-;;;;;;;;;2062:17;1994:59;1292:66;2032:20;;1994:37;:59::i;:::-;:65;;;:85;;;;;;;;;;;;;;;;;;1805:281;:::o;2478:288::-;2616:29;2627:17;2616:10;:29::i;:::-;2673:1;2659:4;:11;:15;:28;;;;2678:9;2659:28;2655:105;;;2703:46;2725:17;2744:4;2703:21;:46::i;:::-;;2655:105;2478:288;;;:::o;1104:111:0:-;5363:13:4;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1176:32:0::1;1195:12;:10;:12::i;:::-;1176:18;:32::i;:::-;1104:111::o:0;2192:152:2:-;2258:37;2277:17;2258:18;:37::i;:::-;2319:17;2310:27;;;;;;;;;;;;2192:152;:::o;7088:455::-;7171:12;7203:37;7233:6;7203:29;:37::i;:::-;7195:88;;;;;;;;;;;;:::i;:::-;;;;;;;;;7354:12;7368:23;7395:6;:19;;7415:4;7395:25;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7353:67;;;;7437:99;7473:7;7482:10;7437:99;;;;;;;;;;;;;;;;;:35;:99::i;:::-;7430:106;;;;7088:455;;;;:::o;7438:295:14:-;7584:12;7612:7;7608:119;;;7642:10;7635:17;;;;7608:119;7683:33;7691:10;7703:12;7683:7;:33::i;:::-;7438:295;;;;;;:::o;7739:540::-;7918:1;7898:10;:17;:21;7894:379;;;8126:10;8120:17;8182:15;8169:10;8165:2;8161:19;8154:44;7894:379;8249:12;8242:20;;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;7:77:33:-;44:7;73:5;62:16;;7:77;;;:::o;90:180::-;138:77;135:1;128:88;235:4;232:1;225:15;259:4;256:1;249:15;276:305;316:3;335:20;353:1;335:20;:::i;:::-;330:25;;369:20;387:1;369:20;:::i;:::-;364:25;;523:1;455:66;451:74;448:1;445:81;442:107;;;529:18;;:::i;:::-;442:107;573:1;570;566:9;559:16;;276:305;;;;:::o;587:118::-;674:24;692:5;674:24;:::i;:::-;669:3;662:37;587:118;;:::o;711:222::-;804:4;842:2;831:9;827:18;819:26;;855:71;923:1;912:9;908:17;899:6;855:71;:::i;:::-;711:222;;;;:::o;939:114::-;1006:6;1040:5;1034:12;1024:22;;939:114;;;:::o;1059:184::-;1158:11;1192:6;1187:3;1180:19;1232:4;1227:3;1223:14;1208:29;;1059:184;;;;:::o;1249:132::-;1316:4;1339:3;1331:11;;1369:4;1364:3;1360:14;1352:22;;1249:132;;;:::o;1387:126::-;1424:7;1464:42;1457:5;1453:54;1442:65;;1387:126;;;:::o;1519:96::-;1556:7;1585:24;1603:5;1585:24;:::i;:::-;1574:35;;1519:96;;;:::o;1621:108::-;1698:24;1716:5;1698:24;:::i;:::-;1693:3;1686:37;1621:108;;:::o;1735:179::-;1804:10;1825:46;1867:3;1859:6;1825:46;:::i;:::-;1903:4;1898:3;1894:14;1880:28;;1735:179;;;;:::o;1920:113::-;1990:4;2022;2017:3;2013:14;2005:22;;1920:113;;;:::o;2069:732::-;2188:3;2217:54;2265:5;2217:54;:::i;:::-;2287:86;2366:6;2361:3;2287:86;:::i;:::-;2280:93;;2397:56;2447:5;2397:56;:::i;:::-;2476:7;2507:1;2492:284;2517:6;2514:1;2511:13;2492:284;;;2593:6;2587:13;2620:63;2679:3;2664:13;2620:63;:::i;:::-;2613:70;;2706:60;2759:6;2706:60;:::i;:::-;2696:70;;2552:224;2539:1;2536;2532:9;2527:14;;2492:284;;;2496:14;2792:3;2785:10;;2193:608;;;2069:732;;;;:::o;2807:373::-;2950:4;2988:2;2977:9;2973:18;2965:26;;3037:9;3031:4;3027:20;3023:1;3012:9;3008:17;3001:47;3065:108;3168:4;3159:6;3065:108;:::i;:::-;3057:116;;2807:373;;;;:::o;3186:75::-;3219:6;3252:2;3246:9;3236:19;;3186:75;:::o;3267:117::-;3376:1;3373;3366:12;3390:117;3499:1;3496;3489:12;3513:122;3586:24;3604:5;3586:24;:::i;:::-;3579:5;3576:35;3566:63;;3625:1;3622;3615:12;3566:63;3513:122;:::o;3641:139::-;3687:5;3725:6;3712:20;3703:29;;3741:33;3768:5;3741:33;:::i;:::-;3641:139;;;;:::o;3786:329::-;3845:6;3894:2;3882:9;3873:7;3869:23;3865:32;3862:119;;;3900:79;;:::i;:::-;3862:119;4020:1;4045:53;4090:7;4081:6;4070:9;4066:22;4045:53;:::i;:::-;4035:63;;3991:117;3786:329;;;;:::o;4121:77::-;4158:7;4187:5;4176:16;;4121:77;;;:::o;4204:118::-;4291:24;4309:5;4291:24;:::i;:::-;4286:3;4279:37;4204:118;;:::o;4328:222::-;4421:4;4459:2;4448:9;4444:18;4436:26;;4472:71;4540:1;4529:9;4525:17;4516:6;4472:71;:::i;:::-;4328:222;;;;:::o;4556:117::-;4665:1;4662;4655:12;4679:117;4788:1;4785;4778:12;4802:102;4843:6;4894:2;4890:7;4885:2;4878:5;4874:14;4870:28;4860:38;;4802:102;;;:::o;4910:180::-;4958:77;4955:1;4948:88;5055:4;5052:1;5045:15;5079:4;5076:1;5069:15;5096:281;5179:27;5201:4;5179:27;:::i;:::-;5171:6;5167:40;5309:6;5297:10;5294:22;5273:18;5261:10;5258:34;5255:62;5252:88;;;5320:18;;:::i;:::-;5252:88;5360:10;5356:2;5349:22;5139:238;5096:281;;:::o;5383:129::-;5417:6;5444:20;;:::i;:::-;5434:30;;5473:33;5501:4;5493:6;5473:33;:::i;:::-;5383:129;;;:::o;5518:307::-;5579:4;5669:18;5661:6;5658:30;5655:56;;;5691:18;;:::i;:::-;5655:56;5729:29;5751:6;5729:29;:::i;:::-;5721:37;;5813:4;5807;5803:15;5795:23;;5518:307;;;:::o;5831:154::-;5915:6;5910:3;5905;5892:30;5977:1;5968:6;5963:3;5959:16;5952:27;5831:154;;;:::o;5991:410::-;6068:5;6093:65;6109:48;6150:6;6109:48;:::i;:::-;6093:65;:::i;:::-;6084:74;;6181:6;6174:5;6167:21;6219:4;6212:5;6208:16;6257:3;6248:6;6243:3;6239:16;6236:25;6233:112;;;6264:79;;:::i;:::-;6233:112;6354:41;6388:6;6383:3;6378;6354:41;:::i;:::-;6074:327;5991:410;;;;;:::o;6420:338::-;6475:5;6524:3;6517:4;6509:6;6505:17;6501:27;6491:122;;6532:79;;:::i;:::-;6491:122;6649:6;6636:20;6674:78;6748:3;6740:6;6733:4;6725:6;6721:17;6674:78;:::i;:::-;6665:87;;6481:277;6420:338;;;;:::o;6764:652::-;6841:6;6849;6898:2;6886:9;6877:7;6873:23;6869:32;6866:119;;;6904:79;;:::i;:::-;6866:119;7024:1;7049:53;7094:7;7085:6;7074:9;7070:22;7049:53;:::i;:::-;7039:63;;6995:117;7179:2;7168:9;7164:18;7151:32;7210:18;7202:6;7199:30;7196:117;;;7232:79;;:::i;:::-;7196:117;7337:62;7391:7;7382:6;7371:9;7367:22;7337:62;:::i;:::-;7327:72;;7122:287;6764:652;;;;;:::o;7422:108::-;7499:24;7517:5;7499:24;:::i;:::-;7494:3;7487:37;7422:108;;:::o;7536:90::-;7570:7;7613:5;7606:13;7599:21;7588:32;;7536:90;;;:::o;7632:99::-;7703:21;7718:5;7703:21;:::i;:::-;7698:3;7691:34;7632:99;;:::o;7791:1063::-;7932:4;7927:3;7923:14;8029:4;8022:5;8018:16;8012:23;8048:63;8105:4;8100:3;8096:14;8082:12;8048:63;:::i;:::-;7947:174;8207:4;8200:5;8196:16;8190:23;8226:63;8283:4;8278:3;8274:14;8260:12;8226:63;:::i;:::-;8131:168;8397:4;8390:5;8386:16;8380:23;8416:57;8467:4;8462:3;8458:14;8444:12;8416:57;:::i;:::-;8309:174;8582:4;8575:5;8571:16;8565:23;8601:57;8652:4;8647:3;8643:14;8629:12;8601:57;:::i;:::-;8493:175;8761:4;8754:5;8750:16;8744:23;8780:57;8831:4;8826:3;8822:14;8808:12;8780:57;:::i;:::-;8678:169;7901:953;7791:1063;;:::o;8860:311::-;8997:4;9035:3;9024:9;9020:19;9012:27;;9049:115;9161:1;9150:9;9146:17;9137:6;9049:115;:::i;:::-;8860:311;;;;:::o;9177:118::-;9264:24;9282:5;9264:24;:::i;:::-;9259:3;9252:37;9177:118;;:::o;9301:222::-;9394:4;9432:2;9421:9;9417:18;9409:26;;9445:71;9513:1;9502:9;9498:17;9489:6;9445:71;:::i;:::-;9301:222;;;;:::o;9529:109::-;9610:21;9625:5;9610:21;:::i;:::-;9605:3;9598:34;9529:109;;:::o;9644:210::-;9731:4;9769:2;9758:9;9754:18;9746:26;;9782:65;9844:1;9833:9;9829:17;9820:6;9782:65;:::i;:::-;9644:210;;;;:::o;9860:169::-;9944:11;9978:6;9973:3;9966:19;10018:4;10013:3;10009:14;9994:29;;9860:169;;;;:::o;10035:231::-;10175:34;10171:1;10163:6;10159:14;10152:58;10244:14;10239:2;10231:6;10227:15;10220:39;10035:231;:::o;10272:366::-;10414:3;10435:67;10499:2;10494:3;10435:67;:::i;:::-;10428:74;;10511:93;10600:3;10511:93;:::i;:::-;10629:2;10624:3;10620:12;10613:19;;10272:366;;;:::o;10644:419::-;10810:4;10848:2;10837:9;10833:18;10825:26;;10897:9;10891:4;10887:20;10883:1;10872:9;10868:17;10861:47;10925:131;11051:4;10925:131;:::i;:::-;10917:139;;10644:419;;;:::o;11069:231::-;11209:34;11205:1;11197:6;11193:14;11186:58;11278:14;11273:2;11265:6;11261:15;11254:39;11069:231;:::o;11306:366::-;11448:3;11469:67;11533:2;11528:3;11469:67;:::i;:::-;11462:74;;11545:93;11634:3;11545:93;:::i;:::-;11663:2;11658:3;11654:12;11647:19;;11306:366;;;:::o;11678:419::-;11844:4;11882:2;11871:9;11867:18;11859:26;;11931:9;11925:4;11921:20;11917:1;11906:9;11902:17;11895:47;11959:131;12085:4;11959:131;:::i;:::-;11951:139;;11678:419;;;:::o;12103:243::-;12243:34;12239:1;12231:6;12227:14;12220:58;12312:26;12307:2;12299:6;12295:15;12288:51;12103:243;:::o;12352:366::-;12494:3;12515:67;12579:2;12574:3;12515:67;:::i;:::-;12508:74;;12591:93;12680:3;12591:93;:::i;:::-;12709:2;12704:3;12700:12;12693:19;;12352:366;;;:::o;12724:419::-;12890:4;12928:2;12917:9;12913:18;12905:26;;12977:9;12971:4;12967:20;12963:1;12952:9;12948:17;12941:47;13005:131;13131:4;13005:131;:::i;:::-;12997:139;;12724:419;;;:::o;13149:182::-;13289:34;13285:1;13277:6;13273:14;13266:58;13149:182;:::o;13337:366::-;13479:3;13500:67;13564:2;13559:3;13500:67;:::i;:::-;13493:74;;13576:93;13665:3;13576:93;:::i;:::-;13694:2;13689:3;13685:12;13678:19;;13337:366;;;:::o;13709:419::-;13875:4;13913:2;13902:9;13898:18;13890:26;;13962:9;13956:4;13952:20;13948:1;13937:9;13933:17;13926:47;13990:131;14116:4;13990:131;:::i;:::-;13982:139;;13709:419;;;:::o;14134:233::-;14274:34;14270:1;14262:6;14258:14;14251:58;14343:16;14338:2;14330:6;14326:15;14319:41;14134:233;:::o;14373:366::-;14515:3;14536:67;14600:2;14595:3;14536:67;:::i;:::-;14529:74;;14612:93;14701:3;14612:93;:::i;:::-;14730:2;14725:3;14721:12;14714:19;;14373:366;;;:::o;14745:419::-;14911:4;14949:2;14938:9;14934:18;14926:26;;14998:9;14992:4;14988:20;14984:1;14973:9;14969:17;14962:47;15026:131;15152:4;15026:131;:::i;:::-;15018:139;;14745:419;;;:::o;15170:85::-;15215:7;15244:5;15233:16;;15170:85;;;:::o;15261:86::-;15296:7;15336:4;15329:5;15325:16;15314:27;;15261:86;;;:::o;15353:60::-;15381:3;15402:5;15395:12;;15353:60;;;:::o;15419:154::-;15475:9;15508:59;15524:42;15533:32;15559:5;15533:32;:::i;:::-;15524:42;:::i;:::-;15508:59;:::i;:::-;15495:72;;15419:154;;;:::o;15579:143::-;15672:43;15709:5;15672:43;:::i;:::-;15667:3;15660:56;15579:143;;:::o;15728:234::-;15827:4;15865:2;15854:9;15850:18;15842:26;;15878:77;15952:1;15941:9;15937:17;15928:6;15878:77;:::i;:::-;15728:234;;;;:::o;15968:182::-;16108:34;16104:1;16096:6;16092:14;16085:58;15968:182;:::o;16156:366::-;16298:3;16319:67;16383:2;16378:3;16319:67;:::i;:::-;16312:74;;16395:93;16484:3;16395:93;:::i;:::-;16513:2;16508:3;16504:12;16497:19;;16156:366;;;:::o;16528:419::-;16694:4;16732:2;16721:9;16717:18;16709:26;;16781:9;16775:4;16771:20;16767:1;16756:9;16752:17;16745:47;16809:131;16935:4;16809:131;:::i;:::-;16801:139;;16528:419;;;:::o;16953:182::-;17093:34;17089:1;17081:6;17077:14;17070:58;16953:182;:::o;17141:366::-;17283:3;17304:67;17368:2;17363:3;17304:67;:::i;:::-;17297:74;;17380:93;17469:3;17380:93;:::i;:::-;17498:2;17493:3;17489:12;17482:19;;17141:366;;;:::o;17513:419::-;17679:4;17717:2;17706:9;17702:18;17694:26;;17766:9;17760:4;17756:20;17752:1;17741:9;17737:17;17730:47;17794:131;17920:4;17794:131;:::i;:::-;17786:139;;17513:419;;;:::o;17938:220::-;18078:34;18074:1;18066:6;18062:14;18055:58;18147:3;18142:2;18134:6;18130:15;18123:28;17938:220;:::o;18164:366::-;18306:3;18327:67;18391:2;18386:3;18327:67;:::i;:::-;18320:74;;18403:93;18492:3;18403:93;:::i;:::-;18521:2;18516:3;18512:12;18505:19;;18164:366;;;:::o;18536:419::-;18702:4;18740:2;18729:9;18725:18;18717:26;;18789:9;18783:4;18779:20;18775:1;18764:9;18760:17;18753:47;18817:131;18943:4;18817:131;:::i;:::-;18809:139;;18536:419;;;:::o;18961:225::-;19101:34;19097:1;19089:6;19085:14;19078:58;19170:8;19165:2;19157:6;19153:15;19146:33;18961:225;:::o;19192:366::-;19334:3;19355:67;19419:2;19414:3;19355:67;:::i;:::-;19348:74;;19431:93;19520:3;19431:93;:::i;:::-;19549:2;19544:3;19540:12;19533:19;;19192:366;;;:::o;19564:419::-;19730:4;19768:2;19757:9;19753:18;19745:26;;19817:9;19811:4;19807:20;19803:1;19792:9;19788:17;19781:47;19845:131;19971:4;19845:131;:::i;:::-;19837:139;;19564:419;;;:::o;19989:182::-;20129:34;20125:1;20117:6;20113:14;20106:58;19989:182;:::o;20177:366::-;20319:3;20340:67;20404:2;20399:3;20340:67;:::i;:::-;20333:74;;20416:93;20505:3;20416:93;:::i;:::-;20534:2;20529:3;20525:12;20518:19;;20177:366;;;:::o;20549:419::-;20715:4;20753:2;20742:9;20738:18;20730:26;;20802:9;20796:4;20792:20;20788:1;20777:9;20773:17;20766:47;20830:131;20956:4;20830:131;:::i;:::-;20822:139;;20549:419;;;:::o;20974:122::-;21047:24;21065:5;21047:24;:::i;:::-;21040:5;21037:35;21027:63;;21086:1;21083;21076:12;21027:63;20974:122;:::o;21102:143::-;21159:5;21190:6;21184:13;21175:22;;21206:33;21233:5;21206:33;:::i;:::-;21102:143;;;;:::o;21251:351::-;21321:6;21370:2;21358:9;21349:7;21345:23;21341:32;21338:119;;;21376:79;;:::i;:::-;21338:119;21496:1;21521:64;21577:7;21568:6;21557:9;21553:22;21521:64;:::i;:::-;21511:74;;21467:128;21251:351;;;;:::o;21608:233::-;21748:34;21744:1;21736:6;21732:14;21725:58;21817:16;21812:2;21804:6;21800:15;21793:41;21608:233;:::o;21847:366::-;21989:3;22010:67;22074:2;22069:3;22010:67;:::i;:::-;22003:74;;22086:93;22175:3;22086:93;:::i;:::-;22204:2;22199:3;22195:12;22188:19;;21847:366;;;:::o;22219:419::-;22385:4;22423:2;22412:9;22408:18;22400:26;;22472:9;22466:4;22462:20;22458:1;22447:9;22443:17;22436:47;22500:131;22626:4;22500:131;:::i;:::-;22492:139;;22219:419;;;:::o;22644:228::-;22784:34;22780:1;22772:6;22768:14;22761:58;22853:11;22848:2;22840:6;22836:15;22829:36;22644:228;:::o;22878:366::-;23020:3;23041:67;23105:2;23100:3;23041:67;:::i;:::-;23034:74;;23117:93;23206:3;23117:93;:::i;:::-;23235:2;23230:3;23226:12;23219:19;;22878:366;;;:::o;23250:419::-;23416:4;23454:2;23443:9;23439:18;23431:26;;23503:9;23497:4;23493:20;23489:1;23478:9;23474:17;23467:47;23531:131;23657:4;23531:131;:::i;:::-;23523:139;;23250:419;;;:::o;23675:230::-;23815:34;23811:1;23803:6;23799:14;23792:58;23884:13;23879:2;23871:6;23867:15;23860:38;23675:230;:::o;23911:366::-;24053:3;24074:67;24138:2;24133:3;24074:67;:::i;:::-;24067:74;;24150:93;24239:3;24150:93;:::i;:::-;24268:2;24263:3;24259:12;24252:19;;23911:366;;;:::o;24283:419::-;24449:4;24487:2;24476:9;24472:18;24464:26;;24536:9;24530:4;24526:20;24522:1;24511:9;24507:17;24500:47;24564:131;24690:4;24564:131;:::i;:::-;24556:139;;24283:419;;;:::o;24708:232::-;24848:34;24844:1;24836:6;24832:14;24825:58;24917:15;24912:2;24904:6;24900:15;24893:40;24708:232;:::o;24946:366::-;25088:3;25109:67;25173:2;25168:3;25109:67;:::i;:::-;25102:74;;25185:93;25274:3;25185:93;:::i;:::-;25303:2;25298:3;25294:12;25287:19;;24946:366;;;:::o;25318:419::-;25484:4;25522:2;25511:9;25507:18;25499:26;;25571:9;25565:4;25561:20;25557:1;25546:9;25542:17;25535:47;25599:131;25725:4;25599:131;:::i;:::-;25591:139;;25318:419;;;:::o;25743:225::-;25883:34;25879:1;25871:6;25867:14;25860:58;25952:8;25947:2;25939:6;25935:15;25928:33;25743:225;:::o;25974:366::-;26116:3;26137:67;26201:2;26196:3;26137:67;:::i;:::-;26130:74;;26213:93;26302:3;26213:93;:::i;:::-;26331:2;26326:3;26322:12;26315:19;;25974:366;;;:::o;26346:419::-;26512:4;26550:2;26539:9;26535:18;26527:26;;26599:9;26593:4;26589:20;26585:1;26574:9;26570:17;26563:47;26627:131;26753:4;26627:131;:::i;:::-;26619:139;;26346:419;;;:::o;26771:98::-;26822:6;26856:5;26850:12;26840:22;;26771:98;;;:::o;26875:147::-;26976:11;27013:3;26998:18;;26875:147;;;;:::o;27028:307::-;27096:1;27106:113;27120:6;27117:1;27114:13;27106:113;;;27205:1;27200:3;27196:11;27190:18;27186:1;27181:3;27177:11;27170:39;27142:2;27139:1;27135:10;27130:15;;27106:113;;;27237:6;27234:1;27231:13;27228:101;;;27317:1;27308:6;27303:3;27299:16;27292:27;27228:101;27077:258;27028:307;;;:::o;27341:373::-;27445:3;27473:38;27505:5;27473:38;:::i;:::-;27527:88;27608:6;27603:3;27527:88;:::i;:::-;27520:95;;27624:52;27669:6;27664:3;27657:4;27650:5;27646:16;27624:52;:::i;:::-;27701:6;27696:3;27692:16;27685:23;;27449:265;27341:373;;;;:::o;27720:271::-;27850:3;27872:93;27961:3;27952:6;27872:93;:::i;:::-;27865:100;;27982:3;27975:10;;27720:271;;;;:::o;27997:99::-;28049:6;28083:5;28077:12;28067:22;;27997:99;;;:::o;28102:364::-;28190:3;28218:39;28251:5;28218:39;:::i;:::-;28273:71;28337:6;28332:3;28273:71;:::i;:::-;28266:78;;28353:52;28398:6;28393:3;28386:4;28379:5;28375:16;28353:52;:::i;:::-;28430:29;28452:6;28430:29;:::i;:::-;28425:3;28421:39;28414:46;;28194:272;28102:364;;;;:::o;28472:313::-;28585:4;28623:2;28612:9;28608:18;28600:26;;28672:9;28666:4;28662:20;28658:1;28647:9;28643:17;28636:47;28700:78;28773:4;28764:6;28700:78;:::i;:::-;28692:86;;28472:313;;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"2559400","executionCost":"infinite","totalCost":"infinite"},"external":{"":"infinite","createProfile(address)":"infinite","getAdminAddress()":"infinite","getMultiSig(address)":"5147","getUser(address)":"infinite","getUsers()":"infinite","getVerifiedUser(address)":"7512","initialize()":"118377","owner()":"2589","proxiableUUID()":"infinite","renounceOwnership()":"30509","retainMultiSignature(address)":"infinite","retainVerification(address)":"infinite","retainZkVerification(address)":"infinite","revokeMultiSignature(address)":"infinite","revokeVerifiedUser(address)":"infinite","revokeZkVerification(address)":"infinite","transferOwnership(address)":"30835","upgradeTo(address)":"infinite","upgradeToAndCall(address,bytes)":"infinite"},"internal":{"_authorizeUpgrade(address)":"infinite","_getContractValue()":"infinite"}},"methodIdentifiers":{"createProfile(address)":"f536c520","getAdminAddress()":"b2e6b912","getMultiSig(address)":"1e9f3d5e","getUser(address)":"6f77926b","getUsers()":"00ce8e3e","getVerifiedUser(address)":"d117fc99","initialize()":"8129fc1c","owner()":"8da5cb5b","proxiableUUID()":"52d1902d","renounceOwnership()":"715018a6","retainMultiSignature(address)":"cde55353","retainVerification(address)":"391a5bf0","retainZkVerification(address)":"b2b35eb4","revokeMultiSignature(address)":"acfb7980","revokeVerifiedUser(address)":"87d55ff3","revokeZkVerification(address)":"54ef5c52","transferOwnership(address)":"f2fde38b","upgradeTo(address)":"3659cfe6","upgradeToAndCall(address,bytes)":"4f1ef286"}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"USER_EXISTS_AND_VERIFIED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"USER_NOT_EXISTS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"USER_STATUS_ALREADY_REVOKED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"USER_STATUS_NOT_REVOKED\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fallbackAmount\",\"type\":\"uint256\"}],\"name\":\"AMOUNT_RECEIVED_THROUGH_FALLBACK\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receiveAmount\",\"type\":\"uint256\"}],\"name\":\"AMOUNT_RECEIVED_THROUGH_RECEIVE\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"MULTISIG_RETAINED\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"MULTISIG_REVOKED\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"PROFILE_CREATED\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"PROFILE_RETAINED\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"PROFILE_REVOKED\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"ZK_VERIFICATION_RETAINED\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"ZK_VERIFICATION_REVOKED\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"createProfile\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdminAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getMultiSig\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUser\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"userPubAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"multiSig\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"verificationStatus_I\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"verificationStatus_II\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isStatusRevoked\",\"type\":\"bool\"}],\"internalType\":\"struct IProfiles.User\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUsers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getVerifiedUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"retainMultiSignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"retainVerification\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"retainZkVerification\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"revokeMultiSignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"revokeVerifiedUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"revokeZkVerification\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Profiles.sol\":\"Profiles\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7967d130887c4b40666cd88f8744691d4527039a1b2a38aa0de41481ef646778\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xa2b22da3032e50b55f95ec1d13336102d675f341167aa76db571ef7f8bb7975d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"contracts/Profiles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\\\";\\nimport \\\"./interfaces/IProfiles.sol\\\";\\n\\n// import \\\"./IProfiles.sol\\\";\\n// import \\\"./PKDR.sol\\\";\\n//states variables\\n//error\\n//events\\n//modifier\\n// constructor\\n// receive\\n// fallback\\n// external\\n// public\\n// internal\\n// private\\n// view or pure\\n\\n//createProfile\\n//getVerifiedUser\\n// revokeVerifiedUser\\n// retainVerification\\ncontract Profiles is\\n    IProfiles,\\n    Initializable,\\n    OwnableUpgradeable,\\n    UUPSUpgradeable\\n{\\n    //states variables\\n\\n    // admins array who controlled the users contract\\n    uint256 private _contractValue = 0;\\n    address private _iPkdrOrgAddresses;\\n    address[] private _userAddresses;\\n    bytes32 private immutable _multiSig =\\n        keccak256(abi.encodePacked(\\\"APPROVED\\\"));\\n    bytes32 private immutable _revokeMultiSig =\\n        keccak256(abi.encodePacked(\\\"NULL\\\"));\\n\\n    // mapping for address to a user struct\\n    mapping(address => User) private users;\\n\\n    //error\\n\\n    error USER_EXISTS_AND_VERIFIED();\\n    error USER_NOT_EXISTS();\\n    error USER_STATUS_NOT_REVOKED();\\n    error USER_STATUS_ALREADY_REVOKED();\\n\\n    //events\\n\\n    event PROFILE_CREATED(address indexed user);\\n    event PROFILE_REVOKED(address user);\\n    event PROFILE_RETAINED(address user);\\n    event AMOUNT_RECEIVED_THROUGH_FALLBACK(uint256 fallbackAmount);\\n    event AMOUNT_RECEIVED_THROUGH_RECEIVE(uint256 receiveAmount);\\n    event MULTISIG_RETAINED(address user);\\n    event MULTISIG_REVOKED(address user);\\n    event ZK_VERIFICATION_REVOKED(address _user);\\n    event ZK_VERIFICATION_RETAINED(address _user);\\n\\n    //modifier\\n\\n    // check user Exists in mapping variable\\n    modifier userExists(address _user) {\\n        if (users[_user].verificationStatus_I) {\\n            revert USER_EXISTS_AND_VERIFIED();\\n        }\\n        _;\\n    }\\n\\n    modifier userNotExists(address _user) {\\n        if (!users[_user].verificationStatus_I) {\\n            revert USER_NOT_EXISTS();\\n        }\\n        _;\\n    }\\n\\n    modifier isStatusNotRevoked(address _user) {\\n        if (!users[_user].isStatusRevoked) {\\n            revert USER_STATUS_NOT_REVOKED();\\n        }\\n        _;\\n    }\\n\\n    modifier isStatusRevoked(address _user) {\\n        if (users[_user].isStatusRevoked) {\\n            revert USER_STATUS_ALREADY_REVOKED();\\n        }\\n        _;\\n    }\\n\\n    // constructor\\n\\n    // constructor() {\\n    //     _disableInitializers();\\n    // }\\n\\n    // receive\\n    receive() external payable {\\n        _contractValue += msg.value;\\n        emit AMOUNT_RECEIVED_THROUGH_RECEIVE(msg.value);\\n    }\\n\\n    // fallback\\n    fallback() external payable {\\n        _contractValue += msg.value;\\n        emit AMOUNT_RECEIVED_THROUGH_FALLBACK(msg.value);\\n    }\\n\\n    // external\\n\\n    //create the profile of a given address in a mapping of a struct\\n    function createProfile(address _user) external onlyOwner userExists(_user) {\\n        users[_user] = User(_user, _multiSig, true, false, false);\\n        _userAddresses.push(_user);\\n        emit PROFILE_CREATED(_user);\\n    }\\n\\n    // retain verification of a user\\n    function retainVerification(\\n        address _user\\n    ) external onlyOwner userNotExists(_user) isStatusNotRevoked(_user) {\\n        users[_user].isStatusRevoked = false;\\n\\n        emit PROFILE_RETAINED(_user);\\n    }\\n\\n    // revoke the verification status of a user\\n    function revokeVerifiedUser(\\n        address _user\\n    ) external onlyOwner userNotExists(_user) isStatusRevoked(_user) {\\n        users[_user].isStatusRevoked = true;\\n\\n        emit PROFILE_REVOKED(_user);\\n    }\\n\\n    function retainMultiSignature(\\n        address _user\\n    ) external onlyOwner userNotExists(_user) {\\n        require(\\n            users[_user].multiSig == _revokeMultiSig,\\n            \\\"MULTI_SIGNATURE ALREADY RETAINED \\\"\\n        );\\n        users[_user].multiSig = _multiSig;\\n    }\\n\\n    function revokeMultiSignature(\\n        address _user\\n    ) external onlyOwner userNotExists(_user) {\\n        require(\\n            users[_user].multiSig == _multiSig,\\n            \\\"MULTI_SIGNATURE ALREADY REVOKED \\\"\\n        );\\n        users[_user].multiSig = _revokeMultiSig;\\n        emit MULTISIG_REVOKED(_user);\\n    }\\n\\n    function revokeZkVerification(\\n        address _user\\n    ) external onlyOwner userNotExists(_user) {\\n        require(\\n            users[_user].verificationStatus_II,\\n            \\\"ZK_VERIFICATION ALREADY REVOKED \\\"\\n        );\\n        users[_user].verificationStatus_II = false;\\n        emit ZK_VERIFICATION_REVOKED(_user);\\n    }\\n\\n    function retainZkVerification(\\n        address _user\\n    ) external onlyOwner userNotExists(_user) {\\n        require(\\n            !users[_user].verificationStatus_II,\\n            \\\"ZK_VERIFICATION ALREADY RETAINED\\\"\\n        );\\n        users[_user].verificationStatus_II = true;\\n        emit ZK_VERIFICATION_RETAINED(_user);\\n    }\\n\\n    // public\\n\\n    function initialize() public initializer {\\n        __Ownable_init();\\n        __UUPSUpgradeable_init();\\n    }\\n\\n    // internal\\n\\n    function _authorizeUpgrade(\\n        address newImplementation\\n    ) internal override onlyOwner {}\\n\\n    // private\\n    function _getContractValue() private view returns (uint256) {\\n        return _contractValue;\\n    }\\n\\n    // view or pure\\n\\n    function getAdminAddress() external view onlyOwner returns (address) {\\n        return owner();\\n    }\\n\\n    function getUser(\\n        address _user\\n    ) external view userNotExists(_user) returns (User memory) {\\n        return users[_user];\\n    }\\n\\n    function getUsers() external view onlyOwner returns (address[] memory) {\\n        address[] memory _users = _userAddresses;\\n        return _users;\\n    }\\n\\n    //retuns only the verification status for a user Address not other data present in struct\\n    function getVerifiedUser(\\n        address _user\\n    ) external view userNotExists(_user) returns (bool) {\\n        if (users[_user].isStatusRevoked) {\\n            return false;\\n        } else {\\n            return users[_user].verificationStatus_I;\\n        }\\n    }\\n\\n    function getMultiSig(\\n        address _user\\n    ) external view userNotExists(_user) returns (bytes32) {\\n        return users[_user].multiSig;\\n    }\\n}\\n\",\"keccak256\":\"0xddcd7070efd4194d4bf849d9631ea7e5c8904fc195bbdeaaf328175211f0cf65\",\"license\":\"MIT\"},\"contracts/interfaces/IProfiles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\ninterface IProfiles {\\n    struct User {\\n        address userPubAddress;\\n        bytes32 multiSig;\\n        bool verificationStatus_I;\\n        bool verificationStatus_II;\\n        bool isStatusRevoked;\\n    }\\n\\n    function createProfile(address _user) external;\\n\\n    function retainVerification(address _user) external;\\n\\n    function revokeVerifiedUser(address _user) external;\\n\\n    function getVerifiedUser(address _user) external view returns (bool);\\n\\n    function getAdminAddress() external view returns (address);\\n\\n    function getUser(address _user) external view returns (User memory);\\n\\n    function getUsers() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0xf8827808f1fcd820c053f1ca74ba1116a54d33f3c576579350d25700f18ad647\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":527,"contract":"contracts/Profiles.sol:Profiles","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":530,"contract":"contracts/Profiles.sol:Profiles","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2787,"contract":"contracts/Profiles.sol:Profiles","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":10,"contract":"contracts/Profiles.sol:Profiles","label":"_owner","offset":0,"slot":"51","type":"t_address"},{"astId":130,"contract":"contracts/Profiles.sol:Profiles","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"},{"astId":509,"contract":"contracts/Profiles.sol:Profiles","label":"__gap","offset":0,"slot":"101","type":"t_array(t_uint256)50_storage"},{"astId":824,"contract":"contracts/Profiles.sol:Profiles","label":"__gap","offset":0,"slot":"151","type":"t_array(t_uint256)50_storage"},{"astId":5754,"contract":"contracts/Profiles.sol:Profiles","label":"_contractValue","offset":0,"slot":"201","type":"t_uint256"},{"astId":5756,"contract":"contracts/Profiles.sol:Profiles","label":"_iPkdrOrgAddresses","offset":0,"slot":"202","type":"t_address"},{"astId":5759,"contract":"contracts/Profiles.sol:Profiles","label":"_userAddresses","offset":0,"slot":"203","type":"t_array(t_address)dyn_storage"},{"astId":5780,"contract":"contracts/Profiles.sol:Profiles","label":"users","offset":0,"slot":"204","type":"t_mapping(t_address,t_struct(User)6247_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_address)dyn_storage":{"base":"t_address","encoding":"dynamic_array","label":"address[]","numberOfBytes":"32"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_struct(User)6247_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct IProfiles.User)","numberOfBytes":"32","value":"t_struct(User)6247_storage"},"t_struct(User)6247_storage":{"encoding":"inplace","label":"struct IProfiles.User","members":[{"astId":6238,"contract":"contracts/Profiles.sol:Profiles","label":"userPubAddress","offset":0,"slot":"0","type":"t_address"},{"astId":6240,"contract":"contracts/Profiles.sol:Profiles","label":"multiSig","offset":0,"slot":"1","type":"t_bytes32"},{"astId":6242,"contract":"contracts/Profiles.sol:Profiles","label":"verificationStatus_I","offset":0,"slot":"2","type":"t_bool"},{"astId":6244,"contract":"contracts/Profiles.sol:Profiles","label":"verificationStatus_II","offset":1,"slot":"2","type":"t_bool"},{"astId":6246,"contract":"contracts/Profiles.sol:Profiles","label":"isStatusRevoked","offset":2,"slot":"2","type":"t_bool"}],"numberOfBytes":"96"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/interfaces/IProfiles.sol":{"IProfiles":{"abi":[{"inputs":[{"internalType":"address","name":"_user","type":"address"}],"name":"createProfile","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getAdminAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"}],"name":"getUser","outputs":[{"components":[{"internalType":"address","name":"userPubAddress","type":"address"},{"internalType":"bytes32","name":"multiSig","type":"bytes32"},{"internalType":"bool","name":"verificationStatus_I","type":"bool"},{"internalType":"bool","name":"verificationStatus_II","type":"bool"},{"internalType":"bool","name":"isStatusRevoked","type":"bool"}],"internalType":"struct IProfiles.User","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getUsers","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"}],"name":"getVerifiedUser","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"}],"name":"retainVerification","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"}],"name":"revokeVerifiedUser","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"createProfile(address)":"f536c520","getAdminAddress()":"b2e6b912","getUser(address)":"6f77926b","getUsers()":"00ce8e3e","getVerifiedUser(address)":"d117fc99","retainVerification(address)":"391a5bf0","revokeVerifiedUser(address)":"87d55ff3"}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"createProfile\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdminAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUser\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"userPubAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"multiSig\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"verificationStatus_I\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"verificationStatus_II\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isStatusRevoked\",\"type\":\"bool\"}],\"internalType\":\"struct IProfiles.User\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUsers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getVerifiedUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"retainVerification\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"revokeVerifiedUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IProfiles.sol\":\"IProfiles\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IProfiles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\ninterface IProfiles {\\n    struct User {\\n        address userPubAddress;\\n        bytes32 multiSig;\\n        bool verificationStatus_I;\\n        bool verificationStatus_II;\\n        bool isStatusRevoked;\\n    }\\n\\n    function createProfile(address _user) external;\\n\\n    function retainVerification(address _user) external;\\n\\n    function revokeVerifiedUser(address _user) external;\\n\\n    function getVerifiedUser(address _user) external view returns (bool);\\n\\n    function getAdminAddress() external view returns (address);\\n\\n    function getUser(address _user) external view returns (User memory);\\n\\n    function getUsers() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0xf8827808f1fcd820c053f1ca74ba1116a54d33f3c576579350d25700f18ad647\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}