/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface TopUpInterface extends utils.Interface {
  functions: {
    "getContractBalance()": FunctionFragment;
    "getPkdrAddress()": FunctionFragment;
    "getRate()": FunctionFragment;
    "topUpAddress(address,uint256)": FunctionFragment;
    "topUpContract()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getContractBalance"
      | "getPkdrAddress"
      | "getRate"
      | "topUpAddress"
      | "topUpContract"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getContractBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPkdrAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getRate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "topUpAddress",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "topUpContract",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getContractBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPkdrAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "topUpAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "topUpContract",
    data: BytesLike
  ): Result;

  events: {
    "amountDeposited(address,uint256)": EventFragment;
    "topUpCompleted(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "amountDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "topUpCompleted"): EventFragment;
}

export interface amountDepositedEventObject {
  from: string;
  amount: BigNumber;
}
export type amountDepositedEvent = TypedEvent<
  [string, BigNumber],
  amountDepositedEventObject
>;

export type amountDepositedEventFilter = TypedEventFilter<amountDepositedEvent>;

export interface topUpCompletedEventObject {
  to: string;
  amount: BigNumber;
}
export type topUpCompletedEvent = TypedEvent<
  [string, BigNumber],
  topUpCompletedEventObject
>;

export type topUpCompletedEventFilter = TypedEventFilter<topUpCompletedEvent>;

export interface TopUp extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TopUpInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getContractBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPkdrAddress(overrides?: CallOverrides): Promise<[string]>;

    getRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    topUpAddress(
      _to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    topUpContract(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getContractBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getPkdrAddress(overrides?: CallOverrides): Promise<string>;

  getRate(overrides?: CallOverrides): Promise<BigNumber>;

  topUpAddress(
    _to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  topUpContract(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getContractBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getPkdrAddress(overrides?: CallOverrides): Promise<string>;

    getRate(overrides?: CallOverrides): Promise<BigNumber>;

    topUpAddress(
      _to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    topUpContract(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "amountDeposited(address,uint256)"(
      from?: null,
      amount?: null
    ): amountDepositedEventFilter;
    amountDeposited(from?: null, amount?: null): amountDepositedEventFilter;

    "topUpCompleted(address,uint256)"(
      to?: null,
      amount?: null
    ): topUpCompletedEventFilter;
    topUpCompleted(to?: null, amount?: null): topUpCompletedEventFilter;
  };

  estimateGas: {
    getContractBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getPkdrAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getRate(overrides?: CallOverrides): Promise<BigNumber>;

    topUpAddress(
      _to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    topUpContract(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getContractBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPkdrAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    topUpAddress(
      _to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    topUpContract(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
