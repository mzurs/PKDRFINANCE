/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { TopUp, TopUpInterface } from "../../contracts/TopUp";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "priceFeed",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "ONLY_OWNER_CAN_CALL",
    type: "error",
  },
  {
    inputs: [],
    name: "TOPUP_FAILED",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "amountDeposited",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "topUpCompleted",
    type: "event",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "getContractBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPkdrAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "topUpAddress",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "topUpContract",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x60a0604052600a60005534801561001557600080fd5b50604051610a95380380610a9583398181016040528101906100379190610115565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505050610142565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100e2826100b7565b9050919050565b6100f2816100d7565b81146100fd57600080fd5b50565b60008151905061010f816100e9565b92915050565b60006020828403121561012b5761012a6100b2565b5b600061013984828501610100565b91505092915050565b60805161091c61017960003960008181610245015281816102d00152818161039201528181610417015261043f015261091c6000f3fe60806040526004361061004e5760003560e01c8063679aefce146100c95780636f9fb98a146100f45780639b3b20d11461011f578063d01ca48614610129578063d5800262146101545761008e565b3661008e577f8056ca2d1e1630c684dc5a25a5f93f98726e05fa1c27e19e3bfd282c8e9a08223334604051610084929190610602565b60405180910390a1005b7f8056ca2d1e1630c684dc5a25a5f93f98726e05fa1c27e19e3bfd282c8e9a082233346040516100bf929190610602565b60405180910390a1005b3480156100d557600080fd5b506100de610191565b6040516100eb919061062b565b60405180910390f35b34801561010057600080fd5b50610109610241565b604051610116919061062b565b60405180910390f35b6101276102ce565b005b34801561013557600080fd5b5061013e61038e565b60405161014b9190610646565b60405180910390f35b34801561016057600080fd5b5061017b600480360381019061017691906106d0565b61043b565b604051610188919061062b565b60405180910390f35b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156101fc57600080fd5b505afa158015610210573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610234919061079d565b5050509150508091505090565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102c8576040517ffc7a106c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b47905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610353576040517ffc7a106c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f8056ca2d1e1630c684dc5a25a5f93f98726e05fa1c27e19e3bfd282c8e9a08223334604051610384929190610602565b60405180910390a1565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610415576040517ffc7a106c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104c2576040517ffc7a106c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008373ffffffffffffffffffffffffffffffffffffffff16836040516104e890610849565b60006040518083038185875af1925050503d8060008114610525576040519150601f19603f3d011682016040523d82523d6000602084013e61052a565b606091505b5050905080610565576040517feba90a5400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7fce0ecadd083947356b2a399af2c8268bd0db00376ef30844503edf57c1d11ade84846040516105969291906108bd565b60405180910390a18291505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006105d3826105a8565b9050919050565b6105e3816105c8565b82525050565b6000819050919050565b6105fc816105e9565b82525050565b600060408201905061061760008301856105da565b61062460208301846105f3565b9392505050565b600060208201905061064060008301846105f3565b92915050565b600060208201905061065b60008301846105da565b92915050565b600080fd5b6000610671826105a8565b9050919050565b61068181610666565b811461068c57600080fd5b50565b60008135905061069e81610678565b92915050565b6106ad816105e9565b81146106b857600080fd5b50565b6000813590506106ca816106a4565b92915050565b600080604083850312156106e7576106e6610661565b5b60006106f58582860161068f565b9250506020610706858286016106bb565b9150509250929050565b600069ffffffffffffffffffff82169050919050565b61072f81610710565b811461073a57600080fd5b50565b60008151905061074c81610726565b92915050565b6000819050919050565b61076581610752565b811461077057600080fd5b50565b6000815190506107828161075c565b92915050565b600081519050610797816106a4565b92915050565b600080600080600060a086880312156107b9576107b8610661565b5b60006107c78882890161073d565b95505060206107d888828901610773565b94505060406107e988828901610788565b93505060606107fa88828901610788565b925050608061080b8882890161073d565b9150509295509295909350565b600081905092915050565b50565b6000610833600083610818565b915061083e82610823565b600082019050919050565b600061085482610826565b9150819050919050565b6000819050919050565b600061088361087e610879846105a8565b61085e565b6105a8565b9050919050565b600061089582610868565b9050919050565b60006108a78261088a565b9050919050565b6108b78161089c565b82525050565b60006040820190506108d260008301856108ae565b6108df60208301846105f3565b939250505056fea26469706673582212200f26e033f4ecb14da25f0aaf41157875fed71dd1c5dcd3e9c35f38fe3ded288f64736f6c63430008090033";

type TopUpConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TopUpConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TopUp__factory extends ContractFactory {
  constructor(...args: TopUpConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    priceFeed: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TopUp> {
    return super.deploy(priceFeed, overrides || {}) as Promise<TopUp>;
  }
  override getDeployTransaction(
    priceFeed: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(priceFeed, overrides || {});
  }
  override attach(address: string): TopUp {
    return super.attach(address) as TopUp;
  }
  override connect(signer: Signer): TopUp__factory {
    return super.connect(signer) as TopUp__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TopUpInterface {
    return new utils.Interface(_abi) as TopUpInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): TopUp {
    return new Contract(address, _abi, signerOrProvider) as TopUp;
  }
}
