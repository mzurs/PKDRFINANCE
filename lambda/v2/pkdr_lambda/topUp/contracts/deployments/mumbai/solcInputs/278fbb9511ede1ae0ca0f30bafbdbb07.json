{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/topUp.sol": {
      "content": "// SPDX-License-Identifier: SEE LICENSE IN LICENSE\npragma solidity ^0.8.7;\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\n// import \"./PriceConverter.sol\";\n\ncontract topUp {\n    // using PriceConverter for uint256;\n    uint256 private TOPUP_AMOUNT_IN_PKR = 20;\n    address private immutable i_pkdrOrgAddress;\n    AggregatorV3Interface private s_priceFeed;\n\n    //errors\n    error ONLY_OWNER_CAN_CALL();\n    error TOPUP_FAILED();\n\n    //events\n    event topUpCompleted(address to, uint256 amount);\n    event amountDeposited(address from, uint256 amount);\n\n    modifier onlyPkdrOrg() {\n        if (msg.sender != i_pkdrOrgAddress) revert ONLY_OWNER_CAN_CALL();\n        _;\n    }\n\n    //// constructor\n    //// receive\n    //// fallback\n    //// external\n    //// public\n    //// internal\n    //// private\n    //// view / pure\n\n    //1.constructor\n    constructor(address priceFeed) {\n        s_priceFeed = AggregatorV3Interface(priceFeed);\n\n        i_pkdrOrgAddress = msg.sender;\n    }\n\n    //2.receive\n    // This function is called for plain Ether transfers, i.e.\n    // for every call with empty calldata.\n    receive() external payable {\n        emit amountDeposited(msg.sender, msg.value); //event to receive matic\n    }\n\n    //3. fallback\n    // Any call with non-empty calldata to this contract will execute\n    // the fallback function (even if Ether is sent along with the call).\n    fallback() external payable {\n        emit amountDeposited(msg.sender, msg.value);\n    }\n\n    //4.external\n    //5.public\n    function getPrice() public view returns (uint256) {\n        (, int256 answer, , , ) = s_priceFeed.latestRoundData();\n        // ETH/USD rate in 18 digit\n        return uint256(answer * 10000000000);\n    }\n\n    function topUpAddress(address payable _to, uint256 amount)\n        public\n        onlyPkdrOrg\n        returns (uint256)\n    {\n        (bool success, ) = _to.call{value: amount}(\"\");\n\n        require(success);\n\n        emit topUpCompleted(_to, amount);\n\n        return amount;\n    }\n\n    function topUpContract() public payable onlyPkdrOrg {\n        emit amountDeposited(msg.sender, msg.value);\n    }\n\n    //6. internal\n\n    //7.private\n\n    // 8. View and pure functions\n\n    function getPkdrAddress() public view onlyPkdrOrg returns (address) {\n        return i_pkdrOrgAddress;\n    }\n\n    function getContractBalance() public view onlyPkdrOrg returns (uint256) {\n        return address(this).balance;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}