{
  "address": "0xa13232Faf2Cd926B04fCEf0F3C4a9A754df54A9F",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "X",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "Y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Pairing.G1Point",
              "name": "a",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "X",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "Y",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct Pairing.G2Point",
              "name": "b",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "X",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "Y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Pairing.G1Point",
              "name": "c",
              "type": "tuple"
            }
          ],
          "internalType": "struct Verifier.Proof",
          "name": "proof",
          "type": "tuple"
        },
        {
          "internalType": "uint256[6]",
          "name": "input",
          "type": "uint256[6]"
        }
      ],
      "name": "verifyTx",
      "outputs": [
        {
          "internalType": "bool",
          "name": "r",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x844757170c786b660eb8d5a91e730442120d03d2825f89bc50063a74e869070e",
  "receipt": {
    "to": null,
    "from": "0xBE33a42b20274691C9AAA28f5E2533d16Ad7bc72",
    "contractAddress": "0xa13232Faf2Cd926B04fCEf0F3C4a9A754df54A9F",
    "transactionIndex": 21,
    "gasUsed": "1340853",
    "logsBloom": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000020000000000010000000000000000000000000000000000000008000000000000000000401000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000040000000004000000000000000000001000000000000000000000000000000100000000000002000000000000000000000000000000000000000000000000000000000100000",
    "blockHash": "0x6b8b112a1e104323246d197bb958a536f9e9744e719de6093048f73ae8e943c2",
    "transactionHash": "0x844757170c786b660eb8d5a91e730442120d03d2825f89bc50063a74e869070e",
    "logs": [
      {
        "transactionIndex": 21,
        "blockNumber": 29227592,
        "transactionHash": "0x844757170c786b660eb8d5a91e730442120d03d2825f89bc50063a74e869070e",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000be33a42b20274691c9aaa28f5e2533d16ad7bc72",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000704ba4fd8f5c10000000000000000000000000000000000000000000000001e1f1bc60760edf7000000000000000000000000000000000000000000000b0802904ee35bed8aec0000000000000000000000000000000000000000000000001e18170bb787f836000000000000000000000000000000000000000000000b080297539dabc680ad",
        "logIndex": 63,
        "blockHash": "0x6b8b112a1e104323246d197bb958a536f9e9744e719de6093048f73ae8e943c2"
      }
    ],
    "blockNumber": 29227592,
    "cumulativeGasUsed": "3700650",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "9cc6caabdb97c89ecb2e366eca81026a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"struct Pairing.G1Point\",\"name\":\"a\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"X\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"Y\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct Pairing.G2Point\",\"name\":\"b\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"struct Pairing.G1Point\",\"name\":\"c\",\"type\":\"tuple\"}],\"internalType\":\"struct Verifier.Proof\",\"name\":\"proof\",\"type\":\"tuple\"},{\"internalType\":\"uint256[6]\",\"name\":\"input\",\"type\":\"uint256[6]\"}],\"name\":\"verifyTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"r\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Verifier.sol\":\"Verifier\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Verifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT \\n //// This file is MIT Licensed.\\n//\\n// Copyright 2017 Christian Reitwiessner\\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \\\"Software\\\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\npragma solidity ^0.8.0;\\nlibrary Pairing {\\n    struct G1Point {\\n        uint X;\\n        uint Y;\\n    }\\n    // Encoding of field elements is: X[0] * z + X[1]\\n    struct G2Point {\\n        uint[2] X;\\n        uint[2] Y;\\n    }\\n    /// @return the generator of G1\\n    function P1() pure internal returns (G1Point memory) {\\n        return G1Point(1, 2);\\n    }\\n    /// @return the generator of G2\\n    function P2() pure internal returns (G2Point memory) {\\n        return G2Point(\\n            [10857046999023057135944570762232829481370756359578518086990519993285655852781,\\n             11559732032986387107991004021392285783925812861821192530917403151452391805634],\\n            [8495653923123431417604973247489272438418190587263600148770280649306958101930,\\n             4082367875863433681332203403145435568316851327593401208105741076214120093531]\\n        );\\n    }\\n    /// @return the negation of p, i.e. p.addition(p.negate()) should be zero.\\n    function negate(G1Point memory p) pure internal returns (G1Point memory) {\\n        // The prime q in the base field F_q for G1\\n        uint q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n        if (p.X == 0 && p.Y == 0)\\n            return G1Point(0, 0);\\n        return G1Point(p.X, q - (p.Y % q));\\n    }\\n    /// @return r the sum of two points of G1\\n    function addition(G1Point memory p1, G1Point memory p2) internal view returns (G1Point memory r) {\\n        uint[4] memory input;\\n        input[0] = p1.X;\\n        input[1] = p1.Y;\\n        input[2] = p2.X;\\n        input[3] = p2.Y;\\n        bool success;\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success case 0 { invalid() }\\n        }\\n        require(success);\\n    }\\n\\n\\n    /// @return r the product of a point on G1 and a scalar, i.e.\\n    /// p == p.scalar_mul(1) and p.addition(p) == p.scalar_mul(2) for all points p.\\n    function scalar_mul(G1Point memory p, uint s) internal view returns (G1Point memory r) {\\n        uint[3] memory input;\\n        input[0] = p.X;\\n        input[1] = p.Y;\\n        input[2] = s;\\n        bool success;\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success case 0 { invalid() }\\n        }\\n        require (success);\\n    }\\n    /// @return the result of computing the pairing check\\n    /// e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1\\n    /// For example pairing([P1(), P1().negate()], [P2(), P2()]) should\\n    /// return true.\\n    function pairing(G1Point[] memory p1, G2Point[] memory p2) internal view returns (bool) {\\n        require(p1.length == p2.length);\\n        uint elements = p1.length;\\n        uint inputSize = elements * 6;\\n        uint[] memory input = new uint[](inputSize);\\n        for (uint i = 0; i < elements; i++)\\n        {\\n            input[i * 6 + 0] = p1[i].X;\\n            input[i * 6 + 1] = p1[i].Y;\\n            input[i * 6 + 2] = p2[i].X[1];\\n            input[i * 6 + 3] = p2[i].X[0];\\n            input[i * 6 + 4] = p2[i].Y[1];\\n            input[i * 6 + 5] = p2[i].Y[0];\\n        }\\n        uint[1] memory out;\\n        bool success;\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 8, add(input, 0x20), mul(inputSize, 0x20), out, 0x20)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success case 0 { invalid() }\\n        }\\n        require(success);\\n        return out[0] != 0;\\n    }\\n    /// Convenience method for a pairing check for two pairs.\\n    function pairingProd2(G1Point memory a1, G2Point memory a2, G1Point memory b1, G2Point memory b2) internal view returns (bool) {\\n        G1Point[] memory p1 = new G1Point[](2);\\n        G2Point[] memory p2 = new G2Point[](2);\\n        p1[0] = a1;\\n        p1[1] = b1;\\n        p2[0] = a2;\\n        p2[1] = b2;\\n        return pairing(p1, p2);\\n    }\\n    /// Convenience method for a pairing check for three pairs.\\n    function pairingProd3(\\n            G1Point memory a1, G2Point memory a2,\\n            G1Point memory b1, G2Point memory b2,\\n            G1Point memory c1, G2Point memory c2\\n    ) internal view returns (bool) {\\n        G1Point[] memory p1 = new G1Point[](3);\\n        G2Point[] memory p2 = new G2Point[](3);\\n        p1[0] = a1;\\n        p1[1] = b1;\\n        p1[2] = c1;\\n        p2[0] = a2;\\n        p2[1] = b2;\\n        p2[2] = c2;\\n        return pairing(p1, p2);\\n    }\\n    /// Convenience method for a pairing check for four pairs.\\n    function pairingProd4(\\n            G1Point memory a1, G2Point memory a2,\\n            G1Point memory b1, G2Point memory b2,\\n            G1Point memory c1, G2Point memory c2,\\n            G1Point memory d1, G2Point memory d2\\n    ) internal view returns (bool) {\\n        G1Point[] memory p1 = new G1Point[](4);\\n        G2Point[] memory p2 = new G2Point[](4);\\n        p1[0] = a1;\\n        p1[1] = b1;\\n        p1[2] = c1;\\n        p1[3] = d1;\\n        p2[0] = a2;\\n        p2[1] = b2;\\n        p2[2] = c2;\\n        p2[3] = d2;\\n        return pairing(p1, p2);\\n    }\\n}\\n\\ncontract Verifier {\\n    using Pairing for *;\\n    struct VerifyingKey {\\n        Pairing.G1Point alpha;\\n        Pairing.G2Point beta;\\n        Pairing.G2Point gamma;\\n        Pairing.G2Point delta;\\n        Pairing.G1Point[] gamma_abc;\\n    }\\n    struct Proof {\\n        Pairing.G1Point a;\\n        Pairing.G2Point b;\\n        Pairing.G1Point c;\\n    }\\n    function verifyingKey() pure internal returns (VerifyingKey memory vk) {\\n        vk.alpha = Pairing.G1Point(uint256(0x121dea2003dac8aa2baeae5d8dee2052328691bdee5717e736b77ce396345ec6), uint256(0x0f37b05546738277227aa63b293ec4285ee1192e01873f68a111e3b4600149c4));\\n        vk.beta = Pairing.G2Point([uint256(0x13ccd92bdc33483f3fa5a4a38b96834b9fef2b0558c78f399e7a2973d15a8e88), uint256(0x2d145a1f4f9b0f3dc42273be8e3fcf34930f5670c726088740d7dd5e4822aee2)], [uint256(0x02b52526f75ed1fe5b03769130e149c07a433553708d80b554c1ec037e6d7032), uint256(0x0bf20ee57ed941c5181bfd58f87bdbc553fd3e010f7560d25e05fd5ef188784f)]);\\n        vk.gamma = Pairing.G2Point([uint256(0x1e405a4cf99c4a3a0be99c01d807d1664ef06729d21e0d50c5ea8f8c11fd53fa), uint256(0x06d4e45adb0c42fc2c05dab3387abcd89dfd978b7bdf9980de704dd4d0f29be5)], [uint256(0x00bc801e790b05b519e25f9bb8269ad745621043bfcab5687e02212f8a7d8811), uint256(0x1011da860d689654a007691a91a3fb014d5464061cd8e2e0bc50ba441a3aaef6)]);\\n        vk.delta = Pairing.G2Point([uint256(0x304fbd44dbd70cb1d736e6558978c76802801fd7986ca524a68df9ce32eb6475), uint256(0x1c8eb29eeead2654a46629563e52845aa3b5848e750fc77208ec9f28aef93c71)], [uint256(0x1b1efc53e87343444be2c42a4d7768917233fee13084c9020094464c3510a424), uint256(0x26800f993d777b258fb7385b2d679da1d3cbae9a018c8dad5a84d743ea47f1fb)]);\\n        vk.gamma_abc = new Pairing.G1Point[](7);\\n        vk.gamma_abc[0] = Pairing.G1Point(uint256(0x1a89c9051669417fa6a19ab45cf1852a11326ce57159abd3531c6e9847f51ae0), uint256(0x17ed6377ff8c8e059b65a3bb7cb796df76d2e13dadfcdecbf91a17b6c6c0d97b));\\n        vk.gamma_abc[1] = Pairing.G1Point(uint256(0x15ead711d0d6d48cd632d7b06b69eddb1c9437a68c46fa21525a4ae1f2cac352), uint256(0x11cc31d5ba3627819553c641c09f7f40cf96fa7bbe4e0f95fbd7b385ef617770));\\n        vk.gamma_abc[2] = Pairing.G1Point(uint256(0x25378d2e23b0bd41faeb62f4dd2c45f8ea1968410081845429a85137040a772d), uint256(0x02eb455cd776dce32844bee685a2388478957b5c26d2a1a0d7b5646d772904ec));\\n        vk.gamma_abc[3] = Pairing.G1Point(uint256(0x2dd62a69c8b6ce30bd3778b95740368f812b11d6c19855031ea8d995646fd1cf), uint256(0x2d5b4af562fadc9946c0694abf9dc7c735344e86b851e086234f5eb6ec3c2619));\\n        vk.gamma_abc[4] = Pairing.G1Point(uint256(0x1a48fd2b7ef267d52ba3eedb126c718c8321314fa3515466fb15de4a8de519d6), uint256(0x0890af94c078859d169850505cc3079dfb4302011387b6e44019adafadc83ecc));\\n        vk.gamma_abc[5] = Pairing.G1Point(uint256(0x15fc424aefd7e710a85e9e0f6d31102d7801872a70b56e8be93bd2a7b49f25aa), uint256(0x0784960cdfc9832fc25570a08f17d1e079156f183eec258f8c397aa7b5989670));\\n        vk.gamma_abc[6] = Pairing.G1Point(uint256(0x072117958b53798f66af57e5d33f962a3a4234a2d011c4bf8a0e76c81094fb6a), uint256(0x24764148380fdf2277ebd536e39278142cf49d161f1ca0c71cd8809866ffdb82));\\n    }\\n    function verify(uint[] memory input, Proof memory proof) internal view returns (uint) {\\n        uint256 snark_scalar_field = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n        VerifyingKey memory vk = verifyingKey();\\n        require(input.length + 1 == vk.gamma_abc.length);\\n        // Compute the linear combination vk_x\\n        Pairing.G1Point memory vk_x = Pairing.G1Point(0, 0);\\n        for (uint i = 0; i < input.length; i++) {\\n            require(input[i] < snark_scalar_field);\\n            vk_x = Pairing.addition(vk_x, Pairing.scalar_mul(vk.gamma_abc[i + 1], input[i]));\\n        }\\n        vk_x = Pairing.addition(vk_x, vk.gamma_abc[0]);\\n        if(!Pairing.pairingProd4(\\n             proof.a, proof.b,\\n             Pairing.negate(vk_x), vk.gamma,\\n             Pairing.negate(proof.c), vk.delta,\\n             Pairing.negate(vk.alpha), vk.beta)) return 1;\\n        return 0;\\n    }\\n    function verifyTx(\\n            Proof memory proof, uint[6] memory input\\n        ) public view returns (bool r) {\\n        uint[] memory inputValues = new uint[](6);\\n        \\n        for(uint i = 0; i < input.length; i++){\\n            inputValues[i] = input[i];\\n        }\\n        if (verify(inputValues, proof) == 0) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xafbac87ba9568111c94e08f3bda371ade038c77b3c137373c0ca84159e2dd10b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c806301ec146314610030575b600080fd5b61004a600480360381019061004591906114b7565b610060565b6040516100579190611514565b60405180910390f35b600080600667ffffffffffffffff81111561007e5761007d611195565b5b6040519080825280602002602001820160405280156100ac5781602001602082028036833780820191505090505b50905060005b6006811015610105578381600681106100ce576100cd61152f565b5b60200201518282815181106100e6576100e561152f565b5b60200260200101818152505080806100fd9061158d565b9150506100b2565b506000610112828661012e565b1415610122576001915050610128565b60009150505b92915050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000019050600061015e6102c5565b90508060800151516001865161017491906115d6565b1461017e57600080fd5b60006040518060400160405280600081526020016000815250905060005b865181101561023757838782815181106101b9576101b861152f565b5b6020026020010151106101cb57600080fd5b6102228261021d85608001516001856101e491906115d6565b815181106101f5576101f461152f565b5b60200260200101518a85815181106102105761020f61152f565b5b6020026020010151610920565b6109c7565b9150808061022f9061158d565b91505061019c565b506102618183608001516000815181106102545761025361152f565b5b60200260200101516109c7565b90506102a78560000151866020015161027984610a94565b856040015161028b8a60400151610a94565b876060015161029d8960000151610a94565b8960200151610b39565b6102b757600193505050506102bf565b600093505050505b92915050565b6102cd611061565b60405180604001604052807f121dea2003dac8aa2baeae5d8dee2052328691bdee5717e736b77ce396345ec681526020017f0f37b05546738277227aa63b293ec4285ee1192e01873f68a111e3b4600149c48152508160000181905250604051806040016040528060405180604001604052807f13ccd92bdc33483f3fa5a4a38b96834b9fef2b0558c78f399e7a2973d15a8e8881526020017f2d145a1f4f9b0f3dc42273be8e3fcf34930f5670c726088740d7dd5e4822aee2815250815260200160405180604001604052807f02b52526f75ed1fe5b03769130e149c07a433553708d80b554c1ec037e6d703281526020017f0bf20ee57ed941c5181bfd58f87bdbc553fd3e010f7560d25e05fd5ef188784f8152508152508160200181905250604051806040016040528060405180604001604052807f1e405a4cf99c4a3a0be99c01d807d1664ef06729d21e0d50c5ea8f8c11fd53fa81526020017f06d4e45adb0c42fc2c05dab3387abcd89dfd978b7bdf9980de704dd4d0f29be5815250815260200160405180604001604052807ebc801e790b05b519e25f9bb8269ad745621043bfcab5687e02212f8a7d881181526020017f1011da860d689654a007691a91a3fb014d5464061cd8e2e0bc50ba441a3aaef68152508152508160400181905250604051806040016040528060405180604001604052807f304fbd44dbd70cb1d736e6558978c76802801fd7986ca524a68df9ce32eb647581526020017f1c8eb29eeead2654a46629563e52845aa3b5848e750fc77208ec9f28aef93c71815250815260200160405180604001604052807f1b1efc53e87343444be2c42a4d7768917233fee13084c9020094464c3510a42481526020017f26800f993d777b258fb7385b2d679da1d3cbae9a018c8dad5a84d743ea47f1fb8152508152508160600181905250600767ffffffffffffffff81111561059357610592611195565b5b6040519080825280602002602001820160405280156105cc57816020015b6105b96110a8565b8152602001906001900390816105b15790505b50816080018190525060405180604001604052807f1a89c9051669417fa6a19ab45cf1852a11326ce57159abd3531c6e9847f51ae081526020017f17ed6377ff8c8e059b65a3bb7cb796df76d2e13dadfcdecbf91a17b6c6c0d97b81525081608001516000815181106106425761064161152f565b5b602002602001018190525060405180604001604052807f15ead711d0d6d48cd632d7b06b69eddb1c9437a68c46fa21525a4ae1f2cac35281526020017f11cc31d5ba3627819553c641c09f7f40cf96fa7bbe4e0f95fbd7b385ef61777081525081608001516001815181106106ba576106b961152f565b5b602002602001018190525060405180604001604052807f25378d2e23b0bd41faeb62f4dd2c45f8ea1968410081845429a85137040a772d81526020017f02eb455cd776dce32844bee685a2388478957b5c26d2a1a0d7b5646d772904ec81525081608001516002815181106107325761073161152f565b5b602002602001018190525060405180604001604052807f2dd62a69c8b6ce30bd3778b95740368f812b11d6c19855031ea8d995646fd1cf81526020017f2d5b4af562fadc9946c0694abf9dc7c735344e86b851e086234f5eb6ec3c261981525081608001516003815181106107aa576107a961152f565b5b602002602001018190525060405180604001604052807f1a48fd2b7ef267d52ba3eedb126c718c8321314fa3515466fb15de4a8de519d681526020017f0890af94c078859d169850505cc3079dfb4302011387b6e44019adafadc83ecc81525081608001516004815181106108225761082161152f565b5b602002602001018190525060405180604001604052807f15fc424aefd7e710a85e9e0f6d31102d7801872a70b56e8be93bd2a7b49f25aa81526020017f0784960cdfc9832fc25570a08f17d1e079156f183eec258f8c397aa7b5989670815250816080015160058151811061089a5761089961152f565b5b602002602001018190525060405180604001604052807f072117958b53798f66af57e5d33f962a3a4234a2d011c4bf8a0e76c81094fb6a81526020017f24764148380fdf2277ebd536e39278142cf49d161f1ca0c71cd8809866ffdb8281525081608001516006815181106109125761091161152f565b5b602002602001018190525090565b6109286110a8565b6109306110c2565b8360000151816000600381106109495761094861152f565b5b60200201818152505083602001518160016003811061096b5761096a61152f565b5b60200201818152505082816002600381106109895761098861152f565b5b602002018181525050600060608360808460076107d05a03fa905080600081146109b2576109b4565bfe5b50806109bf57600080fd5b505092915050565b6109cf6110a8565b6109d76110e4565b8360000151816000600481106109f0576109ef61152f565b5b602002018181525050836020015181600160048110610a1257610a1161152f565b5b602002018181525050826000015181600260048110610a3457610a3361152f565b5b602002018181525050826020015181600360048110610a5657610a5561152f565b5b602002018181525050600060608360c08460066107d05a03fa90508060008114610a7f57610a81565bfe5b5080610a8c57600080fd5b505092915050565b610a9c6110a8565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47905060008360000151148015610ad9575060008360200151145b15610afd576040518060400160405280600081526020016000815250915050610b34565b604051806040016040528084600001518152602001828560200151610b22919061165b565b83610b2d919061168c565b8152509150505b919050565b600080600467ffffffffffffffff811115610b5757610b56611195565b5b604051908082528060200260200182016040528015610b9057816020015b610b7d6110a8565b815260200190600190039081610b755790505b5090506000600467ffffffffffffffff811115610bb057610baf611195565b5b604051908082528060200260200182016040528015610be957816020015b610bd6611106565b815260200190600190039081610bce5790505b5090508a82600081518110610c0157610c0061152f565b5b60200260200101819052508882600181518110610c2157610c2061152f565b5b60200260200101819052508682600281518110610c4157610c4061152f565b5b60200260200101819052508482600381518110610c6157610c6061152f565b5b60200260200101819052508981600081518110610c8157610c8061152f565b5b60200260200101819052508781600181518110610ca157610ca061152f565b5b60200260200101819052508581600281518110610cc157610cc061152f565b5b60200260200101819052508381600381518110610ce157610ce061152f565b5b6020026020010181905250610cf68282610d06565b9250505098975050505050505050565b60008151835114610d1657600080fd5b6000835190506000600682610d2b91906116c0565b905060008167ffffffffffffffff811115610d4957610d48611195565b5b604051908082528060200260200182016040528015610d775781602001602082028036833780820191505090505b50905060005b83811015610ffc57868181518110610d9857610d9761152f565b5b602002602001015160000151826000600684610db491906116c0565b610dbe91906115d6565b81518110610dcf57610dce61152f565b5b602002602001018181525050868181518110610dee57610ded61152f565b5b602002602001015160200151826001600684610e0a91906116c0565b610e1491906115d6565b81518110610e2557610e2461152f565b5b602002602001018181525050858181518110610e4457610e4361152f565b5b602002602001015160000151600160028110610e6357610e6261152f565b5b6020020151826002600684610e7891906116c0565b610e8291906115d6565b81518110610e9357610e9261152f565b5b602002602001018181525050858181518110610eb257610eb161152f565b5b602002602001015160000151600060028110610ed157610ed061152f565b5b6020020151826003600684610ee691906116c0565b610ef091906115d6565b81518110610f0157610f0061152f565b5b602002602001018181525050858181518110610f2057610f1f61152f565b5b602002602001015160200151600160028110610f3f57610f3e61152f565b5b6020020151826004600684610f5491906116c0565b610f5e91906115d6565b81518110610f6f57610f6e61152f565b5b602002602001018181525050858181518110610f8e57610f8d61152f565b5b602002602001015160200151600060028110610fad57610fac61152f565b5b6020020151826005600684610fc291906116c0565b610fcc91906115d6565b81518110610fdd57610fdc61152f565b5b6020026020010181815250508080610ff49061158d565b915050610d7d565b5061100561112c565b6000602082602086026020860160086107d05a03fa9050806000811461102a5761102c565bfe5b508061103757600080fd5b60008260006001811061104d5761104c61152f565b5b602002015114159550505050505092915050565b6040518060a001604052806110746110a8565b8152602001611081611106565b815260200161108e611106565b815260200161109b611106565b8152602001606081525090565b604051806040016040528060008152602001600081525090565b6040518060600160405280600390602082028036833780820191505090505090565b6040518060800160405280600490602082028036833780820191505090505090565b604051806040016040528061111961114e565b815260200161112661114e565b81525090565b6040518060200160405280600190602082028036833780820191505090505090565b6040518060400160405280600290602082028036833780820191505090505090565b6000604051905090565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6111cd82611184565b810181811067ffffffffffffffff821117156111ec576111eb611195565b5b80604052505050565b60006111ff611170565b905061120b82826111c4565b919050565b6000819050919050565b61122381611210565b811461122e57600080fd5b50565b6000813590506112408161121a565b92915050565b60006040828403121561125c5761125b61117f565b5b61126660406111f5565b9050600061127684828501611231565b600083015250602061128a84828501611231565b60208301525092915050565b600080fd5b600067ffffffffffffffff8211156112b6576112b5611195565b5b602082029050919050565b600080fd5b60006112d96112d48461129b565b6111f5565b905080602084028301858111156112f3576112f26112c1565b5b835b8181101561131c57806113088882611231565b8452602084019350506020810190506112f5565b5050509392505050565b600082601f83011261133b5761133a611296565b5b60026113488482856112c6565b91505092915050565b6000608082840312156113675761136661117f565b5b61137160406111f5565b9050600061138184828501611326565b600083015250604061139584828501611326565b60208301525092915050565b600061010082840312156113b8576113b761117f565b5b6113c260606111f5565b905060006113d284828501611246565b60008301525060406113e684828501611351565b60208301525060c06113fa84828501611246565b60408301525092915050565b600067ffffffffffffffff82111561142157611420611195565b5b602082029050919050565b600061143f61143a84611406565b6111f5565b90508060208402830185811115611459576114586112c1565b5b835b81811015611482578061146e8882611231565b84526020840193505060208101905061145b565b5050509392505050565b600082601f8301126114a1576114a0611296565b5b60066114ae84828561142c565b91505092915050565b6000806101c083850312156114cf576114ce61117a565b5b60006114dd858286016113a1565b9250506101006114ef8582860161148c565b9150509250929050565b60008115159050919050565b61150e816114f9565b82525050565b60006020820190506115296000830184611505565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061159882611210565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156115cb576115ca61155e565b5b600182019050919050565b60006115e182611210565b91506115ec83611210565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156116215761162061155e565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061166682611210565b915061167183611210565b9250826116815761168061162c565b5b828206905092915050565b600061169782611210565b91506116a283611210565b9250828210156116b5576116b461155e565b5b828203905092915050565b60006116cb82611210565b91506116d683611210565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561170f5761170e61155e565b5b82820290509291505056fea26469706673582212203ed50a0e8c38c376b85f2c0f0de40e0013102b827fb23775c3edc43c6ce4ca3f64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}