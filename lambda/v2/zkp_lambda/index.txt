const aws = require("aws-sdk");
const keyPair = require("./zk_setup.json");
const decimal = require("hexadecimal-to-decimal");
const profilesABI = require("./profiles/profilesABI.json");
const profilesContractAddress = require("./profiles/profilesContractAddress.json");
// import { hex2decReturnParams } from "../../typesAPI/type";
const ethers = require("ethers");
var toHex = require("to-hex");
const { initialize } = require("zokrates-js");
const s3 = new aws.S3({ apiVersion: "2006-03-01" });
const _PKDR_PRIVATE_KEY =
  "bbda125eae72b48642b60b4afad205065fb63bfdbb4645be0d6626557d13724a";

const _JSON_RPC_PROVIDER_MUMBAI =
  "https://polygon-mumbai.g.alchemy.com/v2/Zfcqh-uhxkYcpRBW9DcyOGyaU7QgEIJ9";
const provider = new ethers.providers.JsonRpcProvider(
  _JSON_RPC_PROVIDER_MUMBAI
);
const contract = new ethers.Contract(
  profilesContractAddress,
  profilesABI,
  provider
);
const wallet = new ethers.Wallet(_PKDR_PRIVATE_KEY, provider);
const connectedWallet = contract.connect(wallet);

const hex2dec = async (hex) => {
  if (hex.length == 64) {
    const len = hex.length / 2;

    const p1 = decimal.decimal(hex.substr(0, len));
    const p2 = decimal.decimal(hex.substr(len, len * 2));
    console.log(`${p1}\n ${p2}`);
    return [p1, p2];
  } else if (hex.length == 42) {
    console.log(42);
    return decimal.decimal(toHex(hex));
  }

  return decimal.decimal(toHex(hex));
};

exports.handler = async (event, context, callback) => {
  // const params =event.arguments.zkp;
  const params = {
    cnic: "4210177777773",
    privateKey:
      "bbda125eae72b48642b60b4afad205065fb63bfdbb4645be0d6626557d13724b",
    publicAddress: "0x2c5483B70D2FF43e5b7AF10435DE6Bd1303aa66b",
    publicAddressAdmin: "0x2c5483B70D2FF43e5b7AF10435DE6Bd1303aa66b",
    optionalParams: "0",
  };
  const zokratesProvider = await initialize();
  // return input
  console.log(params);
  const privKeyDecimal = await hex2dec(params.privateKey);
  // const publicAddressDecimal = String(await hex2dec(params.publicAddress));
  // const publicAddressAdminDecimal = String(
  //   await hex2dec(params.publicAddressAdmin)
  // );
  // const optionalParamsDecimal = String(await hex2dec(params.optionalParams));

  const param = [
    params.cnic, //"4210177777773",
    privKeyDecimal[0], //"249697928511749064481934707482023822598",
    privKeyDecimal[1], //"127222874392670729104785390335824196170",
    "0",
    "0",
    "0",
  ]

  console.log(param);

  // return param
  var paramsProgram = {
    Bucket: "zkout",
    Key: "out",
  };
  const dataP = await s3.getObject(paramsProgram).promise();
  const program = dataP.Body;

  var paramsABI = {
    Bucket: "zkout",
    Key: "zk_abi.json",
  };
  const dataABI = await s3.getObject(paramsABI).promise();
  const abi = dataABI.Body.toString();

  const program_abi = {
    program,
    abi,
  };

  const { witness, output } = await zokratesProvider.computeWitness(
    program_abi,
    param
  );

  const proof = await zokratesProvider.generateProof(
    program,
    witness,
    keyPair.pk
  );
  const isVerified = await zokratesProvider.verify(keyPair.vk, proof);
  if (isVerified) {
    try {
      console.log(params.publicAddress);
      const createPRofileResult = await connectedWallet.createProfile(
        params.publicAddress,
        true,
        { gasLimit: 50000 }
      );
      // await listenForTransactionMine(createPRofileResult, provider);
      console.log(createPRofileResult);
      return {
        message: "Profile created On-Chain",
      };
    } catch (error) {
      return {
        message: `${error}`,
      };
    }
  } else {
    return { message: "false" };
  }

  return isVerified;
};
